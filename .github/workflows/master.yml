# SPDX-License-Identifier: Apache-2.0
# Copyright 2023 Intel Corporation
name: Test integration
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build-e2sm-kpm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd servicemodels/e2sm_kpm
          CGO_ENABLED=1 go build -o build/_output/e2sm_kpm.so.1.0.0 -buildmode=plugin .

  build-e2sm_kpm_v2:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd servicemodels/e2sm_kpm_v2
          CGO_ENABLED=1 go build -o build/_output/e2sm_kpm_v2.so.1.0.0 -buildmode=plugin .

  build-e2sm_kpm_v2_go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd servicemodels/e2sm_kpm_v2_go
          go build -o build/_output/e2sm_kpm_v2_go.so.1.0.0 -buildmode=plugin .
          
  build-e2sm_rc_pre_go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd servicemodels/e2sm_rc_pre_go
          go build -o build/_output/e2sm_rc_pre_go.so.1.0.0 -buildmode=plugin .
 
  build-e2sm_mho_go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd servicemodels/e2sm_mho_go
          go build -o build/_output/e2sm_mho_go.so.1.0.0 -buildmode=plugin .
 
  build-e2sm_rsm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd servicemodels/e2sm_rsm
          go build -o build/_output/e2sm_rsm.so.1.0.0 -buildmode=plugin .

  build-e2sm_ni:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd servicemodels/e2sm_ni
          CGO_ENABLED=1 go build -o build/_output/e2sm_ni.so.1.0.0 -buildmode=plugin .
  
  build-e2sm_rc_pre:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd servicemodels/e2sm_rc_pre
          CGO_ENABLED=1 go build -o build/_output/e2sm_rc_pre.so.1.0.0 -buildmode=plugin .

  build-e2sm_mho:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd servicemodels/e2sm_mho
          CGO_ENABLED=1 go build -o build/_output/e2sm_mho.so.1.0.0 -buildmode=plugin .

  build-e2sm_rc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd servicemodels/e2sm_rc
          CGO_ENABLED=1 go build -o build/_output/e2sm_rc.so.1.0.0 -buildmode=plugin .
  
  build-protoc_gen_cgo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd protoc-gen-cgo/
          go build -v -o ./protoc-gen-cgo && cd ..

  build-protoc_gen_choice:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd protoc-gen-choice/
          go build -v -o ./protoc-gen-choice && go install && cd ..

  build-protoc_gen_builder:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build
        run: |
          cd protoc-gen-builder/
          go build -v -o ./protoc-gen-builder && go install && cd ..
  
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
      - name: Unit tests
        run: make test


  sm-linters:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
      - name: sm-linters
        run: |
          make sm-linters
        
  buflint:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - name: buflint 
       env:
         BUF_VERSION: 1.0.0   
       run: |
         sudo mkdir -p /go/src/github.com/onosproject
         cd /go/src/github.com/onosproject
         sudo git clone https://github.com/onosproject/onos-e2-sm.git
         sudo git clone https://github.com/onosproject/onos-lib-go.git
         cd /go/src/github.com/onosproject/onos-e2-sm
         docker run \
           -v `pwd`:/go/src/github.com/onosproject/onos-e2-sm \
           -v `pwd`/../onos-lib-go/api/asn1:/go/src/github.com/onosproject/onos-e2-sm/servicemodels/asn1 \
           -w /go/src/github.com/onosproject/onos-e2-sm/servicemodels \
             bufbuild/buf:${BUF_VERSION} lint

  protos:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - name: protos
       env:
         ONOS_PROTOC_VERSION: v1.0.2  
       run: |
         sudo mkdir -p /go/src/github.com/onosproject
         cd /go/src/github.com/onosproject
         sudo git clone https://github.com/onosproject/onos-e2-sm.git
         sudo git clone https://github.com/onosproject/onos-lib-go.git
         cd /go/src/github.com/onosproject/onos-e2-sm
         docker run \
           -v `pwd`:/go/src/github.com/onosproject/onos-e2-sm \
           -v `pwd`/../onos-lib-go:/go/src/github.com/onosproject/onos-lib-go \
           -w /go/src/github.com/onosproject/onos-e2-sm \
           --entrypoint /go/src/github.com/onosproject/onos-e2-sm/build/bin/compile-protos.sh \
           onosproject/protoc-go:${ONOS_PROTOC_VERSION}

  protos-py:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - name: protos-py
       env:
         ONOS_PROTOC_VERSION: v1.0.2
       run: |
         sudo mkdir -p /go/src/github.com/onosproject
         cd /go/src/github.com/onosproject
         sudo git clone https://github.com/onosproject/onos-e2-sm.git
         sudo git clone https://github.com/onosproject/onos-lib-go.git
         cd /go/src/github.com/onosproject/onos-e2-sm
         docker run \
           -v `pwd`:/go/src/github.com/onosproject/onos-e2-sm \
           -v `pwd`/../onos-lib-go:/go/src/github.com/onosproject/onos-lib-go \
           -w /go/src/github.com/onosproject/onos-e2-sm \
           --entrypoint /go/src/github.com/onosproject/onos-e2-sm/build/bin/compile-protos-py.sh \
           onosproject/protoc-go:${ONOS_PROTOC_VERSION}        
        
  docker:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - name: docker-build
       run: make images
  clean:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - name: Cleanup Docker images
       run: |
         docker image prune -af
