// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_rc_pre/v2/e2sm_rc_pre_v2.proto

package e2sm_rc_pre_v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Eutracgi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Eutracgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Eutracgi with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EutracgiMultiError, or nil
// if none found.
func (m *Eutracgi) ValidateAll() error {
	return m.validate(true)
}

func (m *Eutracgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EutracgiValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EutracgiValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracgiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEUtracellIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EutracgiValidationError{
					field:  "EUtracellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EutracgiValidationError{
					field:  "EUtracellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEUtracellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracgiValidationError{
				field:  "EUtracellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EutracgiMultiError(errors)
	}
	return nil
}

// EutracgiMultiError is an error wrapping multiple validation errors returned
// by Eutracgi.ValidateAll() if the designated constraints aren't met.
type EutracgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EutracgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EutracgiMultiError) AllErrors() []error { return m }

// EutracgiValidationError is the validation error returned by
// Eutracgi.Validate if the designated constraints aren't met.
type EutracgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutracgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutracgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutracgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutracgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutracgiValidationError) ErrorName() string { return "EutracgiValidationError" }

// Error satisfies the builtin error interface
func (e EutracgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutracgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutracgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutracgiValidationError{}

// Validate checks the field values on Nrcgi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Nrcgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Nrcgi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrcgiMultiError, or nil if none found.
func (m *Nrcgi) ValidateAll() error {
	return m.validate(true)
}

func (m *Nrcgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrcgiValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrcgiValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNRcellIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrcgiValidationError{
					field:  "NRcellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrcgiValidationError{
					field:  "NRcellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNRcellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "NRcellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrcgiMultiError(errors)
	}
	return nil
}

// NrcgiMultiError is an error wrapping multiple validation errors returned by
// Nrcgi.ValidateAll() if the designated constraints aren't met.
type NrcgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrcgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrcgiMultiError) AllErrors() []error { return m }

// NrcgiValidationError is the validation error returned by Nrcgi.Validate if
// the designated constraints aren't met.
type NrcgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcgiValidationError) ErrorName() string { return "NrcgiValidationError" }

// Error satisfies the builtin error interface
func (e NrcgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcgiValidationError{}

// Validate checks the field values on CellGlobalId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CellGlobalId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellGlobalId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CellGlobalIdMultiError, or
// nil if none found.
func (m *CellGlobalId) ValidateAll() error {
	return m.validate(true)
}

func (m *CellGlobalId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.CellGlobalId.(type) {

	case *CellGlobalId_NrCgi:

		if all {
			switch v := interface{}(m.GetNrCgi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellGlobalIdValidationError{
						field:  "NrCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellGlobalIdValidationError{
						field:  "NrCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNrCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellGlobalIdValidationError{
					field:  "NrCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CellGlobalId_EUtraCgi:

		if all {
			switch v := interface{}(m.GetEUtraCgi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellGlobalIdValidationError{
						field:  "EUtraCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellGlobalIdValidationError{
						field:  "EUtraCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEUtraCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellGlobalIdValidationError{
					field:  "EUtraCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CellGlobalIdMultiError(errors)
	}
	return nil
}

// CellGlobalIdMultiError is an error wrapping multiple validation errors
// returned by CellGlobalId.ValidateAll() if the designated constraints aren't met.
type CellGlobalIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellGlobalIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellGlobalIdMultiError) AllErrors() []error { return m }

// CellGlobalIdValidationError is the validation error returned by
// CellGlobalId.Validate if the designated constraints aren't met.
type CellGlobalIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellGlobalIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellGlobalIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellGlobalIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellGlobalIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellGlobalIdValidationError) ErrorName() string { return "CellGlobalIdValidationError" }

// Error satisfies the builtin error interface
func (e CellGlobalIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellGlobalId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellGlobalIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellGlobalIdValidationError{}

// Validate checks the field values on Earfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Earfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Earfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EarfcnMultiError, or nil if none found.
func (m *Earfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *Earfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 262143 {
		err := EarfcnValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 262143]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EarfcnMultiError(errors)
	}
	return nil
}

// EarfcnMultiError is an error wrapping multiple validation errors returned by
// Earfcn.ValidateAll() if the designated constraints aren't met.
type EarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EarfcnMultiError) AllErrors() []error { return m }

// EarfcnValidationError is the validation error returned by Earfcn.Validate if
// the designated constraints aren't met.
type EarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EarfcnValidationError) ErrorName() string { return "EarfcnValidationError" }

// Error satisfies the builtin error interface
func (e EarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EarfcnValidationError{}

// Validate checks the field values on Nrarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Nrarfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Nrarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrarfcnMultiError, or nil if none found.
func (m *Nrarfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *Nrarfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 3279167 {
		err := NrarfcnValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 3279167]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NrarfcnMultiError(errors)
	}
	return nil
}

// NrarfcnMultiError is an error wrapping multiple validation errors returned
// by Nrarfcn.ValidateAll() if the designated constraints aren't met.
type NrarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrarfcnMultiError) AllErrors() []error { return m }

// NrarfcnValidationError is the validation error returned by Nrarfcn.Validate
// if the designated constraints aren't met.
type NrarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrarfcnValidationError) ErrorName() string { return "NrarfcnValidationError" }

// Error satisfies the builtin error interface
func (e NrarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrarfcnValidationError{}

// Validate checks the field values on Pci with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pci) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pci with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PciMultiError, or nil if none found.
func (m *Pci) ValidateAll() error {
	return m.validate(true)
}

func (m *Pci) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 1007 {
		err := PciValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 1007]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PciMultiError(errors)
	}
	return nil
}

// PciMultiError is an error wrapping multiple validation errors returned by
// Pci.ValidateAll() if the designated constraints aren't met.
type PciMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PciMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PciMultiError) AllErrors() []error { return m }

// PciValidationError is the validation error returned by Pci.Validate if the
// designated constraints aren't met.
type PciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PciValidationError) ErrorName() string { return "PciValidationError" }

// Error satisfies the builtin error interface
func (e PciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PciValidationError{}

// Validate checks the field values on Arfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Arfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Arfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ArfcnMultiError, or nil if none found.
func (m *Arfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *Arfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Arfcn.(type) {

	case *Arfcn_EArfcn:

		if all {
			switch v := interface{}(m.GetEArfcn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArfcnValidationError{
						field:  "EArfcn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArfcnValidationError{
						field:  "EArfcn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEArfcn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArfcnValidationError{
					field:  "EArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Arfcn_NrArfcn:

		if all {
			switch v := interface{}(m.GetNrArfcn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArfcnValidationError{
						field:  "NrArfcn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArfcnValidationError{
						field:  "NrArfcn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNrArfcn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArfcnValidationError{
					field:  "NrArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ArfcnMultiError(errors)
	}
	return nil
}

// ArfcnMultiError is an error wrapping multiple validation errors returned by
// Arfcn.ValidateAll() if the designated constraints aren't met.
type ArfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArfcnMultiError) AllErrors() []error { return m }

// ArfcnValidationError is the validation error returned by Arfcn.Validate if
// the designated constraints aren't met.
type ArfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArfcnValidationError) ErrorName() string { return "ArfcnValidationError" }

// Error satisfies the builtin error interface
func (e ArfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArfcnValidationError{}

// Validate checks the field values on MaxofMessageProtocolTests with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxofMessageProtocolTests) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxofMessageProtocolTests with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxofMessageProtocolTestsMultiError, or nil if none found.
func (m *MaxofMessageProtocolTests) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxofMessageProtocolTests) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 15 {
		err := MaxofMessageProtocolTestsValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxofMessageProtocolTestsMultiError(errors)
	}
	return nil
}

// MaxofMessageProtocolTestsMultiError is an error wrapping multiple validation
// errors returned by MaxofMessageProtocolTests.ValidateAll() if the
// designated constraints aren't met.
type MaxofMessageProtocolTestsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxofMessageProtocolTestsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxofMessageProtocolTestsMultiError) AllErrors() []error { return m }

// MaxofMessageProtocolTestsValidationError is the validation error returned by
// MaxofMessageProtocolTests.Validate if the designated constraints aren't met.
type MaxofMessageProtocolTestsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofMessageProtocolTestsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofMessageProtocolTestsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofMessageProtocolTestsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofMessageProtocolTestsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofMessageProtocolTestsValidationError) ErrorName() string {
	return "MaxofMessageProtocolTestsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofMessageProtocolTestsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofMessageProtocolTests.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofMessageProtocolTestsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofMessageProtocolTestsValidationError{}

// Validate checks the field values on MaxofRicstyles with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxofRicstyles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxofRicstyles with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxofRicstylesMultiError,
// or nil if none found.
func (m *MaxofRicstyles) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxofRicstyles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 63 {
		err := MaxofRicstylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxofRicstylesMultiError(errors)
	}
	return nil
}

// MaxofRicstylesMultiError is an error wrapping multiple validation errors
// returned by MaxofRicstyles.ValidateAll() if the designated constraints
// aren't met.
type MaxofRicstylesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxofRicstylesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxofRicstylesMultiError) AllErrors() []error { return m }

// MaxofRicstylesValidationError is the validation error returned by
// MaxofRicstyles.Validate if the designated constraints aren't met.
type MaxofRicstylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRicstylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRicstylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRicstylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRicstylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRicstylesValidationError) ErrorName() string { return "MaxofRicstylesValidationError" }

// Error satisfies the builtin error interface
func (e MaxofRicstylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRicstyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRicstylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRicstylesValidationError{}

// Validate checks the field values on MaxPlmn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxPlmn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxPlmn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MaxPlmnMultiError, or nil if none found.
func (m *MaxPlmn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxPlmn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxPlmnValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxPlmnMultiError(errors)
	}
	return nil
}

// MaxPlmnMultiError is an error wrapping multiple validation errors returned
// by MaxPlmn.ValidateAll() if the designated constraints aren't met.
type MaxPlmnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxPlmnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxPlmnMultiError) AllErrors() []error { return m }

// MaxPlmnValidationError is the validation error returned by MaxPlmn.Validate
// if the designated constraints aren't met.
type MaxPlmnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPlmnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPlmnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPlmnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPlmnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPlmnValidationError) ErrorName() string { return "MaxPlmnValidationError" }

// Error satisfies the builtin error interface
func (e MaxPlmnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPlmn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPlmnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPlmnValidationError{}

// Validate checks the field values on MaxNr with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxNr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxNr with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MaxNrMultiError, or nil if none found.
func (m *MaxNr) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxNr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4096 {
		err := MaxNrValidationError{
			field:  "Value",
			reason: "value must equal 4096",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxNrMultiError(errors)
	}
	return nil
}

// MaxNrMultiError is an error wrapping multiple validation errors returned by
// MaxNr.ValidateAll() if the designated constraints aren't met.
type MaxNrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxNrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxNrMultiError) AllErrors() []error { return m }

// MaxNrValidationError is the validation error returned by MaxNr.Validate if
// the designated constraints aren't met.
type MaxNrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrValidationError) ErrorName() string { return "MaxNrValidationError" }

// Error satisfies the builtin error interface
func (e MaxNrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrValidationError{}

// Validate checks the field values on MaxEarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxEarfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxEarfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxEarfcnMultiError, or nil
// if none found.
func (m *MaxEarfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxEarfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 262143 {
		err := MaxEarfcnValidationError{
			field:  "Value",
			reason: "value must equal 262143",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxEarfcnMultiError(errors)
	}
	return nil
}

// MaxEarfcnMultiError is an error wrapping multiple validation errors returned
// by MaxEarfcn.ValidateAll() if the designated constraints aren't met.
type MaxEarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxEarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxEarfcnMultiError) AllErrors() []error { return m }

// MaxEarfcnValidationError is the validation error returned by
// MaxEarfcn.Validate if the designated constraints aren't met.
type MaxEarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxEarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxEarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxEarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxEarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxEarfcnValidationError) ErrorName() string { return "MaxEarfcnValidationError" }

// Error satisfies the builtin error interface
func (e MaxEarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxEarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxEarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxEarfcnValidationError{}

// Validate checks the field values on MaxNrarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxNrarfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxNrarfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxNrarfcnMultiError, or
// nil if none found.
func (m *MaxNrarfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxNrarfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3279167 {
		err := MaxNrarfcnValidationError{
			field:  "Value",
			reason: "value must equal 3279167",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxNrarfcnMultiError(errors)
	}
	return nil
}

// MaxNrarfcnMultiError is an error wrapping multiple validation errors
// returned by MaxNrarfcn.ValidateAll() if the designated constraints aren't met.
type MaxNrarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxNrarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxNrarfcnMultiError) AllErrors() []error { return m }

// MaxNrarfcnValidationError is the validation error returned by
// MaxNrarfcn.Validate if the designated constraints aren't met.
type MaxNrarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrarfcnValidationError) ErrorName() string { return "MaxNrarfcnValidationError" }

// Error satisfies the builtin error interface
func (e MaxNrarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNrarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrarfcnValidationError{}

// Validate checks the field values on MaxPci with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxPci) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxPci with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MaxPciMultiError, or nil if none found.
func (m *MaxPci) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxPci) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1007 {
		err := MaxPciValidationError{
			field:  "Value",
			reason: "value must equal 1007",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxPciMultiError(errors)
	}
	return nil
}

// MaxPciMultiError is an error wrapping multiple validation errors returned by
// MaxPci.ValidateAll() if the designated constraints aren't met.
type MaxPciMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxPciMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxPciMultiError) AllErrors() []error { return m }

// MaxPciValidationError is the validation error returned by MaxPci.Validate if
// the designated constraints aren't met.
type MaxPciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPciValidationError) ErrorName() string { return "MaxPciValidationError" }

// Error satisfies the builtin error interface
func (e MaxPciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPciValidationError{}

// Validate checks the field values on MaxPciRange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxPciRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxPciRange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxPciRangeMultiError, or
// nil if none found.
func (m *MaxPciRange) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxPciRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 100 {
		err := MaxPciRangeValidationError{
			field:  "Value",
			reason: "value must equal 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxPciRangeMultiError(errors)
	}
	return nil
}

// MaxPciRangeMultiError is an error wrapping multiple validation errors
// returned by MaxPciRange.ValidateAll() if the designated constraints aren't met.
type MaxPciRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxPciRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxPciRangeMultiError) AllErrors() []error { return m }

// MaxPciRangeValidationError is the validation error returned by
// MaxPciRange.Validate if the designated constraints aren't met.
type MaxPciRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPciRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPciRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPciRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPciRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPciRangeValidationError) ErrorName() string { return "MaxPciRangeValidationError" }

// Error satisfies the builtin error interface
func (e MaxPciRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPciRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPciRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPciRangeValidationError{}

// Validate checks the field values on MaxofRanparameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxofRanparameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxofRanparameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxofRanparametersMultiError, or nil if none found.
func (m *MaxofRanparameters) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxofRanparameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxofRanparametersValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxofRanparametersMultiError(errors)
	}
	return nil
}

// MaxofRanparametersMultiError is an error wrapping multiple validation errors
// returned by MaxofRanparameters.ValidateAll() if the designated constraints
// aren't met.
type MaxofRanparametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxofRanparametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxofRanparametersMultiError) AllErrors() []error { return m }

// MaxofRanparametersValidationError is the validation error returned by
// MaxofRanparameters.Validate if the designated constraints aren't met.
type MaxofRanparametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRanparametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRanparametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRanparametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRanparametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRanparametersValidationError) ErrorName() string {
	return "MaxofRanparametersValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofRanparametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRanparameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRanparametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRanparametersValidationError{}

// Validate checks the field values on RicStyleType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicStyleType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicStyleType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicStyleTypeMultiError, or
// nil if none found.
func (m *RicStyleType) ValidateAll() error {
	return m.validate(true)
}

func (m *RicStyleType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicStyleTypeMultiError(errors)
	}
	return nil
}

// RicStyleTypeMultiError is an error wrapping multiple validation errors
// returned by RicStyleType.ValidateAll() if the designated constraints aren't met.
type RicStyleTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicStyleTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicStyleTypeMultiError) AllErrors() []error { return m }

// RicStyleTypeValidationError is the validation error returned by
// RicStyleType.Validate if the designated constraints aren't met.
type RicStyleTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleTypeValidationError) ErrorName() string { return "RicStyleTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleTypeValidationError{}

// Validate checks the field values on RicFormatType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicFormatType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicFormatType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicFormatTypeMultiError, or
// nil if none found.
func (m *RicFormatType) ValidateAll() error {
	return m.validate(true)
}

func (m *RicFormatType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicFormatTypeMultiError(errors)
	}
	return nil
}

// RicFormatTypeMultiError is an error wrapping multiple validation errors
// returned by RicFormatType.ValidateAll() if the designated constraints
// aren't met.
type RicFormatTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicFormatTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicFormatTypeMultiError) AllErrors() []error { return m }

// RicFormatTypeValidationError is the validation error returned by
// RicFormatType.Validate if the designated constraints aren't met.
type RicFormatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicFormatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicFormatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicFormatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicFormatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicFormatTypeValidationError) ErrorName() string { return "RicFormatTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicFormatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicFormatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicFormatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicFormatTypeValidationError{}

// Validate checks the field values on RicControlMessagePriority with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicControlMessagePriority) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicControlMessagePriority with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicControlMessagePriorityMultiError, or nil if none found.
func (m *RicControlMessagePriority) ValidateAll() error {
	return m.validate(true)
}

func (m *RicControlMessagePriority) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicControlMessagePriorityMultiError(errors)
	}
	return nil
}

// RicControlMessagePriorityMultiError is an error wrapping multiple validation
// errors returned by RicControlMessagePriority.ValidateAll() if the
// designated constraints aren't met.
type RicControlMessagePriorityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicControlMessagePriorityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicControlMessagePriorityMultiError) AllErrors() []error { return m }

// RicControlMessagePriorityValidationError is the validation error returned by
// RicControlMessagePriority.Validate if the designated constraints aren't met.
type RicControlMessagePriorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlMessagePriorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlMessagePriorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlMessagePriorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlMessagePriorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlMessagePriorityValidationError) ErrorName() string {
	return "RicControlMessagePriorityValidationError"
}

// Error satisfies the builtin error interface
func (e RicControlMessagePriorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControlMessagePriority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlMessagePriorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlMessagePriorityValidationError{}

// Validate checks the field values on RanparameterItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterItemMultiError, or nil if none found.
func (m *RanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanparameterItemMultiError(errors)
	}
	return nil
}

// RanparameterItemMultiError is an error wrapping multiple validation errors
// returned by RanparameterItem.ValidateAll() if the designated constraints
// aren't met.
type RanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterItemMultiError) AllErrors() []error { return m }

// RanparameterItemValidationError is the validation error returned by
// RanparameterItem.Validate if the designated constraints aren't met.
type RanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterItemValidationError) ErrorName() string { return "RanparameterItemValidationError" }

// Error satisfies the builtin error interface
func (e RanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterItemValidationError{}

// Validate checks the field values on RanparameterId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanparameterId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RanparameterIdMultiError,
// or nil if none found.
func (m *RanparameterId) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 65535 {
		err := RanparameterIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanparameterIdMultiError(errors)
	}
	return nil
}

// RanparameterIdMultiError is an error wrapping multiple validation errors
// returned by RanparameterId.ValidateAll() if the designated constraints
// aren't met.
type RanparameterIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterIdMultiError) AllErrors() []error { return m }

// RanparameterIdValidationError is the validation error returned by
// RanparameterId.Validate if the designated constraints aren't met.
type RanparameterIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterIdValidationError) ErrorName() string { return "RanparameterIdValidationError" }

// Error satisfies the builtin error interface
func (e RanparameterIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterIdValidationError{}

// Validate checks the field values on RanparameterValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanparameterValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterValueMultiError, or nil if none found.
func (m *RanparameterValue) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RanparameterValue.(type) {

	case *RanparameterValue_ValueInt:
		// no validation rules for ValueInt

	case *RanparameterValue_ValueEnum:
		// no validation rules for ValueEnum

	case *RanparameterValue_ValueBool:
		// no validation rules for ValueBool

	case *RanparameterValue_ValueBitS:

		if all {
			switch v := interface{}(m.GetValueBitS()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterValueValidationError{
						field:  "ValueBitS",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterValueValidationError{
						field:  "ValueBitS",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetValueBitS()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterValueValidationError{
					field:  "ValueBitS",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanparameterValue_ValueOctS:
		// no validation rules for ValueOctS

	case *RanparameterValue_ValuePrtS:
		// no validation rules for ValuePrtS

	}

	if len(errors) > 0 {
		return RanparameterValueMultiError(errors)
	}
	return nil
}

// RanparameterValueMultiError is an error wrapping multiple validation errors
// returned by RanparameterValue.ValidateAll() if the designated constraints
// aren't met.
type RanparameterValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterValueMultiError) AllErrors() []error { return m }

// RanparameterValueValidationError is the validation error returned by
// RanparameterValue.Validate if the designated constraints aren't met.
type RanparameterValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterValueValidationError) ErrorName() string {
	return "RanparameterValueValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterValueValidationError{}

// Validate checks the field values on RanparameterDefItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterDefItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterDefItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterDefItemMultiError, or nil if none found.
func (m *RanparameterDefItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterDefItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterDefItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterDefItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterDefItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterDefItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterDefItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterDefItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RanParameterType

	if len(errors) > 0 {
		return RanparameterDefItemMultiError(errors)
	}
	return nil
}

// RanparameterDefItemMultiError is an error wrapping multiple validation
// errors returned by RanparameterDefItem.ValidateAll() if the designated
// constraints aren't met.
type RanparameterDefItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterDefItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterDefItemMultiError) AllErrors() []error { return m }

// RanparameterDefItemValidationError is the validation error returned by
// RanparameterDefItem.Validate if the designated constraints aren't met.
type RanparameterDefItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterDefItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterDefItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterDefItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterDefItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterDefItemValidationError) ErrorName() string {
	return "RanparameterDefItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterDefItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterDefItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterDefItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterDefItemValidationError{}

// Validate checks the field values on E2SmRcPreEventTriggerDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreEventTriggerDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreEventTriggerDefinition with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcPreEventTriggerDefinitionMultiError, or nil if none found.
func (m *E2SmRcPreEventTriggerDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreEventTriggerDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmRcPreEventTriggerDefinitionEventDefinitionFormats.(type) {

	case *E2SmRcPreEventTriggerDefinition_EventDefinitionFormat1:

		if all {
			switch v := interface{}(m.GetEventDefinitionFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreEventTriggerDefinitionValidationError{
						field:  "EventDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreEventTriggerDefinitionValidationError{
						field:  "EventDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEventDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreEventTriggerDefinitionValidationError{
					field:  "EventDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcPreEventTriggerDefinitionMultiError(errors)
	}
	return nil
}

// E2SmRcPreEventTriggerDefinitionMultiError is an error wrapping multiple
// validation errors returned by E2SmRcPreEventTriggerDefinition.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcPreEventTriggerDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreEventTriggerDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreEventTriggerDefinitionMultiError) AllErrors() []error { return m }

// E2SmRcPreEventTriggerDefinitionValidationError is the validation error
// returned by E2SmRcPreEventTriggerDefinition.Validate if the designated
// constraints aren't met.
type E2SmRcPreEventTriggerDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreEventTriggerDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreEventTriggerDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreEventTriggerDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreEventTriggerDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreEventTriggerDefinitionValidationError) ErrorName() string {
	return "E2SmRcPreEventTriggerDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreEventTriggerDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreEventTriggerDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreEventTriggerDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreEventTriggerDefinitionValidationError{}

// Validate checks the field values on E2SmRcPreEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SmRcPreEventTriggerDefinitionFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// E2SmRcPreEventTriggerDefinitionFormat1 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// E2SmRcPreEventTriggerDefinitionFormat1MultiError, or nil if none found.
func (m *E2SmRcPreEventTriggerDefinitionFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreEventTriggerDefinitionFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TriggerType

	// no validation rules for ReportingPeriodMs

	if len(errors) > 0 {
		return E2SmRcPreEventTriggerDefinitionFormat1MultiError(errors)
	}
	return nil
}

// E2SmRcPreEventTriggerDefinitionFormat1MultiError is an error wrapping
// multiple validation errors returned by
// E2SmRcPreEventTriggerDefinitionFormat1.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcPreEventTriggerDefinitionFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreEventTriggerDefinitionFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreEventTriggerDefinitionFormat1MultiError) AllErrors() []error { return m }

// E2SmRcPreEventTriggerDefinitionFormat1ValidationError is the validation
// error returned by E2SmRcPreEventTriggerDefinitionFormat1.Validate if the
// designated constraints aren't met.
type E2SmRcPreEventTriggerDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmRcPreEventTriggerDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreEventTriggerDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreEventTriggerDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreEventTriggerDefinitionFormat1ValidationError{}

// Validate checks the field values on E2SmRcPreIndicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreIndicationHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreIndicationHeader with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcPreIndicationHeaderMultiError, or nil if none found.
func (m *E2SmRcPreIndicationHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreIndicationHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmRcPreIndicationHeader.(type) {

	case *E2SmRcPreIndicationHeader_IndicationHeaderFormat1:

		if all {
			switch v := interface{}(m.GetIndicationHeaderFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreIndicationHeaderValidationError{
						field:  "IndicationHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreIndicationHeaderValidationError{
						field:  "IndicationHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreIndicationHeaderValidationError{
					field:  "IndicationHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcPreIndicationHeaderMultiError(errors)
	}
	return nil
}

// E2SmRcPreIndicationHeaderMultiError is an error wrapping multiple validation
// errors returned by E2SmRcPreIndicationHeader.ValidateAll() if the
// designated constraints aren't met.
type E2SmRcPreIndicationHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreIndicationHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreIndicationHeaderMultiError) AllErrors() []error { return m }

// E2SmRcPreIndicationHeaderValidationError is the validation error returned by
// E2SmRcPreIndicationHeader.Validate if the designated constraints aren't met.
type E2SmRcPreIndicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreIndicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreIndicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreIndicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreIndicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreIndicationHeaderValidationError) ErrorName() string {
	return "E2SmRcPreIndicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreIndicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreIndicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreIndicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreIndicationHeaderValidationError{}

// Validate checks the field values on E2SmRcPreIndicationHeaderFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *E2SmRcPreIndicationHeaderFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreIndicationHeaderFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcPreIndicationHeaderFormat1MultiError, or nil if none found.
func (m *E2SmRcPreIndicationHeaderFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreIndicationHeaderFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcPreIndicationHeaderFormat1ValidationError{
					field:  "Cgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcPreIndicationHeaderFormat1ValidationError{
					field:  "Cgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreIndicationHeaderFormat1ValidationError{
				field:  "Cgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcPreIndicationHeaderFormat1MultiError(errors)
	}
	return nil
}

// E2SmRcPreIndicationHeaderFormat1MultiError is an error wrapping multiple
// validation errors returned by
// E2SmRcPreIndicationHeaderFormat1.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcPreIndicationHeaderFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreIndicationHeaderFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreIndicationHeaderFormat1MultiError) AllErrors() []error { return m }

// E2SmRcPreIndicationHeaderFormat1ValidationError is the validation error
// returned by E2SmRcPreIndicationHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmRcPreIndicationHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmRcPreIndicationHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreIndicationHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreIndicationHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreIndicationHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmRcPreIndicationMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreIndicationMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreIndicationMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcPreIndicationMessageMultiError, or nil if none found.
func (m *E2SmRcPreIndicationMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreIndicationMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmRcPreIndicationMessage.(type) {

	case *E2SmRcPreIndicationMessage_RicStyleType:

		if all {
			switch v := interface{}(m.GetRicStyleType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreIndicationMessageValidationError{
						field:  "RicStyleType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreIndicationMessageValidationError{
						field:  "RicStyleType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreIndicationMessageValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmRcPreIndicationMessage_IndicationMessageFormat1:

		if all {
			switch v := interface{}(m.GetIndicationMessageFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreIndicationMessageValidationError{
						field:  "IndicationMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreIndicationMessageValidationError{
						field:  "IndicationMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreIndicationMessageValidationError{
					field:  "IndicationMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcPreIndicationMessageMultiError(errors)
	}
	return nil
}

// E2SmRcPreIndicationMessageMultiError is an error wrapping multiple
// validation errors returned by E2SmRcPreIndicationMessage.ValidateAll() if
// the designated constraints aren't met.
type E2SmRcPreIndicationMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreIndicationMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreIndicationMessageMultiError) AllErrors() []error { return m }

// E2SmRcPreIndicationMessageValidationError is the validation error returned
// by E2SmRcPreIndicationMessage.Validate if the designated constraints aren't met.
type E2SmRcPreIndicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreIndicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreIndicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreIndicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreIndicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreIndicationMessageValidationError) ErrorName() string {
	return "E2SmRcPreIndicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreIndicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreIndicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreIndicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreIndicationMessageValidationError{}

// Validate checks the field values on E2SmRcPreIndicationMessageFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *E2SmRcPreIndicationMessageFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreIndicationMessageFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmRcPreIndicationMessageFormat1MultiError, or nil if none found.
func (m *E2SmRcPreIndicationMessageFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreIndicationMessageFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDlArfcn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcPreIndicationMessageFormat1ValidationError{
					field:  "DlArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcPreIndicationMessageFormat1ValidationError{
					field:  "DlArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDlArfcn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreIndicationMessageFormat1ValidationError{
				field:  "DlArfcn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CellSize

	if all {
		switch v := interface{}(m.GetPci()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcPreIndicationMessageFormat1ValidationError{
					field:  "Pci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcPreIndicationMessageFormat1ValidationError{
					field:  "Pci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPci()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreIndicationMessageFormat1ValidationError{
				field:  "Pci",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetNeighbors()) > 4096 {
		err := E2SmRcPreIndicationMessageFormat1ValidationError{
			field:  "Neighbors",
			reason: "value must contain no more than 4096 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetNeighbors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreIndicationMessageFormat1ValidationError{
						field:  fmt.Sprintf("Neighbors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreIndicationMessageFormat1ValidationError{
						field:  fmt.Sprintf("Neighbors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreIndicationMessageFormat1ValidationError{
					field:  fmt.Sprintf("Neighbors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcPreIndicationMessageFormat1MultiError(errors)
	}
	return nil
}

// E2SmRcPreIndicationMessageFormat1MultiError is an error wrapping multiple
// validation errors returned by
// E2SmRcPreIndicationMessageFormat1.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcPreIndicationMessageFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreIndicationMessageFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreIndicationMessageFormat1MultiError) AllErrors() []error { return m }

// E2SmRcPreIndicationMessageFormat1ValidationError is the validation error
// returned by E2SmRcPreIndicationMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmRcPreIndicationMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreIndicationMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreIndicationMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreIndicationMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreIndicationMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreIndicationMessageFormat1ValidationError) ErrorName() string {
	return "E2SmRcPreIndicationMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreIndicationMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreIndicationMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreIndicationMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreIndicationMessageFormat1ValidationError{}

// Validate checks the field values on Nrt with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Nrt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Nrt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrtMultiError, or nil if none found.
func (m *Nrt) ValidateAll() error {
	return m.validate(true)
}

func (m *Nrt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrtValidationError{
					field:  "Cgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrtValidationError{
					field:  "Cgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrtValidationError{
				field:  "Cgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDlArfcn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrtValidationError{
					field:  "DlArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrtValidationError{
					field:  "DlArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDlArfcn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrtValidationError{
				field:  "DlArfcn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CellSize

	if all {
		switch v := interface{}(m.GetPci()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrtValidationError{
					field:  "Pci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrtValidationError{
					field:  "Pci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPci()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrtValidationError{
				field:  "Pci",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrtMultiError(errors)
	}
	return nil
}

// NrtMultiError is an error wrapping multiple validation errors returned by
// Nrt.ValidateAll() if the designated constraints aren't met.
type NrtMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrtMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrtMultiError) AllErrors() []error { return m }

// NrtValidationError is the validation error returned by Nrt.Validate if the
// designated constraints aren't met.
type NrtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrtValidationError) ErrorName() string { return "NrtValidationError" }

// Error satisfies the builtin error interface
func (e NrtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrtValidationError{}

// Validate checks the field values on E2SmRcPreControlHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreControlHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreControlHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcPreControlHeaderMultiError, or nil if none found.
func (m *E2SmRcPreControlHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreControlHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmRcPreControlHeader.(type) {

	case *E2SmRcPreControlHeader_ControlHeaderFormat1:

		if all {
			switch v := interface{}(m.GetControlHeaderFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreControlHeaderValidationError{
						field:  "ControlHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreControlHeaderValidationError{
						field:  "ControlHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetControlHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreControlHeaderValidationError{
					field:  "ControlHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcPreControlHeaderMultiError(errors)
	}
	return nil
}

// E2SmRcPreControlHeaderMultiError is an error wrapping multiple validation
// errors returned by E2SmRcPreControlHeader.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcPreControlHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreControlHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreControlHeaderMultiError) AllErrors() []error { return m }

// E2SmRcPreControlHeaderValidationError is the validation error returned by
// E2SmRcPreControlHeader.Validate if the designated constraints aren't met.
type E2SmRcPreControlHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreControlHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreControlHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreControlHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreControlHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreControlHeaderValidationError) ErrorName() string {
	return "E2SmRcPreControlHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreControlHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreControlHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreControlHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreControlHeaderValidationError{}

// Validate checks the field values on E2SmRcPreControlHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreControlHeaderFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreControlHeaderFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcPreControlHeaderFormat1MultiError, or nil if none found.
func (m *E2SmRcPreControlHeaderFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreControlHeaderFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcPreControlHeaderFormat1ValidationError{
					field:  "Cgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcPreControlHeaderFormat1ValidationError{
					field:  "Cgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreControlHeaderFormat1ValidationError{
				field:  "Cgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RcCommand

	if all {
		switch v := interface{}(m.GetRicControlMessagePriority()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcPreControlHeaderFormat1ValidationError{
					field:  "RicControlMessagePriority",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcPreControlHeaderFormat1ValidationError{
					field:  "RicControlMessagePriority",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlMessagePriority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreControlHeaderFormat1ValidationError{
				field:  "RicControlMessagePriority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcPreControlHeaderFormat1MultiError(errors)
	}
	return nil
}

// E2SmRcPreControlHeaderFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmRcPreControlHeaderFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcPreControlHeaderFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreControlHeaderFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreControlHeaderFormat1MultiError) AllErrors() []error { return m }

// E2SmRcPreControlHeaderFormat1ValidationError is the validation error
// returned by E2SmRcPreControlHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmRcPreControlHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreControlHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreControlHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreControlHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreControlHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreControlHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmRcPreControlHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreControlHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreControlHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreControlHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreControlHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmRcPreControlMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreControlMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreControlMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcPreControlMessageMultiError, or nil if none found.
func (m *E2SmRcPreControlMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreControlMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmRcPreControlMessage.(type) {

	case *E2SmRcPreControlMessage_ControlMessage:

		if all {
			switch v := interface{}(m.GetControlMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreControlMessageValidationError{
						field:  "ControlMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreControlMessageValidationError{
						field:  "ControlMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetControlMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreControlMessageValidationError{
					field:  "ControlMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcPreControlMessageMultiError(errors)
	}
	return nil
}

// E2SmRcPreControlMessageMultiError is an error wrapping multiple validation
// errors returned by E2SmRcPreControlMessage.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcPreControlMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreControlMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreControlMessageMultiError) AllErrors() []error { return m }

// E2SmRcPreControlMessageValidationError is the validation error returned by
// E2SmRcPreControlMessage.Validate if the designated constraints aren't met.
type E2SmRcPreControlMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreControlMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreControlMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreControlMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreControlMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreControlMessageValidationError) ErrorName() string {
	return "E2SmRcPreControlMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreControlMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreControlMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreControlMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreControlMessageValidationError{}

// Validate checks the field values on E2SmRcPreControlMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreControlMessageFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreControlMessageFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcPreControlMessageFormat1MultiError, or nil if none found.
func (m *E2SmRcPreControlMessageFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreControlMessageFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParameterType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcPreControlMessageFormat1ValidationError{
					field:  "ParameterType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcPreControlMessageFormat1ValidationError{
					field:  "ParameterType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameterType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreControlMessageFormat1ValidationError{
				field:  "ParameterType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParameterVal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcPreControlMessageFormat1ValidationError{
					field:  "ParameterVal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcPreControlMessageFormat1ValidationError{
					field:  "ParameterVal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameterVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreControlMessageFormat1ValidationError{
				field:  "ParameterVal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcPreControlMessageFormat1MultiError(errors)
	}
	return nil
}

// E2SmRcPreControlMessageFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmRcPreControlMessageFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcPreControlMessageFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreControlMessageFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreControlMessageFormat1MultiError) AllErrors() []error { return m }

// E2SmRcPreControlMessageFormat1ValidationError is the validation error
// returned by E2SmRcPreControlMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmRcPreControlMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreControlMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreControlMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreControlMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreControlMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreControlMessageFormat1ValidationError) ErrorName() string {
	return "E2SmRcPreControlMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreControlMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreControlMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreControlMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreControlMessageFormat1ValidationError{}

// Validate checks the field values on E2SmRcPreControlOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreControlOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreControlOutcome with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcPreControlOutcomeMultiError, or nil if none found.
func (m *E2SmRcPreControlOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreControlOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmRcPreControlOutcome.(type) {

	case *E2SmRcPreControlOutcome_ControlOutcomeFormat1:

		if all {
			switch v := interface{}(m.GetControlOutcomeFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreControlOutcomeValidationError{
						field:  "ControlOutcomeFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreControlOutcomeValidationError{
						field:  "ControlOutcomeFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetControlOutcomeFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreControlOutcomeValidationError{
					field:  "ControlOutcomeFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcPreControlOutcomeMultiError(errors)
	}
	return nil
}

// E2SmRcPreControlOutcomeMultiError is an error wrapping multiple validation
// errors returned by E2SmRcPreControlOutcome.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcPreControlOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreControlOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreControlOutcomeMultiError) AllErrors() []error { return m }

// E2SmRcPreControlOutcomeValidationError is the validation error returned by
// E2SmRcPreControlOutcome.Validate if the designated constraints aren't met.
type E2SmRcPreControlOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreControlOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreControlOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreControlOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreControlOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreControlOutcomeValidationError) ErrorName() string {
	return "E2SmRcPreControlOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreControlOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreControlOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreControlOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreControlOutcomeValidationError{}

// Validate checks the field values on E2SmRcPreControlOutcomeFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreControlOutcomeFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreControlOutcomeFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcPreControlOutcomeFormat1MultiError, or nil if none found.
func (m *E2SmRcPreControlOutcomeFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreControlOutcomeFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetOutcomeElementList()); l < 1 || l > 65535 {
		err := E2SmRcPreControlOutcomeFormat1ValidationError{
			field:  "OutcomeElementList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOutcomeElementList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreControlOutcomeFormat1ValidationError{
						field:  fmt.Sprintf("OutcomeElementList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreControlOutcomeFormat1ValidationError{
						field:  fmt.Sprintf("OutcomeElementList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreControlOutcomeFormat1ValidationError{
					field:  fmt.Sprintf("OutcomeElementList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcPreControlOutcomeFormat1MultiError(errors)
	}
	return nil
}

// E2SmRcPreControlOutcomeFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmRcPreControlOutcomeFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcPreControlOutcomeFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreControlOutcomeFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreControlOutcomeFormat1MultiError) AllErrors() []error { return m }

// E2SmRcPreControlOutcomeFormat1ValidationError is the validation error
// returned by E2SmRcPreControlOutcomeFormat1.Validate if the designated
// constraints aren't met.
type E2SmRcPreControlOutcomeFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreControlOutcomeFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreControlOutcomeFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreControlOutcomeFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreControlOutcomeFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreControlOutcomeFormat1ValidationError) ErrorName() string {
	return "E2SmRcPreControlOutcomeFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreControlOutcomeFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreControlOutcomeFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreControlOutcomeFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreControlOutcomeFormat1ValidationError{}

// Validate checks the field values on E2SmRcPreRanfunctionDescription with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreRanfunctionDescription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcPreRanfunctionDescription with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcPreRanfunctionDescriptionMultiError, or nil if none found.
func (m *E2SmRcPreRanfunctionDescription) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreRanfunctionDescription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanFunctionName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcPreRanfunctionDescriptionValidationError{
					field:  "RanFunctionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcPreRanfunctionDescriptionValidationError{
					field:  "RanFunctionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreRanfunctionDescriptionValidationError{
				field:  "RanFunctionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2SmRcPreRanfunctionItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcPreRanfunctionDescriptionValidationError{
					field:  "E2SmRcPreRanfunctionItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcPreRanfunctionDescriptionValidationError{
					field:  "E2SmRcPreRanfunctionItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2SmRcPreRanfunctionItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreRanfunctionDescriptionValidationError{
				field:  "E2SmRcPreRanfunctionItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcPreRanfunctionDescriptionMultiError(errors)
	}
	return nil
}

// E2SmRcPreRanfunctionDescriptionMultiError is an error wrapping multiple
// validation errors returned by E2SmRcPreRanfunctionDescription.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcPreRanfunctionDescriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreRanfunctionDescriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreRanfunctionDescriptionMultiError) AllErrors() []error { return m }

// E2SmRcPreRanfunctionDescriptionValidationError is the validation error
// returned by E2SmRcPreRanfunctionDescription.Validate if the designated
// constraints aren't met.
type E2SmRcPreRanfunctionDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreRanfunctionDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreRanfunctionDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreRanfunctionDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreRanfunctionDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreRanfunctionDescriptionValidationError) ErrorName() string {
	return "E2SmRcPreRanfunctionDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreRanfunctionDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreRanfunctionDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreRanfunctionDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreRanfunctionDescriptionValidationError{}

// Validate checks the field values on RanfunctionName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionNameMultiError, or nil if none found.
func (m *RanfunctionName) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRanFunctionShortName()); l < 1 || l > 150 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionShortName",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionE2SmOid()); l < 1 || l > 1000 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionE2SmOid",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionDescription()); l < 1 || l > 150 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionDescription",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RanFunctionInstance

	if len(errors) > 0 {
		return RanfunctionNameMultiError(errors)
	}
	return nil
}

// RanfunctionNameMultiError is an error wrapping multiple validation errors
// returned by RanfunctionName.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionNameMultiError) AllErrors() []error { return m }

// RanfunctionNameValidationError is the validation error returned by
// RanfunctionName.Validate if the designated constraints aren't met.
type RanfunctionNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionNameValidationError) ErrorName() string { return "RanfunctionNameValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionNameValidationError{}

// Validate checks the field values on RicEventTriggerStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicEventTriggerStyleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicEventTriggerStyleList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicEventTriggerStyleListMultiError, or nil if none found.
func (m *RicEventTriggerStyleList) ValidateAll() error {
	return m.validate(true)
}

func (m *RicEventTriggerStyleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicEventTriggerStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicEventTriggerStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicEventTriggerFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicEventTriggerStyleListMultiError(errors)
	}
	return nil
}

// RicEventTriggerStyleListMultiError is an error wrapping multiple validation
// errors returned by RicEventTriggerStyleList.ValidateAll() if the designated
// constraints aren't met.
type RicEventTriggerStyleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicEventTriggerStyleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicEventTriggerStyleListMultiError) AllErrors() []error { return m }

// RicEventTriggerStyleListValidationError is the validation error returned by
// RicEventTriggerStyleList.Validate if the designated constraints aren't met.
type RicEventTriggerStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerStyleListValidationError) ErrorName() string {
	return "RicEventTriggerStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerStyleListValidationError{}

// Validate checks the field values on RicReportStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicReportStyleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicReportStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicReportStyleListMultiError, or nil if none found.
func (m *RicReportStyleList) ValidateAll() error {
	return m.validate(true)
}

func (m *RicReportStyleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicReportStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicReportStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicReportStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicReportStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicIndicationHeaderFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicIndicationMessageFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicReportStyleListMultiError(errors)
	}
	return nil
}

// RicReportStyleListMultiError is an error wrapping multiple validation errors
// returned by RicReportStyleList.ValidateAll() if the designated constraints
// aren't met.
type RicReportStyleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicReportStyleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicReportStyleListMultiError) AllErrors() []error { return m }

// RicReportStyleListValidationError is the validation error returned by
// RicReportStyleList.Validate if the designated constraints aren't met.
type RicReportStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicReportStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicReportStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicReportStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicReportStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicReportStyleListValidationError) ErrorName() string {
	return "RicReportStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicReportStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicReportStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicReportStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicReportStyleListValidationError{}

// Validate checks the field values on RanparameterName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanparameterName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterNameMultiError, or nil if none found.
func (m *RanparameterName) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		err := RanparameterNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanparameterNameMultiError(errors)
	}
	return nil
}

// RanparameterNameMultiError is an error wrapping multiple validation errors
// returned by RanparameterName.ValidateAll() if the designated constraints
// aren't met.
type RanparameterNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterNameMultiError) AllErrors() []error { return m }

// RanparameterNameValidationError is the validation error returned by
// RanparameterName.Validate if the designated constraints aren't met.
type RanparameterNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterNameValidationError) ErrorName() string { return "RanparameterNameValidationError" }

// Error satisfies the builtin error interface
func (e RanparameterNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterNameValidationError{}

// Validate checks the field values on RicStyleName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicStyleName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicStyleName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicStyleNameMultiError, or
// nil if none found.
func (m *RicStyleName) ValidateAll() error {
	return m.validate(true)
}

func (m *RicStyleName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		err := RicStyleNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicStyleNameMultiError(errors)
	}
	return nil
}

// RicStyleNameMultiError is an error wrapping multiple validation errors
// returned by RicStyleName.ValidateAll() if the designated constraints aren't met.
type RicStyleNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicStyleNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicStyleNameMultiError) AllErrors() []error { return m }

// RicStyleNameValidationError is the validation error returned by
// RicStyleName.Validate if the designated constraints aren't met.
type RicStyleNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleNameValidationError) ErrorName() string { return "RicStyleNameValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleNameValidationError{}

// Validate checks the field values on PlmnIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlmnIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlmnIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlmnIdentityMultiError, or
// nil if none found.
func (m *PlmnIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *PlmnIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 3 {
		err := PlmnIdentityValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PlmnIdentityMultiError(errors)
	}
	return nil
}

// PlmnIdentityMultiError is an error wrapping multiple validation errors
// returned by PlmnIdentity.ValidateAll() if the designated constraints aren't met.
type PlmnIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlmnIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlmnIdentityMultiError) AllErrors() []error { return m }

// PlmnIdentityValidationError is the validation error returned by
// PlmnIdentity.Validate if the designated constraints aren't met.
type PlmnIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdentityValidationError) ErrorName() string { return "PlmnIdentityValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdentityValidationError{}

// Validate checks the field values on EutracellIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EutracellIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EutracellIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EutracellIdentityMultiError, or nil if none found.
func (m *EutracellIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *EutracellIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EutracellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EutracellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EutracellIdentityMultiError(errors)
	}
	return nil
}

// EutracellIdentityMultiError is an error wrapping multiple validation errors
// returned by EutracellIdentity.ValidateAll() if the designated constraints
// aren't met.
type EutracellIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EutracellIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EutracellIdentityMultiError) AllErrors() []error { return m }

// EutracellIdentityValidationError is the validation error returned by
// EutracellIdentity.Validate if the designated constraints aren't met.
type EutracellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutracellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutracellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutracellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutracellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutracellIdentityValidationError) ErrorName() string {
	return "EutracellIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e EutracellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutracellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutracellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutracellIdentityValidationError{}

// Validate checks the field values on NrcellIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrcellIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrcellIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NrcellIdentityMultiError,
// or nil if none found.
func (m *NrcellIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *NrcellIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrcellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrcellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrcellIdentityMultiError(errors)
	}
	return nil
}

// NrcellIdentityMultiError is an error wrapping multiple validation errors
// returned by NrcellIdentity.ValidateAll() if the designated constraints
// aren't met.
type NrcellIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrcellIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrcellIdentityMultiError) AllErrors() []error { return m }

// NrcellIdentityValidationError is the validation error returned by
// NrcellIdentity.Validate if the designated constraints aren't met.
type NrcellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcellIdentityValidationError) ErrorName() string { return "NrcellIdentityValidationError" }

// Error satisfies the builtin error interface
func (e NrcellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcellIdentityValidationError{}

// Validate checks the field values on BitString with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BitString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BitString with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BitStringMultiError, or nil
// if none found.
func (m *BitString) ValidateAll() error {
	return m.validate(true)
}

func (m *BitString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Len

	if len(errors) > 0 {
		return BitStringMultiError(errors)
	}
	return nil
}

// BitStringMultiError is an error wrapping multiple validation errors returned
// by BitString.ValidateAll() if the designated constraints aren't met.
type BitStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BitStringMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BitStringMultiError) AllErrors() []error { return m }

// BitStringValidationError is the validation error returned by
// BitString.Validate if the designated constraints aren't met.
type BitStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BitStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BitStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BitStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BitStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BitStringValidationError) ErrorName() string { return "BitStringValidationError" }

// Error satisfies the builtin error interface
func (e BitStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBitString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BitStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BitStringValidationError{}

// Validate checks the field values on
// E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001MultiError, or
// nil if none found.
func (m *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRicEventTriggerStyleList()); l < 1 || l > 63 {
		err := E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
			field:  "RicEventTriggerStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicEventTriggerStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
					field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := len(m.GetRicReportStyleList()); l < 1 || l > 63 {
		err := E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
			field:  "RicReportStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicReportStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
					field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001MultiError(errors)
	}
	return nil
}

// E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001MultiError is an
// error wrapping multiple validation errors returned by
// E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001MultiError) AllErrors() []error {
	return m
}

// E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError
// is the validation error returned by
// E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001.Validate if the
// designated constraints aren't met.
type E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) ErrorName() string {
	return "E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{}
