// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_mho_go/v2/e2sm_mho_go.proto

package e2smmho

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Rsrp with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rsrp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rsrp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RsrpMultiError, or nil if none found.
func (m *Rsrp) ValidateAll() error {
	return m.validate(true)
}

func (m *Rsrp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < -65536 || val > 65536 {
		err := RsrpValidationError{
			field:  "Value",
			reason: "value must be inside range [-65536, 65536]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RsrpMultiError(errors)
	}
	return nil
}

// RsrpMultiError is an error wrapping multiple validation errors returned by
// Rsrp.ValidateAll() if the designated constraints aren't met.
type RsrpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RsrpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RsrpMultiError) AllErrors() []error { return m }

// RsrpValidationError is the validation error returned by Rsrp.Validate if the
// designated constraints aren't met.
type RsrpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RsrpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RsrpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RsrpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RsrpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RsrpValidationError) ErrorName() string { return "RsrpValidationError" }

// Error satisfies the builtin error interface
func (e RsrpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRsrp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RsrpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RsrpValidationError{}

// Validate checks the field values on MaxofMessageProtocolTests with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxofMessageProtocolTests) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxofMessageProtocolTests with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxofMessageProtocolTestsMultiError, or nil if none found.
func (m *MaxofMessageProtocolTests) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxofMessageProtocolTests) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 15 {
		err := MaxofMessageProtocolTestsValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxofMessageProtocolTestsMultiError(errors)
	}
	return nil
}

// MaxofMessageProtocolTestsMultiError is an error wrapping multiple validation
// errors returned by MaxofMessageProtocolTests.ValidateAll() if the
// designated constraints aren't met.
type MaxofMessageProtocolTestsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxofMessageProtocolTestsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxofMessageProtocolTestsMultiError) AllErrors() []error { return m }

// MaxofMessageProtocolTestsValidationError is the validation error returned by
// MaxofMessageProtocolTests.Validate if the designated constraints aren't met.
type MaxofMessageProtocolTestsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofMessageProtocolTestsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofMessageProtocolTestsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofMessageProtocolTestsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofMessageProtocolTestsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofMessageProtocolTestsValidationError) ErrorName() string {
	return "MaxofMessageProtocolTestsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofMessageProtocolTestsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofMessageProtocolTests.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofMessageProtocolTestsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofMessageProtocolTestsValidationError{}

// Validate checks the field values on MaxofRicstyles with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxofRicstyles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxofRicstyles with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxofRicstylesMultiError,
// or nil if none found.
func (m *MaxofRicstyles) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxofRicstyles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 63 {
		err := MaxofRicstylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxofRicstylesMultiError(errors)
	}
	return nil
}

// MaxofRicstylesMultiError is an error wrapping multiple validation errors
// returned by MaxofRicstyles.ValidateAll() if the designated constraints
// aren't met.
type MaxofRicstylesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxofRicstylesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxofRicstylesMultiError) AllErrors() []error { return m }

// MaxofRicstylesValidationError is the validation error returned by
// MaxofRicstyles.Validate if the designated constraints aren't met.
type MaxofRicstylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRicstylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRicstylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRicstylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRicstylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRicstylesValidationError) ErrorName() string { return "MaxofRicstylesValidationError" }

// Error satisfies the builtin error interface
func (e MaxofRicstylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRicstyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRicstylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRicstylesValidationError{}

// Validate checks the field values on MaxPlmn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxPlmn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxPlmn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MaxPlmnMultiError, or nil if none found.
func (m *MaxPlmn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxPlmn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxPlmnValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxPlmnMultiError(errors)
	}
	return nil
}

// MaxPlmnMultiError is an error wrapping multiple validation errors returned
// by MaxPlmn.ValidateAll() if the designated constraints aren't met.
type MaxPlmnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxPlmnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxPlmnMultiError) AllErrors() []error { return m }

// MaxPlmnValidationError is the validation error returned by MaxPlmn.Validate
// if the designated constraints aren't met.
type MaxPlmnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPlmnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPlmnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPlmnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPlmnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPlmnValidationError) ErrorName() string { return "MaxPlmnValidationError" }

// Error satisfies the builtin error interface
func (e MaxPlmnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPlmn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPlmnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPlmnValidationError{}

// Validate checks the field values on MaxNr with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxNr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxNr with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MaxNrMultiError, or nil if none found.
func (m *MaxNr) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxNr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4096 {
		err := MaxNrValidationError{
			field:  "Value",
			reason: "value must equal 4096",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxNrMultiError(errors)
	}
	return nil
}

// MaxNrMultiError is an error wrapping multiple validation errors returned by
// MaxNr.ValidateAll() if the designated constraints aren't met.
type MaxNrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxNrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxNrMultiError) AllErrors() []error { return m }

// MaxNrValidationError is the validation error returned by MaxNr.Validate if
// the designated constraints aren't met.
type MaxNrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrValidationError) ErrorName() string { return "MaxNrValidationError" }

// Error satisfies the builtin error interface
func (e MaxNrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrValidationError{}

// Validate checks the field values on RicControlMessagePriority with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicControlMessagePriority) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicControlMessagePriority with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicControlMessagePriorityMultiError, or nil if none found.
func (m *RicControlMessagePriority) ValidateAll() error {
	return m.validate(true)
}

func (m *RicControlMessagePriority) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 255 {
		err := RicControlMessagePriorityValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicControlMessagePriorityMultiError(errors)
	}
	return nil
}

// RicControlMessagePriorityMultiError is an error wrapping multiple validation
// errors returned by RicControlMessagePriority.ValidateAll() if the
// designated constraints aren't met.
type RicControlMessagePriorityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicControlMessagePriorityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicControlMessagePriorityMultiError) AllErrors() []error { return m }

// RicControlMessagePriorityValidationError is the validation error returned by
// RicControlMessagePriority.Validate if the designated constraints aren't met.
type RicControlMessagePriorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlMessagePriorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlMessagePriorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlMessagePriorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlMessagePriorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlMessagePriorityValidationError) ErrorName() string {
	return "RicControlMessagePriorityValidationError"
}

// Error satisfies the builtin error interface
func (e RicControlMessagePriorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControlMessagePriority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlMessagePriorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlMessagePriorityValidationError{}

// Validate checks the field values on E2SmMhoEventTriggerDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoEventTriggerDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoEventTriggerDefinition with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmMhoEventTriggerDefinitionMultiError, or nil if none found.
func (m *E2SmMhoEventTriggerDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoEventTriggerDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventDefinitionFormats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoEventTriggerDefinitionValidationError{
					field:  "EventDefinitionFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoEventTriggerDefinitionValidationError{
					field:  "EventDefinitionFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventDefinitionFormats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoEventTriggerDefinitionValidationError{
				field:  "EventDefinitionFormats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmMhoEventTriggerDefinitionMultiError(errors)
	}
	return nil
}

// E2SmMhoEventTriggerDefinitionMultiError is an error wrapping multiple
// validation errors returned by E2SmMhoEventTriggerDefinition.ValidateAll()
// if the designated constraints aren't met.
type E2SmMhoEventTriggerDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoEventTriggerDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoEventTriggerDefinitionMultiError) AllErrors() []error { return m }

// E2SmMhoEventTriggerDefinitionValidationError is the validation error
// returned by E2SmMhoEventTriggerDefinition.Validate if the designated
// constraints aren't met.
type E2SmMhoEventTriggerDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoEventTriggerDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoEventTriggerDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoEventTriggerDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoEventTriggerDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoEventTriggerDefinitionValidationError) ErrorName() string {
	return "E2SmMhoEventTriggerDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoEventTriggerDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoEventTriggerDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoEventTriggerDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoEventTriggerDefinitionValidationError{}

// Validate checks the field values on MhoEventTriggerDefinitionFormats with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MhoEventTriggerDefinitionFormats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MhoEventTriggerDefinitionFormats with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MhoEventTriggerDefinitionFormatsMultiError, or nil if none found.
func (m *MhoEventTriggerDefinitionFormats) ValidateAll() error {
	return m.validate(true)
}

func (m *MhoEventTriggerDefinitionFormats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmMhoEventTriggerDefinition.(type) {

	case *MhoEventTriggerDefinitionFormats_EventDefinitionFormat1:

		if all {
			switch v := interface{}(m.GetEventDefinitionFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MhoEventTriggerDefinitionFormatsValidationError{
						field:  "EventDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MhoEventTriggerDefinitionFormatsValidationError{
						field:  "EventDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEventDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MhoEventTriggerDefinitionFormatsValidationError{
					field:  "EventDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MhoEventTriggerDefinitionFormatsMultiError(errors)
	}
	return nil
}

// MhoEventTriggerDefinitionFormatsMultiError is an error wrapping multiple
// validation errors returned by
// MhoEventTriggerDefinitionFormats.ValidateAll() if the designated
// constraints aren't met.
type MhoEventTriggerDefinitionFormatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MhoEventTriggerDefinitionFormatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MhoEventTriggerDefinitionFormatsMultiError) AllErrors() []error { return m }

// MhoEventTriggerDefinitionFormatsValidationError is the validation error
// returned by MhoEventTriggerDefinitionFormats.Validate if the designated
// constraints aren't met.
type MhoEventTriggerDefinitionFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MhoEventTriggerDefinitionFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MhoEventTriggerDefinitionFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MhoEventTriggerDefinitionFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MhoEventTriggerDefinitionFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MhoEventTriggerDefinitionFormatsValidationError) ErrorName() string {
	return "MhoEventTriggerDefinitionFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e MhoEventTriggerDefinitionFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMhoEventTriggerDefinitionFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MhoEventTriggerDefinitionFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MhoEventTriggerDefinitionFormatsValidationError{}

// Validate checks the field values on E2SmMhoEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SmMhoEventTriggerDefinitionFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmMhoEventTriggerDefinitionFormat1MultiError, or nil if none found.
func (m *E2SmMhoEventTriggerDefinitionFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoEventTriggerDefinitionFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TriggerType

	//switch m.XReportingPeriodMs.(type) {
	//
	//case *E2SmMhoEventTriggerDefinitionFormat1_ReportingPeriodMs:
	//	// no validation rules for ReportingPeriodMs
	//
	//}

	if len(errors) > 0 {
		return E2SmMhoEventTriggerDefinitionFormat1MultiError(errors)
	}
	return nil
}

// E2SmMhoEventTriggerDefinitionFormat1MultiError is an error wrapping multiple
// validation errors returned by
// E2SmMhoEventTriggerDefinitionFormat1.ValidateAll() if the designated
// constraints aren't met.
type E2SmMhoEventTriggerDefinitionFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoEventTriggerDefinitionFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoEventTriggerDefinitionFormat1MultiError) AllErrors() []error { return m }

// E2SmMhoEventTriggerDefinitionFormat1ValidationError is the validation error
// returned by E2SmMhoEventTriggerDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmMhoEventTriggerDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmMhoEventTriggerDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoEventTriggerDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoEventTriggerDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoEventTriggerDefinitionFormat1ValidationError{}

// Validate checks the field values on E2SmMhoIndicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoIndicationHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoIndicationHeader with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmMhoIndicationHeaderMultiError, or nil if none found.
func (m *E2SmMhoIndicationHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoIndicationHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmMhoIndicationHeader.(type) {

	case *E2SmMhoIndicationHeader_IndicationHeaderFormat1:

		if all {
			switch v := interface{}(m.GetIndicationHeaderFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmMhoIndicationHeaderValidationError{
						field:  "IndicationHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmMhoIndicationHeaderValidationError{
						field:  "IndicationHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoIndicationHeaderValidationError{
					field:  "IndicationHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmMhoIndicationHeaderMultiError(errors)
	}
	return nil
}

// E2SmMhoIndicationHeaderMultiError is an error wrapping multiple validation
// errors returned by E2SmMhoIndicationHeader.ValidateAll() if the designated
// constraints aren't met.
type E2SmMhoIndicationHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoIndicationHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoIndicationHeaderMultiError) AllErrors() []error { return m }

// E2SmMhoIndicationHeaderValidationError is the validation error returned by
// E2SmMhoIndicationHeader.Validate if the designated constraints aren't met.
type E2SmMhoIndicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoIndicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoIndicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoIndicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoIndicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoIndicationHeaderValidationError) ErrorName() string {
	return "E2SmMhoIndicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoIndicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoIndicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoIndicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoIndicationHeaderValidationError{}

// Validate checks the field values on E2SmMhoIndicationHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoIndicationHeaderFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoIndicationHeaderFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmMhoIndicationHeaderFormat1MultiError, or nil if none found.
func (m *E2SmMhoIndicationHeaderFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoIndicationHeaderFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoIndicationHeaderFormat1ValidationError{
					field:  "Cgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoIndicationHeaderFormat1ValidationError{
					field:  "Cgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoIndicationHeaderFormat1ValidationError{
				field:  "Cgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmMhoIndicationHeaderFormat1MultiError(errors)
	}
	return nil
}

// E2SmMhoIndicationHeaderFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmMhoIndicationHeaderFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmMhoIndicationHeaderFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoIndicationHeaderFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoIndicationHeaderFormat1MultiError) AllErrors() []error { return m }

// E2SmMhoIndicationHeaderFormat1ValidationError is the validation error
// returned by E2SmMhoIndicationHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmMhoIndicationHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoIndicationHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoIndicationHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoIndicationHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoIndicationHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoIndicationHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmMhoIndicationHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoIndicationHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoIndicationHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoIndicationHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoIndicationHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmMhoIndicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoIndicationMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoIndicationMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmMhoIndicationMessageMultiError, or nil if none found.
func (m *E2SmMhoIndicationMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoIndicationMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmMhoIndicationMessage.(type) {

	case *E2SmMhoIndicationMessage_IndicationMessageFormat1:

		if all {
			switch v := interface{}(m.GetIndicationMessageFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmMhoIndicationMessageValidationError{
						field:  "IndicationMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmMhoIndicationMessageValidationError{
						field:  "IndicationMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoIndicationMessageValidationError{
					field:  "IndicationMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmMhoIndicationMessage_IndicationMessageFormat2:

		if all {
			switch v := interface{}(m.GetIndicationMessageFormat2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmMhoIndicationMessageValidationError{
						field:  "IndicationMessageFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmMhoIndicationMessageValidationError{
						field:  "IndicationMessageFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationMessageFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoIndicationMessageValidationError{
					field:  "IndicationMessageFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmMhoIndicationMessageMultiError(errors)
	}
	return nil
}

// E2SmMhoIndicationMessageMultiError is an error wrapping multiple validation
// errors returned by E2SmMhoIndicationMessage.ValidateAll() if the designated
// constraints aren't met.
type E2SmMhoIndicationMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoIndicationMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoIndicationMessageMultiError) AllErrors() []error { return m }

// E2SmMhoIndicationMessageValidationError is the validation error returned by
// E2SmMhoIndicationMessage.Validate if the designated constraints aren't met.
type E2SmMhoIndicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoIndicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoIndicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoIndicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoIndicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoIndicationMessageValidationError) ErrorName() string {
	return "E2SmMhoIndicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoIndicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoIndicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoIndicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoIndicationMessageValidationError{}

// Validate checks the field values on E2SmMhoIndicationMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoIndicationMessageFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoIndicationMessageFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmMhoIndicationMessageFormat1MultiError, or nil if none found.
func (m *E2SmMhoIndicationMessageFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoIndicationMessageFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoIndicationMessageFormat1ValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoIndicationMessageFormat1ValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoIndicationMessageFormat1ValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetMeasReport()); l < 1 || l > 100 {
		err := E2SmMhoIndicationMessageFormat1ValidationError{
			field:  "MeasReport",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMeasReport() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmMhoIndicationMessageFormat1ValidationError{
						field:  fmt.Sprintf("MeasReport[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmMhoIndicationMessageFormat1ValidationError{
						field:  fmt.Sprintf("MeasReport[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoIndicationMessageFormat1ValidationError{
					field:  fmt.Sprintf("MeasReport[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmMhoIndicationMessageFormat1MultiError(errors)
	}
	return nil
}

// E2SmMhoIndicationMessageFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmMhoIndicationMessageFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmMhoIndicationMessageFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoIndicationMessageFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoIndicationMessageFormat1MultiError) AllErrors() []error { return m }

// E2SmMhoIndicationMessageFormat1ValidationError is the validation error
// returned by E2SmMhoIndicationMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmMhoIndicationMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoIndicationMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoIndicationMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoIndicationMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoIndicationMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoIndicationMessageFormat1ValidationError) ErrorName() string {
	return "E2SmMhoIndicationMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoIndicationMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoIndicationMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoIndicationMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoIndicationMessageFormat1ValidationError{}

// Validate checks the field values on E2SmMhoMeasurementReportItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoMeasurementReportItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoMeasurementReportItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmMhoMeasurementReportItemMultiError, or nil if none found.
func (m *E2SmMhoMeasurementReportItem) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoMeasurementReportItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoMeasurementReportItemValidationError{
					field:  "Cgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoMeasurementReportItemValidationError{
					field:  "Cgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoMeasurementReportItemValidationError{
				field:  "Cgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRsrp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoMeasurementReportItemValidationError{
					field:  "Rsrp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoMeasurementReportItemValidationError{
					field:  "Rsrp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRsrp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoMeasurementReportItemValidationError{
				field:  "Rsrp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	//switch m.XFiveQi.(type) {
	//
	//case *E2SmMhoMeasurementReportItem_FiveQi:

	if all {
		switch v := interface{}(m.GetFiveQi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoMeasurementReportItemValidationError{
					field:  "FiveQi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoMeasurementReportItemValidationError{
					field:  "FiveQi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFiveQi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoMeasurementReportItemValidationError{
				field:  "FiveQi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	//}

	if len(errors) > 0 {
		return E2SmMhoMeasurementReportItemMultiError(errors)
	}
	return nil
}

// E2SmMhoMeasurementReportItemMultiError is an error wrapping multiple
// validation errors returned by E2SmMhoMeasurementReportItem.ValidateAll() if
// the designated constraints aren't met.
type E2SmMhoMeasurementReportItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoMeasurementReportItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoMeasurementReportItemMultiError) AllErrors() []error { return m }

// E2SmMhoMeasurementReportItemValidationError is the validation error returned
// by E2SmMhoMeasurementReportItem.Validate if the designated constraints
// aren't met.
type E2SmMhoMeasurementReportItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoMeasurementReportItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoMeasurementReportItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoMeasurementReportItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoMeasurementReportItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoMeasurementReportItemValidationError) ErrorName() string {
	return "E2SmMhoMeasurementReportItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoMeasurementReportItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoMeasurementReportItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoMeasurementReportItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoMeasurementReportItemValidationError{}

// Validate checks the field values on E2SmMhoIndicationMessageFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoIndicationMessageFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoIndicationMessageFormat2 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmMhoIndicationMessageFormat2MultiError, or nil if none found.
func (m *E2SmMhoIndicationMessageFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoIndicationMessageFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoIndicationMessageFormat2ValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoIndicationMessageFormat2ValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoIndicationMessageFormat2ValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RrcStatus

	if len(errors) > 0 {
		return E2SmMhoIndicationMessageFormat2MultiError(errors)
	}
	return nil
}

// E2SmMhoIndicationMessageFormat2MultiError is an error wrapping multiple
// validation errors returned by E2SmMhoIndicationMessageFormat2.ValidateAll()
// if the designated constraints aren't met.
type E2SmMhoIndicationMessageFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoIndicationMessageFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoIndicationMessageFormat2MultiError) AllErrors() []error { return m }

// E2SmMhoIndicationMessageFormat2ValidationError is the validation error
// returned by E2SmMhoIndicationMessageFormat2.Validate if the designated
// constraints aren't met.
type E2SmMhoIndicationMessageFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoIndicationMessageFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoIndicationMessageFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoIndicationMessageFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoIndicationMessageFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoIndicationMessageFormat2ValidationError) ErrorName() string {
	return "E2SmMhoIndicationMessageFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoIndicationMessageFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoIndicationMessageFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoIndicationMessageFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoIndicationMessageFormat2ValidationError{}

// Validate checks the field values on E2SmMhoControlHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoControlHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoControlHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmMhoControlHeaderMultiError, or nil if none found.
func (m *E2SmMhoControlHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoControlHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmMhoControlHeader.(type) {

	case *E2SmMhoControlHeader_ControlHeaderFormat1:

		if all {
			switch v := interface{}(m.GetControlHeaderFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmMhoControlHeaderValidationError{
						field:  "ControlHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmMhoControlHeaderValidationError{
						field:  "ControlHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetControlHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoControlHeaderValidationError{
					field:  "ControlHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmMhoControlHeaderMultiError(errors)
	}
	return nil
}

// E2SmMhoControlHeaderMultiError is an error wrapping multiple validation
// errors returned by E2SmMhoControlHeader.ValidateAll() if the designated
// constraints aren't met.
type E2SmMhoControlHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoControlHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoControlHeaderMultiError) AllErrors() []error { return m }

// E2SmMhoControlHeaderValidationError is the validation error returned by
// E2SmMhoControlHeader.Validate if the designated constraints aren't met.
type E2SmMhoControlHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoControlHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoControlHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoControlHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoControlHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoControlHeaderValidationError) ErrorName() string {
	return "E2SmMhoControlHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoControlHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoControlHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoControlHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoControlHeaderValidationError{}

// Validate checks the field values on E2SmMhoControlHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoControlHeaderFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoControlHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmMhoControlHeaderFormat1MultiError, or nil if none found.
func (m *E2SmMhoControlHeaderFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoControlHeaderFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RcCommand

	//switch m.XRicControlMessagePriority.(type) {
	//
	//case *E2SmMhoControlHeaderFormat1_RicControlMessagePriority:

	if all {
		switch v := interface{}(m.GetRicControlMessagePriority()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoControlHeaderFormat1ValidationError{
					field:  "RicControlMessagePriority",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoControlHeaderFormat1ValidationError{
					field:  "RicControlMessagePriority",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlMessagePriority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoControlHeaderFormat1ValidationError{
				field:  "RicControlMessagePriority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	//}

	if len(errors) > 0 {
		return E2SmMhoControlHeaderFormat1MultiError(errors)
	}
	return nil
}

// E2SmMhoControlHeaderFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmMhoControlHeaderFormat1.ValidateAll() if
// the designated constraints aren't met.
type E2SmMhoControlHeaderFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoControlHeaderFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoControlHeaderFormat1MultiError) AllErrors() []error { return m }

// E2SmMhoControlHeaderFormat1ValidationError is the validation error returned
// by E2SmMhoControlHeaderFormat1.Validate if the designated constraints
// aren't met.
type E2SmMhoControlHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoControlHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoControlHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoControlHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoControlHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoControlHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmMhoControlHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoControlHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoControlHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoControlHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoControlHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmMhoControlMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoControlMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoControlMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmMhoControlMessageMultiError, or nil if none found.
func (m *E2SmMhoControlMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoControlMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmMhoControlMessage.(type) {

	case *E2SmMhoControlMessage_ControlMessageFormat1:

		if all {
			switch v := interface{}(m.GetControlMessageFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmMhoControlMessageValidationError{
						field:  "ControlMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmMhoControlMessageValidationError{
						field:  "ControlMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetControlMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoControlMessageValidationError{
					field:  "ControlMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmMhoControlMessageMultiError(errors)
	}
	return nil
}

// E2SmMhoControlMessageMultiError is an error wrapping multiple validation
// errors returned by E2SmMhoControlMessage.ValidateAll() if the designated
// constraints aren't met.
type E2SmMhoControlMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoControlMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoControlMessageMultiError) AllErrors() []error { return m }

// E2SmMhoControlMessageValidationError is the validation error returned by
// E2SmMhoControlMessage.Validate if the designated constraints aren't met.
type E2SmMhoControlMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoControlMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoControlMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoControlMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoControlMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoControlMessageValidationError) ErrorName() string {
	return "E2SmMhoControlMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoControlMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoControlMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoControlMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoControlMessageValidationError{}

// Validate checks the field values on E2SmMhoControlMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoControlMessageFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoControlMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmMhoControlMessageFormat1MultiError, or nil if none found.
func (m *E2SmMhoControlMessageFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoControlMessageFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServingCgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoControlMessageFormat1ValidationError{
					field:  "ServingCgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoControlMessageFormat1ValidationError{
					field:  "ServingCgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServingCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoControlMessageFormat1ValidationError{
				field:  "ServingCgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUedId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoControlMessageFormat1ValidationError{
					field:  "UedId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoControlMessageFormat1ValidationError{
					field:  "UedId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUedId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoControlMessageFormat1ValidationError{
				field:  "UedId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetCgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoControlMessageFormat1ValidationError{
					field:  "TargetCgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoControlMessageFormat1ValidationError{
					field:  "TargetCgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoControlMessageFormat1ValidationError{
				field:  "TargetCgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmMhoControlMessageFormat1MultiError(errors)
	}
	return nil
}

// E2SmMhoControlMessageFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmMhoControlMessageFormat1.ValidateAll() if
// the designated constraints aren't met.
type E2SmMhoControlMessageFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoControlMessageFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoControlMessageFormat1MultiError) AllErrors() []error { return m }

// E2SmMhoControlMessageFormat1ValidationError is the validation error returned
// by E2SmMhoControlMessageFormat1.Validate if the designated constraints
// aren't met.
type E2SmMhoControlMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoControlMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoControlMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoControlMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoControlMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoControlMessageFormat1ValidationError) ErrorName() string {
	return "E2SmMhoControlMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoControlMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoControlMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoControlMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoControlMessageFormat1ValidationError{}

// Validate checks the field values on E2SmMhoRanfunctionDescription with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoRanfunctionDescription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmMhoRanfunctionDescription with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmMhoRanfunctionDescriptionMultiError, or nil if none found.
func (m *E2SmMhoRanfunctionDescription) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoRanfunctionDescription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanFunctionName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoRanfunctionDescriptionValidationError{
					field:  "RanFunctionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoRanfunctionDescriptionValidationError{
					field:  "RanFunctionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoRanfunctionDescriptionValidationError{
				field:  "RanFunctionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2SmMhoRanfunctionItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmMhoRanfunctionDescriptionValidationError{
					field:  "E2SmMhoRanfunctionItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmMhoRanfunctionDescriptionValidationError{
					field:  "E2SmMhoRanfunctionItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2SmMhoRanfunctionItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoRanfunctionDescriptionValidationError{
				field:  "E2SmMhoRanfunctionItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmMhoRanfunctionDescriptionMultiError(errors)
	}
	return nil
}

// E2SmMhoRanfunctionDescriptionMultiError is an error wrapping multiple
// validation errors returned by E2SmMhoRanfunctionDescription.ValidateAll()
// if the designated constraints aren't met.
type E2SmMhoRanfunctionDescriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoRanfunctionDescriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoRanfunctionDescriptionMultiError) AllErrors() []error { return m }

// E2SmMhoRanfunctionDescriptionValidationError is the validation error
// returned by E2SmMhoRanfunctionDescription.Validate if the designated
// constraints aren't met.
type E2SmMhoRanfunctionDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoRanfunctionDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoRanfunctionDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoRanfunctionDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoRanfunctionDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoRanfunctionDescriptionValidationError) ErrorName() string {
	return "E2SmMhoRanfunctionDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoRanfunctionDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoRanfunctionDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoRanfunctionDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoRanfunctionDescriptionValidationError{}

// Validate checks the field values on RicEventTriggerStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicEventTriggerStyleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicEventTriggerStyleList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicEventTriggerStyleListMultiError, or nil if none found.
func (m *RicEventTriggerStyleList) ValidateAll() error {
	return m.validate(true)
}

func (m *RicEventTriggerStyleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicEventTriggerStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicEventTriggerStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicEventTriggerFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicEventTriggerStyleListMultiError(errors)
	}
	return nil
}

// RicEventTriggerStyleListMultiError is an error wrapping multiple validation
// errors returned by RicEventTriggerStyleList.ValidateAll() if the designated
// constraints aren't met.
type RicEventTriggerStyleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicEventTriggerStyleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicEventTriggerStyleListMultiError) AllErrors() []error { return m }

// RicEventTriggerStyleListValidationError is the validation error returned by
// RicEventTriggerStyleList.Validate if the designated constraints aren't met.
type RicEventTriggerStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerStyleListValidationError) ErrorName() string {
	return "RicEventTriggerStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerStyleListValidationError{}

// Validate checks the field values on RicReportStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicReportStyleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicReportStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicReportStyleListMultiError, or nil if none found.
func (m *RicReportStyleList) ValidateAll() error {
	return m.validate(true)
}

func (m *RicReportStyleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicReportStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicReportStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicReportStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicReportStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicIndicationHeaderFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicIndicationMessageFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicReportStyleListMultiError(errors)
	}
	return nil
}

// RicReportStyleListMultiError is an error wrapping multiple validation errors
// returned by RicReportStyleList.ValidateAll() if the designated constraints
// aren't met.
type RicReportStyleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicReportStyleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicReportStyleListMultiError) AllErrors() []error { return m }

// RicReportStyleListValidationError is the validation error returned by
// RicReportStyleList.Validate if the designated constraints aren't met.
type RicReportStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicReportStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicReportStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicReportStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicReportStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicReportStyleListValidationError) ErrorName() string {
	return "RicReportStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicReportStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicReportStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicReportStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicReportStyleListValidationError{}

// Validate checks the field values on
// E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001MultiError, or nil
// if none found.
func (m *E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetRicEventTriggerStyleList()) > 63 {
		err := E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError{
			field:  "RicEventTriggerStyleList",
			reason: "value must contain no more than 63 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicEventTriggerStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError{
					field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetRicReportStyleList()) > 63 {
		err := E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError{
			field:  "RicReportStyleList",
			reason: "value must contain no more than 63 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicReportStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError{
					field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001MultiError(errors)
	}
	return nil
}

// E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001MultiError is an
// error wrapping multiple validation errors returned by
// E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001.ValidateAll() if
// the designated constraints aren't met.
type E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001MultiError) AllErrors() []error {
	return m
}

// E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError is
// the validation error returned by
// E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001.Validate if the
// designated constraints aren't met.
type E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError) ErrorName() string {
	return "E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoRanfunctionDescription_E2SmMhoRanfunctionItem001ValidationError{}
