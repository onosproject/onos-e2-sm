// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_ni/v1beta1/e2sm_ni_ies.proto

package e2smniies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _e_2_sm_ni_ies_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GlobalEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalEnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "ENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalEnbIdValidationError is the validation error returned by
// GlobalEnbId.Validate if the designated constraints aren't met.
type GlobalEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalEnbIdValidationError) ErrorName() string { return "GlobalEnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalEnbIdValidationError{}

// Validate checks the field values on EnbId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EnbId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EnbId.(type) {

	case *EnbId_MacroENbId:

		if len(m.GetMacroENbId()) != 3 {
			return EnbIdValidationError{
				field:  "MacroENbId",
				reason: "value length must be 3 bytes",
			}
		}

	case *EnbId_HomeENbId:

		if len(m.GetHomeENbId()) != 4 {
			return EnbIdValidationError{
				field:  "HomeENbId",
				reason: "value length must be 4 bytes",
			}
		}

	case *EnbId_ShortMacroENbId:

		if len(m.GetShortMacroENbId()) != 3 {
			return EnbIdValidationError{
				field:  "ShortMacroENbId",
				reason: "value length must be 3 bytes",
			}
		}

	case *EnbId_LongMacroENbId:

		if len(m.GetLongMacroENbId()) != 3 {
			return EnbIdValidationError{
				field:  "LongMacroENbId",
				reason: "value length must be 3 bytes",
			}
		}

	}

	return nil
}

// EnbIdValidationError is the validation error returned by EnbId.Validate if
// the designated constraints aren't met.
type EnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdValidationError) ErrorName() string { return "EnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdValidationError{}

// Validate checks the field values on GlobalenGnbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalenGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "GNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalenGnbIdValidationError is the validation error returned by
// GlobalenGnbId.Validate if the designated constraints aren't met.
type GlobalenGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalenGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalenGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalenGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalenGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalenGnbIdValidationError) ErrorName() string { return "GlobalenGnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalenGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalenGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalenGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalenGnbIdValidationError{}

// Validate checks the field values on EngnbId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EngnbId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EngnbId.(type) {

	case *EngnbId_GNbId:

		if len(m.GetGNbId()) != 4 {
			return EngnbIdValidationError{
				field:  "GNbId",
				reason: "value length must be 4 bytes",
			}
		}

	}

	return nil
}

// EngnbIdValidationError is the validation error returned by EngnbId.Validate
// if the designated constraints aren't met.
type EngnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EngnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EngnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EngnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EngnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EngnbIdValidationError) ErrorName() string { return "EngnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EngnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEngnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EngnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EngnbIdValidationError{}

// Validate checks the field values on GnbCuUpId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GnbCuUpId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		return GnbCuUpIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
	}

	return nil
}

// GnbCuUpIdValidationError is the validation error returned by
// GnbCuUpId.Validate if the designated constraints aren't met.
type GnbCuUpIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUpIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUpIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUpIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUpIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUpIdValidationError) ErrorName() string { return "GnbCuUpIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUpIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUpId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUpIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUpIdValidationError{}

// Validate checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GnbDuId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		return GnbDuIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
	}

	return nil
}

// GnbDuIdValidationError is the validation error returned by GnbDuId.Validate
// if the designated constraints aren't met.
type GnbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDuIdValidationError) ErrorName() string { return "GnbDuIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDuIdValidationError{}

// Validate checks the field values on GlobalgNbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalgNbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "GnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalgNbIdValidationError is the validation error returned by
// GlobalgNbId.Validate if the designated constraints aren't met.
type GlobalgNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalgNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalgNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalgNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalgNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalgNbIdValidationError) ErrorName() string { return "GlobalgNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalgNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalgNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalgNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalgNbIdValidationError{}

// Validate checks the field values on GnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GnbIdChoice) Validate() error {
	if m == nil {
		return nil
	}

	switch m.GnbIdChoice.(type) {

	case *GnbIdChoice_GnbId:

		if len(m.GetGnbId()) != 4 {
			return GnbIdChoiceValidationError{
				field:  "GnbId",
				reason: "value length must be 4 bytes",
			}
		}

	}

	return nil
}

// GnbIdChoiceValidationError is the validation error returned by
// GnbIdChoice.Validate if the designated constraints aren't met.
type GnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbIdChoiceValidationError) ErrorName() string { return "GnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e GnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbIdChoiceValidationError{}

// Validate checks the field values on GlobalngeNbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalngeNbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "EnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalngeNbIdValidationError is the validation error returned by
// GlobalngeNbId.Validate if the designated constraints aren't met.
type GlobalngeNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalngeNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalngeNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalngeNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalngeNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalngeNbIdValidationError) ErrorName() string { return "GlobalngeNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalngeNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalngeNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalngeNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalngeNbIdValidationError{}

// Validate checks the field values on EnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnbIdChoice) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EnbIdChoice.(type) {

	case *EnbIdChoice_EnbIdMacro:

		if len(m.GetEnbIdMacro()) != 3 {
			return EnbIdChoiceValidationError{
				field:  "EnbIdMacro",
				reason: "value length must be 3 bytes",
			}
		}

	case *EnbIdChoice_EnbIdShortmacro:

		if len(m.GetEnbIdShortmacro()) != 3 {
			return EnbIdChoiceValidationError{
				field:  "EnbIdShortmacro",
				reason: "value length must be 3 bytes",
			}
		}

	case *EnbIdChoice_EnbIdLongmacro:

		if len(m.GetEnbIdLongmacro()) != 3 {
			return EnbIdChoiceValidationError{
				field:  "EnbIdLongmacro",
				reason: "value length must be 3 bytes",
			}
		}

	}

	return nil
}

// EnbIdChoiceValidationError is the validation error returned by
// EnbIdChoice.Validate if the designated constraints aren't met.
type EnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdChoiceValidationError) ErrorName() string { return "EnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdChoiceValidationError{}

// Validate checks the field values on GlobalNgRannodeId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GlobalNgRannodeId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.GlobalNgRannodeId.(type) {

	case *GlobalNgRannodeId_GNb:

		if v, ok := interface{}(m.GetGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalNgRannodeIdValidationError{
					field:  "GNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalNgRannodeId_NgENb:

		if v, ok := interface{}(m.GetNgENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalNgRannodeIdValidationError{
					field:  "NgENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GlobalNgRannodeIdValidationError is the validation error returned by
// GlobalNgRannodeId.Validate if the designated constraints aren't met.
type GlobalNgRannodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalNgRannodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalNgRannodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalNgRannodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalNgRannodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalNgRannodeIdValidationError) ErrorName() string {
	return "GlobalNgRannodeIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalNgRannodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalNgRannodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalNgRannodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalNgRannodeIdValidationError{}

// Validate checks the field values on MaxProtocolIes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxProtocolIes) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 65535 {
		return MaxProtocolIesValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
	}

	return nil
}

// MaxProtocolIesValidationError is the validation error returned by
// MaxProtocolIes.Validate if the designated constraints aren't met.
type MaxProtocolIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxProtocolIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxProtocolIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxProtocolIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxProtocolIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxProtocolIesValidationError) ErrorName() string { return "MaxProtocolIesValidationError" }

// Error satisfies the builtin error interface
func (e MaxProtocolIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxProtocolIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxProtocolIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxProtocolIesValidationError{}

// Validate checks the field values on ProcedureCode with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProcedureCode) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 255 {
		return ProcedureCodeValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
	}

	return nil
}

// ProcedureCodeValidationError is the validation error returned by
// ProcedureCode.Validate if the designated constraints aren't met.
type ProcedureCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcedureCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcedureCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcedureCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcedureCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcedureCodeValidationError) ErrorName() string { return "ProcedureCodeValidationError" }

// Error satisfies the builtin error interface
func (e ProcedureCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcedureCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcedureCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcedureCodeValidationError{}

// Validate checks the field values on ProtocolIeId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProtocolIeId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 65535 {
		return ProtocolIeIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 65535]",
		}
	}

	return nil
}

// ProtocolIeIdValidationError is the validation error returned by
// ProtocolIeId.Validate if the designated constraints aren't met.
type ProtocolIeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtocolIeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtocolIeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtocolIeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtocolIeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtocolIeIdValidationError) ErrorName() string { return "ProtocolIeIdValidationError" }

// Error satisfies the builtin error interface
func (e ProtocolIeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtocolIeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtocolIeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtocolIeIdValidationError{}

// Validate checks the field values on MaxofInterfaceProtocolTests with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxofInterfaceProtocolTests) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 15 {
		return MaxofInterfaceProtocolTestsValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
	}

	return nil
}

// MaxofInterfaceProtocolTestsValidationError is the validation error returned
// by MaxofInterfaceProtocolTests.Validate if the designated constraints
// aren't met.
type MaxofInterfaceProtocolTestsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofInterfaceProtocolTestsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofInterfaceProtocolTestsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofInterfaceProtocolTestsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofInterfaceProtocolTestsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofInterfaceProtocolTestsValidationError) ErrorName() string {
	return "MaxofInterfaceProtocolTestsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofInterfaceProtocolTestsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofInterfaceProtocolTests.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofInterfaceProtocolTestsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofInterfaceProtocolTestsValidationError{}

// Validate checks the field values on MaxofRanueGroups with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MaxofRanueGroups) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 255 {
		return MaxofRanueGroupsValidationError{
			field:  "Value",
			reason: "value must equal 255",
		}
	}

	return nil
}

// MaxofRanueGroupsValidationError is the validation error returned by
// MaxofRanueGroups.Validate if the designated constraints aren't met.
type MaxofRanueGroupsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRanueGroupsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRanueGroupsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRanueGroupsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRanueGroupsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRanueGroupsValidationError) ErrorName() string { return "MaxofRanueGroupsValidationError" }

// Error satisfies the builtin error interface
func (e MaxofRanueGroupsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRanueGroups.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRanueGroupsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRanueGroupsValidationError{}

// Validate checks the field values on MaxofActionParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxofActionParameters) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 255 {
		return MaxofActionParametersValidationError{
			field:  "Value",
			reason: "value must equal 255",
		}
	}

	return nil
}

// MaxofActionParametersValidationError is the validation error returned by
// MaxofActionParameters.Validate if the designated constraints aren't met.
type MaxofActionParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofActionParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofActionParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofActionParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofActionParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofActionParametersValidationError) ErrorName() string {
	return "MaxofActionParametersValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofActionParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofActionParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofActionParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofActionParametersValidationError{}

// Validate checks the field values on MaxofRanparameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxofRanparameters) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 65535 {
		return MaxofRanparametersValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
	}

	return nil
}

// MaxofRanparametersValidationError is the validation error returned by
// MaxofRanparameters.Validate if the designated constraints aren't met.
type MaxofRanparametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRanparametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRanparametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRanparametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRanparametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRanparametersValidationError) ErrorName() string {
	return "MaxofRanparametersValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofRanparametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRanparameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRanparametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRanparametersValidationError{}

// Validate checks the field values on MaxofNitypes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxofNitypes) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 63 {
		return MaxofNitypesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
	}

	return nil
}

// MaxofNitypesValidationError is the validation error returned by
// MaxofNitypes.Validate if the designated constraints aren't met.
type MaxofNitypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofNitypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofNitypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofNitypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofNitypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofNitypesValidationError) ErrorName() string { return "MaxofNitypesValidationError" }

// Error satisfies the builtin error interface
func (e MaxofNitypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofNitypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofNitypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofNitypesValidationError{}

// Validate checks the field values on MaxofRicstyles with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxofRicstyles) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 63 {
		return MaxofRicstylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
	}

	return nil
}

// MaxofRicstylesValidationError is the validation error returned by
// MaxofRicstyles.Validate if the designated constraints aren't met.
type MaxofRicstylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRicstylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRicstylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRicstylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRicstylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRicstylesValidationError) ErrorName() string { return "MaxofRicstylesValidationError" }

// Error satisfies the builtin error interface
func (e MaxofRicstylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRicstyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRicstylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRicstylesValidationError{}

// Validate checks the field values on E2SmNiEventTriggerDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiEventTriggerDefinition) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmNiEventTriggerDefinition.(type) {

	case *E2SmNiEventTriggerDefinition_EventDefinitionFormat1:

		if v, ok := interface{}(m.GetEventDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiEventTriggerDefinitionValidationError{
					field:  "EventDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiEventTriggerDefinitionValidationError is the validation error returned
// by E2SmNiEventTriggerDefinition.Validate if the designated constraints
// aren't met.
type E2SmNiEventTriggerDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiEventTriggerDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiEventTriggerDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiEventTriggerDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiEventTriggerDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiEventTriggerDefinitionValidationError) ErrorName() string {
	return "E2SmNiEventTriggerDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiEventTriggerDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiEventTriggerDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiEventTriggerDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiEventTriggerDefinitionValidationError{}

// Validate checks the field values on E2SmNiEventTriggerDefinitionFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *E2SmNiEventTriggerDefinitionFormat1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InterfaceType

	if v, ok := interface{}(m.GetInterfaceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiEventTriggerDefinitionFormat1ValidationError{
				field:  "InterfaceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InterfaceDirection

	if v, ok := interface{}(m.GetInterfaceMessageType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiEventTriggerDefinitionFormat1ValidationError{
				field:  "InterfaceMessageType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetInterfaceProtocolIeList()); l < 1 || l > 15 {
		return E2SmNiEventTriggerDefinitionFormat1ValidationError{
			field:  "InterfaceProtocolIeList",
			reason: "value must contain between 1 and 15 items, inclusive",
		}
	}

	for idx, item := range m.GetInterfaceProtocolIeList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiEventTriggerDefinitionFormat1ValidationError{
					field:  fmt.Sprintf("InterfaceProtocolIeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiEventTriggerDefinitionFormat1ValidationError is the validation error
// returned by E2SmNiEventTriggerDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmNiEventTriggerDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiEventTriggerDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiEventTriggerDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiEventTriggerDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiEventTriggerDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiEventTriggerDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmNiEventTriggerDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiEventTriggerDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiEventTriggerDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiEventTriggerDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiEventTriggerDefinitionFormat1ValidationError{}

// Validate checks the field values on E2SmNiActionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiActionDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiActionDefinitionValidationError{
				field:  "RicStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetActionDefinitionFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiActionDefinitionValidationError{
				field:  "ActionDefinitionFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmNiActionDefinitionValidationError is the validation error returned by
// E2SmNiActionDefinition.Validate if the designated constraints aren't met.
type E2SmNiActionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiActionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiActionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiActionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiActionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiActionDefinitionValidationError) ErrorName() string {
	return "E2SmNiActionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiActionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiActionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiActionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiActionDefinitionValidationError{}

// Validate checks the field values on E2SmNiActionDefinitionFormat with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiActionDefinitionFormat) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmNiActionDefinitionFormat.(type) {

	case *E2SmNiActionDefinitionFormat_ActionDefinitionFormat1:

		if v, ok := interface{}(m.GetActionDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiActionDefinitionFormatValidationError{
					field:  "ActionDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmNiActionDefinitionFormat_ActionDefinitionFormat2:

		if v, ok := interface{}(m.GetActionDefinitionFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiActionDefinitionFormatValidationError{
					field:  "ActionDefinitionFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiActionDefinitionFormatValidationError is the validation error returned
// by E2SmNiActionDefinitionFormat.Validate if the designated constraints
// aren't met.
type E2SmNiActionDefinitionFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiActionDefinitionFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiActionDefinitionFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiActionDefinitionFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiActionDefinitionFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiActionDefinitionFormatValidationError) ErrorName() string {
	return "E2SmNiActionDefinitionFormatValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiActionDefinitionFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiActionDefinitionFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiActionDefinitionFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiActionDefinitionFormatValidationError{}

// Validate checks the field values on E2SmNiActionDefinitionFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiActionDefinitionFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetActionParameterList()); l < 1 || l > 255 {
		return E2SmNiActionDefinitionFormat1ValidationError{
			field:  "ActionParameterList",
			reason: "value must contain between 1 and 255 items, inclusive",
		}
	}

	for idx, item := range m.GetActionParameterList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiActionDefinitionFormat1ValidationError{
					field:  fmt.Sprintf("ActionParameterList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiActionDefinitionFormat1ValidationError is the validation error
// returned by E2SmNiActionDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmNiActionDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiActionDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiActionDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiActionDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiActionDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiActionDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmNiActionDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiActionDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiActionDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiActionDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiActionDefinitionFormat1ValidationError{}

// Validate checks the field values on E2SmNiActionDefinitionFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiActionDefinitionFormat2) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetRanUegroupList()); l < 1 || l > 255 {
		return E2SmNiActionDefinitionFormat2ValidationError{
			field:  "RanUegroupList",
			reason: "value must contain between 1 and 255 items, inclusive",
		}
	}

	for idx, item := range m.GetRanUegroupList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiActionDefinitionFormat2ValidationError{
					field:  fmt.Sprintf("RanUegroupList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiActionDefinitionFormat2ValidationError is the validation error
// returned by E2SmNiActionDefinitionFormat2.Validate if the designated
// constraints aren't met.
type E2SmNiActionDefinitionFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiActionDefinitionFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiActionDefinitionFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiActionDefinitionFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiActionDefinitionFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiActionDefinitionFormat2ValidationError) ErrorName() string {
	return "E2SmNiActionDefinitionFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiActionDefinitionFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiActionDefinitionFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiActionDefinitionFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiActionDefinitionFormat2ValidationError{}

// Validate checks the field values on E2SmNiIndicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiIndicationHeader) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmNiIndicationHeader.(type) {

	case *E2SmNiIndicationHeader_IndicationHeaderFormat1:

		if v, ok := interface{}(m.GetIndicationHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiIndicationHeaderValidationError{
					field:  "IndicationHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiIndicationHeaderValidationError is the validation error returned by
// E2SmNiIndicationHeader.Validate if the designated constraints aren't met.
type E2SmNiIndicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiIndicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiIndicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiIndicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiIndicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiIndicationHeaderValidationError) ErrorName() string {
	return "E2SmNiIndicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiIndicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiIndicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiIndicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiIndicationHeaderValidationError{}

// Validate checks the field values on E2SmNiIndicationHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiIndicationHeaderFormat1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InterfaceType

	if v, ok := interface{}(m.GetInterfaceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiIndicationHeaderFormat1ValidationError{
				field:  "InterfaceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InterfaceDirection

	if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiIndicationHeaderFormat1ValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmNiIndicationHeaderFormat1ValidationError is the validation error
// returned by E2SmNiIndicationHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmNiIndicationHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiIndicationHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiIndicationHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiIndicationHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiIndicationHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiIndicationHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmNiIndicationHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiIndicationHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiIndicationHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiIndicationHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiIndicationHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmNiIndicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiIndicationMessage) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmNiIndicationMessage.(type) {

	case *E2SmNiIndicationMessage_IndicationMessageFormat1:

		if v, ok := interface{}(m.GetIndicationMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiIndicationMessageValidationError{
					field:  "IndicationMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiIndicationMessageValidationError is the validation error returned by
// E2SmNiIndicationMessage.Validate if the designated constraints aren't met.
type E2SmNiIndicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiIndicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiIndicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiIndicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiIndicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiIndicationMessageValidationError) ErrorName() string {
	return "E2SmNiIndicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiIndicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiIndicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiIndicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiIndicationMessageValidationError{}

// Validate checks the field values on E2SmNiIndicationMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiIndicationMessageFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInterfaceMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiIndicationMessageFormat1ValidationError{
				field:  "InterfaceMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmNiIndicationMessageFormat1ValidationError is the validation error
// returned by E2SmNiIndicationMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmNiIndicationMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiIndicationMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiIndicationMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiIndicationMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiIndicationMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiIndicationMessageFormat1ValidationError) ErrorName() string {
	return "E2SmNiIndicationMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiIndicationMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiIndicationMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiIndicationMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiIndicationMessageFormat1ValidationError{}

// Validate checks the field values on E2SmNiCallProcessId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiCallProcessId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmNiCallProcessId.(type) {

	case *E2SmNiCallProcessId_CallProcessIdFormat1:

		if v, ok := interface{}(m.GetCallProcessIdFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiCallProcessIdValidationError{
					field:  "CallProcessIdFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmNiCallProcessId_CallProcessIdFormat2:

		if v, ok := interface{}(m.GetCallProcessIdFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiCallProcessIdValidationError{
					field:  "CallProcessIdFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiCallProcessIdValidationError is the validation error returned by
// E2SmNiCallProcessId.Validate if the designated constraints aren't met.
type E2SmNiCallProcessIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiCallProcessIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiCallProcessIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiCallProcessIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiCallProcessIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiCallProcessIdValidationError) ErrorName() string {
	return "E2SmNiCallProcessIdValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiCallProcessIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiCallProcessId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiCallProcessIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiCallProcessIdValidationError{}

// Validate checks the field values on E2SmNiCallProcessIdFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiCallProcessIdFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCallProcessId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiCallProcessIdFormat1ValidationError{
				field:  "CallProcessId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmNiCallProcessIdFormat1ValidationError is the validation error returned
// by E2SmNiCallProcessIdFormat1.Validate if the designated constraints aren't met.
type E2SmNiCallProcessIdFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiCallProcessIdFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiCallProcessIdFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiCallProcessIdFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiCallProcessIdFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiCallProcessIdFormat1ValidationError) ErrorName() string {
	return "E2SmNiCallProcessIdFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiCallProcessIdFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiCallProcessIdFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiCallProcessIdFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiCallProcessIdFormat1ValidationError{}

// Validate checks the field values on E2SmNiCallProcessIdFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiCallProcessIdFormat2) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCallProcessId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiCallProcessIdFormat2ValidationError{
				field:  "CallProcessId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmNiCallProcessIdFormat2ValidationError is the validation error returned
// by E2SmNiCallProcessIdFormat2.Validate if the designated constraints aren't met.
type E2SmNiCallProcessIdFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiCallProcessIdFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiCallProcessIdFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiCallProcessIdFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiCallProcessIdFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiCallProcessIdFormat2ValidationError) ErrorName() string {
	return "E2SmNiCallProcessIdFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiCallProcessIdFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiCallProcessIdFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiCallProcessIdFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiCallProcessIdFormat2ValidationError{}

// Validate checks the field values on E2SmNiControlHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiControlHeader) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmNiControlHeader.(type) {

	case *E2SmNiControlHeader_ControlHeaderFormat1:

		if v, ok := interface{}(m.GetControlHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiControlHeaderValidationError{
					field:  "ControlHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiControlHeaderValidationError is the validation error returned by
// E2SmNiControlHeader.Validate if the designated constraints aren't met.
type E2SmNiControlHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiControlHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiControlHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiControlHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiControlHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiControlHeaderValidationError) ErrorName() string {
	return "E2SmNiControlHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiControlHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiControlHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiControlHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiControlHeaderValidationError{}

// Validate checks the field values on E2SmNiControlHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiControlHeaderFormat1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InterfaceType

	if v, ok := interface{}(m.GetInterfaceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiControlHeaderFormat1ValidationError{
				field:  "InterfaceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InterfaceDirection

	if v, ok := interface{}(m.GetRicControlMessagePriority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiControlHeaderFormat1ValidationError{
				field:  "RicControlMessagePriority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmNiControlHeaderFormat1ValidationError is the validation error returned
// by E2SmNiControlHeaderFormat1.Validate if the designated constraints aren't met.
type E2SmNiControlHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiControlHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiControlHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiControlHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiControlHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiControlHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmNiControlHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiControlHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiControlHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiControlHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiControlHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmNiControlMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiControlMessage) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmNiControlMessage.(type) {

	case *E2SmNiControlMessage_ControlMessageFormat1:

		if v, ok := interface{}(m.GetControlMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiControlMessageValidationError{
					field:  "ControlMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiControlMessageValidationError is the validation error returned by
// E2SmNiControlMessage.Validate if the designated constraints aren't met.
type E2SmNiControlMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiControlMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiControlMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiControlMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiControlMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiControlMessageValidationError) ErrorName() string {
	return "E2SmNiControlMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiControlMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiControlMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiControlMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiControlMessageValidationError{}

// Validate checks the field values on E2SmNiControlMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiControlMessageFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInterfaceMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiControlMessageFormat1ValidationError{
				field:  "InterfaceMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmNiControlMessageFormat1ValidationError is the validation error returned
// by E2SmNiControlMessageFormat1.Validate if the designated constraints
// aren't met.
type E2SmNiControlMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiControlMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiControlMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiControlMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiControlMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiControlMessageFormat1ValidationError) ErrorName() string {
	return "E2SmNiControlMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiControlMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiControlMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiControlMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiControlMessageFormat1ValidationError{}

// Validate checks the field values on E2SmNiControlOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiControlOutcome) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmNiControlOutcome.(type) {

	case *E2SmNiControlOutcome_ControlOutcomeFormat1:

		if v, ok := interface{}(m.GetControlOutcomeFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiControlOutcomeValidationError{
					field:  "ControlOutcomeFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiControlOutcomeValidationError is the validation error returned by
// E2SmNiControlOutcome.Validate if the designated constraints aren't met.
type E2SmNiControlOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiControlOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiControlOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiControlOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiControlOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiControlOutcomeValidationError) ErrorName() string {
	return "E2SmNiControlOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiControlOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiControlOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiControlOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiControlOutcomeValidationError{}

// Validate checks the field values on E2SmNiControlOutcomeFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiControlOutcomeFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetOutcomeElementList()); l < 1 || l > 65535 {
		return E2SmNiControlOutcomeFormat1ValidationError{
			field:  "OutcomeElementList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
	}

	for idx, item := range m.GetOutcomeElementList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiControlOutcomeFormat1ValidationError{
					field:  fmt.Sprintf("OutcomeElementList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiControlOutcomeFormat1ValidationError is the validation error returned
// by E2SmNiControlOutcomeFormat1.Validate if the designated constraints
// aren't met.
type E2SmNiControlOutcomeFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiControlOutcomeFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiControlOutcomeFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiControlOutcomeFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiControlOutcomeFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiControlOutcomeFormat1ValidationError) ErrorName() string {
	return "E2SmNiControlOutcomeFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiControlOutcomeFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiControlOutcomeFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiControlOutcomeFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiControlOutcomeFormat1ValidationError{}

// Validate checks the field values on E2SmNiRanfunctionDescription with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiRanfunctionDescription) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanFunctionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmNiRanfunctionDescriptionValidationError{
				field:  "RanFunctionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetNiTypeList()); l < 1 || l > 63 {
		return E2SmNiRanfunctionDescriptionValidationError{
			field:  "NiTypeList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
	}

	for idx, item := range m.GetNiTypeList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiRanfunctionDescriptionValidationError{
					field:  fmt.Sprintf("NiTypeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiRanfunctionDescriptionValidationError is the validation error returned
// by E2SmNiRanfunctionDescription.Validate if the designated constraints
// aren't met.
type E2SmNiRanfunctionDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiRanfunctionDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiRanfunctionDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiRanfunctionDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiRanfunctionDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiRanfunctionDescriptionValidationError) ErrorName() string {
	return "E2SmNiRanfunctionDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiRanfunctionDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiRanfunctionDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiRanfunctionDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiRanfunctionDescriptionValidationError{}

// Validate checks the field values on E2SmNiRanfunctionItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmNiRanfunctionItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InterfaceType

	if l := len(m.GetRicEventTriggerStyleList()); l < 1 || l > 63 {
		return E2SmNiRanfunctionItemValidationError{
			field:  "RicEventTriggerStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
	}

	for idx, item := range m.GetRicEventTriggerStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiRanfunctionItemValidationError{
					field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := len(m.GetRicReportStyleList()); l < 1 || l > 63 {
		return E2SmNiRanfunctionItemValidationError{
			field:  "RicReportStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
	}

	for idx, item := range m.GetRicReportStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiRanfunctionItemValidationError{
					field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := len(m.GetRicInsertStyleList()); l < 1 || l > 63 {
		return E2SmNiRanfunctionItemValidationError{
			field:  "RicInsertStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
	}

	for idx, item := range m.GetRicInsertStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiRanfunctionItemValidationError{
					field:  fmt.Sprintf("RicInsertStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := len(m.GetRicControlStyleList()); l < 1 || l > 63 {
		return E2SmNiRanfunctionItemValidationError{
			field:  "RicControlStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
	}

	for idx, item := range m.GetRicControlStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiRanfunctionItemValidationError{
					field:  fmt.Sprintf("RicControlStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := len(m.GetRicPolicyStyleList()); l < 1 || l > 63 {
		return E2SmNiRanfunctionItemValidationError{
			field:  "RicPolicyStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
	}

	for idx, item := range m.GetRicPolicyStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmNiRanfunctionItemValidationError{
					field:  fmt.Sprintf("RicPolicyStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmNiRanfunctionItemValidationError is the validation error returned by
// E2SmNiRanfunctionItem.Validate if the designated constraints aren't met.
type E2SmNiRanfunctionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmNiRanfunctionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmNiRanfunctionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmNiRanfunctionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmNiRanfunctionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmNiRanfunctionItemValidationError) ErrorName() string {
	return "E2SmNiRanfunctionItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmNiRanfunctionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmNiRanfunctionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmNiRanfunctionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmNiRanfunctionItemValidationError{}

// Validate checks the field values on GlobalEnGnbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalEnGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnGnbIdValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalEnGnbIdValidationError is the validation error returned by
// GlobalEnGnbId.Validate if the designated constraints aren't met.
type GlobalEnGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalEnGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalEnGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalEnGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalEnGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalEnGnbIdValidationError) ErrorName() string { return "GlobalEnGnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalEnGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalEnGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalEnGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalEnGnbIdValidationError{}

// Validate checks the field values on GlobalGnbDuId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalGnbDuId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalNgRanId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalGnbDuIdValidationError{
				field:  "GlobalNgRanId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalGnbDuIdValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalGnbDuIdValidationError is the validation error returned by
// GlobalGnbDuId.Validate if the designated constraints aren't met.
type GlobalGnbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalGnbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalGnbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalGnbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalGnbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalGnbDuIdValidationError) ErrorName() string { return "GlobalGnbDuIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalGnbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalGnbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalGnbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalGnbDuIdValidationError{}

// Validate checks the field values on GlobalGnbCuUpId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GlobalGnbCuUpId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalNgRanId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalGnbCuUpIdValidationError{
				field:  "GlobalNgRanId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalGnbCuUpIdValidationError{
				field:  "GNbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalGnbCuUpIdValidationError is the validation error returned by
// GlobalGnbCuUpId.Validate if the designated constraints aren't met.
type GlobalGnbCuUpIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalGnbCuUpIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalGnbCuUpIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalGnbCuUpIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalGnbCuUpIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalGnbCuUpIdValidationError) ErrorName() string { return "GlobalGnbCuUpIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalGnbCuUpIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalGnbCuUpId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalGnbCuUpIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalGnbCuUpIdValidationError{}

// Validate checks the field values on GlobalNgRanId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalNgRanId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalNgRanIdValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalNgRanIdValidationError is the validation error returned by
// GlobalNgRanId.Validate if the designated constraints aren't met.
type GlobalNgRanIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalNgRanIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalNgRanIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalNgRanIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalNgRanIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalNgRanIdValidationError) ErrorName() string { return "GlobalNgRanIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalNgRanIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalNgRanId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalNgRanIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalNgRanIdValidationError{}

// Validate checks the field values on NiIdentifier with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NiIdentifier) Validate() error {
	if m == nil {
		return nil
	}

	switch m.NiIdentifier.(type) {

	case *NiIdentifier_GlobalENbId:

		if v, ok := interface{}(m.GetGlobalENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiIdentifierValidationError{
					field:  "GlobalENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NiIdentifier_GlobalEnGNbId:

		if v, ok := interface{}(m.GetGlobalEnGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiIdentifierValidationError{
					field:  "GlobalEnGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NiIdentifier_GlobalNgRanId:

		if v, ok := interface{}(m.GetGlobalNgRanId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiIdentifierValidationError{
					field:  "GlobalNgRanId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NiIdentifier_GlobalGNbDuId:

		if v, ok := interface{}(m.GetGlobalGNbDuId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiIdentifierValidationError{
					field:  "GlobalGNbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NiIdentifier_GlobalGNbCuUpId:

		if v, ok := interface{}(m.GetGlobalGNbCuUpId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiIdentifierValidationError{
					field:  "GlobalGNbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NiIdentifierValidationError is the validation error returned by
// NiIdentifier.Validate if the designated constraints aren't met.
type NiIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiIdentifierValidationError) ErrorName() string { return "NiIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e NiIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiIdentifierValidationError{}

// Validate checks the field values on NiMessageType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NiMessageType) Validate() error {
	if m == nil {
		return nil
	}

	switch m.NiMessageType.(type) {

	case *NiMessageType_S1MessageType:

		if v, ok := interface{}(m.GetS1MessageType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiMessageTypeValidationError{
					field:  "S1MessageType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NiMessageType_X2MessageType:

		if v, ok := interface{}(m.GetX2MessageType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiMessageTypeValidationError{
					field:  "X2MessageType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NiMessageType_NgMessageType:

		if v, ok := interface{}(m.GetNgMessageType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiMessageTypeValidationError{
					field:  "NgMessageType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NiMessageType_XnMessageType:

		if v, ok := interface{}(m.GetXnMessageType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiMessageTypeValidationError{
					field:  "XnMessageType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NiMessageType_F1MessageType:

		if v, ok := interface{}(m.GetF1MessageType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiMessageTypeValidationError{
					field:  "F1MessageType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NiMessageType_E1MessageType:

		if v, ok := interface{}(m.GetE1MessageType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NiMessageTypeValidationError{
					field:  "E1MessageType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NiMessageTypeValidationError is the validation error returned by
// NiMessageType.Validate if the designated constraints aren't met.
type NiMessageTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiMessageTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiMessageTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiMessageTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiMessageTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiMessageTypeValidationError) ErrorName() string { return "NiMessageTypeValidationError" }

// Error satisfies the builtin error interface
func (e NiMessageTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiMessageType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiMessageTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiMessageTypeValidationError{}

// Validate checks the field values on NiMessageTypeS1 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NiMessageTypeS1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NiMessageTypeS1ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NiMessageTypeS1ValidationError is the validation error returned by
// NiMessageTypeS1.Validate if the designated constraints aren't met.
type NiMessageTypeS1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiMessageTypeS1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiMessageTypeS1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiMessageTypeS1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiMessageTypeS1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiMessageTypeS1ValidationError) ErrorName() string { return "NiMessageTypeS1ValidationError" }

// Error satisfies the builtin error interface
func (e NiMessageTypeS1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiMessageTypeS1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiMessageTypeS1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiMessageTypeS1ValidationError{}

// Validate checks the field values on NiMessageTypeX2 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NiMessageTypeX2) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NiMessageTypeX2ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NiMessageTypeX2ValidationError is the validation error returned by
// NiMessageTypeX2.Validate if the designated constraints aren't met.
type NiMessageTypeX2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiMessageTypeX2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiMessageTypeX2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiMessageTypeX2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiMessageTypeX2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiMessageTypeX2ValidationError) ErrorName() string { return "NiMessageTypeX2ValidationError" }

// Error satisfies the builtin error interface
func (e NiMessageTypeX2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiMessageTypeX2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiMessageTypeX2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiMessageTypeX2ValidationError{}

// Validate checks the field values on NiMessageTypeNg with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NiMessageTypeNg) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NiMessageTypeNgValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NiMessageTypeNgValidationError is the validation error returned by
// NiMessageTypeNg.Validate if the designated constraints aren't met.
type NiMessageTypeNgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiMessageTypeNgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiMessageTypeNgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiMessageTypeNgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiMessageTypeNgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiMessageTypeNgValidationError) ErrorName() string { return "NiMessageTypeNgValidationError" }

// Error satisfies the builtin error interface
func (e NiMessageTypeNgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiMessageTypeNg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiMessageTypeNgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiMessageTypeNgValidationError{}

// Validate checks the field values on NiMessageTypeXn with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NiMessageTypeXn) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NiMessageTypeXnValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NiMessageTypeXnValidationError is the validation error returned by
// NiMessageTypeXn.Validate if the designated constraints aren't met.
type NiMessageTypeXnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiMessageTypeXnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiMessageTypeXnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiMessageTypeXnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiMessageTypeXnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiMessageTypeXnValidationError) ErrorName() string { return "NiMessageTypeXnValidationError" }

// Error satisfies the builtin error interface
func (e NiMessageTypeXnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiMessageTypeXn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiMessageTypeXnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiMessageTypeXnValidationError{}

// Validate checks the field values on NiMessageTypeF1 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NiMessageTypeF1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NiMessageTypeF1ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NiMessageTypeF1ValidationError is the validation error returned by
// NiMessageTypeF1.Validate if the designated constraints aren't met.
type NiMessageTypeF1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiMessageTypeF1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiMessageTypeF1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiMessageTypeF1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiMessageTypeF1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiMessageTypeF1ValidationError) ErrorName() string { return "NiMessageTypeF1ValidationError" }

// Error satisfies the builtin error interface
func (e NiMessageTypeF1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiMessageTypeF1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiMessageTypeF1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiMessageTypeF1ValidationError{}

// Validate checks the field values on NiMessageTypeE1 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NiMessageTypeE1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NiMessageTypeE1ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NiMessageTypeE1ValidationError is the validation error returned by
// NiMessageTypeE1.Validate if the designated constraints aren't met.
type NiMessageTypeE1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiMessageTypeE1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiMessageTypeE1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiMessageTypeE1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiMessageTypeE1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiMessageTypeE1ValidationError) ErrorName() string { return "NiMessageTypeE1ValidationError" }

// Error satisfies the builtin error interface
func (e NiMessageTypeE1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiMessageTypeE1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiMessageTypeE1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiMessageTypeE1ValidationError{}

// Validate checks the field values on NiMessageTypeApproach1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NiMessageTypeApproach1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NiMessageTypeApproach1ValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TypeOfMessage

	return nil
}

// NiMessageTypeApproach1ValidationError is the validation error returned by
// NiMessageTypeApproach1.Validate if the designated constraints aren't met.
type NiMessageTypeApproach1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiMessageTypeApproach1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiMessageTypeApproach1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiMessageTypeApproach1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiMessageTypeApproach1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiMessageTypeApproach1ValidationError) ErrorName() string {
	return "NiMessageTypeApproach1ValidationError"
}

// Error satisfies the builtin error interface
func (e NiMessageTypeApproach1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiMessageTypeApproach1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiMessageTypeApproach1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiMessageTypeApproach1ValidationError{}

// Validate checks the field values on NiProtocolIeItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NiProtocolIeItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInterfaceProtocolIeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NiProtocolIeItemValidationError{
				field:  "InterfaceProtocolIeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InterfaceProtocolIeTest

	if v, ok := interface{}(m.GetInterfaceProtocolIeValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NiProtocolIeItemValidationError{
				field:  "InterfaceProtocolIeValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NiProtocolIeItemValidationError is the validation error returned by
// NiProtocolIeItem.Validate if the designated constraints aren't met.
type NiProtocolIeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiProtocolIeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiProtocolIeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiProtocolIeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiProtocolIeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiProtocolIeItemValidationError) ErrorName() string { return "NiProtocolIeItemValidationError" }

// Error satisfies the builtin error interface
func (e NiProtocolIeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiProtocolIeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiProtocolIeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiProtocolIeItemValidationError{}

// Validate checks the field values on NiProtocolIeId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NiProtocolIeId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NiProtocolIeIdValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NiProtocolIeIdValidationError is the validation error returned by
// NiProtocolIeId.Validate if the designated constraints aren't met.
type NiProtocolIeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiProtocolIeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiProtocolIeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiProtocolIeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiProtocolIeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiProtocolIeIdValidationError) ErrorName() string { return "NiProtocolIeIdValidationError" }

// Error satisfies the builtin error interface
func (e NiProtocolIeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiProtocolIeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiProtocolIeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiProtocolIeIdValidationError{}

// Validate checks the field values on NiProtocolIeValue with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NiProtocolIeValue) Validate() error {
	if m == nil {
		return nil
	}

	switch m.NiProtocolIeValue.(type) {

	case *NiProtocolIeValue_ValueInt:
		// no validation rules for ValueInt

	case *NiProtocolIeValue_ValueEnum:
		// no validation rules for ValueEnum

	case *NiProtocolIeValue_ValueBool:
		// no validation rules for ValueBool

	case *NiProtocolIeValue_ValueBitS:
		// no validation rules for ValueBitS

	case *NiProtocolIeValue_ValueOctS:
		// no validation rules for ValueOctS

	case *NiProtocolIeValue_ValuePrtS:
		// no validation rules for ValuePrtS

	}

	return nil
}

// NiProtocolIeValueValidationError is the validation error returned by
// NiProtocolIeValue.Validate if the designated constraints aren't met.
type NiProtocolIeValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiProtocolIeValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiProtocolIeValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiProtocolIeValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiProtocolIeValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiProtocolIeValueValidationError) ErrorName() string {
	return "NiProtocolIeValueValidationError"
}

// Error satisfies the builtin error interface
func (e NiProtocolIeValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiProtocolIeValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiProtocolIeValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiProtocolIeValueValidationError{}

// Validate checks the field values on RancallProcessIdNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RancallProcessIdNumber) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RancallProcessIdNumberValidationError is the validation error returned by
// RancallProcessIdNumber.Validate if the designated constraints aren't met.
type RancallProcessIdNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RancallProcessIdNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RancallProcessIdNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RancallProcessIdNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RancallProcessIdNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RancallProcessIdNumberValidationError) ErrorName() string {
	return "RancallProcessIdNumberValidationError"
}

// Error satisfies the builtin error interface
func (e RancallProcessIdNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRancallProcessIdNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RancallProcessIdNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RancallProcessIdNumberValidationError{}

// Validate checks the field values on RanfunctionName with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanfunctionName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionShortName()); l < 1 || l > 150 {
		return RanfunctionNameValidationError{
			field:  "RanFunctionShortName",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionE2SmOid()); l < 1 || l > 1000 {
		return RanfunctionNameValidationError{
			field:  "RanFunctionE2SmOid",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionDescription()); l < 1 || l > 150 {
		return RanfunctionNameValidationError{
			field:  "RanFunctionDescription",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	// no validation rules for RanFunctionInstance

	return nil
}

// RanfunctionNameValidationError is the validation error returned by
// RanfunctionName.Validate if the designated constraints aren't met.
type RanfunctionNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionNameValidationError) ErrorName() string { return "RanfunctionNameValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionNameValidationError{}

// Validate checks the field values on RanimperativePolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RanimperativePolicy) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetRanImperativePolicyList()); l < 1 || l > 65535 {
		return RanimperativePolicyValidationError{
			field:  "RanImperativePolicyList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
	}

	for idx, item := range m.GetRanImperativePolicyList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanimperativePolicyValidationError{
					field:  fmt.Sprintf("RanImperativePolicyList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RanimperativePolicyValidationError is the validation error returned by
// RanimperativePolicy.Validate if the designated constraints aren't met.
type RanimperativePolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanimperativePolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanimperativePolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanimperativePolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanimperativePolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanimperativePolicyValidationError) ErrorName() string {
	return "RanimperativePolicyValidationError"
}

// Error satisfies the builtin error interface
func (e RanimperativePolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanimperativePolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanimperativePolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanimperativePolicyValidationError{}

// Validate checks the field values on RanparameterItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanparameterItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRanParameterValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterItemValidationError{
				field:  "RanParameterValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RanparameterItemValidationError is the validation error returned by
// RanparameterItem.Validate if the designated constraints aren't met.
type RanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterItemValidationError) ErrorName() string { return "RanparameterItemValidationError" }

// Error satisfies the builtin error interface
func (e RanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterItemValidationError{}

// Validate checks the field values on RanparameterDefItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RanparameterDefItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterDefItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterDefItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RanParameterType

	return nil
}

// RanparameterDefItemValidationError is the validation error returned by
// RanparameterDefItem.Validate if the designated constraints aren't met.
type RanparameterDefItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterDefItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterDefItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterDefItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterDefItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterDefItemValidationError) ErrorName() string {
	return "RanparameterDefItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterDefItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterDefItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterDefItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterDefItemValidationError{}

// Validate checks the field values on RanparameterId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RanparameterId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 65535 {
		return RanparameterIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 65535]",
		}
	}

	return nil
}

// RanparameterIdValidationError is the validation error returned by
// RanparameterId.Validate if the designated constraints aren't met.
type RanparameterIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterIdValidationError) ErrorName() string { return "RanparameterIdValidationError" }

// Error satisfies the builtin error interface
func (e RanparameterIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterIdValidationError{}

// Validate checks the field values on RanparameterValue with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanparameterValue) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RanparameterValue.(type) {

	case *RanparameterValue_ValueInt:
		// no validation rules for ValueInt

	case *RanparameterValue_ValueEnum:
		// no validation rules for ValueEnum

	case *RanparameterValue_ValueBool:
		// no validation rules for ValueBool

	case *RanparameterValue_ValueBitS:
		// no validation rules for ValueBitS

	case *RanparameterValue_ValueOctS:
		// no validation rules for ValueOctS

	case *RanparameterValue_ValuePrtS:
		// no validation rules for ValuePrtS

	}

	return nil
}

// RanparameterValueValidationError is the validation error returned by
// RanparameterValue.Validate if the designated constraints aren't met.
type RanparameterValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterValueValidationError) ErrorName() string {
	return "RanparameterValueValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterValueValidationError{}

// Validate checks the field values on RanueGroupId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RanueGroupId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 255 {
		return RanueGroupIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
	}

	return nil
}

// RanueGroupIdValidationError is the validation error returned by
// RanueGroupId.Validate if the designated constraints aren't met.
type RanueGroupIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanueGroupIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanueGroupIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanueGroupIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanueGroupIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanueGroupIdValidationError) ErrorName() string { return "RanueGroupIdValidationError" }

// Error satisfies the builtin error interface
func (e RanueGroupIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanueGroupId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanueGroupIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanueGroupIdValidationError{}

// Validate checks the field values on RanueGroupItem with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RanueGroupItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanUegroupId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanueGroupItemValidationError{
				field:  "RanUegroupId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRanUegroupDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanueGroupItemValidationError{
				field:  "RanUegroupDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRanPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanueGroupItemValidationError{
				field:  "RanPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RanueGroupItemValidationError is the validation error returned by
// RanueGroupItem.Validate if the designated constraints aren't met.
type RanueGroupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanueGroupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanueGroupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanueGroupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanueGroupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanueGroupItemValidationError) ErrorName() string { return "RanueGroupItemValidationError" }

// Error satisfies the builtin error interface
func (e RanueGroupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanueGroupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanueGroupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanueGroupItemValidationError{}

// Validate checks the field values on RanueGroupDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RanueGroupDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetRanUegroupDefList()); l < 1 || l > 65535 {
		return RanueGroupDefinitionValidationError{
			field:  "RanUegroupDefList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
	}

	for idx, item := range m.GetRanUegroupDefList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanueGroupDefinitionValidationError{
					field:  fmt.Sprintf("RanUegroupDefList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RanueGroupDefinitionValidationError is the validation error returned by
// RanueGroupDefinition.Validate if the designated constraints aren't met.
type RanueGroupDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanueGroupDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanueGroupDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanueGroupDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanueGroupDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanueGroupDefinitionValidationError) ErrorName() string {
	return "RanueGroupDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e RanueGroupDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanueGroupDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanueGroupDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanueGroupDefinitionValidationError{}

// Validate checks the field values on RanueGroupDefItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanueGroupDefItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanueGroupDefItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RanParameterTest

	if v, ok := interface{}(m.GetRanParameterValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanueGroupDefItemValidationError{
				field:  "RanParameterValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RanueGroupDefItemValidationError is the validation error returned by
// RanueGroupDefItem.Validate if the designated constraints aren't met.
type RanueGroupDefItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanueGroupDefItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanueGroupDefItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanueGroupDefItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanueGroupDefItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanueGroupDefItemValidationError) ErrorName() string {
	return "RanueGroupDefItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanueGroupDefItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanueGroupDefItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanueGroupDefItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanueGroupDefItemValidationError{}

// Validate checks the field values on RicControlMessagePriority with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicControlMessagePriority) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RicControlMessagePriorityValidationError is the validation error returned by
// RicControlMessagePriority.Validate if the designated constraints aren't met.
type RicControlMessagePriorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlMessagePriorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlMessagePriorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlMessagePriorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlMessagePriorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlMessagePriorityValidationError) ErrorName() string {
	return "RicControlMessagePriorityValidationError"
}

// Error satisfies the builtin error interface
func (e RicControlMessagePriorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControlMessagePriority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlMessagePriorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlMessagePriorityValidationError{}

// Validate checks the field values on RicControlStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicControlStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicControlStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlStyleListValidationError{
				field:  "RicControlStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicControlStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlStyleListValidationError{
				field:  "RicControlStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicControlFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlStyleListValidationError{
				field:  "RicControlFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicControlHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlStyleListValidationError{
				field:  "RicControlHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicControlMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlStyleListValidationError{
				field:  "RicControlMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicCallProcessIdformatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlStyleListValidationError{
				field:  "RicCallProcessIdformatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicControlOutcomeFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlStyleListValidationError{
				field:  "RicControlOutcomeFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetRicControlOutcomeRanParaDefList()); l < 1 || l > 65535 {
		return RicControlStyleListValidationError{
			field:  "RicControlOutcomeRanParaDefList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
	}

	for idx, item := range m.GetRicControlOutcomeRanParaDefList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicControlStyleListValidationError{
					field:  fmt.Sprintf("RicControlOutcomeRanParaDefList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicControlStyleListValidationError is the validation error returned by
// RicControlStyleList.Validate if the designated constraints aren't met.
type RicControlStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlStyleListValidationError) ErrorName() string {
	return "RicControlStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicControlStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControlStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlStyleListValidationError{}

// Validate checks the field values on RicEventTriggerStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicEventTriggerStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicEventTriggerStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicEventTriggerFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicEventTriggerStyleListValidationError is the validation error returned by
// RicEventTriggerStyleList.Validate if the designated constraints aren't met.
type RicEventTriggerStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerStyleListValidationError) ErrorName() string {
	return "RicEventTriggerStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerStyleListValidationError{}

// Validate checks the field values on RicInsertStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicInsertStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicInsertStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicInsertStyleListValidationError{
				field:  "RicInsertStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicInsertStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicInsertStyleListValidationError{
				field:  "RicInsertStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicInsertActionFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicInsertStyleListValidationError{
				field:  "RicInsertActionFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetRicInsertRanParameterDefList()); l < 1 || l > 65535 {
		return RicInsertStyleListValidationError{
			field:  "RicInsertRanParameterDefList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
	}

	for idx, item := range m.GetRicInsertRanParameterDefList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicInsertStyleListValidationError{
					field:  fmt.Sprintf("RicInsertRanParameterDefList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicInsertStyleListValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicInsertStyleListValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicCallProcessIdformatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicInsertStyleListValidationError{
				field:  "RicCallProcessIdformatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicInsertStyleListValidationError is the validation error returned by
// RicInsertStyleList.Validate if the designated constraints aren't met.
type RicInsertStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicInsertStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicInsertStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicInsertStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicInsertStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicInsertStyleListValidationError) ErrorName() string {
	return "RicInsertStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicInsertStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicInsertStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicInsertStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicInsertStyleListValidationError{}

// Validate checks the field values on RicPolicyStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicPolicyStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicPolicyStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicPolicyStyleListValidationError{
				field:  "RicPolicyStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicPolicyStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicPolicyStyleListValidationError{
				field:  "RicPolicyStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicPolicyActionFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicPolicyStyleListValidationError{
				field:  "RicPolicyActionFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetRicPolicyRanParameterDefList()); l < 1 || l > 65535 {
		return RicPolicyStyleListValidationError{
			field:  "RicPolicyRanParameterDefList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
	}

	for idx, item := range m.GetRicPolicyRanParameterDefList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicPolicyStyleListValidationError{
					field:  fmt.Sprintf("RicPolicyRanParameterDefList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicPolicyStyleListValidationError is the validation error returned by
// RicPolicyStyleList.Validate if the designated constraints aren't met.
type RicPolicyStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicPolicyStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicPolicyStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicPolicyStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicPolicyStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicPolicyStyleListValidationError) ErrorName() string {
	return "RicPolicyStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicPolicyStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicPolicyStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicPolicyStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicPolicyStyleListValidationError{}

// Validate checks the field values on RicReportStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicReportStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicReportStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicReportStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicReportActionFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportActionFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetRicReportRanParameterDefList()); l < 1 || l > 65535 {
		return RicReportStyleListValidationError{
			field:  "RicReportRanParameterDefList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
	}

	for idx, item := range m.GetRicReportRanParameterDefList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicReportStyleListValidationError{
					field:  fmt.Sprintf("RicReportRanParameterDefList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicReportStyleListValidationError is the validation error returned by
// RicReportStyleList.Validate if the designated constraints aren't met.
type RicReportStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicReportStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicReportStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicReportStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicReportStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicReportStyleListValidationError) ErrorName() string {
	return "RicReportStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicReportStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicReportStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicReportStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicReportStyleListValidationError{}

// Validate checks the field values on RicFormatType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicFormatType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RicFormatTypeValidationError is the validation error returned by
// RicFormatType.Validate if the designated constraints aren't met.
type RicFormatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicFormatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicFormatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicFormatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicFormatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicFormatTypeValidationError) ErrorName() string { return "RicFormatTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicFormatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicFormatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicFormatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicFormatTypeValidationError{}

// Validate checks the field values on RicStyleType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicStyleType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RicStyleTypeValidationError is the validation error returned by
// RicStyleType.Validate if the designated constraints aren't met.
type RicStyleTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleTypeValidationError) ErrorName() string { return "RicStyleTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleTypeValidationError{}

// Validate checks the field values on PlmnIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PlmnIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 3 {
		return PlmnIdentityValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
	}

	return nil
}

// PlmnIdentityValidationError is the validation error returned by
// PlmnIdentity.Validate if the designated constraints aren't met.
type PlmnIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdentityValidationError) ErrorName() string { return "PlmnIdentityValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdentityValidationError{}

// Validate checks the field values on NiTimeStamp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NiTimeStamp) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 8 {
		return NiTimeStampValidationError{
			field:  "Value",
			reason: "value length must be 8 bytes",
		}
	}

	return nil
}

// NiTimeStampValidationError is the validation error returned by
// NiTimeStamp.Validate if the designated constraints aren't met.
type NiTimeStampValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiTimeStampValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiTimeStampValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiTimeStampValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiTimeStampValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiTimeStampValidationError) ErrorName() string { return "NiTimeStampValidationError" }

// Error satisfies the builtin error interface
func (e NiTimeStampValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiTimeStamp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiTimeStampValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiTimeStampValidationError{}

// Validate checks the field values on NiMessage with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NiMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// NiMessageValidationError is the validation error returned by
// NiMessage.Validate if the designated constraints aren't met.
type NiMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NiMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NiMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NiMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NiMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NiMessageValidationError) ErrorName() string { return "NiMessageValidationError" }

// Error satisfies the builtin error interface
func (e NiMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNiMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NiMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NiMessageValidationError{}

// Validate checks the field values on RancallProcessIdString with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RancallProcessIdString) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return RancallProcessIdStringValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// RancallProcessIdStringValidationError is the validation error returned by
// RancallProcessIdString.Validate if the designated constraints aren't met.
type RancallProcessIdStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RancallProcessIdStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RancallProcessIdStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RancallProcessIdStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RancallProcessIdStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RancallProcessIdStringValidationError) ErrorName() string {
	return "RancallProcessIdStringValidationError"
}

// Error satisfies the builtin error interface
func (e RancallProcessIdStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRancallProcessIdString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RancallProcessIdStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RancallProcessIdStringValidationError{}

// Validate checks the field values on RanparameterName with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanparameterName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return RanparameterNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// RanparameterNameValidationError is the validation error returned by
// RanparameterName.Validate if the designated constraints aren't met.
type RanparameterNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterNameValidationError) ErrorName() string { return "RanparameterNameValidationError" }

// Error satisfies the builtin error interface
func (e RanparameterNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterNameValidationError{}

// Validate checks the field values on RicStyleName with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicStyleName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return RicStyleNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// RicStyleNameValidationError is the validation error returned by
// RicStyleName.Validate if the designated constraints aren't met.
type RicStyleNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleNameValidationError) ErrorName() string { return "RicStyleNameValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleNameValidationError{}
