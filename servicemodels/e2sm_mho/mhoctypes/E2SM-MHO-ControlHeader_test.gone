// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

package mhoctypes

import (
	"encoding/hex"
	"fmt"
	pdubuilder "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_mho/pdubuilder"
	e2sm_mho "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_mho/v1/e2sm-mho" //ToDo - Make imports more dynamic
	"gotest.tools/assert"
	"testing"
)

func createE2SmMhoControlHeaderMsg() (*e2sm_mho.E2SmMhoControlHeader, error) {

	// e2SmMhoControlHeader := pdubuilder.CreateE2SmMhoControlHeader() //ToDo - fill in arguments here(if this function exists

	e2SmMhoControlHeader := e2sm_mho.E2SmMhoControlHeader{
		ControlHeaderFormat1: nil,
		E2SmMhoControlHeader: &e2sm_mho.E2SmMhoControlHeader_controlHeaderFormat1{
			ControlHeaderFormat1: &e2sm_mho.controlHeaderFormat1{
				Value: nil,
			},
		},
	}

	if err := e2SmMhoControlHeader.Validate(); err != nil {
		return nil, fmt.Errorf("error validating E2SmMhoControlHeader %s", err.Error())
	}
	return &e2SmMhoControlHeader, nil
}

func Test_xerEncodingE2SmMhoControlHeader(t *testing.T) {

	e2SmMhoControlHeader, err := createE2SmMhoControlHeaderMsg()
	assert.NilError(t, err, "Error creating E2SmMhoControlHeader PDU")

	xer, err := xerEncodeE2SmMhoControlHeader(e2SmMhoControlHeader)
	assert.NilError(t, err)
	assert.Equal(t, 1, len(xer)) //ToDo - adjust length of the XER encoded message
	t.Logf("E2SmMhoControlHeader XER\n%s", string(xer))

	result, err := xerDecodeE2SmMhoControlHeader(xer)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	t.Logf("E2SmMhoControlHeader XER - decoded\n%v", result)
	//ToDo - adjust field's verification

	//This one if for OneOf fields

	assert.DeepEqual(t, e2SmMhoControlHeader.GetControlHeaderFormat1().GetValue(), result.GetControlHeaderFormat1().GetValue())

}

func Test_perEncodingE2SmMhoControlHeader(t *testing.T) {

	e2SmMhoControlHeader, err := createE2SmMhoControlHeaderMsg()
	assert.NilError(t, err, "Error creating E2SmMhoControlHeader PDU")

	per, err := perEncodeE2SmMhoControlHeader(e2SmMhoControlHeader)
	assert.NilError(t, err)
	assert.Equal(t, 1, len(per)) // ToDo - adjust length of the PER encoded message
	t.Logf("E2SmMhoControlHeader PER\n%v", hex.Dump(per))

	result, err := perDecodeE2SmMhoControlHeader(per)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	t.Logf("E2SmMhoControlHeader PER - decoded\n%v", result)
	//ToDo - adjust field's verification

	//This one if for OneOf fields

	assert.DeepEqual(t, e2SmMhoControlHeader.GetControlHeaderFormat1().GetValue(), result.GetControlHeaderFormat1().GetValue())

}
