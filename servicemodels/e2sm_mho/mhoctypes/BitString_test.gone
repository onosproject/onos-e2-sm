// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

package mhoctypes

import (
	"encoding/hex"
	"fmt"
	pdubuilder "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_mho/pdubuilder"
	e2sm_mho "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_mho/v1/e2sm-mho" //ToDo - Make imports more dynamic
	"gotest.tools/assert"
	"testing"
)

func createBitStringMsg() (*e2sm_mho.BitString, error) {

	// bitString := pdubuilder.CreateBitString() //ToDo - fill in arguments here(if this function exists

	bitString := e2sm_mho.BitString{
		Value: nil,
		Len:   nil,
	}

	if err := bitString.Validate(); err != nil {
		return nil, fmt.Errorf("error validating BitString %s", err.Error())
	}
	return &bitString, nil
}

func Test_xerEncodingBitString(t *testing.T) {

	bitString, err := createBitStringMsg()
	assert.NilError(t, err, "Error creating BitString PDU")

	xer, err := xerEncodeBitString(bitString)
	assert.NilError(t, err)
	assert.Equal(t, 1, len(xer)) //ToDo - adjust length of the XER encoded message
	t.Logf("BitString XER\n%s", string(xer))

	result, err := xerDecodeBitString(xer)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	t.Logf("BitString XER - decoded\n%v", result)
	//ToDo - adjust field's verification
	assert.Equal(t, bitString.GetValue(), result.GetValue())
	assert.Equal(t, bitString.GetLen(), result.GetLen())

}

func Test_perEncodingBitString(t *testing.T) {

	bitString, err := createBitStringMsg()
	assert.NilError(t, err, "Error creating BitString PDU")

	per, err := perEncodeBitString(bitString)
	assert.NilError(t, err)
	assert.Equal(t, 1, len(per)) // ToDo - adjust length of the PER encoded message
	t.Logf("BitString PER\n%v", hex.Dump(per))

	result, err := perDecodeBitString(per)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	t.Logf("BitString PER - decoded\n%v", result)
	//ToDo - adjust field's verification
	assert.Equal(t, bitString.GetValue(), result.GetValue())
	assert.Equal(t, bitString.GetLen(), result.GetLen())

}
