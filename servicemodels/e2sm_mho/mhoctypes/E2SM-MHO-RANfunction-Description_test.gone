// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

package mhoctypes

import (
	"encoding/hex"
	"fmt"
	pdubuilder "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_mho/pdubuilder"
	e2sm_mho "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_mho/v1/e2sm-mho" //ToDo - Make imports more dynamic
	"gotest.tools/assert"
	"testing"
)

func createE2SmMhoRanfunctionDescriptionMsg() (*e2sm_mho.E2SmMhoRanfunctionDescription, error) {

	// e2SmMhoRanfunctionDescription := pdubuilder.CreateE2SmMhoRanfunctionDescription() //ToDo - fill in arguments here(if this function exists

	e2SmMhoRanfunctionDescription := e2sm_mho.E2SmMhoRanfunctionDescription{
		RanFunctionName:          nil,
		RicEventTriggerStyleList: make([]*e2sm_mho.RicEventTriggerStyleList, 0), //ToDo - Check if protobuf structure is implemented correctly (mainly naming)
		RicReportStyleList:       make([]*e2sm_mho.RicReportStyleList, 0),       //ToDo - Check if protobuf structure is implemented correctly (mainly naming)

	}

	if err := e2SmMhoRanfunctionDescription.Validate(); err != nil {
		return nil, fmt.Errorf("error validating E2SmMhoRanfunctionDescription %s", err.Error())
	}
	return &e2SmMhoRanfunctionDescription, nil
}

func Test_xerEncodingE2SmMhoRanfunctionDescription(t *testing.T) {

	e2SmMhoRanfunctionDescription, err := createE2SmMhoRanfunctionDescriptionMsg()
	assert.NilError(t, err, "Error creating E2SmMhoRanfunctionDescription PDU")

	xer, err := xerEncodeE2SmMhoRanfunctionDescription(e2SmMhoRanfunctionDescription)
	assert.NilError(t, err)
	assert.Equal(t, 1, len(xer)) //ToDo - adjust length of the XER encoded message
	t.Logf("E2SmMhoRanfunctionDescription XER\n%s", string(xer))

	result, err := xerDecodeE2SmMhoRanfunctionDescription(xer)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	t.Logf("E2SmMhoRanfunctionDescription XER - decoded\n%v", result)
	//ToDo - adjust field's verification
	assert.Equal(t, e2SmMhoRanfunctionDescription.GetRanFunctionName(), result.GetRanFunctionName())

	assert.Equal(t, 1, len(result.GetRicEventTriggerStyleList())) //ToDo - adjust length of a list
	assert.DeepEqual(t, e2SmMhoRanfunctionDescription.GetRicEventTriggerStyleList(), result.GetRicEventTriggerStyleList())
	assert.Equal(t, 1, len(result.GetRicReportStyleList())) //ToDo - adjust length of a list
	assert.DeepEqual(t, e2SmMhoRanfunctionDescription.GetRicReportStyleList(), result.GetRicReportStyleList())

}

func Test_perEncodingE2SmMhoRanfunctionDescription(t *testing.T) {

	e2SmMhoRanfunctionDescription, err := createE2SmMhoRanfunctionDescriptionMsg()
	assert.NilError(t, err, "Error creating E2SmMhoRanfunctionDescription PDU")

	per, err := perEncodeE2SmMhoRanfunctionDescription(e2SmMhoRanfunctionDescription)
	assert.NilError(t, err)
	assert.Equal(t, 1, len(per)) // ToDo - adjust length of the PER encoded message
	t.Logf("E2SmMhoRanfunctionDescription PER\n%v", hex.Dump(per))

	result, err := perDecodeE2SmMhoRanfunctionDescription(per)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	t.Logf("E2SmMhoRanfunctionDescription PER - decoded\n%v", result)
	//ToDo - adjust field's verification
	assert.Equal(t, e2SmMhoRanfunctionDescription.GetRanFunctionName(), result.GetRanFunctionName())

	assert.Equal(t, 1, len(result.GetRicEventTriggerStyleList())) //ToDo - adjust length of a list
	assert.DeepEqual(t, e2SmMhoRanfunctionDescription.GetRicEventTriggerStyleList(), result.GetRicEventTriggerStyleList())
	assert.Equal(t, 1, len(result.GetRicReportStyleList())) //ToDo - adjust length of a list
	assert.DeepEqual(t, e2SmMhoRanfunctionDescription.GetRicReportStyleList(), result.GetRicReportStyleList())

}
