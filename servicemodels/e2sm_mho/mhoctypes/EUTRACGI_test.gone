// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

package mhoctypes

import (
	"encoding/hex"
	"fmt"
	pdubuilder "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_mho/pdubuilder"
	e2sm_mho "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_mho/v1/e2sm-mho" //ToDo - Make imports more dynamic
	"gotest.tools/assert"
	"testing"
)

func createEutracgiMsg() (*e2sm_mho.Eutracgi, error) {

	// eutracgi := pdubuilder.CreateEutracgi() //ToDo - fill in arguments here(if this function exists

	eutracgi := e2sm_mho.Eutracgi{
		PLmnIdentity:      nil,
		EUtracellIdentity: nil,
	}

	if err := eutracgi.Validate(); err != nil {
		return nil, fmt.Errorf("error validating Eutracgi %s", err.Error())
	}
	return &eutracgi, nil
}

func Test_xerEncodingEutracgi(t *testing.T) {

	eutracgi, err := createEutracgiMsg()
	assert.NilError(t, err, "Error creating Eutracgi PDU")

	xer, err := xerEncodeEutracgi(eutracgi)
	assert.NilError(t, err)
	assert.Equal(t, 1, len(xer)) //ToDo - adjust length of the XER encoded message
	t.Logf("Eutracgi XER\n%s", string(xer))

	result, err := xerDecodeEutracgi(xer)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	t.Logf("Eutracgi XER - decoded\n%v", result)
	//ToDo - adjust field's verification
	assert.Equal(t, eutracgi.GetPLmnIdentity(), result.GetPLmnIdentity())
	assert.Equal(t, eutracgi.GetEUtracellIdentity(), result.GetEUtracellIdentity())

}

func Test_perEncodingEutracgi(t *testing.T) {

	eutracgi, err := createEutracgiMsg()
	assert.NilError(t, err, "Error creating Eutracgi PDU")

	per, err := perEncodeEutracgi(eutracgi)
	assert.NilError(t, err)
	assert.Equal(t, 1, len(per)) // ToDo - adjust length of the PER encoded message
	t.Logf("Eutracgi PER\n%v", hex.Dump(per))

	result, err := perDecodeEutracgi(per)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	t.Logf("Eutracgi PER - decoded\n%v", result)
	//ToDo - adjust field's verification
	assert.Equal(t, eutracgi.GetPLmnIdentity(), result.GetPLmnIdentity())
	assert.Equal(t, eutracgi.GetEUtracellIdentity(), result.GetEUtracellIdentity())

}
