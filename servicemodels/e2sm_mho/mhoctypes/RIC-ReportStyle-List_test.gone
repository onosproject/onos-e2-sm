// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

package mhoctypes

import (
	"encoding/hex"
	"fmt"
	pdubuilder "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_mho/pdubuilder"
	e2sm_mho "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_mho/v1/e2sm-mho" //ToDo - Make imports more dynamic
	"gotest.tools/assert"
	"testing"
)

func createRicReportStyleListMsg() (*e2sm_mho.RicReportStyleList, error) {

	// ricReportStyleList := pdubuilder.CreateRicReportStyleList() //ToDo - fill in arguments here(if this function exists

	ricReportStyleList := e2sm_mho.RicReportStyleList{
		RicReportStyleType:             nil,
		RicReportStyleName:             nil,
		RicIndicationHeaderFormatType:  nil,
		RicIndicationMessageFormatType: nil,
	}

	if err := ricReportStyleList.Validate(); err != nil {
		return nil, fmt.Errorf("error validating RicReportStyleList %s", err.Error())
	}
	return &ricReportStyleList, nil
}

func Test_xerEncodingRicReportStyleList(t *testing.T) {

	ricReportStyleList, err := createRicReportStyleListMsg()
	assert.NilError(t, err, "Error creating RicReportStyleList PDU")

	xer, err := xerEncodeRicReportStyleList(ricReportStyleList)
	assert.NilError(t, err)
	assert.Equal(t, 1, len(xer)) //ToDo - adjust length of the XER encoded message
	t.Logf("RicReportStyleList XER\n%s", string(xer))

	result, err := xerDecodeRicReportStyleList(xer)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	t.Logf("RicReportStyleList XER - decoded\n%v", result)
	//ToDo - adjust field's verification
	assert.Equal(t, ricReportStyleList.GetRicReportStyleType(), result.GetRicReportStyleType())
	assert.Equal(t, ricReportStyleList.GetRicReportStyleName(), result.GetRicReportStyleName())
	assert.Equal(t, ricReportStyleList.GetRicIndicationHeaderFormatType(), result.GetRicIndicationHeaderFormatType())
	assert.Equal(t, ricReportStyleList.GetRicIndicationMessageFormatType(), result.GetRicIndicationMessageFormatType())

}

func Test_perEncodingRicReportStyleList(t *testing.T) {

	ricReportStyleList, err := createRicReportStyleListMsg()
	assert.NilError(t, err, "Error creating RicReportStyleList PDU")

	per, err := perEncodeRicReportStyleList(ricReportStyleList)
	assert.NilError(t, err)
	assert.Equal(t, 1, len(per)) // ToDo - adjust length of the PER encoded message
	t.Logf("RicReportStyleList PER\n%v", hex.Dump(per))

	result, err := perDecodeRicReportStyleList(per)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	t.Logf("RicReportStyleList PER - decoded\n%v", result)
	//ToDo - adjust field's verification
	assert.Equal(t, ricReportStyleList.GetRicReportStyleType(), result.GetRicReportStyleType())
	assert.Equal(t, ricReportStyleList.GetRicReportStyleName(), result.GetRicReportStyleName())
	assert.Equal(t, ricReportStyleList.GetRicIndicationHeaderFormatType(), result.GetRicIndicationHeaderFormatType())
	assert.Equal(t, ricReportStyleList.GetRicIndicationMessageFormatType(), result.GetRicIndicationMessageFormatType())

}
