// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_mho/v1/e2sm_mho.proto

package e2sm_mho

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _e_2_sm_mho_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Eutracgi with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Eutracgi) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracgiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEUtracellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracgiValidationError{
				field:  "EUtracellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EutracgiValidationError is the validation error returned by
// Eutracgi.Validate if the designated constraints aren't met.
type EutracgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutracgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutracgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutracgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutracgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutracgiValidationError) ErrorName() string { return "EutracgiValidationError" }

// Error satisfies the builtin error interface
func (e EutracgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutracgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutracgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutracgiValidationError{}

// Validate checks the field values on Nrcgi with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Nrcgi) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNRcellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "NRcellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NrcgiValidationError is the validation error returned by Nrcgi.Validate if
// the designated constraints aren't met.
type NrcgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcgiValidationError) ErrorName() string { return "NrcgiValidationError" }

// Error satisfies the builtin error interface
func (e NrcgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcgiValidationError{}

// Validate checks the field values on CellGlobalId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CellGlobalId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.CellGlobalId.(type) {

	case *CellGlobalId_NrCgi:

		if v, ok := interface{}(m.GetNrCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellGlobalIdValidationError{
					field:  "NrCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CellGlobalId_EUtraCgi:

		if v, ok := interface{}(m.GetEUtraCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellGlobalIdValidationError{
					field:  "EUtraCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CellGlobalIdValidationError is the validation error returned by
// CellGlobalId.Validate if the designated constraints aren't met.
type CellGlobalIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellGlobalIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellGlobalIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellGlobalIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellGlobalIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellGlobalIdValidationError) ErrorName() string { return "CellGlobalIdValidationError" }

// Error satisfies the builtin error interface
func (e CellGlobalIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellGlobalId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellGlobalIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellGlobalIdValidationError{}

// Validate checks the field values on Rsrp with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rsrp) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < -65536 || val > 65536 {
		return RsrpValidationError{
			field:  "Value",
			reason: "value must be inside range [-65536, 65536]",
		}
	}

	return nil
}

// RsrpValidationError is the validation error returned by Rsrp.Validate if the
// designated constraints aren't met.
type RsrpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RsrpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RsrpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RsrpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RsrpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RsrpValidationError) ErrorName() string { return "RsrpValidationError" }

// Error satisfies the builtin error interface
func (e RsrpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRsrp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RsrpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RsrpValidationError{}

// Validate checks the field values on MaxofMessageProtocolTests with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxofMessageProtocolTests) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 15 {
		return MaxofMessageProtocolTestsValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
	}

	return nil
}

// MaxofMessageProtocolTestsValidationError is the validation error returned by
// MaxofMessageProtocolTests.Validate if the designated constraints aren't met.
type MaxofMessageProtocolTestsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofMessageProtocolTestsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofMessageProtocolTestsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofMessageProtocolTestsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofMessageProtocolTestsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofMessageProtocolTestsValidationError) ErrorName() string {
	return "MaxofMessageProtocolTestsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofMessageProtocolTestsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofMessageProtocolTests.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofMessageProtocolTestsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofMessageProtocolTestsValidationError{}

// Validate checks the field values on MaxofRicstyles with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxofRicstyles) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 63 {
		return MaxofRicstylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
	}

	return nil
}

// MaxofRicstylesValidationError is the validation error returned by
// MaxofRicstyles.Validate if the designated constraints aren't met.
type MaxofRicstylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRicstylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRicstylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRicstylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRicstylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRicstylesValidationError) ErrorName() string { return "MaxofRicstylesValidationError" }

// Error satisfies the builtin error interface
func (e MaxofRicstylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRicstyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRicstylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRicstylesValidationError{}

// Validate checks the field values on MaxPlmn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MaxPlmn) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 12 {
		return MaxPlmnValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
	}

	return nil
}

// MaxPlmnValidationError is the validation error returned by MaxPlmn.Validate
// if the designated constraints aren't met.
type MaxPlmnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPlmnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPlmnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPlmnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPlmnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPlmnValidationError) ErrorName() string { return "MaxPlmnValidationError" }

// Error satisfies the builtin error interface
func (e MaxPlmnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPlmn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPlmnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPlmnValidationError{}

// Validate checks the field values on MaxNr with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MaxNr) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 4096 {
		return MaxNrValidationError{
			field:  "Value",
			reason: "value must equal 4096",
		}
	}

	return nil
}

// MaxNrValidationError is the validation error returned by MaxNr.Validate if
// the designated constraints aren't met.
type MaxNrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrValidationError) ErrorName() string { return "MaxNrValidationError" }

// Error satisfies the builtin error interface
func (e MaxNrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrValidationError{}

// Validate checks the field values on RicStyleType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicStyleType) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 63 {
		return RicStyleTypeValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 63]",
		}
	}

	return nil
}

// RicStyleTypeValidationError is the validation error returned by
// RicStyleType.Validate if the designated constraints aren't met.
type RicStyleTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleTypeValidationError) ErrorName() string { return "RicStyleTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleTypeValidationError{}

// Validate checks the field values on RicFormatType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicFormatType) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 255 {
		return RicFormatTypeValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
	}

	return nil
}

// RicFormatTypeValidationError is the validation error returned by
// RicFormatType.Validate if the designated constraints aren't met.
type RicFormatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicFormatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicFormatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicFormatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicFormatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicFormatTypeValidationError) ErrorName() string { return "RicFormatTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicFormatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicFormatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicFormatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicFormatTypeValidationError{}

// Validate checks the field values on RicControlMessagePriority with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicControlMessagePriority) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 255 {
		return RicControlMessagePriorityValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
	}

	return nil
}

// RicControlMessagePriorityValidationError is the validation error returned by
// RicControlMessagePriority.Validate if the designated constraints aren't met.
type RicControlMessagePriorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlMessagePriorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlMessagePriorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlMessagePriorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlMessagePriorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlMessagePriorityValidationError) ErrorName() string {
	return "RicControlMessagePriorityValidationError"
}

// Error satisfies the builtin error interface
func (e RicControlMessagePriorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControlMessagePriority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlMessagePriorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlMessagePriorityValidationError{}

// Validate checks the field values on E2SmMhoEventTriggerDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoEventTriggerDefinition) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmMhoEventTriggerDefinition.(type) {

	case *E2SmMhoEventTriggerDefinition_EventDefinitionFormat1:

		if v, ok := interface{}(m.GetEventDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoEventTriggerDefinitionValidationError{
					field:  "EventDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmMhoEventTriggerDefinitionValidationError is the validation error
// returned by E2SmMhoEventTriggerDefinition.Validate if the designated
// constraints aren't met.
type E2SmMhoEventTriggerDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoEventTriggerDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoEventTriggerDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoEventTriggerDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoEventTriggerDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoEventTriggerDefinitionValidationError) ErrorName() string {
	return "E2SmMhoEventTriggerDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoEventTriggerDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoEventTriggerDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoEventTriggerDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoEventTriggerDefinitionValidationError{}

// Validate checks the field values on E2SmMhoEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SmMhoEventTriggerDefinitionFormat1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TriggerType

	// no validation rules for ReportingPeriodMs

	return nil
}

// E2SmMhoEventTriggerDefinitionFormat1ValidationError is the validation error
// returned by E2SmMhoEventTriggerDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmMhoEventTriggerDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmMhoEventTriggerDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoEventTriggerDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoEventTriggerDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoEventTriggerDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoEventTriggerDefinitionFormat1ValidationError{}

// Validate checks the field values on E2SmMhoIndicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoIndicationHeader) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmMhoIndicationHeader.(type) {

	case *E2SmMhoIndicationHeader_IndicationHeaderFormat1:

		if v, ok := interface{}(m.GetIndicationHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoIndicationHeaderValidationError{
					field:  "IndicationHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmMhoIndicationHeaderValidationError is the validation error returned by
// E2SmMhoIndicationHeader.Validate if the designated constraints aren't met.
type E2SmMhoIndicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoIndicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoIndicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoIndicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoIndicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoIndicationHeaderValidationError) ErrorName() string {
	return "E2SmMhoIndicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoIndicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoIndicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoIndicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoIndicationHeaderValidationError{}

// Validate checks the field values on E2SmMhoIndicationHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoIndicationHeaderFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoIndicationHeaderFormat1ValidationError{
				field:  "Cgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmMhoIndicationHeaderFormat1ValidationError is the validation error
// returned by E2SmMhoIndicationHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmMhoIndicationHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoIndicationHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoIndicationHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoIndicationHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoIndicationHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoIndicationHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmMhoIndicationHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoIndicationHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoIndicationHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoIndicationHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoIndicationHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmMhoIndicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoIndicationMessage) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmMhoIndicationMessage.(type) {

	case *E2SmMhoIndicationMessage_IndicationMessageFormat1:

		if v, ok := interface{}(m.GetIndicationMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoIndicationMessageValidationError{
					field:  "IndicationMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmMhoIndicationMessage_IndicationMessageFormat2:

		if v, ok := interface{}(m.GetIndicationMessageFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoIndicationMessageValidationError{
					field:  "IndicationMessageFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmMhoIndicationMessageValidationError is the validation error returned by
// E2SmMhoIndicationMessage.Validate if the designated constraints aren't met.
type E2SmMhoIndicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoIndicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoIndicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoIndicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoIndicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoIndicationMessageValidationError) ErrorName() string {
	return "E2SmMhoIndicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoIndicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoIndicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoIndicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoIndicationMessageValidationError{}

// Validate checks the field values on E2SmMhoIndicationMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoIndicationMessageFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoIndicationMessageFormat1ValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetMeasReport()); l < 1 || l > 100 {
		return E2SmMhoIndicationMessageFormat1ValidationError{
			field:  "MeasReport",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	for idx, item := range m.GetMeasReport() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoIndicationMessageFormat1ValidationError{
					field:  fmt.Sprintf("MeasReport[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmMhoIndicationMessageFormat1ValidationError is the validation error
// returned by E2SmMhoIndicationMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmMhoIndicationMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoIndicationMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoIndicationMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoIndicationMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoIndicationMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoIndicationMessageFormat1ValidationError) ErrorName() string {
	return "E2SmMhoIndicationMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoIndicationMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoIndicationMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoIndicationMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoIndicationMessageFormat1ValidationError{}

// Validate checks the field values on E2SmMhoMeasurementReportItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoMeasurementReportItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoMeasurementReportItemValidationError{
				field:  "Cgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRsrp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoMeasurementReportItemValidationError{
				field:  "Rsrp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmMhoMeasurementReportItemValidationError is the validation error returned
// by E2SmMhoMeasurementReportItem.Validate if the designated constraints
// aren't met.
type E2SmMhoMeasurementReportItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoMeasurementReportItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoMeasurementReportItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoMeasurementReportItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoMeasurementReportItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoMeasurementReportItemValidationError) ErrorName() string {
	return "E2SmMhoMeasurementReportItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoMeasurementReportItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoMeasurementReportItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoMeasurementReportItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoMeasurementReportItemValidationError{}

// Validate checks the field values on E2SmMhoIndicationMessageFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoIndicationMessageFormat2) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoIndicationMessageFormat2ValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RrcStatus

	return nil
}

// E2SmMhoIndicationMessageFormat2ValidationError is the validation error
// returned by E2SmMhoIndicationMessageFormat2.Validate if the designated
// constraints aren't met.
type E2SmMhoIndicationMessageFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoIndicationMessageFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoIndicationMessageFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoIndicationMessageFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoIndicationMessageFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoIndicationMessageFormat2ValidationError) ErrorName() string {
	return "E2SmMhoIndicationMessageFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoIndicationMessageFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoIndicationMessageFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoIndicationMessageFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoIndicationMessageFormat2ValidationError{}

// Validate checks the field values on E2SmMhoControlHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoControlHeader) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmMhoControlHeader.(type) {

	case *E2SmMhoControlHeader_ControlHeaderFormat1:

		if v, ok := interface{}(m.GetControlHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoControlHeaderValidationError{
					field:  "ControlHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmMhoControlHeaderValidationError is the validation error returned by
// E2SmMhoControlHeader.Validate if the designated constraints aren't met.
type E2SmMhoControlHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoControlHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoControlHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoControlHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoControlHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoControlHeaderValidationError) ErrorName() string {
	return "E2SmMhoControlHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoControlHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoControlHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoControlHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoControlHeaderValidationError{}

// Validate checks the field values on E2SmMhoControlHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoControlHeaderFormat1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RcCommand

	if v, ok := interface{}(m.GetRicControlMessagePriority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoControlHeaderFormat1ValidationError{
				field:  "RicControlMessagePriority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmMhoControlHeaderFormat1ValidationError is the validation error returned
// by E2SmMhoControlHeaderFormat1.Validate if the designated constraints
// aren't met.
type E2SmMhoControlHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoControlHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoControlHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoControlHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoControlHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoControlHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmMhoControlHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoControlHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoControlHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoControlHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoControlHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmMhoControlMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoControlMessage) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmMhoControlMessage.(type) {

	case *E2SmMhoControlMessage_ControlMessageFormat1:

		if v, ok := interface{}(m.GetControlMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoControlMessageValidationError{
					field:  "ControlMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmMhoControlMessageValidationError is the validation error returned by
// E2SmMhoControlMessage.Validate if the designated constraints aren't met.
type E2SmMhoControlMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoControlMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoControlMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoControlMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoControlMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoControlMessageValidationError) ErrorName() string {
	return "E2SmMhoControlMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoControlMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoControlMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoControlMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoControlMessageValidationError{}

// Validate checks the field values on E2SmMhoControlMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoControlMessageFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetServingCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoControlMessageFormat1ValidationError{
				field:  "ServingCgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUedId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoControlMessageFormat1ValidationError{
				field:  "UedId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTargetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoControlMessageFormat1ValidationError{
				field:  "TargetCgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmMhoControlMessageFormat1ValidationError is the validation error returned
// by E2SmMhoControlMessageFormat1.Validate if the designated constraints
// aren't met.
type E2SmMhoControlMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoControlMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoControlMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoControlMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoControlMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoControlMessageFormat1ValidationError) ErrorName() string {
	return "E2SmMhoControlMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoControlMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoControlMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoControlMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoControlMessageFormat1ValidationError{}

// Validate checks the field values on E2SmMhoRanfunctionDescription with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmMhoRanfunctionDescription) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanFunctionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmMhoRanfunctionDescriptionValidationError{
				field:  "RanFunctionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRicEventTriggerStyleList()) > 63 {
		return E2SmMhoRanfunctionDescriptionValidationError{
			field:  "RicEventTriggerStyleList",
			reason: "value must contain no more than 63 item(s)",
		}
	}

	for idx, item := range m.GetRicEventTriggerStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoRanfunctionDescriptionValidationError{
					field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetRicReportStyleList()) > 63 {
		return E2SmMhoRanfunctionDescriptionValidationError{
			field:  "RicReportStyleList",
			reason: "value must contain no more than 63 item(s)",
		}
	}

	for idx, item := range m.GetRicReportStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmMhoRanfunctionDescriptionValidationError{
					field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmMhoRanfunctionDescriptionValidationError is the validation error
// returned by E2SmMhoRanfunctionDescription.Validate if the designated
// constraints aren't met.
type E2SmMhoRanfunctionDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmMhoRanfunctionDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmMhoRanfunctionDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmMhoRanfunctionDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmMhoRanfunctionDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmMhoRanfunctionDescriptionValidationError) ErrorName() string {
	return "E2SmMhoRanfunctionDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmMhoRanfunctionDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmMhoRanfunctionDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmMhoRanfunctionDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmMhoRanfunctionDescriptionValidationError{}

// Validate checks the field values on RanfunctionName with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanfunctionName) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RanFunctionShortName

	// no validation rules for RanFunctionE2SmOid

	// no validation rules for RanFunctionDescription

	// no validation rules for RanFunctionInstance

	return nil
}

// RanfunctionNameValidationError is the validation error returned by
// RanfunctionName.Validate if the designated constraints aren't met.
type RanfunctionNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionNameValidationError) ErrorName() string { return "RanfunctionNameValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionNameValidationError{}

// Validate checks the field values on RicEventTriggerStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicEventTriggerStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicEventTriggerStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicEventTriggerFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicEventTriggerStyleListValidationError is the validation error returned by
// RicEventTriggerStyleList.Validate if the designated constraints aren't met.
type RicEventTriggerStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerStyleListValidationError) ErrorName() string {
	return "RicEventTriggerStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerStyleListValidationError{}

// Validate checks the field values on RicReportStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicReportStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicReportStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicReportStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicReportStyleListValidationError is the validation error returned by
// RicReportStyleList.Validate if the designated constraints aren't met.
type RicReportStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicReportStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicReportStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicReportStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicReportStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicReportStyleListValidationError) ErrorName() string {
	return "RicReportStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicReportStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicReportStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicReportStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicReportStyleListValidationError{}

// Validate checks the field values on RicStyleName with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicStyleName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return RicStyleNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// RicStyleNameValidationError is the validation error returned by
// RicStyleName.Validate if the designated constraints aren't met.
type RicStyleNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleNameValidationError) ErrorName() string { return "RicStyleNameValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleNameValidationError{}

// Validate checks the field values on UeIdentity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UeIdentity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// UeIdentityValidationError is the validation error returned by
// UeIdentity.Validate if the designated constraints aren't met.
type UeIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeIdentityValidationError) ErrorName() string { return "UeIdentityValidationError" }

// Error satisfies the builtin error interface
func (e UeIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeIdentityValidationError{}

// Validate checks the field values on PlmnIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PlmnIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 3 {
		return PlmnIdentityValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
	}

	return nil
}

// PlmnIdentityValidationError is the validation error returned by
// PlmnIdentity.Validate if the designated constraints aren't met.
type PlmnIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdentityValidationError) ErrorName() string { return "PlmnIdentityValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdentityValidationError{}

// Validate checks the field values on EutracellIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EutracellIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EutracellIdentityValidationError is the validation error returned by
// EutracellIdentity.Validate if the designated constraints aren't met.
type EutracellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutracellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutracellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutracellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutracellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutracellIdentityValidationError) ErrorName() string {
	return "EutracellIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e EutracellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutracellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutracellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutracellIdentityValidationError{}

// Validate checks the field values on NrcellIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NrcellIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NrcellIdentityValidationError is the validation error returned by
// NrcellIdentity.Validate if the designated constraints aren't met.
type NrcellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcellIdentityValidationError) ErrorName() string { return "NrcellIdentityValidationError" }

// Error satisfies the builtin error interface
func (e NrcellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcellIdentityValidationError{}

// Validate checks the field values on BitString with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BitString) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	if m.GetLen() > 64 {
		return BitStringValidationError{
			field:  "Len",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// BitStringValidationError is the validation error returned by
// BitString.Validate if the designated constraints aren't met.
type BitStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BitStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BitStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BitStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BitStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BitStringValidationError) ErrorName() string { return "BitStringValidationError" }

// Error satisfies the builtin error interface
func (e BitStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBitString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BitStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BitStringValidationError{}
