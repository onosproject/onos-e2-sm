/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "E2SM-KPM-IEs"
 * 	found in "../v2/e2sm_kpm_v2.asn"
 * 	`asn1c -fcompound-names -fincludes-quoted -fno-include-deps -findirect-choice -gen-PER -no-gen-OER -D.`
 */

#ifndef	_MeasurementLabel_H_
#define	_MeasurementLabel_H_


#include "asn_application.h"

/* Including external dependencies */
#include "PLMN-Identity.h"
#include "FiveQI.h"
#include "QCI.h"
#include "ARP.h"
#include "SNSSAI.h"
#include "NativeInteger.h"
#include "NativeEnumerated.h"
#include "constr_SEQUENCE.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum MeasurementLabel__sUM {
	MeasurementLabel__sUM_true	= 0
	/*
	 * Enumeration is extensible
	 */
} e_MeasurementLabel__sUM;

/* MeasurementLabel__sUM */
typedef long	 MeasurementLabel__sUM_t;

typedef enum MeasurementLabel__preLabelOverride {
	MeasurementLabel__preLabelOverride_true	= 0
	/*
	 * Enumeration is extensible
	 */
} e_MeasurementLabel__preLabelOverride;

/* MeasurementLabel__preLabelOverride */
typedef long	 MeasurementLabel__preLabelOverride_t;

typedef enum MeasurementLabel__startEndInd {
	MeasurementLabel__startEndInd_start	= 0,
	MeasurementLabel__startEndInd_end	= 1
	/*
	 * Enumeration is extensible
	 */
} e_MeasurementLabel__startEndInd;

/* MeasurementLabel__startEndInd */
typedef long	 MeasurementLabel__startEndInd_t;

/* Forward declarations */
struct SNSSAI;

/* MeasurementLabel */
typedef struct MeasurementLabel {
	PLMN_Identity_t	*plmnID;	/* OPTIONAL */
	SNSSAI_t	*sliceID;	/* OPTIONAL */
	FiveQI_t	*fiveQI;	/* OPTIONAL */
	QCI_t	*qCI;	/* OPTIONAL */
	QCI_t	*qCImax;	/* OPTIONAL */
	QCI_t	*qCImin;	/* OPTIONAL */
	ARP_t	*aRPmax;	/* OPTIONAL */
	ARP_t	*aRPmin;	/* OPTIONAL */
	long	*bitrateRange;	/* OPTIONAL */
	long	*layerMU_MIMO;	/* OPTIONAL */
	MeasurementLabel__sUM_t	*sUM;	/* OPTIONAL */
	long	*distBinX;	/* OPTIONAL */
	long	*distBinY;	/* OPTIONAL */
	long	*distBinZ;	/* OPTIONAL */
	MeasurementLabel__preLabelOverride_t	*preLabelOverride;	/* OPTIONAL */
	MeasurementLabel__startEndInd_t	*startEndInd;	/* OPTIONAL */
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} MeasurementLabel_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_sUM_12;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_preLabelOverride_18;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_startEndInd_21;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_MeasurementLabel;
extern asn_SEQUENCE_specifics_t asn_SPC_MeasurementLabel_specs_1;
extern asn_TYPE_member_t asn_MBR_MeasurementLabel_1[16];

#ifdef __cplusplus
}
#endif

#endif	/* _MeasurementLabel_H_ */
#include "asn_internal.h"
