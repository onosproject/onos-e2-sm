/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "E2SM-KPM-IEs"
 * 	found in "../v2/e2sm_kpm_v2.0.3-changed.asn"
 * 	`asn1c -fcompound-names -fincludes-quoted -fno-include-deps -findirect-choice -gen-PER -no-gen-OER -D.`
 */

#ifndef	_MeasurementDataItem_KPMv2_H_
#define	_MeasurementDataItem_KPMv2_H_


#include "asn_application.h"

/* Including external dependencies */
#include "MeasurementRecord-KPMv2.h"
#include "NativeEnumerated.h"
#include "constr_SEQUENCE.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum MeasurementDataItem_KPMv2__incompleteFlag {
	MeasurementDataItem_KPMv2__incompleteFlag_true	= 0
	/*
	 * Enumeration is extensible
	 */
} e_MeasurementDataItem_KPMv2__incompleteFlag;

/* MeasurementDataItem_KPMv2__incompleteFlag */
typedef long	 MeasurementDataItem_KPMv2__incompleteFlag_t;

/* MeasurementDataItem-KPMv2 */
typedef struct MeasurementDataItem_KPMv2 {
	MeasurementRecord_KPMv2_t	 measRecord;
	MeasurementDataItem_KPMv2__incompleteFlag_t	*incompleteFlag;	/* OPTIONAL */
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} MeasurementDataItem_KPMv2_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_incompleteFlag_3;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_MeasurementDataItem_KPMv2;
extern asn_SEQUENCE_specifics_t asn_SPC_MeasurementDataItem_KPMv2_specs_1;
extern asn_TYPE_member_t asn_MBR_MeasurementDataItem_KPMv2_1[2];

#ifdef __cplusplus
}
#endif

#endif	/* _MeasurementDataItem_KPMv2_H_ */
#include "asn_internal.h"
