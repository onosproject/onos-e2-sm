/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "E2SM-KPM-IEs"
 * 	found in "../v2/e2sm_kpm_v2.0.3-changed.asn"
 * 	`asn1c -fcompound-names -fincludes-quoted -fno-include-deps -findirect-choice -gen-PER -no-gen-OER -D.`
 */

#ifndef	_TestCond_Type_H_
#define	_TestCond_Type_H_


#include "asn_application.h"

/* Including external dependencies */
#include "NativeEnumerated.h"
#include "constr_CHOICE.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum TestCond_Type_PR {
	TestCond_Type_PR_NOTHING,	/* No components present */
	TestCond_Type_PR_gBR,
	TestCond_Type_PR_aMBR,
	TestCond_Type_PR_isStat,
	TestCond_Type_PR_isCatM,
	TestCond_Type_PR_rSRP,
	TestCond_Type_PR_rSRQ
	/* Extensions may appear below */
	
} TestCond_Type_PR;
typedef enum TestCond_Type__gBR {
	TestCond_Type__gBR_true	= 0
	/*
	 * Enumeration is extensible
	 */
} e_TestCond_Type__gBR;

/* TestCond_Type__gBR */
typedef long	 TestCond_Type__gBR_t;

typedef enum TestCond_Type__aMBR {
	TestCond_Type__aMBR_true	= 0
	/*
	 * Enumeration is extensible
	 */
} e_TestCond_Type__aMBR;

/* TestCond_Type__aMBR */
typedef long	 TestCond_Type__aMBR_t;

typedef enum TestCond_Type__isStat {
	TestCond_Type__isStat_true	= 0
	/*
	 * Enumeration is extensible
	 */
} e_TestCond_Type__isStat;

/* TestCond_Type__isStat */
typedef long	 TestCond_Type__isStat_t;

typedef enum TestCond_Type__isCatM {
	TestCond_Type__isCatM_true	= 0
	/*
	 * Enumeration is extensible
	 */
} e_TestCond_Type__isCatM;

/* e_TestCond_Type__isCatM */
typedef long	 TestCond_Type__isCatM_t;

typedef enum TestCond_Type__rSRP {
	TestCond_Type__rSRP_true	= 0
	/*
	 * Enumeration is extensible
	 */
} e_TestCond_Type__rSRP;

/* TestCond_Type__rSRP */
typedef long	 TestCond_Type__rSRP_t;

typedef enum TestCond_Type__rSRQ {
	TestCond_Type__rSRQ_true	= 0
	/*
	 * Enumeration is extensible
	 */
} e_TestCond_Type__rSRQ;

/* TestCond_Type__rSRQ */
typedef long	 TestCond_Type__rSRQ_t;

/* TestCond-Type */
typedef struct TestCond_Type {
	TestCond_Type_PR present;
	union TestCond_Type_u {
		TestCond_Type__gBR_t	 gBR;
		TestCond_Type__aMBR_t	 aMBR;
		TestCond_Type__isStat_t	 isStat;
		TestCond_Type__isCatM_t	 isCatM;
		TestCond_Type__rSRP_t	 rSRP;
		TestCond_Type__rSRQ_t	 rSRQ;
		/*
		 * This type is extensible,
		 * possible extensions are below.
		 */
	} choice;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} TestCond_Type_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_gBR_2;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_aMBR_5;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_isStat_8;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_isCatM_11;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_rSRP_14;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_rSRQ_17;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_TestCond_Type;
extern asn_CHOICE_specifics_t asn_SPC_TestCond_Type_specs_1;
extern asn_TYPE_member_t asn_MBR_TestCond_Type_1[6];
extern asn_per_constraints_t asn_PER_type_TestCond_Type_constr_1;

#ifdef __cplusplus
}
#endif

#endif	/* _TestCond_Type_H_ */
#include "asn_internal.h"
