// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_rc/v1/e2sm_rc.proto

package e2smrcies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MaxnoofMessages with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofMessagesMultiError, or nil if none found.
func (m *MaxnoofMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofMessagesValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofMessagesMultiError(errors)
	}

	return nil
}

// MaxnoofMessagesMultiError is an error wrapping multiple validation errors
// returned by MaxnoofMessages.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofMessagesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofMessagesMultiError) AllErrors() []error { return m }

// MaxnoofMessagesValidationError is the validation error returned by
// MaxnoofMessages.Validate if the designated constraints aren't met.
type MaxnoofMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofMessagesValidationError) ErrorName() string { return "MaxnoofMessagesValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofMessagesValidationError{}

// Validate checks the field values on MaxnoofE2InfoChanges with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofE2InfoChanges) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofE2InfoChanges with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofE2InfoChangesMultiError, or nil if none found.
func (m *MaxnoofE2InfoChanges) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofE2InfoChanges) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofE2InfoChangesValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofE2InfoChangesMultiError(errors)
	}

	return nil
}

// MaxnoofE2InfoChangesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofE2InfoChanges.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofE2InfoChangesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofE2InfoChangesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofE2InfoChangesMultiError) AllErrors() []error { return m }

// MaxnoofE2InfoChangesValidationError is the validation error returned by
// MaxnoofE2InfoChanges.Validate if the designated constraints aren't met.
type MaxnoofE2InfoChangesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofE2InfoChangesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofE2InfoChangesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofE2InfoChangesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofE2InfoChangesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofE2InfoChangesValidationError) ErrorName() string {
	return "MaxnoofE2InfoChangesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofE2InfoChangesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofE2InfoChanges.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofE2InfoChangesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofE2InfoChangesValidationError{}

// Validate checks the field values on MaxnoofUeinfoChanges with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUeinfoChanges) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUeinfoChanges with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofUeinfoChangesMultiError, or nil if none found.
func (m *MaxnoofUeinfoChanges) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUeinfoChanges) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofUeinfoChangesValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUeinfoChangesMultiError(errors)
	}

	return nil
}

// MaxnoofUeinfoChangesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofUeinfoChanges.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofUeinfoChangesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUeinfoChangesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUeinfoChangesMultiError) AllErrors() []error { return m }

// MaxnoofUeinfoChangesValidationError is the validation error returned by
// MaxnoofUeinfoChanges.Validate if the designated constraints aren't met.
type MaxnoofUeinfoChangesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUeinfoChangesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUeinfoChangesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUeinfoChangesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUeinfoChangesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUeinfoChangesValidationError) ErrorName() string {
	return "MaxnoofUeinfoChangesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofUeinfoChangesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUeinfoChanges.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUeinfoChangesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUeinfoChangesValidationError{}

// Validate checks the field values on MaxnoofRrcstate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRrcstate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRrcstate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRrcstateMultiError, or nil if none found.
func (m *MaxnoofRrcstate) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRrcstate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxnoofRrcstateValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRrcstateMultiError(errors)
	}

	return nil
}

// MaxnoofRrcstateMultiError is an error wrapping multiple validation errors
// returned by MaxnoofRrcstate.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofRrcstateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRrcstateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRrcstateMultiError) AllErrors() []error { return m }

// MaxnoofRrcstateValidationError is the validation error returned by
// MaxnoofRrcstate.Validate if the designated constraints aren't met.
type MaxnoofRrcstateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRrcstateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRrcstateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRrcstateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRrcstateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRrcstateValidationError) ErrorName() string { return "MaxnoofRrcstateValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofRrcstateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRrcstate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRrcstateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRrcstateValidationError{}

// Validate checks the field values on MaxnoofParametersToReport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofParametersToReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofParametersToReport with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofParametersToReportMultiError, or nil if none found.
func (m *MaxnoofParametersToReport) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofParametersToReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofParametersToReportValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofParametersToReportMultiError(errors)
	}

	return nil
}

// MaxnoofParametersToReportMultiError is an error wrapping multiple validation
// errors returned by MaxnoofParametersToReport.ValidateAll() if the
// designated constraints aren't met.
type MaxnoofParametersToReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofParametersToReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofParametersToReportMultiError) AllErrors() []error { return m }

// MaxnoofParametersToReportValidationError is the validation error returned by
// MaxnoofParametersToReport.Validate if the designated constraints aren't met.
type MaxnoofParametersToReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofParametersToReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofParametersToReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofParametersToReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofParametersToReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofParametersToReportValidationError) ErrorName() string {
	return "MaxnoofParametersToReportValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofParametersToReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofParametersToReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofParametersToReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofParametersToReportValidationError{}

// Validate checks the field values on MaxnoofPolicyConditions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPolicyConditions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPolicyConditions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPolicyConditionsMultiError, or nil if none found.
func (m *MaxnoofPolicyConditions) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPolicyConditions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofPolicyConditionsValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPolicyConditionsMultiError(errors)
	}

	return nil
}

// MaxnoofPolicyConditionsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofPolicyConditions.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofPolicyConditionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPolicyConditionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPolicyConditionsMultiError) AllErrors() []error { return m }

// MaxnoofPolicyConditionsValidationError is the validation error returned by
// MaxnoofPolicyConditions.Validate if the designated constraints aren't met.
type MaxnoofPolicyConditionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPolicyConditionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPolicyConditionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPolicyConditionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPolicyConditionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPolicyConditionsValidationError) ErrorName() string {
	return "MaxnoofPolicyConditionsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPolicyConditionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPolicyConditions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPolicyConditionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPolicyConditionsValidationError{}

// Validate checks the field values on MaxnoofAssociatedRanparameters with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofAssociatedRanparameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofAssociatedRanparameters with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofAssociatedRanparametersMultiError, or nil if none found.
func (m *MaxnoofAssociatedRanparameters) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofAssociatedRanparameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofAssociatedRanparametersValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofAssociatedRanparametersMultiError(errors)
	}

	return nil
}

// MaxnoofAssociatedRanparametersMultiError is an error wrapping multiple
// validation errors returned by MaxnoofAssociatedRanparameters.ValidateAll()
// if the designated constraints aren't met.
type MaxnoofAssociatedRanparametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofAssociatedRanparametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofAssociatedRanparametersMultiError) AllErrors() []error { return m }

// MaxnoofAssociatedRanparametersValidationError is the validation error
// returned by MaxnoofAssociatedRanparameters.Validate if the designated
// constraints aren't met.
type MaxnoofAssociatedRanparametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofAssociatedRanparametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofAssociatedRanparametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofAssociatedRanparametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofAssociatedRanparametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofAssociatedRanparametersValidationError) ErrorName() string {
	return "MaxnoofAssociatedRanparametersValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofAssociatedRanparametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofAssociatedRanparameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofAssociatedRanparametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofAssociatedRanparametersValidationError{}

// Validate checks the field values on MaxnoofUeid with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUeid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUeid with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofUeidMultiError, or
// nil if none found.
func (m *MaxnoofUeid) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUeid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofUeidValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUeidMultiError(errors)
	}

	return nil
}

// MaxnoofUeidMultiError is an error wrapping multiple validation errors
// returned by MaxnoofUeid.ValidateAll() if the designated constraints aren't met.
type MaxnoofUeidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUeidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUeidMultiError) AllErrors() []error { return m }

// MaxnoofUeidValidationError is the validation error returned by
// MaxnoofUeid.Validate if the designated constraints aren't met.
type MaxnoofUeidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUeidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUeidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUeidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUeidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUeidValidationError) ErrorName() string { return "MaxnoofUeidValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofUeidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUeid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUeidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUeidValidationError{}

// Validate checks the field values on MaxnoofCellId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCellId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofCellIdMultiError, or
// nil if none found.
func (m *MaxnoofCellId) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofCellIdValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellIdMultiError(errors)
	}

	return nil
}

// MaxnoofCellIdMultiError is an error wrapping multiple validation errors
// returned by MaxnoofCellId.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofCellIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellIdMultiError) AllErrors() []error { return m }

// MaxnoofCellIdValidationError is the validation error returned by
// MaxnoofCellId.Validate if the designated constraints aren't met.
type MaxnoofCellIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellIdValidationError) ErrorName() string { return "MaxnoofCellIdValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofCellIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellIdValidationError{}

// Validate checks the field values on MaxnoofRanoutcomeParameters with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRanoutcomeParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRanoutcomeParameters with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRanoutcomeParametersMultiError, or nil if none found.
func (m *MaxnoofRanoutcomeParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRanoutcomeParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 255 {
		err := MaxnoofRanoutcomeParametersValidationError{
			field:  "Value",
			reason: "value must equal 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRanoutcomeParametersMultiError(errors)
	}

	return nil
}

// MaxnoofRanoutcomeParametersMultiError is an error wrapping multiple
// validation errors returned by MaxnoofRanoutcomeParameters.ValidateAll() if
// the designated constraints aren't met.
type MaxnoofRanoutcomeParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRanoutcomeParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRanoutcomeParametersMultiError) AllErrors() []error { return m }

// MaxnoofRanoutcomeParametersValidationError is the validation error returned
// by MaxnoofRanoutcomeParameters.Validate if the designated constraints
// aren't met.
type MaxnoofRanoutcomeParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRanoutcomeParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRanoutcomeParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRanoutcomeParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRanoutcomeParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRanoutcomeParametersValidationError) ErrorName() string {
	return "MaxnoofRanoutcomeParametersValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRanoutcomeParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRanoutcomeParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRanoutcomeParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRanoutcomeParametersValidationError{}

// Validate checks the field values on MaxnoofParametersinStructure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofParametersinStructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofParametersinStructure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofParametersinStructureMultiError, or nil if none found.
func (m *MaxnoofParametersinStructure) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofParametersinStructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofParametersinStructureValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofParametersinStructureMultiError(errors)
	}

	return nil
}

// MaxnoofParametersinStructureMultiError is an error wrapping multiple
// validation errors returned by MaxnoofParametersinStructure.ValidateAll() if
// the designated constraints aren't met.
type MaxnoofParametersinStructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofParametersinStructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofParametersinStructureMultiError) AllErrors() []error { return m }

// MaxnoofParametersinStructureValidationError is the validation error returned
// by MaxnoofParametersinStructure.Validate if the designated constraints
// aren't met.
type MaxnoofParametersinStructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofParametersinStructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofParametersinStructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofParametersinStructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofParametersinStructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofParametersinStructureValidationError) ErrorName() string {
	return "MaxnoofParametersinStructureValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofParametersinStructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofParametersinStructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofParametersinStructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofParametersinStructureValidationError{}

// Validate checks the field values on MaxnoofItemsinList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofItemsinList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofItemsinList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofItemsinListMultiError, or nil if none found.
func (m *MaxnoofItemsinList) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofItemsinList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofItemsinListValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofItemsinListMultiError(errors)
	}

	return nil
}

// MaxnoofItemsinListMultiError is an error wrapping multiple validation errors
// returned by MaxnoofItemsinList.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofItemsinListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofItemsinListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofItemsinListMultiError) AllErrors() []error { return m }

// MaxnoofItemsinListValidationError is the validation error returned by
// MaxnoofItemsinList.Validate if the designated constraints aren't met.
type MaxnoofItemsinListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofItemsinListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofItemsinListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofItemsinListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofItemsinListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofItemsinListValidationError) ErrorName() string {
	return "MaxnoofItemsinListValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofItemsinListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofItemsinList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofItemsinListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofItemsinListValidationError{}

// Validate checks the field values on MaxnoofUeinfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUeinfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUeinfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofUeinfoMultiError, or
// nil if none found.
func (m *MaxnoofUeinfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUeinfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofUeinfoValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUeinfoMultiError(errors)
	}

	return nil
}

// MaxnoofUeinfoMultiError is an error wrapping multiple validation errors
// returned by MaxnoofUeinfo.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofUeinfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUeinfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUeinfoMultiError) AllErrors() []error { return m }

// MaxnoofUeinfoValidationError is the validation error returned by
// MaxnoofUeinfo.Validate if the designated constraints aren't met.
type MaxnoofUeinfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUeinfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUeinfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUeinfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUeinfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUeinfoValidationError) ErrorName() string { return "MaxnoofUeinfoValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofUeinfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUeinfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUeinfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUeinfoValidationError{}

// Validate checks the field values on MaxnoofCellInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCellInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCellInfoMultiError, or nil if none found.
func (m *MaxnoofCellInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofCellInfoValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellInfoMultiError(errors)
	}

	return nil
}

// MaxnoofCellInfoMultiError is an error wrapping multiple validation errors
// returned by MaxnoofCellInfo.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofCellInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellInfoMultiError) AllErrors() []error { return m }

// MaxnoofCellInfoValidationError is the validation error returned by
// MaxnoofCellInfo.Validate if the designated constraints aren't met.
type MaxnoofCellInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellInfoValidationError) ErrorName() string { return "MaxnoofCellInfoValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofCellInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellInfoValidationError{}

// Validate checks the field values on MaxnoofUeeventInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofUeeventInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofUeeventInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofUeeventInfoMultiError, or nil if none found.
func (m *MaxnoofUeeventInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofUeeventInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofUeeventInfoValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofUeeventInfoMultiError(errors)
	}

	return nil
}

// MaxnoofUeeventInfoMultiError is an error wrapping multiple validation errors
// returned by MaxnoofUeeventInfo.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofUeeventInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofUeeventInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofUeeventInfoMultiError) AllErrors() []error { return m }

// MaxnoofUeeventInfoValidationError is the validation error returned by
// MaxnoofUeeventInfo.Validate if the designated constraints aren't met.
type MaxnoofUeeventInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUeeventInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUeeventInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUeeventInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUeeventInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUeeventInfoValidationError) ErrorName() string {
	return "MaxnoofUeeventInfoValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofUeeventInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUeeventInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUeeventInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUeeventInfoValidationError{}

// Validate checks the field values on MaxnoofRanparamTest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRanparamTest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRanparamTest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRanparamTestMultiError, or nil if none found.
func (m *MaxnoofRanparamTest) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRanparamTest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 255 {
		err := MaxnoofRanparamTestValidationError{
			field:  "Value",
			reason: "value must equal 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRanparamTestMultiError(errors)
	}

	return nil
}

// MaxnoofRanparamTestMultiError is an error wrapping multiple validation
// errors returned by MaxnoofRanparamTest.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofRanparamTestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRanparamTestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRanparamTestMultiError) AllErrors() []error { return m }

// MaxnoofRanparamTestValidationError is the validation error returned by
// MaxnoofRanparamTest.Validate if the designated constraints aren't met.
type MaxnoofRanparamTestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRanparamTestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRanparamTestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRanparamTestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRanparamTestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRanparamTestValidationError) ErrorName() string {
	return "MaxnoofRanparamTestValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRanparamTestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRanparamTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRanparamTestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRanparamTestValidationError{}

// Validate checks the field values on MaxnoofNeighbourCell with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNeighbourCell) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNeighbourCell with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofNeighbourCellMultiError, or nil if none found.
func (m *MaxnoofNeighbourCell) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNeighbourCell) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofNeighbourCellValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNeighbourCellMultiError(errors)
	}

	return nil
}

// MaxnoofNeighbourCellMultiError is an error wrapping multiple validation
// errors returned by MaxnoofNeighbourCell.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofNeighbourCellMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNeighbourCellMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNeighbourCellMultiError) AllErrors() []error { return m }

// MaxnoofNeighbourCellValidationError is the validation error returned by
// MaxnoofNeighbourCell.Validate if the designated constraints aren't met.
type MaxnoofNeighbourCellValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNeighbourCellValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNeighbourCellValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNeighbourCellValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNeighbourCellValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNeighbourCellValidationError) ErrorName() string {
	return "MaxnoofNeighbourCellValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNeighbourCellValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNeighbourCell.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNeighbourCellValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNeighbourCellValidationError{}

// Validate checks the field values on MaxnoofRicstyles with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRicstyles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRicstyles with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRicstylesMultiError, or nil if none found.
func (m *MaxnoofRicstyles) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRicstyles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 63 {
		err := MaxnoofRicstylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRicstylesMultiError(errors)
	}

	return nil
}

// MaxnoofRicstylesMultiError is an error wrapping multiple validation errors
// returned by MaxnoofRicstyles.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofRicstylesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRicstylesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRicstylesMultiError) AllErrors() []error { return m }

// MaxnoofRicstylesValidationError is the validation error returned by
// MaxnoofRicstyles.Validate if the designated constraints aren't met.
type MaxnoofRicstylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRicstylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRicstylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRicstylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRicstylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRicstylesValidationError) ErrorName() string { return "MaxnoofRicstylesValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofRicstylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRicstyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRicstylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRicstylesValidationError{}

// Validate checks the field values on MaxnoofCallProcessTypes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCallProcessTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCallProcessTypes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCallProcessTypesMultiError, or nil if none found.
func (m *MaxnoofCallProcessTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCallProcessTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofCallProcessTypesValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCallProcessTypesMultiError(errors)
	}

	return nil
}

// MaxnoofCallProcessTypesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofCallProcessTypes.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofCallProcessTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCallProcessTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCallProcessTypesMultiError) AllErrors() []error { return m }

// MaxnoofCallProcessTypesValidationError is the validation error returned by
// MaxnoofCallProcessTypes.Validate if the designated constraints aren't met.
type MaxnoofCallProcessTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCallProcessTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCallProcessTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCallProcessTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCallProcessTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCallProcessTypesValidationError) ErrorName() string {
	return "MaxnoofCallProcessTypesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCallProcessTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCallProcessTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCallProcessTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCallProcessTypesValidationError{}

// Validate checks the field values on MaxnoofCallProcessBreakpoints with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCallProcessBreakpoints) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCallProcessBreakpoints with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofCallProcessBreakpointsMultiError, or nil if none found.
func (m *MaxnoofCallProcessBreakpoints) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCallProcessBreakpoints) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofCallProcessBreakpointsValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCallProcessBreakpointsMultiError(errors)
	}

	return nil
}

// MaxnoofCallProcessBreakpointsMultiError is an error wrapping multiple
// validation errors returned by MaxnoofCallProcessBreakpoints.ValidateAll()
// if the designated constraints aren't met.
type MaxnoofCallProcessBreakpointsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCallProcessBreakpointsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCallProcessBreakpointsMultiError) AllErrors() []error { return m }

// MaxnoofCallProcessBreakpointsValidationError is the validation error
// returned by MaxnoofCallProcessBreakpoints.Validate if the designated
// constraints aren't met.
type MaxnoofCallProcessBreakpointsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCallProcessBreakpointsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCallProcessBreakpointsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCallProcessBreakpointsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCallProcessBreakpointsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCallProcessBreakpointsValidationError) ErrorName() string {
	return "MaxnoofCallProcessBreakpointsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCallProcessBreakpointsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCallProcessBreakpoints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCallProcessBreakpointsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCallProcessBreakpointsValidationError{}

// Validate checks the field values on MaxnoofInsertIndication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofInsertIndication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofInsertIndication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofInsertIndicationMultiError, or nil if none found.
func (m *MaxnoofInsertIndication) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofInsertIndication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofInsertIndicationValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofInsertIndicationMultiError(errors)
	}

	return nil
}

// MaxnoofInsertIndicationMultiError is an error wrapping multiple validation
// errors returned by MaxnoofInsertIndication.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofInsertIndicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofInsertIndicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofInsertIndicationMultiError) AllErrors() []error { return m }

// MaxnoofInsertIndicationValidationError is the validation error returned by
// MaxnoofInsertIndication.Validate if the designated constraints aren't met.
type MaxnoofInsertIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofInsertIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofInsertIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofInsertIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofInsertIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofInsertIndicationValidationError) ErrorName() string {
	return "MaxnoofInsertIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofInsertIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofInsertIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofInsertIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofInsertIndicationValidationError{}

// Validate checks the field values on MaxnoofControlAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofControlAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofControlAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofControlActionMultiError, or nil if none found.
func (m *MaxnoofControlAction) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofControlAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofControlActionValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofControlActionMultiError(errors)
	}

	return nil
}

// MaxnoofControlActionMultiError is an error wrapping multiple validation
// errors returned by MaxnoofControlAction.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofControlActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofControlActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofControlActionMultiError) AllErrors() []error { return m }

// MaxnoofControlActionValidationError is the validation error returned by
// MaxnoofControlAction.Validate if the designated constraints aren't met.
type MaxnoofControlActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofControlActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofControlActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofControlActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofControlActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofControlActionValidationError) ErrorName() string {
	return "MaxnoofControlActionValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofControlActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofControlAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofControlActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofControlActionValidationError{}

// Validate checks the field values on MaxnoofPolicyAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPolicyAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPolicyAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPolicyActionMultiError, or nil if none found.
func (m *MaxnoofPolicyAction) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPolicyAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofPolicyActionValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPolicyActionMultiError(errors)
	}

	return nil
}

// MaxnoofPolicyActionMultiError is an error wrapping multiple validation
// errors returned by MaxnoofPolicyAction.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofPolicyActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPolicyActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPolicyActionMultiError) AllErrors() []error { return m }

// MaxnoofPolicyActionValidationError is the validation error returned by
// MaxnoofPolicyAction.Validate if the designated constraints aren't met.
type MaxnoofPolicyActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPolicyActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPolicyActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPolicyActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPolicyActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPolicyActionValidationError) ErrorName() string {
	return "MaxnoofPolicyActionValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofPolicyActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPolicyAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPolicyActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPolicyActionValidationError{}

// Validate checks the field values on NeighborCellList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NeighborCellList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NeighborCellList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NeighborCellListMultiError, or nil if none found.
func (m *NeighborCellList) ValidateAll() error {
	return m.validate(true)
}

func (m *NeighborCellList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NeighborCellListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NeighborCellListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NeighborCellListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NeighborCellListMultiError(errors)
	}

	return nil
}

// NeighborCellListMultiError is an error wrapping multiple validation errors
// returned by NeighborCellList.ValidateAll() if the designated constraints
// aren't met.
type NeighborCellListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NeighborCellListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NeighborCellListMultiError) AllErrors() []error { return m }

// NeighborCellListValidationError is the validation error returned by
// NeighborCellList.Validate if the designated constraints aren't met.
type NeighborCellListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NeighborCellListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NeighborCellListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NeighborCellListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NeighborCellListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NeighborCellListValidationError) ErrorName() string { return "NeighborCellListValidationError" }

// Error satisfies the builtin error interface
func (e NeighborCellListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNeighborCellList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NeighborCellListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NeighborCellListValidationError{}

// Validate checks the field values on NeighborCellItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NeighborCellItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NeighborCellItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NeighborCellItemMultiError, or nil if none found.
func (m *NeighborCellItem) ValidateAll() error {
	return m.validate(true)
}

func (m *NeighborCellItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.NeighborCellItem.(type) {

	case *NeighborCellItem_RanTypeChoiceNr:

		if all {
			switch v := interface{}(m.GetRanTypeChoiceNr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NeighborCellItemValidationError{
						field:  "RanTypeChoiceNr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NeighborCellItemValidationError{
						field:  "RanTypeChoiceNr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanTypeChoiceNr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NeighborCellItemValidationError{
					field:  "RanTypeChoiceNr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NeighborCellItem_RanTypeChoiceEutra:

		if all {
			switch v := interface{}(m.GetRanTypeChoiceEutra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NeighborCellItemValidationError{
						field:  "RanTypeChoiceEutra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NeighborCellItemValidationError{
						field:  "RanTypeChoiceEutra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanTypeChoiceEutra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NeighborCellItemValidationError{
					field:  "RanTypeChoiceEutra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NeighborCellItemMultiError(errors)
	}

	return nil
}

// NeighborCellItemMultiError is an error wrapping multiple validation errors
// returned by NeighborCellItem.ValidateAll() if the designated constraints
// aren't met.
type NeighborCellItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NeighborCellItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NeighborCellItemMultiError) AllErrors() []error { return m }

// NeighborCellItemValidationError is the validation error returned by
// NeighborCellItem.Validate if the designated constraints aren't met.
type NeighborCellItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NeighborCellItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NeighborCellItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NeighborCellItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NeighborCellItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NeighborCellItemValidationError) ErrorName() string { return "NeighborCellItemValidationError" }

// Error satisfies the builtin error interface
func (e NeighborCellItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNeighborCellItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NeighborCellItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NeighborCellItemValidationError{}

// Validate checks the field values on NeighborCellItemChoiceNr with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NeighborCellItemChoiceNr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NeighborCellItemChoiceNr with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NeighborCellItemChoiceNrMultiError, or nil if none found.
func (m *NeighborCellItemChoiceNr) ValidateAll() error {
	return m.validate(true)
}

func (m *NeighborCellItemChoiceNr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNRCgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborCellItemChoiceNrValidationError{
					field:  "NRCgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborCellItemChoiceNrValidationError{
					field:  "NRCgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNRCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborCellItemChoiceNrValidationError{
				field:  "NRCgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNRPci()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborCellItemChoiceNrValidationError{
					field:  "NRPci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborCellItemChoiceNrValidationError{
					field:  "NRPci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNRPci()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborCellItemChoiceNrValidationError{
				field:  "NRPci",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFiveGsTac()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborCellItemChoiceNrValidationError{
					field:  "FiveGsTac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborCellItemChoiceNrValidationError{
					field:  "FiveGsTac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFiveGsTac()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborCellItemChoiceNrValidationError{
				field:  "FiveGsTac",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NRModeInfo

	if all {
		switch v := interface{}(m.GetNRFreqInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborCellItemChoiceNrValidationError{
					field:  "NRFreqInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborCellItemChoiceNrValidationError{
					field:  "NRFreqInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNRFreqInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborCellItemChoiceNrValidationError{
				field:  "NRFreqInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for X2XnEstablished

	// no validation rules for HOValidated

	// no validation rules for Version

	if len(errors) > 0 {
		return NeighborCellItemChoiceNrMultiError(errors)
	}

	return nil
}

// NeighborCellItemChoiceNrMultiError is an error wrapping multiple validation
// errors returned by NeighborCellItemChoiceNr.ValidateAll() if the designated
// constraints aren't met.
type NeighborCellItemChoiceNrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NeighborCellItemChoiceNrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NeighborCellItemChoiceNrMultiError) AllErrors() []error { return m }

// NeighborCellItemChoiceNrValidationError is the validation error returned by
// NeighborCellItemChoiceNr.Validate if the designated constraints aren't met.
type NeighborCellItemChoiceNrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NeighborCellItemChoiceNrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NeighborCellItemChoiceNrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NeighborCellItemChoiceNrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NeighborCellItemChoiceNrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NeighborCellItemChoiceNrValidationError) ErrorName() string {
	return "NeighborCellItemChoiceNrValidationError"
}

// Error satisfies the builtin error interface
func (e NeighborCellItemChoiceNrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNeighborCellItemChoiceNr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NeighborCellItemChoiceNrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NeighborCellItemChoiceNrValidationError{}

// Validate checks the field values on NeighborCellItemChoiceEUtra with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NeighborCellItemChoiceEUtra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NeighborCellItemChoiceEUtra with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NeighborCellItemChoiceEUtraMultiError, or nil if none found.
func (m *NeighborCellItemChoiceEUtra) ValidateAll() error {
	return m.validate(true)
}

func (m *NeighborCellItemChoiceEUtra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEUtraCgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborCellItemChoiceEUtraValidationError{
					field:  "EUtraCgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborCellItemChoiceEUtraValidationError{
					field:  "EUtraCgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEUtraCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborCellItemChoiceEUtraValidationError{
				field:  "EUtraCgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEUtraPci()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborCellItemChoiceEUtraValidationError{
					field:  "EUtraPci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborCellItemChoiceEUtraValidationError{
					field:  "EUtraPci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEUtraPci()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborCellItemChoiceEUtraValidationError{
				field:  "EUtraPci",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEUtraArfcn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborCellItemChoiceEUtraValidationError{
					field:  "EUtraArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborCellItemChoiceEUtraValidationError{
					field:  "EUtraArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEUtraArfcn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborCellItemChoiceEUtraValidationError{
				field:  "EUtraArfcn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEUtraTac()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborCellItemChoiceEUtraValidationError{
					field:  "EUtraTac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborCellItemChoiceEUtraValidationError{
					field:  "EUtraTac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEUtraTac()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborCellItemChoiceEUtraValidationError{
				field:  "EUtraTac",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for X2XnEstablished

	// no validation rules for HOValidated

	// no validation rules for Version

	if len(errors) > 0 {
		return NeighborCellItemChoiceEUtraMultiError(errors)
	}

	return nil
}

// NeighborCellItemChoiceEUtraMultiError is an error wrapping multiple
// validation errors returned by NeighborCellItemChoiceEUtra.ValidateAll() if
// the designated constraints aren't met.
type NeighborCellItemChoiceEUtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NeighborCellItemChoiceEUtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NeighborCellItemChoiceEUtraMultiError) AllErrors() []error { return m }

// NeighborCellItemChoiceEUtraValidationError is the validation error returned
// by NeighborCellItemChoiceEUtra.Validate if the designated constraints
// aren't met.
type NeighborCellItemChoiceEUtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NeighborCellItemChoiceEUtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NeighborCellItemChoiceEUtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NeighborCellItemChoiceEUtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NeighborCellItemChoiceEUtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NeighborCellItemChoiceEUtraValidationError) ErrorName() string {
	return "NeighborCellItemChoiceEUtraValidationError"
}

// Error satisfies the builtin error interface
func (e NeighborCellItemChoiceEUtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNeighborCellItemChoiceEUtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NeighborCellItemChoiceEUtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NeighborCellItemChoiceEUtraValidationError{}

// Validate checks the field values on NeighborRelationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NeighborRelationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NeighborRelationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NeighborRelationInfoMultiError, or nil if none found.
func (m *NeighborRelationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NeighborRelationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServingCellPci()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborRelationInfoValidationError{
					field:  "ServingCellPci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborRelationInfoValidationError{
					field:  "ServingCellPci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServingCellPci()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborRelationInfoValidationError{
				field:  "ServingCellPci",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServingCellArfcn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborRelationInfoValidationError{
					field:  "ServingCellArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborRelationInfoValidationError{
					field:  "ServingCellArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServingCellArfcn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborRelationInfoValidationError{
				field:  "ServingCellArfcn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNeighborCellList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NeighborRelationInfoValidationError{
					field:  "NeighborCellList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NeighborRelationInfoValidationError{
					field:  "NeighborCellList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNeighborCellList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NeighborRelationInfoValidationError{
				field:  "NeighborCellList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NeighborRelationInfoMultiError(errors)
	}

	return nil
}

// NeighborRelationInfoMultiError is an error wrapping multiple validation
// errors returned by NeighborRelationInfo.ValidateAll() if the designated
// constraints aren't met.
type NeighborRelationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NeighborRelationInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NeighborRelationInfoMultiError) AllErrors() []error { return m }

// NeighborRelationInfoValidationError is the validation error returned by
// NeighborRelationInfo.Validate if the designated constraints aren't met.
type NeighborRelationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NeighborRelationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NeighborRelationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NeighborRelationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NeighborRelationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NeighborRelationInfoValidationError) ErrorName() string {
	return "NeighborRelationInfoValidationError"
}

// Error satisfies the builtin error interface
func (e NeighborRelationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNeighborRelationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NeighborRelationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NeighborRelationInfoValidationError{}

// Validate checks the field values on EventTriggerCellInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventTriggerCellInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerCellInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventTriggerCellInfoMultiError, or nil if none found.
func (m *EventTriggerCellInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerCellInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetCellInfoList()); l < 1 || l > 65535 {
		err := EventTriggerCellInfoValidationError{
			field:  "CellInfoList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCellInfoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventTriggerCellInfoValidationError{
						field:  fmt.Sprintf("CellInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventTriggerCellInfoValidationError{
						field:  fmt.Sprintf("CellInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTriggerCellInfoValidationError{
					field:  fmt.Sprintf("CellInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventTriggerCellInfoMultiError(errors)
	}

	return nil
}

// EventTriggerCellInfoMultiError is an error wrapping multiple validation
// errors returned by EventTriggerCellInfo.ValidateAll() if the designated
// constraints aren't met.
type EventTriggerCellInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerCellInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerCellInfoMultiError) AllErrors() []error { return m }

// EventTriggerCellInfoValidationError is the validation error returned by
// EventTriggerCellInfo.Validate if the designated constraints aren't met.
type EventTriggerCellInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerCellInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerCellInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerCellInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerCellInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerCellInfoValidationError) ErrorName() string {
	return "EventTriggerCellInfoValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerCellInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerCellInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerCellInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerCellInfoValidationError{}

// Validate checks the field values on EventTriggerCellInfoItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventTriggerCellInfoItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerCellInfoItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventTriggerCellInfoItemMultiError, or nil if none found.
func (m *EventTriggerCellInfoItem) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerCellInfoItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventTriggerCellId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerCellInfoItemValidationError{
					field:  "EventTriggerCellId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerCellInfoItemValidationError{
					field:  "EventTriggerCellId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTriggerCellId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerCellInfoItemValidationError{
				field:  "EventTriggerCellId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCellType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerCellInfoItemValidationError{
					field:  "CellType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerCellInfoItemValidationError{
					field:  "CellType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerCellInfoItemValidationError{
				field:  "CellType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LogicalOr != nil {
		// no validation rules for LogicalOr
	}

	if len(errors) > 0 {
		return EventTriggerCellInfoItemMultiError(errors)
	}

	return nil
}

// EventTriggerCellInfoItemMultiError is an error wrapping multiple validation
// errors returned by EventTriggerCellInfoItem.ValidateAll() if the designated
// constraints aren't met.
type EventTriggerCellInfoItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerCellInfoItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerCellInfoItemMultiError) AllErrors() []error { return m }

// EventTriggerCellInfoItemValidationError is the validation error returned by
// EventTriggerCellInfoItem.Validate if the designated constraints aren't met.
type EventTriggerCellInfoItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerCellInfoItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerCellInfoItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerCellInfoItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerCellInfoItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerCellInfoItemValidationError) ErrorName() string {
	return "EventTriggerCellInfoItemValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerCellInfoItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerCellInfoItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerCellInfoItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerCellInfoItemValidationError{}

// Validate checks the field values on CellType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CellType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CellTypeMultiError, or nil
// if none found.
func (m *CellType) ValidateAll() error {
	return m.validate(true)
}

func (m *CellType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.CellType.(type) {

	case *CellType_CellTypeChoiceIndividual:

		if all {
			switch v := interface{}(m.GetCellTypeChoiceIndividual()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellTypeValidationError{
						field:  "CellTypeChoiceIndividual",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellTypeValidationError{
						field:  "CellTypeChoiceIndividual",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCellTypeChoiceIndividual()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellTypeValidationError{
					field:  "CellTypeChoiceIndividual",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CellType_CellTypeChoiceGroup:

		if all {
			switch v := interface{}(m.GetCellTypeChoiceGroup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellTypeValidationError{
						field:  "CellTypeChoiceGroup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellTypeValidationError{
						field:  "CellTypeChoiceGroup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCellTypeChoiceGroup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellTypeValidationError{
					field:  "CellTypeChoiceGroup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CellTypeMultiError(errors)
	}

	return nil
}

// CellTypeMultiError is an error wrapping multiple validation errors returned
// by CellType.ValidateAll() if the designated constraints aren't met.
type CellTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellTypeMultiError) AllErrors() []error { return m }

// CellTypeValidationError is the validation error returned by
// CellType.Validate if the designated constraints aren't met.
type CellTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellTypeValidationError) ErrorName() string { return "CellTypeValidationError" }

// Error satisfies the builtin error interface
func (e CellTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellTypeValidationError{}

// Validate checks the field values on EventTriggerCellInfoItemChoiceIndividual
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *EventTriggerCellInfoItemChoiceIndividual) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EventTriggerCellInfoItemChoiceIndividual with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// EventTriggerCellInfoItemChoiceIndividualMultiError, or nil if none found.
func (m *EventTriggerCellInfoItemChoiceIndividual) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerCellInfoItemChoiceIndividual) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCellGlobalId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerCellInfoItemChoiceIndividualValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerCellInfoItemChoiceIndividualValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerCellInfoItemChoiceIndividualValidationError{
				field:  "CellGlobalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventTriggerCellInfoItemChoiceIndividualMultiError(errors)
	}

	return nil
}

// EventTriggerCellInfoItemChoiceIndividualMultiError is an error wrapping
// multiple validation errors returned by
// EventTriggerCellInfoItemChoiceIndividual.ValidateAll() if the designated
// constraints aren't met.
type EventTriggerCellInfoItemChoiceIndividualMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerCellInfoItemChoiceIndividualMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerCellInfoItemChoiceIndividualMultiError) AllErrors() []error { return m }

// EventTriggerCellInfoItemChoiceIndividualValidationError is the validation
// error returned by EventTriggerCellInfoItemChoiceIndividual.Validate if the
// designated constraints aren't met.
type EventTriggerCellInfoItemChoiceIndividualValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerCellInfoItemChoiceIndividualValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerCellInfoItemChoiceIndividualValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerCellInfoItemChoiceIndividualValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerCellInfoItemChoiceIndividualValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerCellInfoItemChoiceIndividualValidationError) ErrorName() string {
	return "EventTriggerCellInfoItemChoiceIndividualValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerCellInfoItemChoiceIndividualValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerCellInfoItemChoiceIndividual.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerCellInfoItemChoiceIndividualValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerCellInfoItemChoiceIndividualValidationError{}

// Validate checks the field values on EventTriggerCellInfoItemChoiceGroup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EventTriggerCellInfoItemChoiceGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerCellInfoItemChoiceGroup
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// EventTriggerCellInfoItemChoiceGroupMultiError, or nil if none found.
func (m *EventTriggerCellInfoItemChoiceGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerCellInfoItemChoiceGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterTesting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerCellInfoItemChoiceGroupValidationError{
					field:  "RanParameterTesting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerCellInfoItemChoiceGroupValidationError{
					field:  "RanParameterTesting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterTesting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerCellInfoItemChoiceGroupValidationError{
				field:  "RanParameterTesting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventTriggerCellInfoItemChoiceGroupMultiError(errors)
	}

	return nil
}

// EventTriggerCellInfoItemChoiceGroupMultiError is an error wrapping multiple
// validation errors returned by
// EventTriggerCellInfoItemChoiceGroup.ValidateAll() if the designated
// constraints aren't met.
type EventTriggerCellInfoItemChoiceGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerCellInfoItemChoiceGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerCellInfoItemChoiceGroupMultiError) AllErrors() []error { return m }

// EventTriggerCellInfoItemChoiceGroupValidationError is the validation error
// returned by EventTriggerCellInfoItemChoiceGroup.Validate if the designated
// constraints aren't met.
type EventTriggerCellInfoItemChoiceGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerCellInfoItemChoiceGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerCellInfoItemChoiceGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerCellInfoItemChoiceGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerCellInfoItemChoiceGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerCellInfoItemChoiceGroupValidationError) ErrorName() string {
	return "EventTriggerCellInfoItemChoiceGroupValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerCellInfoItemChoiceGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerCellInfoItemChoiceGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerCellInfoItemChoiceGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerCellInfoItemChoiceGroupValidationError{}

// Validate checks the field values on EventTriggerUeInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventTriggerUeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerUeInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventTriggerUeInfoMultiError, or nil if none found.
func (m *EventTriggerUeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerUeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetUeInfoList()); l < 1 || l > 65535 {
		err := EventTriggerUeInfoValidationError{
			field:  "UeInfoList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUeInfoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventTriggerUeInfoValidationError{
						field:  fmt.Sprintf("UeInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventTriggerUeInfoValidationError{
						field:  fmt.Sprintf("UeInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTriggerUeInfoValidationError{
					field:  fmt.Sprintf("UeInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventTriggerUeInfoMultiError(errors)
	}

	return nil
}

// EventTriggerUeInfoMultiError is an error wrapping multiple validation errors
// returned by EventTriggerUeInfo.ValidateAll() if the designated constraints
// aren't met.
type EventTriggerUeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerUeInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerUeInfoMultiError) AllErrors() []error { return m }

// EventTriggerUeInfoValidationError is the validation error returned by
// EventTriggerUeInfo.Validate if the designated constraints aren't met.
type EventTriggerUeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerUeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerUeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerUeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerUeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerUeInfoValidationError) ErrorName() string {
	return "EventTriggerUeInfoValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerUeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerUeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerUeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerUeInfoValidationError{}

// Validate checks the field values on EventTriggerUeInfoItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventTriggerUeInfoItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerUeInfoItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventTriggerUeInfoItemMultiError, or nil if none found.
func (m *EventTriggerUeInfoItem) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerUeInfoItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventTriggerUeid()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerUeInfoItemValidationError{
					field:  "EventTriggerUeid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerUeInfoItemValidationError{
					field:  "EventTriggerUeid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTriggerUeid()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerUeInfoItemValidationError{
				field:  "EventTriggerUeid",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUeType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerUeInfoItemValidationError{
					field:  "UeType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerUeInfoItemValidationError{
					field:  "UeType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUeType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerUeInfoItemValidationError{
				field:  "UeType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LogicalOr != nil {
		// no validation rules for LogicalOr
	}

	if len(errors) > 0 {
		return EventTriggerUeInfoItemMultiError(errors)
	}

	return nil
}

// EventTriggerUeInfoItemMultiError is an error wrapping multiple validation
// errors returned by EventTriggerUeInfoItem.ValidateAll() if the designated
// constraints aren't met.
type EventTriggerUeInfoItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerUeInfoItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerUeInfoItemMultiError) AllErrors() []error { return m }

// EventTriggerUeInfoItemValidationError is the validation error returned by
// EventTriggerUeInfoItem.Validate if the designated constraints aren't met.
type EventTriggerUeInfoItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerUeInfoItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerUeInfoItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerUeInfoItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerUeInfoItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerUeInfoItemValidationError) ErrorName() string {
	return "EventTriggerUeInfoItemValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerUeInfoItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerUeInfoItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerUeInfoItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerUeInfoItemValidationError{}

// Validate checks the field values on UeType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeType with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UeTypeMultiError, or nil if none found.
func (m *UeType) ValidateAll() error {
	return m.validate(true)
}

func (m *UeType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.UeType.(type) {

	case *UeType_UeTypeChoiceIndividual:

		if all {
			switch v := interface{}(m.GetUeTypeChoiceIndividual()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeTypeValidationError{
						field:  "UeTypeChoiceIndividual",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeTypeValidationError{
						field:  "UeTypeChoiceIndividual",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUeTypeChoiceIndividual()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeTypeValidationError{
					field:  "UeTypeChoiceIndividual",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UeType_UeTypeChoiceGroup:

		if all {
			switch v := interface{}(m.GetUeTypeChoiceGroup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeTypeValidationError{
						field:  "UeTypeChoiceGroup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeTypeValidationError{
						field:  "UeTypeChoiceGroup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUeTypeChoiceGroup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeTypeValidationError{
					field:  "UeTypeChoiceGroup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeTypeMultiError(errors)
	}

	return nil
}

// UeTypeMultiError is an error wrapping multiple validation errors returned by
// UeType.ValidateAll() if the designated constraints aren't met.
type UeTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeTypeMultiError) AllErrors() []error { return m }

// UeTypeValidationError is the validation error returned by UeType.Validate if
// the designated constraints aren't met.
type UeTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeTypeValidationError) ErrorName() string { return "UeTypeValidationError" }

// Error satisfies the builtin error interface
func (e UeTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeTypeValidationError{}

// Validate checks the field values on EventTriggerUeInfoItemChoiceIndividual
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *EventTriggerUeInfoItemChoiceIndividual) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EventTriggerUeInfoItemChoiceIndividual with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// EventTriggerUeInfoItemChoiceIndividualMultiError, or nil if none found.
func (m *EventTriggerUeInfoItemChoiceIndividual) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerUeInfoItemChoiceIndividual) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerUeInfoItemChoiceIndividualValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerUeInfoItemChoiceIndividualValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerUeInfoItemChoiceIndividualValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterTesting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerUeInfoItemChoiceIndividualValidationError{
					field:  "RanParameterTesting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerUeInfoItemChoiceIndividualValidationError{
					field:  "RanParameterTesting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterTesting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerUeInfoItemChoiceIndividualValidationError{
				field:  "RanParameterTesting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventTriggerUeInfoItemChoiceIndividualMultiError(errors)
	}

	return nil
}

// EventTriggerUeInfoItemChoiceIndividualMultiError is an error wrapping
// multiple validation errors returned by
// EventTriggerUeInfoItemChoiceIndividual.ValidateAll() if the designated
// constraints aren't met.
type EventTriggerUeInfoItemChoiceIndividualMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerUeInfoItemChoiceIndividualMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerUeInfoItemChoiceIndividualMultiError) AllErrors() []error { return m }

// EventTriggerUeInfoItemChoiceIndividualValidationError is the validation
// error returned by EventTriggerUeInfoItemChoiceIndividual.Validate if the
// designated constraints aren't met.
type EventTriggerUeInfoItemChoiceIndividualValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerUeInfoItemChoiceIndividualValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerUeInfoItemChoiceIndividualValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerUeInfoItemChoiceIndividualValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerUeInfoItemChoiceIndividualValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerUeInfoItemChoiceIndividualValidationError) ErrorName() string {
	return "EventTriggerUeInfoItemChoiceIndividualValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerUeInfoItemChoiceIndividualValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerUeInfoItemChoiceIndividual.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerUeInfoItemChoiceIndividualValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerUeInfoItemChoiceIndividualValidationError{}

// Validate checks the field values on EventTriggerUeInfoItemChoiceGroup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EventTriggerUeInfoItemChoiceGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerUeInfoItemChoiceGroup
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// EventTriggerUeInfoItemChoiceGroupMultiError, or nil if none found.
func (m *EventTriggerUeInfoItemChoiceGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerUeInfoItemChoiceGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterTesting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerUeInfoItemChoiceGroupValidationError{
					field:  "RanParameterTesting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerUeInfoItemChoiceGroupValidationError{
					field:  "RanParameterTesting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterTesting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerUeInfoItemChoiceGroupValidationError{
				field:  "RanParameterTesting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventTriggerUeInfoItemChoiceGroupMultiError(errors)
	}

	return nil
}

// EventTriggerUeInfoItemChoiceGroupMultiError is an error wrapping multiple
// validation errors returned by
// EventTriggerUeInfoItemChoiceGroup.ValidateAll() if the designated
// constraints aren't met.
type EventTriggerUeInfoItemChoiceGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerUeInfoItemChoiceGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerUeInfoItemChoiceGroupMultiError) AllErrors() []error { return m }

// EventTriggerUeInfoItemChoiceGroupValidationError is the validation error
// returned by EventTriggerUeInfoItemChoiceGroup.Validate if the designated
// constraints aren't met.
type EventTriggerUeInfoItemChoiceGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerUeInfoItemChoiceGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerUeInfoItemChoiceGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerUeInfoItemChoiceGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerUeInfoItemChoiceGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerUeInfoItemChoiceGroupValidationError) ErrorName() string {
	return "EventTriggerUeInfoItemChoiceGroupValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerUeInfoItemChoiceGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerUeInfoItemChoiceGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerUeInfoItemChoiceGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerUeInfoItemChoiceGroupValidationError{}

// Validate checks the field values on EventTriggerUeeventInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventTriggerUeeventInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerUeeventInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventTriggerUeeventInfoMultiError, or nil if none found.
func (m *EventTriggerUeeventInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerUeeventInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetUeEventList()); l < 1 || l > 65535 {
		err := EventTriggerUeeventInfoValidationError{
			field:  "UeEventList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUeEventList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventTriggerUeeventInfoValidationError{
						field:  fmt.Sprintf("UeEventList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventTriggerUeeventInfoValidationError{
						field:  fmt.Sprintf("UeEventList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTriggerUeeventInfoValidationError{
					field:  fmt.Sprintf("UeEventList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventTriggerUeeventInfoMultiError(errors)
	}

	return nil
}

// EventTriggerUeeventInfoMultiError is an error wrapping multiple validation
// errors returned by EventTriggerUeeventInfo.ValidateAll() if the designated
// constraints aren't met.
type EventTriggerUeeventInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerUeeventInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerUeeventInfoMultiError) AllErrors() []error { return m }

// EventTriggerUeeventInfoValidationError is the validation error returned by
// EventTriggerUeeventInfo.Validate if the designated constraints aren't met.
type EventTriggerUeeventInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerUeeventInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerUeeventInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerUeeventInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerUeeventInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerUeeventInfoValidationError) ErrorName() string {
	return "EventTriggerUeeventInfoValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerUeeventInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerUeeventInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerUeeventInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerUeeventInfoValidationError{}

// Validate checks the field values on EventTriggerUeeventInfoItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventTriggerUeeventInfoItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerUeeventInfoItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventTriggerUeeventInfoItemMultiError, or nil if none found.
func (m *EventTriggerUeeventInfoItem) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerUeeventInfoItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUeEventId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerUeeventInfoItemValidationError{
					field:  "UeEventId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerUeeventInfoItemValidationError{
					field:  "UeEventId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUeEventId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerUeeventInfoItemValidationError{
				field:  "UeEventId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LogicalOr != nil {
		// no validation rules for LogicalOr
	}

	if len(errors) > 0 {
		return EventTriggerUeeventInfoItemMultiError(errors)
	}

	return nil
}

// EventTriggerUeeventInfoItemMultiError is an error wrapping multiple
// validation errors returned by EventTriggerUeeventInfoItem.ValidateAll() if
// the designated constraints aren't met.
type EventTriggerUeeventInfoItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerUeeventInfoItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerUeeventInfoItemMultiError) AllErrors() []error { return m }

// EventTriggerUeeventInfoItemValidationError is the validation error returned
// by EventTriggerUeeventInfoItem.Validate if the designated constraints
// aren't met.
type EventTriggerUeeventInfoItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerUeeventInfoItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerUeeventInfoItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerUeeventInfoItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerUeeventInfoItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerUeeventInfoItemValidationError) ErrorName() string {
	return "EventTriggerUeeventInfoItemValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerUeeventInfoItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerUeeventInfoItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerUeeventInfoItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerUeeventInfoItemValidationError{}

// Validate checks the field values on RanparameterId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanparameterId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RanparameterIdMultiError,
// or nil if none found.
func (m *RanparameterId) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 4294967296 {
		err := RanparameterIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 4294967296]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanparameterIdMultiError(errors)
	}

	return nil
}

// RanparameterIdMultiError is an error wrapping multiple validation errors
// returned by RanparameterId.ValidateAll() if the designated constraints
// aren't met.
type RanparameterIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterIdMultiError) AllErrors() []error { return m }

// RanparameterIdValidationError is the validation error returned by
// RanparameterId.Validate if the designated constraints aren't met.
type RanparameterIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterIdValidationError) ErrorName() string { return "RanparameterIdValidationError" }

// Error satisfies the builtin error interface
func (e RanparameterIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterIdValidationError{}

// Validate checks the field values on RanparameterName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanparameterName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterNameMultiError, or nil if none found.
func (m *RanparameterName) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RanparameterNameMultiError(errors)
	}

	return nil
}

// RanparameterNameMultiError is an error wrapping multiple validation errors
// returned by RanparameterName.ValidateAll() if the designated constraints
// aren't met.
type RanparameterNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterNameMultiError) AllErrors() []error { return m }

// RanparameterNameValidationError is the validation error returned by
// RanparameterName.Validate if the designated constraints aren't met.
type RanparameterNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterNameValidationError) ErrorName() string { return "RanparameterNameValidationError" }

// Error satisfies the builtin error interface
func (e RanparameterNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterNameValidationError{}

// Validate checks the field values on RanparameterDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterDefinitionMultiError, or nil if none found.
func (m *RanparameterDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterDefinitionChoice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterDefinitionValidationError{
					field:  "RanParameterDefinitionChoice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterDefinitionValidationError{
					field:  "RanParameterDefinitionChoice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterDefinitionChoice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterDefinitionValidationError{
				field:  "RanParameterDefinitionChoice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanparameterDefinitionMultiError(errors)
	}

	return nil
}

// RanparameterDefinitionMultiError is an error wrapping multiple validation
// errors returned by RanparameterDefinition.ValidateAll() if the designated
// constraints aren't met.
type RanparameterDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterDefinitionMultiError) AllErrors() []error { return m }

// RanparameterDefinitionValidationError is the validation error returned by
// RanparameterDefinition.Validate if the designated constraints aren't met.
type RanparameterDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterDefinitionValidationError) ErrorName() string {
	return "RanparameterDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterDefinitionValidationError{}

// Validate checks the field values on RanparameterDefinitionChoice with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterDefinitionChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterDefinitionChoice with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterDefinitionChoiceMultiError, or nil if none found.
func (m *RanparameterDefinitionChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterDefinitionChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RanparameterDefinitionChoice.(type) {

	case *RanparameterDefinitionChoice_ChoiceList:

		if all {
			switch v := interface{}(m.GetChoiceList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceValidationError{
						field:  "ChoiceList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceValidationError{
						field:  "ChoiceList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChoiceList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterDefinitionChoiceValidationError{
					field:  "ChoiceList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanparameterDefinitionChoice_ChoiceStructure:

		if all {
			switch v := interface{}(m.GetChoiceStructure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceValidationError{
						field:  "ChoiceStructure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceValidationError{
						field:  "ChoiceStructure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChoiceStructure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterDefinitionChoiceValidationError{
					field:  "ChoiceStructure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterDefinitionChoiceMultiError(errors)
	}

	return nil
}

// RanparameterDefinitionChoiceMultiError is an error wrapping multiple
// validation errors returned by RanparameterDefinitionChoice.ValidateAll() if
// the designated constraints aren't met.
type RanparameterDefinitionChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterDefinitionChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterDefinitionChoiceMultiError) AllErrors() []error { return m }

// RanparameterDefinitionChoiceValidationError is the validation error returned
// by RanparameterDefinitionChoice.Validate if the designated constraints
// aren't met.
type RanparameterDefinitionChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterDefinitionChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterDefinitionChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterDefinitionChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterDefinitionChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterDefinitionChoiceValidationError) ErrorName() string {
	return "RanparameterDefinitionChoiceValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterDefinitionChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterDefinitionChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterDefinitionChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterDefinitionChoiceValidationError{}

// Validate checks the field values on RanparameterDefinitionChoiceList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RanparameterDefinitionChoiceList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterDefinitionChoiceList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RanparameterDefinitionChoiceListMultiError, or nil if none found.
func (m *RanparameterDefinitionChoiceList) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterDefinitionChoiceList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRanParameterList()); l < 1 || l > 65535 {
		err := RanparameterDefinitionChoiceListValidationError{
			field:  "RanParameterList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanParameterList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceListValidationError{
						field:  fmt.Sprintf("RanParameterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceListValidationError{
						field:  fmt.Sprintf("RanParameterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterDefinitionChoiceListValidationError{
					field:  fmt.Sprintf("RanParameterList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterDefinitionChoiceListMultiError(errors)
	}

	return nil
}

// RanparameterDefinitionChoiceListMultiError is an error wrapping multiple
// validation errors returned by
// RanparameterDefinitionChoiceList.ValidateAll() if the designated
// constraints aren't met.
type RanparameterDefinitionChoiceListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterDefinitionChoiceListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterDefinitionChoiceListMultiError) AllErrors() []error { return m }

// RanparameterDefinitionChoiceListValidationError is the validation error
// returned by RanparameterDefinitionChoiceList.Validate if the designated
// constraints aren't met.
type RanparameterDefinitionChoiceListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterDefinitionChoiceListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterDefinitionChoiceListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterDefinitionChoiceListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterDefinitionChoiceListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterDefinitionChoiceListValidationError) ErrorName() string {
	return "RanparameterDefinitionChoiceListValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterDefinitionChoiceListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterDefinitionChoiceList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterDefinitionChoiceListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterDefinitionChoiceListValidationError{}

// Validate checks the field values on RanparameterDefinitionChoiceListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanparameterDefinitionChoiceListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterDefinitionChoiceListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RanparameterDefinitionChoiceListItemMultiError, or nil if none found.
func (m *RanparameterDefinitionChoiceListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterDefinitionChoiceListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterDefinitionChoiceListItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterDefinitionChoiceListItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterDefinitionChoiceListItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterDefinitionChoiceListItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterDefinitionChoiceListItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterDefinitionChoiceListItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceListItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceListItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterDefinitionChoiceListItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterDefinitionChoiceListItemMultiError(errors)
	}

	return nil
}

// RanparameterDefinitionChoiceListItemMultiError is an error wrapping multiple
// validation errors returned by
// RanparameterDefinitionChoiceListItem.ValidateAll() if the designated
// constraints aren't met.
type RanparameterDefinitionChoiceListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterDefinitionChoiceListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterDefinitionChoiceListItemMultiError) AllErrors() []error { return m }

// RanparameterDefinitionChoiceListItemValidationError is the validation error
// returned by RanparameterDefinitionChoiceListItem.Validate if the designated
// constraints aren't met.
type RanparameterDefinitionChoiceListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterDefinitionChoiceListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterDefinitionChoiceListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterDefinitionChoiceListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterDefinitionChoiceListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterDefinitionChoiceListItemValidationError) ErrorName() string {
	return "RanparameterDefinitionChoiceListItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterDefinitionChoiceListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterDefinitionChoiceListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterDefinitionChoiceListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterDefinitionChoiceListItemValidationError{}

// Validate checks the field values on RanparameterDefinitionChoiceStructure
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanparameterDefinitionChoiceStructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterDefinitionChoiceStructure
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RanparameterDefinitionChoiceStructureMultiError, or nil if none found.
func (m *RanparameterDefinitionChoiceStructure) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterDefinitionChoiceStructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRanParameterStructure()); l < 1 || l > 65535 {
		err := RanparameterDefinitionChoiceStructureValidationError{
			field:  "RanParameterStructure",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanParameterStructure() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceStructureValidationError{
						field:  fmt.Sprintf("RanParameterStructure[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceStructureValidationError{
						field:  fmt.Sprintf("RanParameterStructure[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterDefinitionChoiceStructureValidationError{
					field:  fmt.Sprintf("RanParameterStructure[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterDefinitionChoiceStructureMultiError(errors)
	}

	return nil
}

// RanparameterDefinitionChoiceStructureMultiError is an error wrapping
// multiple validation errors returned by
// RanparameterDefinitionChoiceStructure.ValidateAll() if the designated
// constraints aren't met.
type RanparameterDefinitionChoiceStructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterDefinitionChoiceStructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterDefinitionChoiceStructureMultiError) AllErrors() []error { return m }

// RanparameterDefinitionChoiceStructureValidationError is the validation error
// returned by RanparameterDefinitionChoiceStructure.Validate if the
// designated constraints aren't met.
type RanparameterDefinitionChoiceStructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterDefinitionChoiceStructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterDefinitionChoiceStructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterDefinitionChoiceStructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterDefinitionChoiceStructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterDefinitionChoiceStructureValidationError) ErrorName() string {
	return "RanparameterDefinitionChoiceStructureValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterDefinitionChoiceStructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterDefinitionChoiceStructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterDefinitionChoiceStructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterDefinitionChoiceStructureValidationError{}

// Validate checks the field values on
// RanparameterDefinitionChoiceStructureItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanparameterDefinitionChoiceStructureItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanparameterDefinitionChoiceStructureItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RanparameterDefinitionChoiceStructureItemMultiError, or nil if none found.
func (m *RanparameterDefinitionChoiceStructureItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterDefinitionChoiceStructureItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterDefinitionChoiceStructureItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterDefinitionChoiceStructureItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterDefinitionChoiceStructureItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterDefinitionChoiceStructureItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterDefinitionChoiceStructureItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterDefinitionChoiceStructureItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceStructureItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterDefinitionChoiceStructureItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterDefinitionChoiceStructureItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterDefinitionChoiceStructureItemMultiError(errors)
	}

	return nil
}

// RanparameterDefinitionChoiceStructureItemMultiError is an error wrapping
// multiple validation errors returned by
// RanparameterDefinitionChoiceStructureItem.ValidateAll() if the designated
// constraints aren't met.
type RanparameterDefinitionChoiceStructureItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterDefinitionChoiceStructureItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterDefinitionChoiceStructureItemMultiError) AllErrors() []error { return m }

// RanparameterDefinitionChoiceStructureItemValidationError is the validation
// error returned by RanparameterDefinitionChoiceStructureItem.Validate if the
// designated constraints aren't met.
type RanparameterDefinitionChoiceStructureItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterDefinitionChoiceStructureItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterDefinitionChoiceStructureItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterDefinitionChoiceStructureItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterDefinitionChoiceStructureItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterDefinitionChoiceStructureItemValidationError) ErrorName() string {
	return "RanparameterDefinitionChoiceStructureItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterDefinitionChoiceStructureItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterDefinitionChoiceStructureItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterDefinitionChoiceStructureItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterDefinitionChoiceStructureItemValidationError{}

// Validate checks the field values on RanparameterValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanparameterValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterValueMultiError, or nil if none found.
func (m *RanparameterValue) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RanparameterValue.(type) {

	case *RanparameterValue_ValueBoolean:
		// no validation rules for ValueBoolean

	case *RanparameterValue_ValueInt:
		// no validation rules for ValueInt

	case *RanparameterValue_ValueReal:
		// no validation rules for ValueReal

	case *RanparameterValue_ValueBitS:

		if all {
			switch v := interface{}(m.GetValueBitS()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterValueValidationError{
						field:  "ValueBitS",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterValueValidationError{
						field:  "ValueBitS",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetValueBitS()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterValueValidationError{
					field:  "ValueBitS",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanparameterValue_ValueOctS:
		// no validation rules for ValueOctS

	case *RanparameterValue_ValuePrintableString:
		// no validation rules for ValuePrintableString

	}

	if len(errors) > 0 {
		return RanparameterValueMultiError(errors)
	}

	return nil
}

// RanparameterValueMultiError is an error wrapping multiple validation errors
// returned by RanparameterValue.ValidateAll() if the designated constraints
// aren't met.
type RanparameterValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterValueMultiError) AllErrors() []error { return m }

// RanparameterValueValidationError is the validation error returned by
// RanparameterValue.Validate if the designated constraints aren't met.
type RanparameterValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterValueValidationError) ErrorName() string {
	return "RanparameterValueValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterValueValidationError{}

// Validate checks the field values on RanparameterValueType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterValueType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterValueType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterValueTypeMultiError, or nil if none found.
func (m *RanparameterValueType) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterValueType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RanparameterValueType.(type) {

	case *RanparameterValueType_RanPChoiceElementTrue:

		if all {
			switch v := interface{}(m.GetRanPChoiceElementTrue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterValueTypeValidationError{
						field:  "RanPChoiceElementTrue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterValueTypeValidationError{
						field:  "RanPChoiceElementTrue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanPChoiceElementTrue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterValueTypeValidationError{
					field:  "RanPChoiceElementTrue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanparameterValueType_RanPChoiceElementFalse:

		if all {
			switch v := interface{}(m.GetRanPChoiceElementFalse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterValueTypeValidationError{
						field:  "RanPChoiceElementFalse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterValueTypeValidationError{
						field:  "RanPChoiceElementFalse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanPChoiceElementFalse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterValueTypeValidationError{
					field:  "RanPChoiceElementFalse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanparameterValueType_RanPChoiceStructure:

		if all {
			switch v := interface{}(m.GetRanPChoiceStructure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterValueTypeValidationError{
						field:  "RanPChoiceStructure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterValueTypeValidationError{
						field:  "RanPChoiceStructure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanPChoiceStructure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterValueTypeValidationError{
					field:  "RanPChoiceStructure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanparameterValueType_RanPChoiceList:

		if all {
			switch v := interface{}(m.GetRanPChoiceList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterValueTypeValidationError{
						field:  "RanPChoiceList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterValueTypeValidationError{
						field:  "RanPChoiceList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanPChoiceList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterValueTypeValidationError{
					field:  "RanPChoiceList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterValueTypeMultiError(errors)
	}

	return nil
}

// RanparameterValueTypeMultiError is an error wrapping multiple validation
// errors returned by RanparameterValueType.ValidateAll() if the designated
// constraints aren't met.
type RanparameterValueTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterValueTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterValueTypeMultiError) AllErrors() []error { return m }

// RanparameterValueTypeValidationError is the validation error returned by
// RanparameterValueType.Validate if the designated constraints aren't met.
type RanparameterValueTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterValueTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterValueTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterValueTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterValueTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterValueTypeValidationError) ErrorName() string {
	return "RanparameterValueTypeValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterValueTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterValueType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterValueTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterValueTypeValidationError{}

// Validate checks the field values on RanparameterValueTypeChoiceElementTrue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanparameterValueTypeChoiceElementTrue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanparameterValueTypeChoiceElementTrue with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RanparameterValueTypeChoiceElementTrueMultiError, or nil if none found.
func (m *RanparameterValueTypeChoiceElementTrue) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterValueTypeChoiceElementTrue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterValueTypeChoiceElementTrueValidationError{
					field:  "RanParameterValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterValueTypeChoiceElementTrueValidationError{
					field:  "RanParameterValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterValueTypeChoiceElementTrueValidationError{
				field:  "RanParameterValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanparameterValueTypeChoiceElementTrueMultiError(errors)
	}

	return nil
}

// RanparameterValueTypeChoiceElementTrueMultiError is an error wrapping
// multiple validation errors returned by
// RanparameterValueTypeChoiceElementTrue.ValidateAll() if the designated
// constraints aren't met.
type RanparameterValueTypeChoiceElementTrueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterValueTypeChoiceElementTrueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterValueTypeChoiceElementTrueMultiError) AllErrors() []error { return m }

// RanparameterValueTypeChoiceElementTrueValidationError is the validation
// error returned by RanparameterValueTypeChoiceElementTrue.Validate if the
// designated constraints aren't met.
type RanparameterValueTypeChoiceElementTrueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterValueTypeChoiceElementTrueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterValueTypeChoiceElementTrueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterValueTypeChoiceElementTrueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterValueTypeChoiceElementTrueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterValueTypeChoiceElementTrueValidationError) ErrorName() string {
	return "RanparameterValueTypeChoiceElementTrueValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterValueTypeChoiceElementTrueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterValueTypeChoiceElementTrue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterValueTypeChoiceElementTrueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterValueTypeChoiceElementTrueValidationError{}

// Validate checks the field values on RanparameterValueTypeChoiceElementFalse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanparameterValueTypeChoiceElementFalse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanparameterValueTypeChoiceElementFalse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RanparameterValueTypeChoiceElementFalseMultiError, or nil if none found.
func (m *RanparameterValueTypeChoiceElementFalse) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterValueTypeChoiceElementFalse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.RanParameterValue != nil {

		if all {
			switch v := interface{}(m.GetRanParameterValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterValueTypeChoiceElementFalseValidationError{
						field:  "RanParameterValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterValueTypeChoiceElementFalseValidationError{
						field:  "RanParameterValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterValueTypeChoiceElementFalseValidationError{
					field:  "RanParameterValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterValueTypeChoiceElementFalseMultiError(errors)
	}

	return nil
}

// RanparameterValueTypeChoiceElementFalseMultiError is an error wrapping
// multiple validation errors returned by
// RanparameterValueTypeChoiceElementFalse.ValidateAll() if the designated
// constraints aren't met.
type RanparameterValueTypeChoiceElementFalseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterValueTypeChoiceElementFalseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterValueTypeChoiceElementFalseMultiError) AllErrors() []error { return m }

// RanparameterValueTypeChoiceElementFalseValidationError is the validation
// error returned by RanparameterValueTypeChoiceElementFalse.Validate if the
// designated constraints aren't met.
type RanparameterValueTypeChoiceElementFalseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterValueTypeChoiceElementFalseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterValueTypeChoiceElementFalseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterValueTypeChoiceElementFalseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterValueTypeChoiceElementFalseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterValueTypeChoiceElementFalseValidationError) ErrorName() string {
	return "RanparameterValueTypeChoiceElementFalseValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterValueTypeChoiceElementFalseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterValueTypeChoiceElementFalse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterValueTypeChoiceElementFalseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterValueTypeChoiceElementFalseValidationError{}

// Validate checks the field values on RanparameterValueTypeChoiceStructure
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanparameterValueTypeChoiceStructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterValueTypeChoiceStructure
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RanparameterValueTypeChoiceStructureMultiError, or nil if none found.
func (m *RanparameterValueTypeChoiceStructure) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterValueTypeChoiceStructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterStructure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterValueTypeChoiceStructureValidationError{
					field:  "RanParameterStructure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterValueTypeChoiceStructureValidationError{
					field:  "RanParameterStructure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterStructure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterValueTypeChoiceStructureValidationError{
				field:  "RanParameterStructure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanparameterValueTypeChoiceStructureMultiError(errors)
	}

	return nil
}

// RanparameterValueTypeChoiceStructureMultiError is an error wrapping multiple
// validation errors returned by
// RanparameterValueTypeChoiceStructure.ValidateAll() if the designated
// constraints aren't met.
type RanparameterValueTypeChoiceStructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterValueTypeChoiceStructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterValueTypeChoiceStructureMultiError) AllErrors() []error { return m }

// RanparameterValueTypeChoiceStructureValidationError is the validation error
// returned by RanparameterValueTypeChoiceStructure.Validate if the designated
// constraints aren't met.
type RanparameterValueTypeChoiceStructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterValueTypeChoiceStructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterValueTypeChoiceStructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterValueTypeChoiceStructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterValueTypeChoiceStructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterValueTypeChoiceStructureValidationError) ErrorName() string {
	return "RanparameterValueTypeChoiceStructureValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterValueTypeChoiceStructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterValueTypeChoiceStructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterValueTypeChoiceStructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterValueTypeChoiceStructureValidationError{}

// Validate checks the field values on RanparameterValueTypeChoiceList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterValueTypeChoiceList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterValueTypeChoiceList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RanparameterValueTypeChoiceListMultiError, or nil if none found.
func (m *RanparameterValueTypeChoiceList) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterValueTypeChoiceList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterValueTypeChoiceListValidationError{
					field:  "RanParameterList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterValueTypeChoiceListValidationError{
					field:  "RanParameterList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterValueTypeChoiceListValidationError{
				field:  "RanParameterList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanparameterValueTypeChoiceListMultiError(errors)
	}

	return nil
}

// RanparameterValueTypeChoiceListMultiError is an error wrapping multiple
// validation errors returned by RanparameterValueTypeChoiceList.ValidateAll()
// if the designated constraints aren't met.
type RanparameterValueTypeChoiceListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterValueTypeChoiceListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterValueTypeChoiceListMultiError) AllErrors() []error { return m }

// RanparameterValueTypeChoiceListValidationError is the validation error
// returned by RanparameterValueTypeChoiceList.Validate if the designated
// constraints aren't met.
type RanparameterValueTypeChoiceListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterValueTypeChoiceListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterValueTypeChoiceListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterValueTypeChoiceListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterValueTypeChoiceListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterValueTypeChoiceListValidationError) ErrorName() string {
	return "RanparameterValueTypeChoiceListValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterValueTypeChoiceListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterValueTypeChoiceList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterValueTypeChoiceListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterValueTypeChoiceListValidationError{}

// Validate checks the field values on RanparameterStructure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterStructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterStructure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterStructureMultiError, or nil if none found.
func (m *RanparameterStructure) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterStructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetSequenceOfRanParameters()); l < 1 || l > 65535 {
		err := RanparameterStructureValidationError{
			field:  "SequenceOfRanParameters",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSequenceOfRanParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterStructureValidationError{
						field:  fmt.Sprintf("SequenceOfRanParameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterStructureValidationError{
						field:  fmt.Sprintf("SequenceOfRanParameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterStructureValidationError{
					field:  fmt.Sprintf("SequenceOfRanParameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterStructureMultiError(errors)
	}

	return nil
}

// RanparameterStructureMultiError is an error wrapping multiple validation
// errors returned by RanparameterStructure.ValidateAll() if the designated
// constraints aren't met.
type RanparameterStructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterStructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterStructureMultiError) AllErrors() []error { return m }

// RanparameterStructureValidationError is the validation error returned by
// RanparameterStructure.Validate if the designated constraints aren't met.
type RanparameterStructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterStructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterStructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterStructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterStructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterStructureValidationError) ErrorName() string {
	return "RanparameterStructureValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterStructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterStructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterStructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterStructureValidationError{}

// Validate checks the field values on RanparameterStructureItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterStructureItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterStructureItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterStructureItemMultiError, or nil if none found.
func (m *RanparameterStructureItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterStructureItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterStructureItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterStructureItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterStructureItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterValueType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterStructureItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterStructureItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterValueType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterStructureItemValidationError{
				field:  "RanParameterValueType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanparameterStructureItemMultiError(errors)
	}

	return nil
}

// RanparameterStructureItemMultiError is an error wrapping multiple validation
// errors returned by RanparameterStructureItem.ValidateAll() if the
// designated constraints aren't met.
type RanparameterStructureItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterStructureItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterStructureItemMultiError) AllErrors() []error { return m }

// RanparameterStructureItemValidationError is the validation error returned by
// RanparameterStructureItem.Validate if the designated constraints aren't met.
type RanparameterStructureItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterStructureItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterStructureItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterStructureItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterStructureItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterStructureItemValidationError) ErrorName() string {
	return "RanparameterStructureItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterStructureItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterStructureItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterStructureItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterStructureItemValidationError{}

// Validate checks the field values on RanparameterList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanparameterList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterListMultiError, or nil if none found.
func (m *RanparameterList) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetListOfRanParameter()); l < 1 || l > 65535 {
		err := RanparameterListValidationError{
			field:  "ListOfRanParameter",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetListOfRanParameter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterListValidationError{
						field:  fmt.Sprintf("ListOfRanParameter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterListValidationError{
						field:  fmt.Sprintf("ListOfRanParameter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterListValidationError{
					field:  fmt.Sprintf("ListOfRanParameter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterListMultiError(errors)
	}

	return nil
}

// RanparameterListMultiError is an error wrapping multiple validation errors
// returned by RanparameterList.ValidateAll() if the designated constraints
// aren't met.
type RanparameterListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterListMultiError) AllErrors() []error { return m }

// RanparameterListValidationError is the validation error returned by
// RanparameterList.Validate if the designated constraints aren't met.
type RanparameterListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterListValidationError) ErrorName() string { return "RanparameterListValidationError" }

// Error satisfies the builtin error interface
func (e RanparameterListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterListValidationError{}

// Validate checks the field values on RanparameterTesting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterTesting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterTesting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterTestingMultiError, or nil if none found.
func (m *RanparameterTesting) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterTesting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterTestingValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterTestingValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterTestingValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterTestingMultiError(errors)
	}

	return nil
}

// RanparameterTestingMultiError is an error wrapping multiple validation
// errors returned by RanparameterTesting.ValidateAll() if the designated
// constraints aren't met.
type RanparameterTestingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterTestingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterTestingMultiError) AllErrors() []error { return m }

// RanparameterTestingValidationError is the validation error returned by
// RanparameterTesting.Validate if the designated constraints aren't met.
type RanparameterTestingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterTestingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterTestingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterTestingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterTestingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterTestingValidationError) ErrorName() string {
	return "RanparameterTestingValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterTestingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterTesting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterTestingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterTestingValidationError{}

// Validate checks the field values on RanparameterTestingCondition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterTestingCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterTestingCondition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterTestingConditionMultiError, or nil if none found.
func (m *RanparameterTestingCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterTestingCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RanparameterTestingCondition.(type) {

	case *RanparameterTestingCondition_RanPChoiceComparison:
		// no validation rules for RanPChoiceComparison

	case *RanparameterTestingCondition_RanPChoicePresence:
		// no validation rules for RanPChoicePresence

	}

	if len(errors) > 0 {
		return RanparameterTestingConditionMultiError(errors)
	}

	return nil
}

// RanparameterTestingConditionMultiError is an error wrapping multiple
// validation errors returned by RanparameterTestingCondition.ValidateAll() if
// the designated constraints aren't met.
type RanparameterTestingConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterTestingConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterTestingConditionMultiError) AllErrors() []error { return m }

// RanparameterTestingConditionValidationError is the validation error returned
// by RanparameterTestingCondition.Validate if the designated constraints
// aren't met.
type RanparameterTestingConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterTestingConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterTestingConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterTestingConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterTestingConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterTestingConditionValidationError) ErrorName() string {
	return "RanparameterTestingConditionValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterTestingConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterTestingCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterTestingConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterTestingConditionValidationError{}

// Validate checks the field values on RanparameterTestingItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterTestingItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterTestingItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterTestingItemMultiError, or nil if none found.
func (m *RanparameterTestingItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterTestingItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterTestingItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterTestingItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterTestingItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterTestingItemValidationError{
					field:  "RanParameterType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterTestingItemValidationError{
					field:  "RanParameterType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterTestingItemValidationError{
				field:  "RanParameterType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanparameterTestingItemMultiError(errors)
	}

	return nil
}

// RanparameterTestingItemMultiError is an error wrapping multiple validation
// errors returned by RanparameterTestingItem.ValidateAll() if the designated
// constraints aren't met.
type RanparameterTestingItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterTestingItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterTestingItemMultiError) AllErrors() []error { return m }

// RanparameterTestingItemValidationError is the validation error returned by
// RanparameterTestingItem.Validate if the designated constraints aren't met.
type RanparameterTestingItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterTestingItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterTestingItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterTestingItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterTestingItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterTestingItemValidationError) ErrorName() string {
	return "RanparameterTestingItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterTestingItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterTestingItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterTestingItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterTestingItemValidationError{}

// Validate checks the field values on RanParameterType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanParameterType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanParameterType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanParameterTypeMultiError, or nil if none found.
func (m *RanParameterType) ValidateAll() error {
	return m.validate(true)
}

func (m *RanParameterType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RanParameterType.(type) {

	case *RanParameterType_RanPChoiceList:

		if all {
			switch v := interface{}(m.GetRanPChoiceList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanParameterTypeValidationError{
						field:  "RanPChoiceList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanParameterTypeValidationError{
						field:  "RanPChoiceList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanPChoiceList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanParameterTypeValidationError{
					field:  "RanPChoiceList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanParameterType_RanPChoiceStructure:

		if all {
			switch v := interface{}(m.GetRanPChoiceStructure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanParameterTypeValidationError{
						field:  "RanPChoiceStructure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanParameterTypeValidationError{
						field:  "RanPChoiceStructure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanPChoiceStructure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanParameterTypeValidationError{
					field:  "RanPChoiceStructure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanParameterType_RanPChoiceElementTrue:

		if all {
			switch v := interface{}(m.GetRanPChoiceElementTrue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanParameterTypeValidationError{
						field:  "RanPChoiceElementTrue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanParameterTypeValidationError{
						field:  "RanPChoiceElementTrue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanPChoiceElementTrue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanParameterTypeValidationError{
					field:  "RanPChoiceElementTrue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanParameterType_RanPChoiceElementFalse:

		if all {
			switch v := interface{}(m.GetRanPChoiceElementFalse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanParameterTypeValidationError{
						field:  "RanPChoiceElementFalse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanParameterTypeValidationError{
						field:  "RanPChoiceElementFalse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanPChoiceElementFalse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanParameterTypeValidationError{
					field:  "RanPChoiceElementFalse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanParameterTypeMultiError(errors)
	}

	return nil
}

// RanParameterTypeMultiError is an error wrapping multiple validation errors
// returned by RanParameterType.ValidateAll() if the designated constraints
// aren't met.
type RanParameterTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanParameterTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanParameterTypeMultiError) AllErrors() []error { return m }

// RanParameterTypeValidationError is the validation error returned by
// RanParameterType.Validate if the designated constraints aren't met.
type RanParameterTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanParameterTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanParameterTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanParameterTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanParameterTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanParameterTypeValidationError) ErrorName() string { return "RanParameterTypeValidationError" }

// Error satisfies the builtin error interface
func (e RanParameterTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanParameterType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanParameterTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanParameterTypeValidationError{}

// Validate checks the field values on RanparameterTestingItemChoiceList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RanparameterTestingItemChoiceList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterTestingItemChoiceList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RanparameterTestingItemChoiceListMultiError, or nil if none found.
func (m *RanparameterTestingItemChoiceList) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterTestingItemChoiceList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterTestingItemChoiceListValidationError{
					field:  "RanParameterList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterTestingItemChoiceListValidationError{
					field:  "RanParameterList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterTestingItemChoiceListValidationError{
				field:  "RanParameterList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanparameterTestingItemChoiceListMultiError(errors)
	}

	return nil
}

// RanparameterTestingItemChoiceListMultiError is an error wrapping multiple
// validation errors returned by
// RanparameterTestingItemChoiceList.ValidateAll() if the designated
// constraints aren't met.
type RanparameterTestingItemChoiceListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterTestingItemChoiceListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterTestingItemChoiceListMultiError) AllErrors() []error { return m }

// RanparameterTestingItemChoiceListValidationError is the validation error
// returned by RanparameterTestingItemChoiceList.Validate if the designated
// constraints aren't met.
type RanparameterTestingItemChoiceListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterTestingItemChoiceListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterTestingItemChoiceListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterTestingItemChoiceListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterTestingItemChoiceListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterTestingItemChoiceListValidationError) ErrorName() string {
	return "RanparameterTestingItemChoiceListValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterTestingItemChoiceListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterTestingItemChoiceList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterTestingItemChoiceListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterTestingItemChoiceListValidationError{}

// Validate checks the field values on RanparameterTestingItemChoiceStructure
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanparameterTestingItemChoiceStructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanparameterTestingItemChoiceStructure with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RanparameterTestingItemChoiceStructureMultiError, or nil if none found.
func (m *RanparameterTestingItemChoiceStructure) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterTestingItemChoiceStructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterStructure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterTestingItemChoiceStructureValidationError{
					field:  "RanParameterStructure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterTestingItemChoiceStructureValidationError{
					field:  "RanParameterStructure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterStructure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterTestingItemChoiceStructureValidationError{
				field:  "RanParameterStructure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanparameterTestingItemChoiceStructureMultiError(errors)
	}

	return nil
}

// RanparameterTestingItemChoiceStructureMultiError is an error wrapping
// multiple validation errors returned by
// RanparameterTestingItemChoiceStructure.ValidateAll() if the designated
// constraints aren't met.
type RanparameterTestingItemChoiceStructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterTestingItemChoiceStructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterTestingItemChoiceStructureMultiError) AllErrors() []error { return m }

// RanparameterTestingItemChoiceStructureValidationError is the validation
// error returned by RanparameterTestingItemChoiceStructure.Validate if the
// designated constraints aren't met.
type RanparameterTestingItemChoiceStructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterTestingItemChoiceStructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterTestingItemChoiceStructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterTestingItemChoiceStructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterTestingItemChoiceStructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterTestingItemChoiceStructureValidationError) ErrorName() string {
	return "RanparameterTestingItemChoiceStructureValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterTestingItemChoiceStructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterTestingItemChoiceStructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterTestingItemChoiceStructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterTestingItemChoiceStructureValidationError{}

// Validate checks the field values on RanparameterTestingItemChoiceElementTrue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanparameterTestingItemChoiceElementTrue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanparameterTestingItemChoiceElementTrue with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RanparameterTestingItemChoiceElementTrueMultiError, or nil if none found.
func (m *RanparameterTestingItemChoiceElementTrue) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterTestingItemChoiceElementTrue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterTestingItemChoiceElementTrueValidationError{
					field:  "RanParameterValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterTestingItemChoiceElementTrueValidationError{
					field:  "RanParameterValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterTestingItemChoiceElementTrueValidationError{
				field:  "RanParameterValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanparameterTestingItemChoiceElementTrueMultiError(errors)
	}

	return nil
}

// RanparameterTestingItemChoiceElementTrueMultiError is an error wrapping
// multiple validation errors returned by
// RanparameterTestingItemChoiceElementTrue.ValidateAll() if the designated
// constraints aren't met.
type RanparameterTestingItemChoiceElementTrueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterTestingItemChoiceElementTrueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterTestingItemChoiceElementTrueMultiError) AllErrors() []error { return m }

// RanparameterTestingItemChoiceElementTrueValidationError is the validation
// error returned by RanparameterTestingItemChoiceElementTrue.Validate if the
// designated constraints aren't met.
type RanparameterTestingItemChoiceElementTrueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterTestingItemChoiceElementTrueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterTestingItemChoiceElementTrueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterTestingItemChoiceElementTrueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterTestingItemChoiceElementTrueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterTestingItemChoiceElementTrueValidationError) ErrorName() string {
	return "RanparameterTestingItemChoiceElementTrueValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterTestingItemChoiceElementTrueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterTestingItemChoiceElementTrue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterTestingItemChoiceElementTrueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterTestingItemChoiceElementTrueValidationError{}

// Validate checks the field values on
// RanparameterTestingItemChoiceElementFalse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanparameterTestingItemChoiceElementFalse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanparameterTestingItemChoiceElementFalse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RanparameterTestingItemChoiceElementFalseMultiError, or nil if none found.
func (m *RanparameterTestingItemChoiceElementFalse) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterTestingItemChoiceElementFalse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterTestCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanparameterTestingItemChoiceElementFalseValidationError{
					field:  "RanParameterTestCondition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanparameterTestingItemChoiceElementFalseValidationError{
					field:  "RanParameterTestCondition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterTestCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanparameterTestingItemChoiceElementFalseValidationError{
				field:  "RanParameterTestCondition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterValue != nil {

		if all {
			switch v := interface{}(m.GetRanParameterValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterTestingItemChoiceElementFalseValidationError{
						field:  "RanParameterValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterTestingItemChoiceElementFalseValidationError{
						field:  "RanParameterValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterTestingItemChoiceElementFalseValidationError{
					field:  "RanParameterValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LogicalOr != nil {
		// no validation rules for LogicalOr
	}

	if len(errors) > 0 {
		return RanparameterTestingItemChoiceElementFalseMultiError(errors)
	}

	return nil
}

// RanparameterTestingItemChoiceElementFalseMultiError is an error wrapping
// multiple validation errors returned by
// RanparameterTestingItemChoiceElementFalse.ValidateAll() if the designated
// constraints aren't met.
type RanparameterTestingItemChoiceElementFalseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterTestingItemChoiceElementFalseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterTestingItemChoiceElementFalseMultiError) AllErrors() []error { return m }

// RanparameterTestingItemChoiceElementFalseValidationError is the validation
// error returned by RanparameterTestingItemChoiceElementFalse.Validate if the
// designated constraints aren't met.
type RanparameterTestingItemChoiceElementFalseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterTestingItemChoiceElementFalseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterTestingItemChoiceElementFalseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterTestingItemChoiceElementFalseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterTestingItemChoiceElementFalseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterTestingItemChoiceElementFalseValidationError) ErrorName() string {
	return "RanparameterTestingItemChoiceElementFalseValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterTestingItemChoiceElementFalseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterTestingItemChoiceElementFalse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterTestingItemChoiceElementFalseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterTestingItemChoiceElementFalseValidationError{}

// Validate checks the field values on RanparameterTestingList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterTestingList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterTestingList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterTestingListMultiError, or nil if none found.
func (m *RanparameterTestingList) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterTestingList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterTestingListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterTestingListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterTestingListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterTestingListMultiError(errors)
	}

	return nil
}

// RanparameterTestingListMultiError is an error wrapping multiple validation
// errors returned by RanparameterTestingList.ValidateAll() if the designated
// constraints aren't met.
type RanparameterTestingListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterTestingListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterTestingListMultiError) AllErrors() []error { return m }

// RanparameterTestingListValidationError is the validation error returned by
// RanparameterTestingList.Validate if the designated constraints aren't met.
type RanparameterTestingListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterTestingListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterTestingListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterTestingListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterTestingListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterTestingListValidationError) ErrorName() string {
	return "RanparameterTestingListValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterTestingListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterTestingList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterTestingListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterTestingListValidationError{}

// Validate checks the field values on RanparameterTestingStructure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanparameterTestingStructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanparameterTestingStructure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanparameterTestingStructureMultiError, or nil if none found.
func (m *RanparameterTestingStructure) ValidateAll() error {
	return m.validate(true)
}

func (m *RanparameterTestingStructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanparameterTestingStructureValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanparameterTestingStructureValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanparameterTestingStructureValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanparameterTestingStructureMultiError(errors)
	}

	return nil
}

// RanparameterTestingStructureMultiError is an error wrapping multiple
// validation errors returned by RanparameterTestingStructure.ValidateAll() if
// the designated constraints aren't met.
type RanparameterTestingStructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanparameterTestingStructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanparameterTestingStructureMultiError) AllErrors() []error { return m }

// RanparameterTestingStructureValidationError is the validation error returned
// by RanparameterTestingStructure.Validate if the designated constraints
// aren't met.
type RanparameterTestingStructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanparameterTestingStructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanparameterTestingStructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanparameterTestingStructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanparameterTestingStructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanparameterTestingStructureValidationError) ErrorName() string {
	return "RanparameterTestingStructureValidationError"
}

// Error satisfies the builtin error interface
func (e RanparameterTestingStructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanparameterTestingStructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanparameterTestingStructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanparameterTestingStructureValidationError{}

// Validate checks the field values on RanCallProcessId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanCallProcessId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanCallProcessId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanCallProcessIdMultiError, or nil if none found.
func (m *RanCallProcessId) ValidateAll() error {
	return m.validate(true)
}

func (m *RanCallProcessId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 232 {
		err := RanCallProcessIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 232]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanCallProcessIdMultiError(errors)
	}

	return nil
}

// RanCallProcessIdMultiError is an error wrapping multiple validation errors
// returned by RanCallProcessId.ValidateAll() if the designated constraints
// aren't met.
type RanCallProcessIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanCallProcessIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanCallProcessIdMultiError) AllErrors() []error { return m }

// RanCallProcessIdValidationError is the validation error returned by
// RanCallProcessId.Validate if the designated constraints aren't met.
type RanCallProcessIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanCallProcessIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanCallProcessIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanCallProcessIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanCallProcessIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanCallProcessIdValidationError) ErrorName() string { return "RanCallProcessIdValidationError" }

// Error satisfies the builtin error interface
func (e RanCallProcessIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanCallProcessId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanCallProcessIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanCallProcessIdValidationError{}

// Validate checks the field values on RicCallProcessTypeId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicCallProcessTypeId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicCallProcessTypeId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicCallProcessTypeIdMultiError, or nil if none found.
func (m *RicCallProcessTypeId) ValidateAll() error {
	return m.validate(true)
}

func (m *RicCallProcessTypeId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 65535 {
		err := RicCallProcessTypeIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicCallProcessTypeIdMultiError(errors)
	}

	return nil
}

// RicCallProcessTypeIdMultiError is an error wrapping multiple validation
// errors returned by RicCallProcessTypeId.ValidateAll() if the designated
// constraints aren't met.
type RicCallProcessTypeIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicCallProcessTypeIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicCallProcessTypeIdMultiError) AllErrors() []error { return m }

// RicCallProcessTypeIdValidationError is the validation error returned by
// RicCallProcessTypeId.Validate if the designated constraints aren't met.
type RicCallProcessTypeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicCallProcessTypeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicCallProcessTypeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicCallProcessTypeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicCallProcessTypeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicCallProcessTypeIdValidationError) ErrorName() string {
	return "RicCallProcessTypeIdValidationError"
}

// Error satisfies the builtin error interface
func (e RicCallProcessTypeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicCallProcessTypeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicCallProcessTypeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicCallProcessTypeIdValidationError{}

// Validate checks the field values on RicCallProcessTypeName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicCallProcessTypeName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicCallProcessTypeName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicCallProcessTypeNameMultiError, or nil if none found.
func (m *RicCallProcessTypeName) ValidateAll() error {
	return m.validate(true)
}

func (m *RicCallProcessTypeName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicCallProcessTypeNameMultiError(errors)
	}

	return nil
}

// RicCallProcessTypeNameMultiError is an error wrapping multiple validation
// errors returned by RicCallProcessTypeName.ValidateAll() if the designated
// constraints aren't met.
type RicCallProcessTypeNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicCallProcessTypeNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicCallProcessTypeNameMultiError) AllErrors() []error { return m }

// RicCallProcessTypeNameValidationError is the validation error returned by
// RicCallProcessTypeName.Validate if the designated constraints aren't met.
type RicCallProcessTypeNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicCallProcessTypeNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicCallProcessTypeNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicCallProcessTypeNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicCallProcessTypeNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicCallProcessTypeNameValidationError) ErrorName() string {
	return "RicCallProcessTypeNameValidationError"
}

// Error satisfies the builtin error interface
func (e RicCallProcessTypeNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicCallProcessTypeName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicCallProcessTypeNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicCallProcessTypeNameValidationError{}

// Validate checks the field values on RicCallProcessBreakpointId with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicCallProcessBreakpointId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicCallProcessBreakpointId with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicCallProcessBreakpointIdMultiError, or nil if none found.
func (m *RicCallProcessBreakpointId) ValidateAll() error {
	return m.validate(true)
}

func (m *RicCallProcessBreakpointId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 65535 {
		err := RicCallProcessBreakpointIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicCallProcessBreakpointIdMultiError(errors)
	}

	return nil
}

// RicCallProcessBreakpointIdMultiError is an error wrapping multiple
// validation errors returned by RicCallProcessBreakpointId.ValidateAll() if
// the designated constraints aren't met.
type RicCallProcessBreakpointIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicCallProcessBreakpointIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicCallProcessBreakpointIdMultiError) AllErrors() []error { return m }

// RicCallProcessBreakpointIdValidationError is the validation error returned
// by RicCallProcessBreakpointId.Validate if the designated constraints aren't met.
type RicCallProcessBreakpointIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicCallProcessBreakpointIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicCallProcessBreakpointIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicCallProcessBreakpointIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicCallProcessBreakpointIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicCallProcessBreakpointIdValidationError) ErrorName() string {
	return "RicCallProcessBreakpointIdValidationError"
}

// Error satisfies the builtin error interface
func (e RicCallProcessBreakpointIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicCallProcessBreakpointId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicCallProcessBreakpointIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicCallProcessBreakpointIdValidationError{}

// Validate checks the field values on RicCallProcessBreakpointName with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicCallProcessBreakpointName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicCallProcessBreakpointName with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicCallProcessBreakpointNameMultiError, or nil if none found.
func (m *RicCallProcessBreakpointName) ValidateAll() error {
	return m.validate(true)
}

func (m *RicCallProcessBreakpointName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicCallProcessBreakpointNameMultiError(errors)
	}

	return nil
}

// RicCallProcessBreakpointNameMultiError is an error wrapping multiple
// validation errors returned by RicCallProcessBreakpointName.ValidateAll() if
// the designated constraints aren't met.
type RicCallProcessBreakpointNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicCallProcessBreakpointNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicCallProcessBreakpointNameMultiError) AllErrors() []error { return m }

// RicCallProcessBreakpointNameValidationError is the validation error returned
// by RicCallProcessBreakpointName.Validate if the designated constraints
// aren't met.
type RicCallProcessBreakpointNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicCallProcessBreakpointNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicCallProcessBreakpointNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicCallProcessBreakpointNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicCallProcessBreakpointNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicCallProcessBreakpointNameValidationError) ErrorName() string {
	return "RicCallProcessBreakpointNameValidationError"
}

// Error satisfies the builtin error interface
func (e RicCallProcessBreakpointNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicCallProcessBreakpointName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicCallProcessBreakpointNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicCallProcessBreakpointNameValidationError{}

// Validate checks the field values on RicControlActionId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicControlActionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicControlActionId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicControlActionIdMultiError, or nil if none found.
func (m *RicControlActionId) ValidateAll() error {
	return m.validate(true)
}

func (m *RicControlActionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 65535 {
		err := RicControlActionIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicControlActionIdMultiError(errors)
	}

	return nil
}

// RicControlActionIdMultiError is an error wrapping multiple validation errors
// returned by RicControlActionId.ValidateAll() if the designated constraints
// aren't met.
type RicControlActionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicControlActionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicControlActionIdMultiError) AllErrors() []error { return m }

// RicControlActionIdValidationError is the validation error returned by
// RicControlActionId.Validate if the designated constraints aren't met.
type RicControlActionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlActionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlActionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlActionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlActionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlActionIdValidationError) ErrorName() string {
	return "RicControlActionIdValidationError"
}

// Error satisfies the builtin error interface
func (e RicControlActionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControlActionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlActionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlActionIdValidationError{}

// Validate checks the field values on RicControlActionName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicControlActionName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicControlActionName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicControlActionNameMultiError, or nil if none found.
func (m *RicControlActionName) ValidateAll() error {
	return m.validate(true)
}

func (m *RicControlActionName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicControlActionNameMultiError(errors)
	}

	return nil
}

// RicControlActionNameMultiError is an error wrapping multiple validation
// errors returned by RicControlActionName.ValidateAll() if the designated
// constraints aren't met.
type RicControlActionNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicControlActionNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicControlActionNameMultiError) AllErrors() []error { return m }

// RicControlActionNameValidationError is the validation error returned by
// RicControlActionName.Validate if the designated constraints aren't met.
type RicControlActionNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlActionNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlActionNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlActionNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlActionNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlActionNameValidationError) ErrorName() string {
	return "RicControlActionNameValidationError"
}

// Error satisfies the builtin error interface
func (e RicControlActionNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControlActionName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlActionNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlActionNameValidationError{}

// Validate checks the field values on RicEventTriggerConditionId with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicEventTriggerConditionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicEventTriggerConditionId with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicEventTriggerConditionIdMultiError, or nil if none found.
func (m *RicEventTriggerConditionId) ValidateAll() error {
	return m.validate(true)
}

func (m *RicEventTriggerConditionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 65535 {
		err := RicEventTriggerConditionIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicEventTriggerConditionIdMultiError(errors)
	}

	return nil
}

// RicEventTriggerConditionIdMultiError is an error wrapping multiple
// validation errors returned by RicEventTriggerConditionId.ValidateAll() if
// the designated constraints aren't met.
type RicEventTriggerConditionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicEventTriggerConditionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicEventTriggerConditionIdMultiError) AllErrors() []error { return m }

// RicEventTriggerConditionIdValidationError is the validation error returned
// by RicEventTriggerConditionId.Validate if the designated constraints aren't met.
type RicEventTriggerConditionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerConditionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerConditionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerConditionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerConditionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerConditionIdValidationError) ErrorName() string {
	return "RicEventTriggerConditionIdValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerConditionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerConditionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerConditionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerConditionIdValidationError{}

// Validate checks the field values on RicEventTriggerUeId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicEventTriggerUeId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicEventTriggerUeId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicEventTriggerUeIdMultiError, or nil if none found.
func (m *RicEventTriggerUeId) ValidateAll() error {
	return m.validate(true)
}

func (m *RicEventTriggerUeId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 65535 {
		err := RicEventTriggerUeIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicEventTriggerUeIdMultiError(errors)
	}

	return nil
}

// RicEventTriggerUeIdMultiError is an error wrapping multiple validation
// errors returned by RicEventTriggerUeId.ValidateAll() if the designated
// constraints aren't met.
type RicEventTriggerUeIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicEventTriggerUeIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicEventTriggerUeIdMultiError) AllErrors() []error { return m }

// RicEventTriggerUeIdValidationError is the validation error returned by
// RicEventTriggerUeId.Validate if the designated constraints aren't met.
type RicEventTriggerUeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerUeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerUeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerUeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerUeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerUeIdValidationError) ErrorName() string {
	return "RicEventTriggerUeIdValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerUeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerUeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerUeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerUeIdValidationError{}

// Validate checks the field values on RicEventTriggerUeeventId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicEventTriggerUeeventId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicEventTriggerUeeventId with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicEventTriggerUeeventIdMultiError, or nil if none found.
func (m *RicEventTriggerUeeventId) ValidateAll() error {
	return m.validate(true)
}

func (m *RicEventTriggerUeeventId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 65535 {
		err := RicEventTriggerUeeventIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicEventTriggerUeeventIdMultiError(errors)
	}

	return nil
}

// RicEventTriggerUeeventIdMultiError is an error wrapping multiple validation
// errors returned by RicEventTriggerUeeventId.ValidateAll() if the designated
// constraints aren't met.
type RicEventTriggerUeeventIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicEventTriggerUeeventIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicEventTriggerUeeventIdMultiError) AllErrors() []error { return m }

// RicEventTriggerUeeventIdValidationError is the validation error returned by
// RicEventTriggerUeeventId.Validate if the designated constraints aren't met.
type RicEventTriggerUeeventIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerUeeventIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerUeeventIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerUeeventIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerUeeventIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerUeeventIdValidationError) ErrorName() string {
	return "RicEventTriggerUeeventIdValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerUeeventIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerUeeventId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerUeeventIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerUeeventIdValidationError{}

// Validate checks the field values on RicEventTriggerCellId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicEventTriggerCellId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicEventTriggerCellId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicEventTriggerCellIdMultiError, or nil if none found.
func (m *RicEventTriggerCellId) ValidateAll() error {
	return m.validate(true)
}

func (m *RicEventTriggerCellId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 65535 {
		err := RicEventTriggerCellIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicEventTriggerCellIdMultiError(errors)
	}

	return nil
}

// RicEventTriggerCellIdMultiError is an error wrapping multiple validation
// errors returned by RicEventTriggerCellId.ValidateAll() if the designated
// constraints aren't met.
type RicEventTriggerCellIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicEventTriggerCellIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicEventTriggerCellIdMultiError) AllErrors() []error { return m }

// RicEventTriggerCellIdValidationError is the validation error returned by
// RicEventTriggerCellId.Validate if the designated constraints aren't met.
type RicEventTriggerCellIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerCellIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerCellIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerCellIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerCellIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerCellIdValidationError) ErrorName() string {
	return "RicEventTriggerCellIdValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerCellIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerCellId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerCellIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerCellIdValidationError{}

// Validate checks the field values on RicInsertIndicationId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicInsertIndicationId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicInsertIndicationId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicInsertIndicationIdMultiError, or nil if none found.
func (m *RicInsertIndicationId) ValidateAll() error {
	return m.validate(true)
}

func (m *RicInsertIndicationId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 65535 {
		err := RicInsertIndicationIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicInsertIndicationIdMultiError(errors)
	}

	return nil
}

// RicInsertIndicationIdMultiError is an error wrapping multiple validation
// errors returned by RicInsertIndicationId.ValidateAll() if the designated
// constraints aren't met.
type RicInsertIndicationIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicInsertIndicationIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicInsertIndicationIdMultiError) AllErrors() []error { return m }

// RicInsertIndicationIdValidationError is the validation error returned by
// RicInsertIndicationId.Validate if the designated constraints aren't met.
type RicInsertIndicationIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicInsertIndicationIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicInsertIndicationIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicInsertIndicationIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicInsertIndicationIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicInsertIndicationIdValidationError) ErrorName() string {
	return "RicInsertIndicationIdValidationError"
}

// Error satisfies the builtin error interface
func (e RicInsertIndicationIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicInsertIndicationId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicInsertIndicationIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicInsertIndicationIdValidationError{}

// Validate checks the field values on RicInsertIndicationName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicInsertIndicationName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicInsertIndicationName with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicInsertIndicationNameMultiError, or nil if none found.
func (m *RicInsertIndicationName) ValidateAll() error {
	return m.validate(true)
}

func (m *RicInsertIndicationName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicInsertIndicationNameMultiError(errors)
	}

	return nil
}

// RicInsertIndicationNameMultiError is an error wrapping multiple validation
// errors returned by RicInsertIndicationName.ValidateAll() if the designated
// constraints aren't met.
type RicInsertIndicationNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicInsertIndicationNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicInsertIndicationNameMultiError) AllErrors() []error { return m }

// RicInsertIndicationNameValidationError is the validation error returned by
// RicInsertIndicationName.Validate if the designated constraints aren't met.
type RicInsertIndicationNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicInsertIndicationNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicInsertIndicationNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicInsertIndicationNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicInsertIndicationNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicInsertIndicationNameValidationError) ErrorName() string {
	return "RicInsertIndicationNameValidationError"
}

// Error satisfies the builtin error interface
func (e RicInsertIndicationNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicInsertIndicationName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicInsertIndicationNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicInsertIndicationNameValidationError{}

// Validate checks the field values on RicPolicyAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RicPolicyAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicPolicyAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicPolicyActionMultiError, or nil if none found.
func (m *RicPolicyAction) ValidateAll() error {
	return m.validate(true)
}

func (m *RicPolicyAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicPolicyActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicPolicyActionValidationError{
					field:  "RicPolicyActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicPolicyActionValidationError{
					field:  "RicPolicyActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicPolicyActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicPolicyActionValidationError{
				field:  "RicPolicyActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetRanParametersList()); l < 1 || l > 65535 {
		err := RicPolicyActionValidationError{
			field:  "RanParametersList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicPolicyActionValidationError{
						field:  fmt.Sprintf("RanParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicPolicyActionValidationError{
						field:  fmt.Sprintf("RanParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicPolicyActionValidationError{
					field:  fmt.Sprintf("RanParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicPolicyActionMultiError(errors)
	}

	return nil
}

// RicPolicyActionMultiError is an error wrapping multiple validation errors
// returned by RicPolicyAction.ValidateAll() if the designated constraints
// aren't met.
type RicPolicyActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicPolicyActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicPolicyActionMultiError) AllErrors() []error { return m }

// RicPolicyActionValidationError is the validation error returned by
// RicPolicyAction.Validate if the designated constraints aren't met.
type RicPolicyActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicPolicyActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicPolicyActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicPolicyActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicPolicyActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicPolicyActionValidationError) ErrorName() string { return "RicPolicyActionValidationError" }

// Error satisfies the builtin error interface
func (e RicPolicyActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicPolicyAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicPolicyActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicPolicyActionValidationError{}

// Validate checks the field values on RicPolicyActionRanparameterItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicPolicyActionRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicPolicyActionRanparameterItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RicPolicyActionRanparameterItemMultiError, or nil if none found.
func (m *RicPolicyActionRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RicPolicyActionRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicPolicyActionRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicPolicyActionRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicPolicyActionRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterValueType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicPolicyActionRanparameterItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicPolicyActionRanparameterItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterValueType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicPolicyActionRanparameterItemValidationError{
				field:  "RanParameterValueType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicPolicyActionRanparameterItemMultiError(errors)
	}

	return nil
}

// RicPolicyActionRanparameterItemMultiError is an error wrapping multiple
// validation errors returned by RicPolicyActionRanparameterItem.ValidateAll()
// if the designated constraints aren't met.
type RicPolicyActionRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicPolicyActionRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicPolicyActionRanparameterItemMultiError) AllErrors() []error { return m }

// RicPolicyActionRanparameterItemValidationError is the validation error
// returned by RicPolicyActionRanparameterItem.Validate if the designated
// constraints aren't met.
type RicPolicyActionRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicPolicyActionRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicPolicyActionRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicPolicyActionRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicPolicyActionRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicPolicyActionRanparameterItemValidationError) ErrorName() string {
	return "RicPolicyActionRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e RicPolicyActionRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicPolicyActionRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicPolicyActionRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicPolicyActionRanparameterItemValidationError{}

// Validate checks the field values on E2SmRcEventTrigger with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcEventTrigger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcEventTrigger with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcEventTriggerMultiError, or nil if none found.
func (m *E2SmRcEventTrigger) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcEventTrigger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicEventTriggerFormats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcEventTriggerValidationError{
					field:  "RicEventTriggerFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcEventTriggerValidationError{
					field:  "RicEventTriggerFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerFormats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcEventTriggerValidationError{
				field:  "RicEventTriggerFormats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcEventTriggerMultiError(errors)
	}

	return nil
}

// E2SmRcEventTriggerMultiError is an error wrapping multiple validation errors
// returned by E2SmRcEventTrigger.ValidateAll() if the designated constraints
// aren't met.
type E2SmRcEventTriggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcEventTriggerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcEventTriggerMultiError) AllErrors() []error { return m }

// E2SmRcEventTriggerValidationError is the validation error returned by
// E2SmRcEventTrigger.Validate if the designated constraints aren't met.
type E2SmRcEventTriggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcEventTriggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcEventTriggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcEventTriggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcEventTriggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcEventTriggerValidationError) ErrorName() string {
	return "E2SmRcEventTriggerValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcEventTriggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcEventTrigger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcEventTriggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcEventTriggerValidationError{}

// Validate checks the field values on RicEventTriggerFormats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicEventTriggerFormats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicEventTriggerFormats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicEventTriggerFormatsMultiError, or nil if none found.
func (m *RicEventTriggerFormats) ValidateAll() error {
	return m.validate(true)
}

func (m *RicEventTriggerFormats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RicEventTriggerFormats.(type) {

	case *RicEventTriggerFormats_EventTriggerFormat1:

		if all {
			switch v := interface{}(m.GetEventTriggerFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicEventTriggerFormatsValidationError{
						field:  "EventTriggerFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicEventTriggerFormatsValidationError{
						field:  "EventTriggerFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEventTriggerFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicEventTriggerFormatsValidationError{
					field:  "EventTriggerFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicEventTriggerFormats_EventTriggerFormat2:

		if all {
			switch v := interface{}(m.GetEventTriggerFormat2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicEventTriggerFormatsValidationError{
						field:  "EventTriggerFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicEventTriggerFormatsValidationError{
						field:  "EventTriggerFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEventTriggerFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicEventTriggerFormatsValidationError{
					field:  "EventTriggerFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicEventTriggerFormats_EventTriggerFormat3:

		if all {
			switch v := interface{}(m.GetEventTriggerFormat3()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicEventTriggerFormatsValidationError{
						field:  "EventTriggerFormat3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicEventTriggerFormatsValidationError{
						field:  "EventTriggerFormat3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEventTriggerFormat3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicEventTriggerFormatsValidationError{
					field:  "EventTriggerFormat3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicEventTriggerFormats_EventTriggerFormat4:

		if all {
			switch v := interface{}(m.GetEventTriggerFormat4()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicEventTriggerFormatsValidationError{
						field:  "EventTriggerFormat4",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicEventTriggerFormatsValidationError{
						field:  "EventTriggerFormat4",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEventTriggerFormat4()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicEventTriggerFormatsValidationError{
					field:  "EventTriggerFormat4",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicEventTriggerFormats_EventTriggerFormat5:

		if all {
			switch v := interface{}(m.GetEventTriggerFormat5()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicEventTriggerFormatsValidationError{
						field:  "EventTriggerFormat5",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicEventTriggerFormatsValidationError{
						field:  "EventTriggerFormat5",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEventTriggerFormat5()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicEventTriggerFormatsValidationError{
					field:  "EventTriggerFormat5",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicEventTriggerFormatsMultiError(errors)
	}

	return nil
}

// RicEventTriggerFormatsMultiError is an error wrapping multiple validation
// errors returned by RicEventTriggerFormats.ValidateAll() if the designated
// constraints aren't met.
type RicEventTriggerFormatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicEventTriggerFormatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicEventTriggerFormatsMultiError) AllErrors() []error { return m }

// RicEventTriggerFormatsValidationError is the validation error returned by
// RicEventTriggerFormats.Validate if the designated constraints aren't met.
type RicEventTriggerFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerFormatsValidationError) ErrorName() string {
	return "RicEventTriggerFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerFormatsValidationError{}

// Validate checks the field values on E2SmRcEventTriggerFormat1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcEventTriggerFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcEventTriggerFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcEventTriggerFormat1MultiError, or nil if none found.
func (m *E2SmRcEventTriggerFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcEventTriggerFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetMessageList()); l < 1 || l > 65535 {
		err := E2SmRcEventTriggerFormat1ValidationError{
			field:  "MessageList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMessageList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat1ValidationError{
						field:  fmt.Sprintf("MessageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat1ValidationError{
						field:  fmt.Sprintf("MessageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat1ValidationError{
					field:  fmt.Sprintf("MessageList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalAssociatedUeinfo != nil {

		if all {
			switch v := interface{}(m.GetGlobalAssociatedUeinfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat1ValidationError{
						field:  "GlobalAssociatedUeinfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat1ValidationError{
						field:  "GlobalAssociatedUeinfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalAssociatedUeinfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat1ValidationError{
					field:  "GlobalAssociatedUeinfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcEventTriggerFormat1MultiError(errors)
	}

	return nil
}

// E2SmRcEventTriggerFormat1MultiError is an error wrapping multiple validation
// errors returned by E2SmRcEventTriggerFormat1.ValidateAll() if the
// designated constraints aren't met.
type E2SmRcEventTriggerFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcEventTriggerFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcEventTriggerFormat1MultiError) AllErrors() []error { return m }

// E2SmRcEventTriggerFormat1ValidationError is the validation error returned by
// E2SmRcEventTriggerFormat1.Validate if the designated constraints aren't met.
type E2SmRcEventTriggerFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcEventTriggerFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcEventTriggerFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcEventTriggerFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcEventTriggerFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcEventTriggerFormat1ValidationError) ErrorName() string {
	return "E2SmRcEventTriggerFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcEventTriggerFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcEventTriggerFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcEventTriggerFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcEventTriggerFormat1ValidationError{}

// Validate checks the field values on E2SmRcEventTriggerFormat1Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcEventTriggerFormat1Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcEventTriggerFormat1Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcEventTriggerFormat1ItemMultiError, or nil if none found.
func (m *E2SmRcEventTriggerFormat1Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcEventTriggerFormat1Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicEventTriggerConditionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat1ItemValidationError{
					field:  "RicEventTriggerConditionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat1ItemValidationError{
					field:  "RicEventTriggerConditionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerConditionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcEventTriggerFormat1ItemValidationError{
				field:  "RicEventTriggerConditionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMessageType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat1ItemValidationError{
					field:  "MessageType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat1ItemValidationError{
					field:  "MessageType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcEventTriggerFormat1ItemValidationError{
				field:  "MessageType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.MessageDirection != nil {
		// no validation rules for MessageDirection
	}

	if m.AssociatedUeinfo != nil {

		if all {
			switch v := interface{}(m.GetAssociatedUeinfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat1ItemValidationError{
						field:  "AssociatedUeinfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat1ItemValidationError{
						field:  "AssociatedUeinfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssociatedUeinfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat1ItemValidationError{
					field:  "AssociatedUeinfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AssociatedUeevent != nil {

		if all {
			switch v := interface{}(m.GetAssociatedUeevent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat1ItemValidationError{
						field:  "AssociatedUeevent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat1ItemValidationError{
						field:  "AssociatedUeevent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssociatedUeevent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat1ItemValidationError{
					field:  "AssociatedUeevent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LogicalOr != nil {
		// no validation rules for LogicalOr
	}

	if len(errors) > 0 {
		return E2SmRcEventTriggerFormat1ItemMultiError(errors)
	}

	return nil
}

// E2SmRcEventTriggerFormat1ItemMultiError is an error wrapping multiple
// validation errors returned by E2SmRcEventTriggerFormat1Item.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcEventTriggerFormat1ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcEventTriggerFormat1ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcEventTriggerFormat1ItemMultiError) AllErrors() []error { return m }

// E2SmRcEventTriggerFormat1ItemValidationError is the validation error
// returned by E2SmRcEventTriggerFormat1Item.Validate if the designated
// constraints aren't met.
type E2SmRcEventTriggerFormat1ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcEventTriggerFormat1ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcEventTriggerFormat1ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcEventTriggerFormat1ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcEventTriggerFormat1ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcEventTriggerFormat1ItemValidationError) ErrorName() string {
	return "E2SmRcEventTriggerFormat1ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcEventTriggerFormat1ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcEventTriggerFormat1Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcEventTriggerFormat1ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcEventTriggerFormat1ItemValidationError{}

// Validate checks the field values on MessageTypeChoice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MessageTypeChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageTypeChoice with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageTypeChoiceMultiError, or nil if none found.
func (m *MessageTypeChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageTypeChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.MessageTypeChoice.(type) {

	case *MessageTypeChoice_MessageTypeChoiceNi:

		if all {
			switch v := interface{}(m.GetMessageTypeChoiceNi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageTypeChoiceValidationError{
						field:  "MessageTypeChoiceNi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageTypeChoiceValidationError{
						field:  "MessageTypeChoiceNi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessageTypeChoiceNi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageTypeChoiceValidationError{
					field:  "MessageTypeChoiceNi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MessageTypeChoice_MessageTypeChoiceRrc:

		if all {
			switch v := interface{}(m.GetMessageTypeChoiceRrc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageTypeChoiceValidationError{
						field:  "MessageTypeChoiceRrc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageTypeChoiceValidationError{
						field:  "MessageTypeChoiceRrc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessageTypeChoiceRrc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageTypeChoiceValidationError{
					field:  "MessageTypeChoiceRrc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageTypeChoiceMultiError(errors)
	}

	return nil
}

// MessageTypeChoiceMultiError is an error wrapping multiple validation errors
// returned by MessageTypeChoice.ValidateAll() if the designated constraints
// aren't met.
type MessageTypeChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageTypeChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageTypeChoiceMultiError) AllErrors() []error { return m }

// MessageTypeChoiceValidationError is the validation error returned by
// MessageTypeChoice.Validate if the designated constraints aren't met.
type MessageTypeChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageTypeChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageTypeChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageTypeChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageTypeChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageTypeChoiceValidationError) ErrorName() string {
	return "MessageTypeChoiceValidationError"
}

// Error satisfies the builtin error interface
func (e MessageTypeChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageTypeChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageTypeChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageTypeChoiceValidationError{}

// Validate checks the field values on MessageTypeChoiceNi with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageTypeChoiceNi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageTypeChoiceNi with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageTypeChoiceNiMultiError, or nil if none found.
func (m *MessageTypeChoiceNi) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageTypeChoiceNi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NIType

	if m.NIIdentifier != nil {

		if all {
			switch v := interface{}(m.GetNIIdentifier()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageTypeChoiceNiValidationError{
						field:  "NIIdentifier",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageTypeChoiceNiValidationError{
						field:  "NIIdentifier",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNIIdentifier()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageTypeChoiceNiValidationError{
					field:  "NIIdentifier",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.NIMessage != nil {

		if all {
			switch v := interface{}(m.GetNIMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageTypeChoiceNiValidationError{
						field:  "NIMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageTypeChoiceNiValidationError{
						field:  "NIMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNIMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageTypeChoiceNiValidationError{
					field:  "NIMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageTypeChoiceNiMultiError(errors)
	}

	return nil
}

// MessageTypeChoiceNiMultiError is an error wrapping multiple validation
// errors returned by MessageTypeChoiceNi.ValidateAll() if the designated
// constraints aren't met.
type MessageTypeChoiceNiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageTypeChoiceNiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageTypeChoiceNiMultiError) AllErrors() []error { return m }

// MessageTypeChoiceNiValidationError is the validation error returned by
// MessageTypeChoiceNi.Validate if the designated constraints aren't met.
type MessageTypeChoiceNiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageTypeChoiceNiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageTypeChoiceNiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageTypeChoiceNiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageTypeChoiceNiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageTypeChoiceNiValidationError) ErrorName() string {
	return "MessageTypeChoiceNiValidationError"
}

// Error satisfies the builtin error interface
func (e MessageTypeChoiceNiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageTypeChoiceNi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageTypeChoiceNiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageTypeChoiceNiValidationError{}

// Validate checks the field values on MessageTypeChoiceRrc with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageTypeChoiceRrc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageTypeChoiceRrc with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageTypeChoiceRrcMultiError, or nil if none found.
func (m *MessageTypeChoiceRrc) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageTypeChoiceRrc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRRcMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageTypeChoiceRrcValidationError{
					field:  "RRcMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageTypeChoiceRrcValidationError{
					field:  "RRcMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRRcMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageTypeChoiceRrcValidationError{
				field:  "RRcMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MessageTypeChoiceRrcMultiError(errors)
	}

	return nil
}

// MessageTypeChoiceRrcMultiError is an error wrapping multiple validation
// errors returned by MessageTypeChoiceRrc.ValidateAll() if the designated
// constraints aren't met.
type MessageTypeChoiceRrcMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageTypeChoiceRrcMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageTypeChoiceRrcMultiError) AllErrors() []error { return m }

// MessageTypeChoiceRrcValidationError is the validation error returned by
// MessageTypeChoiceRrc.Validate if the designated constraints aren't met.
type MessageTypeChoiceRrcValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageTypeChoiceRrcValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageTypeChoiceRrcValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageTypeChoiceRrcValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageTypeChoiceRrcValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageTypeChoiceRrcValidationError) ErrorName() string {
	return "MessageTypeChoiceRrcValidationError"
}

// Error satisfies the builtin error interface
func (e MessageTypeChoiceRrcValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageTypeChoiceRrc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageTypeChoiceRrcValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageTypeChoiceRrcValidationError{}

// Validate checks the field values on E2SmRcEventTriggerFormat2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcEventTriggerFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcEventTriggerFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcEventTriggerFormat2MultiError, or nil if none found.
func (m *E2SmRcEventTriggerFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcEventTriggerFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicCallProcessTypeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat2ValidationError{
					field:  "RicCallProcessTypeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat2ValidationError{
					field:  "RicCallProcessTypeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicCallProcessTypeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcEventTriggerFormat2ValidationError{
				field:  "RicCallProcessTypeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicCallProcessBreakpointId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat2ValidationError{
					field:  "RicCallProcessBreakpointId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat2ValidationError{
					field:  "RicCallProcessBreakpointId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicCallProcessBreakpointId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcEventTriggerFormat2ValidationError{
				field:  "RicCallProcessBreakpointId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AssociatedE2NodeInfo != nil {

		if all {
			switch v := interface{}(m.GetAssociatedE2NodeInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat2ValidationError{
						field:  "AssociatedE2NodeInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat2ValidationError{
						field:  "AssociatedE2NodeInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssociatedE2NodeInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat2ValidationError{
					field:  "AssociatedE2NodeInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AssociatedUeinfo != nil {

		if all {
			switch v := interface{}(m.GetAssociatedUeinfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat2ValidationError{
						field:  "AssociatedUeinfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat2ValidationError{
						field:  "AssociatedUeinfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssociatedUeinfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat2ValidationError{
					field:  "AssociatedUeinfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcEventTriggerFormat2MultiError(errors)
	}

	return nil
}

// E2SmRcEventTriggerFormat2MultiError is an error wrapping multiple validation
// errors returned by E2SmRcEventTriggerFormat2.ValidateAll() if the
// designated constraints aren't met.
type E2SmRcEventTriggerFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcEventTriggerFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcEventTriggerFormat2MultiError) AllErrors() []error { return m }

// E2SmRcEventTriggerFormat2ValidationError is the validation error returned by
// E2SmRcEventTriggerFormat2.Validate if the designated constraints aren't met.
type E2SmRcEventTriggerFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcEventTriggerFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcEventTriggerFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcEventTriggerFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcEventTriggerFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcEventTriggerFormat2ValidationError) ErrorName() string {
	return "E2SmRcEventTriggerFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcEventTriggerFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcEventTriggerFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcEventTriggerFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcEventTriggerFormat2ValidationError{}

// Validate checks the field values on E2SmRcEventTriggerFormat3 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcEventTriggerFormat3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcEventTriggerFormat3 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcEventTriggerFormat3MultiError, or nil if none found.
func (m *E2SmRcEventTriggerFormat3) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcEventTriggerFormat3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetE2NodeInfoChangeList()); l < 1 || l > 65535 {
		err := E2SmRcEventTriggerFormat3ValidationError{
			field:  "E2NodeInfoChangeList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetE2NodeInfoChangeList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat3ValidationError{
						field:  fmt.Sprintf("E2NodeInfoChangeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat3ValidationError{
						field:  fmt.Sprintf("E2NodeInfoChangeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat3ValidationError{
					field:  fmt.Sprintf("E2NodeInfoChangeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcEventTriggerFormat3MultiError(errors)
	}

	return nil
}

// E2SmRcEventTriggerFormat3MultiError is an error wrapping multiple validation
// errors returned by E2SmRcEventTriggerFormat3.ValidateAll() if the
// designated constraints aren't met.
type E2SmRcEventTriggerFormat3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcEventTriggerFormat3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcEventTriggerFormat3MultiError) AllErrors() []error { return m }

// E2SmRcEventTriggerFormat3ValidationError is the validation error returned by
// E2SmRcEventTriggerFormat3.Validate if the designated constraints aren't met.
type E2SmRcEventTriggerFormat3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcEventTriggerFormat3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcEventTriggerFormat3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcEventTriggerFormat3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcEventTriggerFormat3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcEventTriggerFormat3ValidationError) ErrorName() string {
	return "E2SmRcEventTriggerFormat3ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcEventTriggerFormat3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcEventTriggerFormat3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcEventTriggerFormat3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcEventTriggerFormat3ValidationError{}

// Validate checks the field values on E2SmRcEventTriggerFormat3Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcEventTriggerFormat3Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcEventTriggerFormat3Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcEventTriggerFormat3ItemMultiError, or nil if none found.
func (m *E2SmRcEventTriggerFormat3Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcEventTriggerFormat3Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicEventTriggerConditionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat3ItemValidationError{
					field:  "RicEventTriggerConditionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat3ItemValidationError{
					field:  "RicEventTriggerConditionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerConditionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcEventTriggerFormat3ItemValidationError{
				field:  "RicEventTriggerConditionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for E2NodeInfoChangeId

	if m.AssociatedCellInfo != nil {

		if all {
			switch v := interface{}(m.GetAssociatedCellInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat3ItemValidationError{
						field:  "AssociatedCellInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat3ItemValidationError{
						field:  "AssociatedCellInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssociatedCellInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat3ItemValidationError{
					field:  "AssociatedCellInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LogicalOr != nil {
		// no validation rules for LogicalOr
	}

	if len(errors) > 0 {
		return E2SmRcEventTriggerFormat3ItemMultiError(errors)
	}

	return nil
}

// E2SmRcEventTriggerFormat3ItemMultiError is an error wrapping multiple
// validation errors returned by E2SmRcEventTriggerFormat3Item.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcEventTriggerFormat3ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcEventTriggerFormat3ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcEventTriggerFormat3ItemMultiError) AllErrors() []error { return m }

// E2SmRcEventTriggerFormat3ItemValidationError is the validation error
// returned by E2SmRcEventTriggerFormat3Item.Validate if the designated
// constraints aren't met.
type E2SmRcEventTriggerFormat3ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcEventTriggerFormat3ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcEventTriggerFormat3ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcEventTriggerFormat3ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcEventTriggerFormat3ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcEventTriggerFormat3ItemValidationError) ErrorName() string {
	return "E2SmRcEventTriggerFormat3ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcEventTriggerFormat3ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcEventTriggerFormat3Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcEventTriggerFormat3ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcEventTriggerFormat3ItemValidationError{}

// Validate checks the field values on E2SmRcEventTriggerFormat4 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcEventTriggerFormat4) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcEventTriggerFormat4 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcEventTriggerFormat4MultiError, or nil if none found.
func (m *E2SmRcEventTriggerFormat4) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcEventTriggerFormat4) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetUEinfoChangeList()); l < 1 || l > 65535 {
		err := E2SmRcEventTriggerFormat4ValidationError{
			field:  "UEinfoChangeList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUEinfoChangeList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat4ValidationError{
						field:  fmt.Sprintf("UEinfoChangeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat4ValidationError{
						field:  fmt.Sprintf("UEinfoChangeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat4ValidationError{
					field:  fmt.Sprintf("UEinfoChangeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcEventTriggerFormat4MultiError(errors)
	}

	return nil
}

// E2SmRcEventTriggerFormat4MultiError is an error wrapping multiple validation
// errors returned by E2SmRcEventTriggerFormat4.ValidateAll() if the
// designated constraints aren't met.
type E2SmRcEventTriggerFormat4MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcEventTriggerFormat4MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcEventTriggerFormat4MultiError) AllErrors() []error { return m }

// E2SmRcEventTriggerFormat4ValidationError is the validation error returned by
// E2SmRcEventTriggerFormat4.Validate if the designated constraints aren't met.
type E2SmRcEventTriggerFormat4ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcEventTriggerFormat4ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcEventTriggerFormat4ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcEventTriggerFormat4ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcEventTriggerFormat4ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcEventTriggerFormat4ValidationError) ErrorName() string {
	return "E2SmRcEventTriggerFormat4ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcEventTriggerFormat4ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcEventTriggerFormat4.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcEventTriggerFormat4ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcEventTriggerFormat4ValidationError{}

// Validate checks the field values on E2SmRcEventTriggerFormat4Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcEventTriggerFormat4Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcEventTriggerFormat4Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcEventTriggerFormat4ItemMultiError, or nil if none found.
func (m *E2SmRcEventTriggerFormat4Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcEventTriggerFormat4Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicEventTriggerConditionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat4ItemValidationError{
					field:  "RicEventTriggerConditionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat4ItemValidationError{
					field:  "RicEventTriggerConditionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerConditionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcEventTriggerFormat4ItemValidationError{
				field:  "RicEventTriggerConditionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTriggerType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat4ItemValidationError{
					field:  "TriggerType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcEventTriggerFormat4ItemValidationError{
					field:  "TriggerType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTriggerType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcEventTriggerFormat4ItemValidationError{
				field:  "TriggerType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AssociatedUeinfo != nil {

		if all {
			switch v := interface{}(m.GetAssociatedUeinfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat4ItemValidationError{
						field:  "AssociatedUeinfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat4ItemValidationError{
						field:  "AssociatedUeinfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssociatedUeinfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat4ItemValidationError{
					field:  "AssociatedUeinfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LogicalOr != nil {
		// no validation rules for LogicalOr
	}

	if len(errors) > 0 {
		return E2SmRcEventTriggerFormat4ItemMultiError(errors)
	}

	return nil
}

// E2SmRcEventTriggerFormat4ItemMultiError is an error wrapping multiple
// validation errors returned by E2SmRcEventTriggerFormat4Item.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcEventTriggerFormat4ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcEventTriggerFormat4ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcEventTriggerFormat4ItemMultiError) AllErrors() []error { return m }

// E2SmRcEventTriggerFormat4ItemValidationError is the validation error
// returned by E2SmRcEventTriggerFormat4Item.Validate if the designated
// constraints aren't met.
type E2SmRcEventTriggerFormat4ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcEventTriggerFormat4ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcEventTriggerFormat4ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcEventTriggerFormat4ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcEventTriggerFormat4ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcEventTriggerFormat4ItemValidationError) ErrorName() string {
	return "E2SmRcEventTriggerFormat4ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcEventTriggerFormat4ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcEventTriggerFormat4Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcEventTriggerFormat4ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcEventTriggerFormat4ItemValidationError{}

// Validate checks the field values on TriggerTypeChoice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TriggerTypeChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerTypeChoice with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerTypeChoiceMultiError, or nil if none found.
func (m *TriggerTypeChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerTypeChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.TriggerTypeChoice.(type) {

	case *TriggerTypeChoice_TriggerTypeChoiceRrcstate:

		if all {
			switch v := interface{}(m.GetTriggerTypeChoiceRrcstate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerTypeChoiceValidationError{
						field:  "TriggerTypeChoiceRrcstate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerTypeChoiceValidationError{
						field:  "TriggerTypeChoiceRrcstate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTriggerTypeChoiceRrcstate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerTypeChoiceValidationError{
					field:  "TriggerTypeChoiceRrcstate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TriggerTypeChoice_TriggerTypeChoiceUeid:

		if all {
			switch v := interface{}(m.GetTriggerTypeChoiceUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerTypeChoiceValidationError{
						field:  "TriggerTypeChoiceUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerTypeChoiceValidationError{
						field:  "TriggerTypeChoiceUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTriggerTypeChoiceUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerTypeChoiceValidationError{
					field:  "TriggerTypeChoiceUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TriggerTypeChoice_TriggerTypeChoiceL2State:

		if all {
			switch v := interface{}(m.GetTriggerTypeChoiceL2State()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerTypeChoiceValidationError{
						field:  "TriggerTypeChoiceL2State",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerTypeChoiceValidationError{
						field:  "TriggerTypeChoiceL2State",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTriggerTypeChoiceL2State()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerTypeChoiceValidationError{
					field:  "TriggerTypeChoiceL2State",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerTypeChoiceMultiError(errors)
	}

	return nil
}

// TriggerTypeChoiceMultiError is an error wrapping multiple validation errors
// returned by TriggerTypeChoice.ValidateAll() if the designated constraints
// aren't met.
type TriggerTypeChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerTypeChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerTypeChoiceMultiError) AllErrors() []error { return m }

// TriggerTypeChoiceValidationError is the validation error returned by
// TriggerTypeChoice.Validate if the designated constraints aren't met.
type TriggerTypeChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerTypeChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerTypeChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerTypeChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerTypeChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerTypeChoiceValidationError) ErrorName() string {
	return "TriggerTypeChoiceValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerTypeChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerTypeChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerTypeChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerTypeChoiceValidationError{}

// Validate checks the field values on TriggerTypeChoiceRrcstate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerTypeChoiceRrcstate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerTypeChoiceRrcstate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerTypeChoiceRrcstateMultiError, or nil if none found.
func (m *TriggerTypeChoiceRrcstate) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerTypeChoiceRrcstate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRrcStateList()); l < 1 || l > 8 {
		err := TriggerTypeChoiceRrcstateValidationError{
			field:  "RrcStateList",
			reason: "value must contain between 1 and 8 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRrcStateList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerTypeChoiceRrcstateValidationError{
						field:  fmt.Sprintf("RrcStateList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerTypeChoiceRrcstateValidationError{
						field:  fmt.Sprintf("RrcStateList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerTypeChoiceRrcstateValidationError{
					field:  fmt.Sprintf("RrcStateList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerTypeChoiceRrcstateMultiError(errors)
	}

	return nil
}

// TriggerTypeChoiceRrcstateMultiError is an error wrapping multiple validation
// errors returned by TriggerTypeChoiceRrcstate.ValidateAll() if the
// designated constraints aren't met.
type TriggerTypeChoiceRrcstateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerTypeChoiceRrcstateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerTypeChoiceRrcstateMultiError) AllErrors() []error { return m }

// TriggerTypeChoiceRrcstateValidationError is the validation error returned by
// TriggerTypeChoiceRrcstate.Validate if the designated constraints aren't met.
type TriggerTypeChoiceRrcstateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerTypeChoiceRrcstateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerTypeChoiceRrcstateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerTypeChoiceRrcstateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerTypeChoiceRrcstateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerTypeChoiceRrcstateValidationError) ErrorName() string {
	return "TriggerTypeChoiceRrcstateValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerTypeChoiceRrcstateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerTypeChoiceRrcstate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerTypeChoiceRrcstateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerTypeChoiceRrcstateValidationError{}

// Validate checks the field values on TriggerTypeChoiceRrcstateItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerTypeChoiceRrcstateItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerTypeChoiceRrcstateItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerTypeChoiceRrcstateItemMultiError, or nil if none found.
func (m *TriggerTypeChoiceRrcstateItem) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerTypeChoiceRrcstateItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StateChangedTo

	if m.LogicalOr != nil {
		// no validation rules for LogicalOr
	}

	if len(errors) > 0 {
		return TriggerTypeChoiceRrcstateItemMultiError(errors)
	}

	return nil
}

// TriggerTypeChoiceRrcstateItemMultiError is an error wrapping multiple
// validation errors returned by TriggerTypeChoiceRrcstateItem.ValidateAll()
// if the designated constraints aren't met.
type TriggerTypeChoiceRrcstateItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerTypeChoiceRrcstateItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerTypeChoiceRrcstateItemMultiError) AllErrors() []error { return m }

// TriggerTypeChoiceRrcstateItemValidationError is the validation error
// returned by TriggerTypeChoiceRrcstateItem.Validate if the designated
// constraints aren't met.
type TriggerTypeChoiceRrcstateItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerTypeChoiceRrcstateItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerTypeChoiceRrcstateItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerTypeChoiceRrcstateItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerTypeChoiceRrcstateItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerTypeChoiceRrcstateItemValidationError) ErrorName() string {
	return "TriggerTypeChoiceRrcstateItemValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerTypeChoiceRrcstateItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerTypeChoiceRrcstateItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerTypeChoiceRrcstateItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerTypeChoiceRrcstateItemValidationError{}

// Validate checks the field values on TriggerTypeChoiceUeid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerTypeChoiceUeid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerTypeChoiceUeid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerTypeChoiceUeidMultiError, or nil if none found.
func (m *TriggerTypeChoiceUeid) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerTypeChoiceUeid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UeIdchangeId

	if len(errors) > 0 {
		return TriggerTypeChoiceUeidMultiError(errors)
	}

	return nil
}

// TriggerTypeChoiceUeidMultiError is an error wrapping multiple validation
// errors returned by TriggerTypeChoiceUeid.ValidateAll() if the designated
// constraints aren't met.
type TriggerTypeChoiceUeidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerTypeChoiceUeidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerTypeChoiceUeidMultiError) AllErrors() []error { return m }

// TriggerTypeChoiceUeidValidationError is the validation error returned by
// TriggerTypeChoiceUeid.Validate if the designated constraints aren't met.
type TriggerTypeChoiceUeidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerTypeChoiceUeidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerTypeChoiceUeidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerTypeChoiceUeidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerTypeChoiceUeidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerTypeChoiceUeidValidationError) ErrorName() string {
	return "TriggerTypeChoiceUeidValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerTypeChoiceUeidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerTypeChoiceUeid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerTypeChoiceUeidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerTypeChoiceUeidValidationError{}

// Validate checks the field values on TriggerTypeChoiceL2State with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerTypeChoiceL2State) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerTypeChoiceL2State with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerTypeChoiceL2StateMultiError, or nil if none found.
func (m *TriggerTypeChoiceL2State) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerTypeChoiceL2State) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAssociatedL2Variables()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerTypeChoiceL2StateValidationError{
					field:  "AssociatedL2Variables",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerTypeChoiceL2StateValidationError{
					field:  "AssociatedL2Variables",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssociatedL2Variables()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerTypeChoiceL2StateValidationError{
				field:  "AssociatedL2Variables",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerTypeChoiceL2StateMultiError(errors)
	}

	return nil
}

// TriggerTypeChoiceL2StateMultiError is an error wrapping multiple validation
// errors returned by TriggerTypeChoiceL2State.ValidateAll() if the designated
// constraints aren't met.
type TriggerTypeChoiceL2StateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerTypeChoiceL2StateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerTypeChoiceL2StateMultiError) AllErrors() []error { return m }

// TriggerTypeChoiceL2StateValidationError is the validation error returned by
// TriggerTypeChoiceL2State.Validate if the designated constraints aren't met.
type TriggerTypeChoiceL2StateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerTypeChoiceL2StateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerTypeChoiceL2StateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerTypeChoiceL2StateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerTypeChoiceL2StateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerTypeChoiceL2StateValidationError) ErrorName() string {
	return "TriggerTypeChoiceL2StateValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerTypeChoiceL2StateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerTypeChoiceL2State.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerTypeChoiceL2StateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerTypeChoiceL2StateValidationError{}

// Validate checks the field values on E2SmRcEventTriggerFormat5 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcEventTriggerFormat5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcEventTriggerFormat5 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcEventTriggerFormat5MultiError, or nil if none found.
func (m *E2SmRcEventTriggerFormat5) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcEventTriggerFormat5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OnDemand

	if m.AssociatedUeinfo != nil {

		if all {
			switch v := interface{}(m.GetAssociatedUeinfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat5ValidationError{
						field:  "AssociatedUeinfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat5ValidationError{
						field:  "AssociatedUeinfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssociatedUeinfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat5ValidationError{
					field:  "AssociatedUeinfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AssociatedCellInfo != nil {

		if all {
			switch v := interface{}(m.GetAssociatedCellInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat5ValidationError{
						field:  "AssociatedCellInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcEventTriggerFormat5ValidationError{
						field:  "AssociatedCellInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssociatedCellInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcEventTriggerFormat5ValidationError{
					field:  "AssociatedCellInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcEventTriggerFormat5MultiError(errors)
	}

	return nil
}

// E2SmRcEventTriggerFormat5MultiError is an error wrapping multiple validation
// errors returned by E2SmRcEventTriggerFormat5.ValidateAll() if the
// designated constraints aren't met.
type E2SmRcEventTriggerFormat5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcEventTriggerFormat5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcEventTriggerFormat5MultiError) AllErrors() []error { return m }

// E2SmRcEventTriggerFormat5ValidationError is the validation error returned by
// E2SmRcEventTriggerFormat5.Validate if the designated constraints aren't met.
type E2SmRcEventTriggerFormat5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcEventTriggerFormat5ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcEventTriggerFormat5ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcEventTriggerFormat5ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcEventTriggerFormat5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcEventTriggerFormat5ValidationError) ErrorName() string {
	return "E2SmRcEventTriggerFormat5ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcEventTriggerFormat5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcEventTriggerFormat5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcEventTriggerFormat5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcEventTriggerFormat5ValidationError{}

// Validate checks the field values on E2SmRcActionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcActionDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcActionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcActionDefinitionMultiError, or nil if none found.
func (m *E2SmRcActionDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcActionDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcActionDefinitionValidationError{
				field:  "RicStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicActionDefinitionFormats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionValidationError{
					field:  "RicActionDefinitionFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionValidationError{
					field:  "RicActionDefinitionFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicActionDefinitionFormats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcActionDefinitionValidationError{
				field:  "RicActionDefinitionFormats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcActionDefinitionMultiError(errors)
	}

	return nil
}

// E2SmRcActionDefinitionMultiError is an error wrapping multiple validation
// errors returned by E2SmRcActionDefinition.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcActionDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcActionDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcActionDefinitionMultiError) AllErrors() []error { return m }

// E2SmRcActionDefinitionValidationError is the validation error returned by
// E2SmRcActionDefinition.Validate if the designated constraints aren't met.
type E2SmRcActionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcActionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcActionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcActionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcActionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcActionDefinitionValidationError) ErrorName() string {
	return "E2SmRcActionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcActionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcActionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcActionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcActionDefinitionValidationError{}

// Validate checks the field values on RicActionDefinitionFormats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicActionDefinitionFormats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicActionDefinitionFormats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicActionDefinitionFormatsMultiError, or nil if none found.
func (m *RicActionDefinitionFormats) ValidateAll() error {
	return m.validate(true)
}

func (m *RicActionDefinitionFormats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RicActionDefinitionFormats.(type) {

	case *RicActionDefinitionFormats_ActionDefinitionFormat1:

		if all {
			switch v := interface{}(m.GetActionDefinitionFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicActionDefinitionFormatsValidationError{
						field:  "ActionDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicActionDefinitionFormatsValidationError{
						field:  "ActionDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActionDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicActionDefinitionFormatsValidationError{
					field:  "ActionDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicActionDefinitionFormats_ActionDefinitionFormat2:

		if all {
			switch v := interface{}(m.GetActionDefinitionFormat2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicActionDefinitionFormatsValidationError{
						field:  "ActionDefinitionFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicActionDefinitionFormatsValidationError{
						field:  "ActionDefinitionFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActionDefinitionFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicActionDefinitionFormatsValidationError{
					field:  "ActionDefinitionFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicActionDefinitionFormats_ActionDefinitionFormat3:

		if all {
			switch v := interface{}(m.GetActionDefinitionFormat3()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicActionDefinitionFormatsValidationError{
						field:  "ActionDefinitionFormat3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicActionDefinitionFormatsValidationError{
						field:  "ActionDefinitionFormat3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActionDefinitionFormat3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicActionDefinitionFormatsValidationError{
					field:  "ActionDefinitionFormat3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicActionDefinitionFormatsMultiError(errors)
	}

	return nil
}

// RicActionDefinitionFormatsMultiError is an error wrapping multiple
// validation errors returned by RicActionDefinitionFormats.ValidateAll() if
// the designated constraints aren't met.
type RicActionDefinitionFormatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicActionDefinitionFormatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicActionDefinitionFormatsMultiError) AllErrors() []error { return m }

// RicActionDefinitionFormatsValidationError is the validation error returned
// by RicActionDefinitionFormats.Validate if the designated constraints aren't met.
type RicActionDefinitionFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicActionDefinitionFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicActionDefinitionFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicActionDefinitionFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicActionDefinitionFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicActionDefinitionFormatsValidationError) ErrorName() string {
	return "RicActionDefinitionFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e RicActionDefinitionFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicActionDefinitionFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicActionDefinitionFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicActionDefinitionFormatsValidationError{}

// Validate checks the field values on E2SmRcActionDefinitionFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcActionDefinitionFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcActionDefinitionFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcActionDefinitionFormat1MultiError, or nil if none found.
func (m *E2SmRcActionDefinitionFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcActionDefinitionFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRanPToBeReportedList()); l < 1 || l > 65535 {
		err := E2SmRcActionDefinitionFormat1ValidationError{
			field:  "RanPToBeReportedList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanPToBeReportedList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcActionDefinitionFormat1ValidationError{
						field:  fmt.Sprintf("RanPToBeReportedList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcActionDefinitionFormat1ValidationError{
						field:  fmt.Sprintf("RanPToBeReportedList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcActionDefinitionFormat1ValidationError{
					field:  fmt.Sprintf("RanPToBeReportedList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcActionDefinitionFormat1MultiError(errors)
	}

	return nil
}

// E2SmRcActionDefinitionFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmRcActionDefinitionFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcActionDefinitionFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcActionDefinitionFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcActionDefinitionFormat1MultiError) AllErrors() []error { return m }

// E2SmRcActionDefinitionFormat1ValidationError is the validation error
// returned by E2SmRcActionDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmRcActionDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcActionDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcActionDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcActionDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcActionDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcActionDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmRcActionDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcActionDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcActionDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcActionDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcActionDefinitionFormat1ValidationError{}

// Validate checks the field values on E2SmRcActionDefinitionFormat1Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *E2SmRcActionDefinitionFormat1Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcActionDefinitionFormat1Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmRcActionDefinitionFormat1ItemMultiError, or nil if none found.
func (m *E2SmRcActionDefinitionFormat1Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcActionDefinitionFormat1Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionFormat1ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionFormat1ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcActionDefinitionFormat1ItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcActionDefinitionFormat1ItemMultiError(errors)
	}

	return nil
}

// E2SmRcActionDefinitionFormat1ItemMultiError is an error wrapping multiple
// validation errors returned by
// E2SmRcActionDefinitionFormat1Item.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcActionDefinitionFormat1ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcActionDefinitionFormat1ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcActionDefinitionFormat1ItemMultiError) AllErrors() []error { return m }

// E2SmRcActionDefinitionFormat1ItemValidationError is the validation error
// returned by E2SmRcActionDefinitionFormat1Item.Validate if the designated
// constraints aren't met.
type E2SmRcActionDefinitionFormat1ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcActionDefinitionFormat1ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcActionDefinitionFormat1ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcActionDefinitionFormat1ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcActionDefinitionFormat1ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcActionDefinitionFormat1ItemValidationError) ErrorName() string {
	return "E2SmRcActionDefinitionFormat1ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcActionDefinitionFormat1ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcActionDefinitionFormat1Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcActionDefinitionFormat1ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcActionDefinitionFormat1ItemValidationError{}

// Validate checks the field values on E2SmRcActionDefinitionFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcActionDefinitionFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcActionDefinitionFormat2 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcActionDefinitionFormat2MultiError, or nil if none found.
func (m *E2SmRcActionDefinitionFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcActionDefinitionFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRicPolicyConditionsList()); l < 1 || l > 65535 {
		err := E2SmRcActionDefinitionFormat2ValidationError{
			field:  "RicPolicyConditionsList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicPolicyConditionsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcActionDefinitionFormat2ValidationError{
						field:  fmt.Sprintf("RicPolicyConditionsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcActionDefinitionFormat2ValidationError{
						field:  fmt.Sprintf("RicPolicyConditionsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcActionDefinitionFormat2ValidationError{
					field:  fmt.Sprintf("RicPolicyConditionsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcActionDefinitionFormat2MultiError(errors)
	}

	return nil
}

// E2SmRcActionDefinitionFormat2MultiError is an error wrapping multiple
// validation errors returned by E2SmRcActionDefinitionFormat2.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcActionDefinitionFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcActionDefinitionFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcActionDefinitionFormat2MultiError) AllErrors() []error { return m }

// E2SmRcActionDefinitionFormat2ValidationError is the validation error
// returned by E2SmRcActionDefinitionFormat2.Validate if the designated
// constraints aren't met.
type E2SmRcActionDefinitionFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcActionDefinitionFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcActionDefinitionFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcActionDefinitionFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcActionDefinitionFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcActionDefinitionFormat2ValidationError) ErrorName() string {
	return "E2SmRcActionDefinitionFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcActionDefinitionFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcActionDefinitionFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcActionDefinitionFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcActionDefinitionFormat2ValidationError{}

// Validate checks the field values on E2SmRcActionDefinitionFormat2Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *E2SmRcActionDefinitionFormat2Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcActionDefinitionFormat2Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmRcActionDefinitionFormat2ItemMultiError, or nil if none found.
func (m *E2SmRcActionDefinitionFormat2Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcActionDefinitionFormat2Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicPolicyAction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionFormat2ItemValidationError{
					field:  "RicPolicyAction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionFormat2ItemValidationError{
					field:  "RicPolicyAction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicPolicyAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcActionDefinitionFormat2ItemValidationError{
				field:  "RicPolicyAction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RicPolicyConditionDefinition != nil {

		if all {
			switch v := interface{}(m.GetRicPolicyConditionDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcActionDefinitionFormat2ItemValidationError{
						field:  "RicPolicyConditionDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcActionDefinitionFormat2ItemValidationError{
						field:  "RicPolicyConditionDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicPolicyConditionDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcActionDefinitionFormat2ItemValidationError{
					field:  "RicPolicyConditionDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcActionDefinitionFormat2ItemMultiError(errors)
	}

	return nil
}

// E2SmRcActionDefinitionFormat2ItemMultiError is an error wrapping multiple
// validation errors returned by
// E2SmRcActionDefinitionFormat2Item.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcActionDefinitionFormat2ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcActionDefinitionFormat2ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcActionDefinitionFormat2ItemMultiError) AllErrors() []error { return m }

// E2SmRcActionDefinitionFormat2ItemValidationError is the validation error
// returned by E2SmRcActionDefinitionFormat2Item.Validate if the designated
// constraints aren't met.
type E2SmRcActionDefinitionFormat2ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcActionDefinitionFormat2ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcActionDefinitionFormat2ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcActionDefinitionFormat2ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcActionDefinitionFormat2ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcActionDefinitionFormat2ItemValidationError) ErrorName() string {
	return "E2SmRcActionDefinitionFormat2ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcActionDefinitionFormat2ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcActionDefinitionFormat2Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcActionDefinitionFormat2ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcActionDefinitionFormat2ItemValidationError{}

// Validate checks the field values on E2SmRcActionDefinitionFormat3 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcActionDefinitionFormat3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcActionDefinitionFormat3 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcActionDefinitionFormat3MultiError, or nil if none found.
func (m *E2SmRcActionDefinitionFormat3) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcActionDefinitionFormat3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicInsertIndicationId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionFormat3ValidationError{
					field:  "RicInsertIndicationId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionFormat3ValidationError{
					field:  "RicInsertIndicationId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicInsertIndicationId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcActionDefinitionFormat3ValidationError{
				field:  "RicInsertIndicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetRanPInsertIndicationList()); l < 1 || l > 65535 {
		err := E2SmRcActionDefinitionFormat3ValidationError{
			field:  "RanPInsertIndicationList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanPInsertIndicationList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcActionDefinitionFormat3ValidationError{
						field:  fmt.Sprintf("RanPInsertIndicationList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcActionDefinitionFormat3ValidationError{
						field:  fmt.Sprintf("RanPInsertIndicationList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcActionDefinitionFormat3ValidationError{
					field:  fmt.Sprintf("RanPInsertIndicationList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UeId != nil {

		if all {
			switch v := interface{}(m.GetUeId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcActionDefinitionFormat3ValidationError{
						field:  "UeId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcActionDefinitionFormat3ValidationError{
						field:  "UeId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcActionDefinitionFormat3ValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcActionDefinitionFormat3MultiError(errors)
	}

	return nil
}

// E2SmRcActionDefinitionFormat3MultiError is an error wrapping multiple
// validation errors returned by E2SmRcActionDefinitionFormat3.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcActionDefinitionFormat3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcActionDefinitionFormat3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcActionDefinitionFormat3MultiError) AllErrors() []error { return m }

// E2SmRcActionDefinitionFormat3ValidationError is the validation error
// returned by E2SmRcActionDefinitionFormat3.Validate if the designated
// constraints aren't met.
type E2SmRcActionDefinitionFormat3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcActionDefinitionFormat3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcActionDefinitionFormat3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcActionDefinitionFormat3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcActionDefinitionFormat3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcActionDefinitionFormat3ValidationError) ErrorName() string {
	return "E2SmRcActionDefinitionFormat3ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcActionDefinitionFormat3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcActionDefinitionFormat3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcActionDefinitionFormat3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcActionDefinitionFormat3ValidationError{}

// Validate checks the field values on E2SmRcActionDefinitionFormat3Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *E2SmRcActionDefinitionFormat3Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcActionDefinitionFormat3Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmRcActionDefinitionFormat3ItemMultiError, or nil if none found.
func (m *E2SmRcActionDefinitionFormat3Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcActionDefinitionFormat3Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionFormat3ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcActionDefinitionFormat3ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcActionDefinitionFormat3ItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcActionDefinitionFormat3ItemMultiError(errors)
	}

	return nil
}

// E2SmRcActionDefinitionFormat3ItemMultiError is an error wrapping multiple
// validation errors returned by
// E2SmRcActionDefinitionFormat3Item.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcActionDefinitionFormat3ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcActionDefinitionFormat3ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcActionDefinitionFormat3ItemMultiError) AllErrors() []error { return m }

// E2SmRcActionDefinitionFormat3ItemValidationError is the validation error
// returned by E2SmRcActionDefinitionFormat3Item.Validate if the designated
// constraints aren't met.
type E2SmRcActionDefinitionFormat3ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcActionDefinitionFormat3ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcActionDefinitionFormat3ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcActionDefinitionFormat3ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcActionDefinitionFormat3ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcActionDefinitionFormat3ItemValidationError) ErrorName() string {
	return "E2SmRcActionDefinitionFormat3ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcActionDefinitionFormat3ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcActionDefinitionFormat3Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcActionDefinitionFormat3ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcActionDefinitionFormat3ItemValidationError{}

// Validate checks the field values on E2SmRcIndicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcIndicationHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationHeaderMultiError, or nil if none found.
func (m *E2SmRcIndicationHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicIndicationHeaderFormats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationHeaderValidationError{
					field:  "RicIndicationHeaderFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationHeaderValidationError{
					field:  "RicIndicationHeaderFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationHeaderFormats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationHeaderValidationError{
				field:  "RicIndicationHeaderFormats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcIndicationHeaderMultiError(errors)
	}

	return nil
}

// E2SmRcIndicationHeaderMultiError is an error wrapping multiple validation
// errors returned by E2SmRcIndicationHeader.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcIndicationHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationHeaderMultiError) AllErrors() []error { return m }

// E2SmRcIndicationHeaderValidationError is the validation error returned by
// E2SmRcIndicationHeader.Validate if the designated constraints aren't met.
type E2SmRcIndicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationHeaderValidationError) ErrorName() string {
	return "E2SmRcIndicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationHeaderValidationError{}

// Validate checks the field values on RicIndicationHeaderFormats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicIndicationHeaderFormats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicIndicationHeaderFormats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicIndicationHeaderFormatsMultiError, or nil if none found.
func (m *RicIndicationHeaderFormats) ValidateAll() error {
	return m.validate(true)
}

func (m *RicIndicationHeaderFormats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RicIndicationHeaderFormats.(type) {

	case *RicIndicationHeaderFormats_IndicationHeaderFormat1:

		if all {
			switch v := interface{}(m.GetIndicationHeaderFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicIndicationHeaderFormatsValidationError{
						field:  "IndicationHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicIndicationHeaderFormatsValidationError{
						field:  "IndicationHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicIndicationHeaderFormatsValidationError{
					field:  "IndicationHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicIndicationHeaderFormats_IndicationHeaderFormat2:

		if all {
			switch v := interface{}(m.GetIndicationHeaderFormat2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicIndicationHeaderFormatsValidationError{
						field:  "IndicationHeaderFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicIndicationHeaderFormatsValidationError{
						field:  "IndicationHeaderFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationHeaderFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicIndicationHeaderFormatsValidationError{
					field:  "IndicationHeaderFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicIndicationHeaderFormatsMultiError(errors)
	}

	return nil
}

// RicIndicationHeaderFormatsMultiError is an error wrapping multiple
// validation errors returned by RicIndicationHeaderFormats.ValidateAll() if
// the designated constraints aren't met.
type RicIndicationHeaderFormatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicIndicationHeaderFormatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicIndicationHeaderFormatsMultiError) AllErrors() []error { return m }

// RicIndicationHeaderFormatsValidationError is the validation error returned
// by RicIndicationHeaderFormats.Validate if the designated constraints aren't met.
type RicIndicationHeaderFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicIndicationHeaderFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicIndicationHeaderFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicIndicationHeaderFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicIndicationHeaderFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicIndicationHeaderFormatsValidationError) ErrorName() string {
	return "RicIndicationHeaderFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e RicIndicationHeaderFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicIndicationHeaderFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicIndicationHeaderFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicIndicationHeaderFormatsValidationError{}

// Validate checks the field values on E2SmRcIndicationHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcIndicationHeaderFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationHeaderFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationHeaderFormat1MultiError, or nil if none found.
func (m *E2SmRcIndicationHeaderFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationHeaderFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.RicEventTriggerConditionId != nil {

		if all {
			switch v := interface{}(m.GetRicEventTriggerConditionId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcIndicationHeaderFormat1ValidationError{
						field:  "RicEventTriggerConditionId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcIndicationHeaderFormat1ValidationError{
						field:  "RicEventTriggerConditionId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicEventTriggerConditionId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcIndicationHeaderFormat1ValidationError{
					field:  "RicEventTriggerConditionId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcIndicationHeaderFormat1MultiError(errors)
	}

	return nil
}

// E2SmRcIndicationHeaderFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmRcIndicationHeaderFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcIndicationHeaderFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationHeaderFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationHeaderFormat1MultiError) AllErrors() []error { return m }

// E2SmRcIndicationHeaderFormat1ValidationError is the validation error
// returned by E2SmRcIndicationHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmRcIndicationHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmRcIndicationHeaderFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcIndicationHeaderFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationHeaderFormat2 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationHeaderFormat2MultiError, or nil if none found.
func (m *E2SmRcIndicationHeaderFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationHeaderFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationHeaderFormat2ValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationHeaderFormat2ValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationHeaderFormat2ValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicInsertStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationHeaderFormat2ValidationError{
					field:  "RicInsertStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationHeaderFormat2ValidationError{
					field:  "RicInsertStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicInsertStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationHeaderFormat2ValidationError{
				field:  "RicInsertStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicInsertIndicationId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationHeaderFormat2ValidationError{
					field:  "RicInsertIndicationId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationHeaderFormat2ValidationError{
					field:  "RicInsertIndicationId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicInsertIndicationId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationHeaderFormat2ValidationError{
				field:  "RicInsertIndicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcIndicationHeaderFormat2MultiError(errors)
	}

	return nil
}

// E2SmRcIndicationHeaderFormat2MultiError is an error wrapping multiple
// validation errors returned by E2SmRcIndicationHeaderFormat2.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcIndicationHeaderFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationHeaderFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationHeaderFormat2MultiError) AllErrors() []error { return m }

// E2SmRcIndicationHeaderFormat2ValidationError is the validation error
// returned by E2SmRcIndicationHeaderFormat2.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationHeaderFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationHeaderFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationHeaderFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationHeaderFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationHeaderFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationHeaderFormat2ValidationError) ErrorName() string {
	return "E2SmRcIndicationHeaderFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationHeaderFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationHeaderFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationHeaderFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationHeaderFormat2ValidationError{}

// Validate checks the field values on E2SmRcIndicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcIndicationMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageMultiError, or nil if none found.
func (m *E2SmRcIndicationMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicIndicationMessageFormats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageValidationError{
					field:  "RicIndicationMessageFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageValidationError{
					field:  "RicIndicationMessageFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationMessageFormats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageValidationError{
				field:  "RicIndicationMessageFormats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageMultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageMultiError is an error wrapping multiple validation
// errors returned by E2SmRcIndicationMessage.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcIndicationMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageMultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageValidationError is the validation error returned by
// E2SmRcIndicationMessage.Validate if the designated constraints aren't met.
type E2SmRcIndicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageValidationError{}

// Validate checks the field values on RicIndicationMessageFormats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicIndicationMessageFormats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicIndicationMessageFormats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicIndicationMessageFormatsMultiError, or nil if none found.
func (m *RicIndicationMessageFormats) ValidateAll() error {
	return m.validate(true)
}

func (m *RicIndicationMessageFormats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RicIndicationMessageFormats.(type) {

	case *RicIndicationMessageFormats_IndicationMessageFormat1:

		if all {
			switch v := interface{}(m.GetIndicationMessageFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicIndicationMessageFormatsValidationError{
						field:  "IndicationMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicIndicationMessageFormatsValidationError{
						field:  "IndicationMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicIndicationMessageFormatsValidationError{
					field:  "IndicationMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicIndicationMessageFormats_IndicationMessageFormat2:

		if all {
			switch v := interface{}(m.GetIndicationMessageFormat2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicIndicationMessageFormatsValidationError{
						field:  "IndicationMessageFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicIndicationMessageFormatsValidationError{
						field:  "IndicationMessageFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationMessageFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicIndicationMessageFormatsValidationError{
					field:  "IndicationMessageFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicIndicationMessageFormats_IndicationMessageFormat3:

		if all {
			switch v := interface{}(m.GetIndicationMessageFormat3()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicIndicationMessageFormatsValidationError{
						field:  "IndicationMessageFormat3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicIndicationMessageFormatsValidationError{
						field:  "IndicationMessageFormat3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationMessageFormat3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicIndicationMessageFormatsValidationError{
					field:  "IndicationMessageFormat3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicIndicationMessageFormats_IndicationMessageFormat4:

		if all {
			switch v := interface{}(m.GetIndicationMessageFormat4()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicIndicationMessageFormatsValidationError{
						field:  "IndicationMessageFormat4",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicIndicationMessageFormatsValidationError{
						field:  "IndicationMessageFormat4",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationMessageFormat4()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicIndicationMessageFormatsValidationError{
					field:  "IndicationMessageFormat4",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RicIndicationMessageFormats_IndicationMessageFormat5:

		if all {
			switch v := interface{}(m.GetIndicationMessageFormat5()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicIndicationMessageFormatsValidationError{
						field:  "IndicationMessageFormat5",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicIndicationMessageFormatsValidationError{
						field:  "IndicationMessageFormat5",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationMessageFormat5()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicIndicationMessageFormatsValidationError{
					field:  "IndicationMessageFormat5",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicIndicationMessageFormatsMultiError(errors)
	}

	return nil
}

// RicIndicationMessageFormatsMultiError is an error wrapping multiple
// validation errors returned by RicIndicationMessageFormats.ValidateAll() if
// the designated constraints aren't met.
type RicIndicationMessageFormatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicIndicationMessageFormatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicIndicationMessageFormatsMultiError) AllErrors() []error { return m }

// RicIndicationMessageFormatsValidationError is the validation error returned
// by RicIndicationMessageFormats.Validate if the designated constraints
// aren't met.
type RicIndicationMessageFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicIndicationMessageFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicIndicationMessageFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicIndicationMessageFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicIndicationMessageFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicIndicationMessageFormatsValidationError) ErrorName() string {
	return "RicIndicationMessageFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e RicIndicationMessageFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicIndicationMessageFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicIndicationMessageFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicIndicationMessageFormatsValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcIndicationMessageFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessageFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat1MultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRanPReportedList()); l < 1 || l > 65535 {
		err := E2SmRcIndicationMessageFormat1ValidationError{
			field:  "RanPReportedList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanPReportedList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat1ValidationError{
						field:  fmt.Sprintf("RanPReportedList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat1ValidationError{
						field:  fmt.Sprintf("RanPReportedList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcIndicationMessageFormat1ValidationError{
					field:  fmt.Sprintf("RanPReportedList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat1MultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmRcIndicationMessageFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcIndicationMessageFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat1MultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat1ValidationError is the validation error
// returned by E2SmRcIndicationMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat1ValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat1ValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat1Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *E2SmRcIndicationMessageFormat1Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessageFormat1Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat1ItemMultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat1Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat1Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat1ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat1ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat1ItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterValueType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat1ItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat1ItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterValueType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat1ItemValidationError{
				field:  "RanParameterValueType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat1ItemMultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat1ItemMultiError is an error wrapping multiple
// validation errors returned by
// E2SmRcIndicationMessageFormat1Item.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat1ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat1ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat1ItemMultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat1ItemValidationError is the validation error
// returned by E2SmRcIndicationMessageFormat1Item.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat1ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat1ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat1ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat1ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat1ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat1ItemValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat1ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat1ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat1Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat1ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat1ItemValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcIndicationMessageFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessageFormat2 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat2MultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetUeParameterList()); l < 1 || l > 65535 {
		err := E2SmRcIndicationMessageFormat2ValidationError{
			field:  "UeParameterList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUeParameterList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat2ValidationError{
						field:  fmt.Sprintf("UeParameterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat2ValidationError{
						field:  fmt.Sprintf("UeParameterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcIndicationMessageFormat2ValidationError{
					field:  fmt.Sprintf("UeParameterList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat2MultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat2MultiError is an error wrapping multiple
// validation errors returned by E2SmRcIndicationMessageFormat2.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcIndicationMessageFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat2MultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat2ValidationError is the validation error
// returned by E2SmRcIndicationMessageFormat2.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat2ValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat2ValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat2Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *E2SmRcIndicationMessageFormat2Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessageFormat2Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat2ItemMultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat2Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat2Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat2ItemValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat2ItemValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat2ItemValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetRanPList()); l < 1 || l > 65535 {
		err := E2SmRcIndicationMessageFormat2ItemValidationError{
			field:  "RanPList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanPList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat2ItemValidationError{
						field:  fmt.Sprintf("RanPList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat2ItemValidationError{
						field:  fmt.Sprintf("RanPList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcIndicationMessageFormat2ItemValidationError{
					field:  fmt.Sprintf("RanPList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat2ItemMultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat2ItemMultiError is an error wrapping multiple
// validation errors returned by
// E2SmRcIndicationMessageFormat2Item.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat2ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat2ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat2ItemMultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat2ItemValidationError is the validation error
// returned by E2SmRcIndicationMessageFormat2Item.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat2ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat2ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat2ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat2ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat2ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat2ItemValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat2ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat2ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat2Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat2ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat2ItemValidationError{}

// Validate checks the field values on
// E2SmRcIndicationMessageFormat2RanparameterItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *E2SmRcIndicationMessageFormat2RanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// E2SmRcIndicationMessageFormat2RanparameterItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat2RanparameterItemMultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat2RanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat2RanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat2RanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat2RanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat2RanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterValueType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat2RanparameterItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat2RanparameterItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterValueType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat2RanparameterItemValidationError{
				field:  "RanParameterValueType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat2RanparameterItemMultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat2RanparameterItemMultiError is an error
// wrapping multiple validation errors returned by
// E2SmRcIndicationMessageFormat2RanparameterItem.ValidateAll() if the
// designated constraints aren't met.
type E2SmRcIndicationMessageFormat2RanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat2RanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat2RanparameterItemMultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat2RanparameterItemValidationError is the
// validation error returned by
// E2SmRcIndicationMessageFormat2RanparameterItem.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat2RanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat2RanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat2RanparameterItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat2RanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat2RanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat2RanparameterItemValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat2RanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat2RanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat2RanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat2RanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat2RanparameterItemValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat3 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcIndicationMessageFormat3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessageFormat3 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat3MultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat3) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetCellInfoList()); l < 1 || l > 65535 {
		err := E2SmRcIndicationMessageFormat3ValidationError{
			field:  "CellInfoList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCellInfoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat3ValidationError{
						field:  fmt.Sprintf("CellInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat3ValidationError{
						field:  fmt.Sprintf("CellInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcIndicationMessageFormat3ValidationError{
					field:  fmt.Sprintf("CellInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat3MultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat3MultiError is an error wrapping multiple
// validation errors returned by E2SmRcIndicationMessageFormat3.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcIndicationMessageFormat3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat3MultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat3ValidationError is the validation error
// returned by E2SmRcIndicationMessageFormat3.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat3ValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat3ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat3ValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat3Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *E2SmRcIndicationMessageFormat3Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessageFormat3Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat3ItemMultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat3Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat3Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCellGlobalId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat3ItemValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat3ItemValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat3ItemValidationError{
				field:  "CellGlobalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CellContextInfo != nil {
		// no validation rules for CellContextInfo
	}

	if m.CellDeleted != nil {
		// no validation rules for CellDeleted
	}

	if m.NeighborRelationTable != nil {

		if all {
			switch v := interface{}(m.GetNeighborRelationTable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat3ItemValidationError{
						field:  "NeighborRelationTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat3ItemValidationError{
						field:  "NeighborRelationTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNeighborRelationTable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcIndicationMessageFormat3ItemValidationError{
					field:  "NeighborRelationTable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat3ItemMultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat3ItemMultiError is an error wrapping multiple
// validation errors returned by
// E2SmRcIndicationMessageFormat3Item.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat3ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat3ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat3ItemMultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat3ItemValidationError is the validation error
// returned by E2SmRcIndicationMessageFormat3Item.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat3ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat3ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat3ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat3ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat3ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat3ItemValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat3ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat3ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat3Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat3ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat3ItemValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat4 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcIndicationMessageFormat4) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessageFormat4 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat4MultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat4) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat4) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetUeInfoList()) > 65535 {
		err := E2SmRcIndicationMessageFormat4ValidationError{
			field:  "UeInfoList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUeInfoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat4ValidationError{
						field:  fmt.Sprintf("UeInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat4ValidationError{
						field:  fmt.Sprintf("UeInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcIndicationMessageFormat4ValidationError{
					field:  fmt.Sprintf("UeInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetCellInfoList()) > 65535 {
		err := E2SmRcIndicationMessageFormat4ValidationError{
			field:  "CellInfoList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCellInfoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat4ValidationError{
						field:  fmt.Sprintf("CellInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat4ValidationError{
						field:  fmt.Sprintf("CellInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcIndicationMessageFormat4ValidationError{
					field:  fmt.Sprintf("CellInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat4MultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat4MultiError is an error wrapping multiple
// validation errors returned by E2SmRcIndicationMessageFormat4.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcIndicationMessageFormat4MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat4MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat4MultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat4ValidationError is the validation error
// returned by E2SmRcIndicationMessageFormat4.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat4ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat4ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat4ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat4ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat4ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat4ValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat4ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat4ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat4.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat4ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat4ValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat4ItemUe
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SmRcIndicationMessageFormat4ItemUe) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessageFormat4ItemUe
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat4ItemUeMultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat4ItemUe) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat4ItemUe) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat4ItemUeValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat4ItemUeValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat4ItemUeValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCellGlobalId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat4ItemUeValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat4ItemUeValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat4ItemUeValidationError{
				field:  "CellGlobalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.UeContextInfo != nil {
		// no validation rules for UeContextInfo
	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat4ItemUeMultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat4ItemUeMultiError is an error wrapping multiple
// validation errors returned by
// E2SmRcIndicationMessageFormat4ItemUe.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat4ItemUeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat4ItemUeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat4ItemUeMultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat4ItemUeValidationError is the validation error
// returned by E2SmRcIndicationMessageFormat4ItemUe.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat4ItemUeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat4ItemUeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat4ItemUeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat4ItemUeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat4ItemUeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat4ItemUeValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat4ItemUeValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat4ItemUeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat4ItemUe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat4ItemUeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat4ItemUeValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat4ItemCell
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SmRcIndicationMessageFormat4ItemCell) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// E2SmRcIndicationMessageFormat4ItemCell with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// E2SmRcIndicationMessageFormat4ItemCellMultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat4ItemCell) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat4ItemCell) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCellGlobalId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat4ItemCellValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat4ItemCellValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat4ItemCellValidationError{
				field:  "CellGlobalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CellContextInfo != nil {
		// no validation rules for CellContextInfo
	}

	if m.NeighborRelationTable != nil {

		if all {
			switch v := interface{}(m.GetNeighborRelationTable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat4ItemCellValidationError{
						field:  "NeighborRelationTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat4ItemCellValidationError{
						field:  "NeighborRelationTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNeighborRelationTable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcIndicationMessageFormat4ItemCellValidationError{
					field:  "NeighborRelationTable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat4ItemCellMultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat4ItemCellMultiError is an error wrapping
// multiple validation errors returned by
// E2SmRcIndicationMessageFormat4ItemCell.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat4ItemCellMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat4ItemCellMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat4ItemCellMultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat4ItemCellValidationError is the validation
// error returned by E2SmRcIndicationMessageFormat4ItemCell.Validate if the
// designated constraints aren't met.
type E2SmRcIndicationMessageFormat4ItemCellValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat4ItemCellValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat4ItemCellValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat4ItemCellValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat4ItemCellValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat4ItemCellValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat4ItemCellValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat4ItemCellValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat4ItemCell.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat4ItemCellValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat4ItemCellValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat5 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcIndicationMessageFormat5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessageFormat5 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat5MultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat5) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetRanPRequestedList()) > 65535 {
		err := E2SmRcIndicationMessageFormat5ValidationError{
			field:  "RanPRequestedList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanPRequestedList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat5ValidationError{
						field:  fmt.Sprintf("RanPRequestedList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcIndicationMessageFormat5ValidationError{
						field:  fmt.Sprintf("RanPRequestedList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcIndicationMessageFormat5ValidationError{
					field:  fmt.Sprintf("RanPRequestedList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat5MultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat5MultiError is an error wrapping multiple
// validation errors returned by E2SmRcIndicationMessageFormat5.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcIndicationMessageFormat5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat5MultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat5ValidationError is the validation error
// returned by E2SmRcIndicationMessageFormat5.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat5ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat5ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat5ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat5ValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat5ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat5ValidationError{}

// Validate checks the field values on E2SmRcIndicationMessageFormat5Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *E2SmRcIndicationMessageFormat5Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcIndicationMessageFormat5Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmRcIndicationMessageFormat5ItemMultiError, or nil if none found.
func (m *E2SmRcIndicationMessageFormat5Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcIndicationMessageFormat5Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat5ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat5ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat5ItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterValueType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat5ItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcIndicationMessageFormat5ItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterValueType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcIndicationMessageFormat5ItemValidationError{
				field:  "RanParameterValueType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcIndicationMessageFormat5ItemMultiError(errors)
	}

	return nil
}

// E2SmRcIndicationMessageFormat5ItemMultiError is an error wrapping multiple
// validation errors returned by
// E2SmRcIndicationMessageFormat5Item.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat5ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcIndicationMessageFormat5ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcIndicationMessageFormat5ItemMultiError) AllErrors() []error { return m }

// E2SmRcIndicationMessageFormat5ItemValidationError is the validation error
// returned by E2SmRcIndicationMessageFormat5Item.Validate if the designated
// constraints aren't met.
type E2SmRcIndicationMessageFormat5ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcIndicationMessageFormat5ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcIndicationMessageFormat5ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcIndicationMessageFormat5ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcIndicationMessageFormat5ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcIndicationMessageFormat5ItemValidationError) ErrorName() string {
	return "E2SmRcIndicationMessageFormat5ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcIndicationMessageFormat5ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcIndicationMessageFormat5Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcIndicationMessageFormat5ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcIndicationMessageFormat5ItemValidationError{}

// Validate checks the field values on E2SmRcCallProcessId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcCallProcessId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcCallProcessId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcCallProcessIdMultiError, or nil if none found.
func (m *E2SmRcCallProcessId) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcCallProcessId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicCallProcessIdFormats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcCallProcessIdValidationError{
					field:  "RicCallProcessIdFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcCallProcessIdValidationError{
					field:  "RicCallProcessIdFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicCallProcessIdFormats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcCallProcessIdValidationError{
				field:  "RicCallProcessIdFormats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcCallProcessIdMultiError(errors)
	}

	return nil
}

// E2SmRcCallProcessIdMultiError is an error wrapping multiple validation
// errors returned by E2SmRcCallProcessId.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcCallProcessIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcCallProcessIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcCallProcessIdMultiError) AllErrors() []error { return m }

// E2SmRcCallProcessIdValidationError is the validation error returned by
// E2SmRcCallProcessId.Validate if the designated constraints aren't met.
type E2SmRcCallProcessIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcCallProcessIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcCallProcessIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcCallProcessIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcCallProcessIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcCallProcessIdValidationError) ErrorName() string {
	return "E2SmRcCallProcessIdValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcCallProcessIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcCallProcessId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcCallProcessIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcCallProcessIdValidationError{}

// Validate checks the field values on RicCallProcessIdFormats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicCallProcessIdFormats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicCallProcessIdFormats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicCallProcessIdFormatsMultiError, or nil if none found.
func (m *RicCallProcessIdFormats) ValidateAll() error {
	return m.validate(true)
}

func (m *RicCallProcessIdFormats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RicCallProcessIdFormats.(type) {

	case *RicCallProcessIdFormats_CallProcessIdFormat1:

		if all {
			switch v := interface{}(m.GetCallProcessIdFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicCallProcessIdFormatsValidationError{
						field:  "CallProcessIdFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicCallProcessIdFormatsValidationError{
						field:  "CallProcessIdFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallProcessIdFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicCallProcessIdFormatsValidationError{
					field:  "CallProcessIdFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicCallProcessIdFormatsMultiError(errors)
	}

	return nil
}

// RicCallProcessIdFormatsMultiError is an error wrapping multiple validation
// errors returned by RicCallProcessIdFormats.ValidateAll() if the designated
// constraints aren't met.
type RicCallProcessIdFormatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicCallProcessIdFormatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicCallProcessIdFormatsMultiError) AllErrors() []error { return m }

// RicCallProcessIdFormatsValidationError is the validation error returned by
// RicCallProcessIdFormats.Validate if the designated constraints aren't met.
type RicCallProcessIdFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicCallProcessIdFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicCallProcessIdFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicCallProcessIdFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicCallProcessIdFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicCallProcessIdFormatsValidationError) ErrorName() string {
	return "RicCallProcessIdFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e RicCallProcessIdFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicCallProcessIdFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicCallProcessIdFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicCallProcessIdFormatsValidationError{}

// Validate checks the field values on E2SmRcCallProcessIdFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcCallProcessIdFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcCallProcessIdFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcCallProcessIdFormat1MultiError, or nil if none found.
func (m *E2SmRcCallProcessIdFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcCallProcessIdFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicCallProcessId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcCallProcessIdFormat1ValidationError{
					field:  "RicCallProcessId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcCallProcessIdFormat1ValidationError{
					field:  "RicCallProcessId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicCallProcessId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcCallProcessIdFormat1ValidationError{
				field:  "RicCallProcessId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcCallProcessIdFormat1MultiError(errors)
	}

	return nil
}

// E2SmRcCallProcessIdFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmRcCallProcessIdFormat1.ValidateAll() if
// the designated constraints aren't met.
type E2SmRcCallProcessIdFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcCallProcessIdFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcCallProcessIdFormat1MultiError) AllErrors() []error { return m }

// E2SmRcCallProcessIdFormat1ValidationError is the validation error returned
// by E2SmRcCallProcessIdFormat1.Validate if the designated constraints aren't met.
type E2SmRcCallProcessIdFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcCallProcessIdFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcCallProcessIdFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcCallProcessIdFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcCallProcessIdFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcCallProcessIdFormat1ValidationError) ErrorName() string {
	return "E2SmRcCallProcessIdFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcCallProcessIdFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcCallProcessIdFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcCallProcessIdFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcCallProcessIdFormat1ValidationError{}

// Validate checks the field values on E2SmRcControlHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcControlHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcControlHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcControlHeaderMultiError, or nil if none found.
func (m *E2SmRcControlHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcControlHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicControlHeaderFormats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcControlHeaderValidationError{
					field:  "RicControlHeaderFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcControlHeaderValidationError{
					field:  "RicControlHeaderFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlHeaderFormats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcControlHeaderValidationError{
				field:  "RicControlHeaderFormats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcControlHeaderMultiError(errors)
	}

	return nil
}

// E2SmRcControlHeaderMultiError is an error wrapping multiple validation
// errors returned by E2SmRcControlHeader.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcControlHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcControlHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcControlHeaderMultiError) AllErrors() []error { return m }

// E2SmRcControlHeaderValidationError is the validation error returned by
// E2SmRcControlHeader.Validate if the designated constraints aren't met.
type E2SmRcControlHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcControlHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcControlHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcControlHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcControlHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcControlHeaderValidationError) ErrorName() string {
	return "E2SmRcControlHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcControlHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcControlHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcControlHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcControlHeaderValidationError{}

// Validate checks the field values on RicControlHeaderFormats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicControlHeaderFormats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicControlHeaderFormats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicControlHeaderFormatsMultiError, or nil if none found.
func (m *RicControlHeaderFormats) ValidateAll() error {
	return m.validate(true)
}

func (m *RicControlHeaderFormats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RicControlHeaderFormats.(type) {

	case *RicControlHeaderFormats_ControlHeaderFormat1:

		if all {
			switch v := interface{}(m.GetControlHeaderFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicControlHeaderFormatsValidationError{
						field:  "ControlHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicControlHeaderFormatsValidationError{
						field:  "ControlHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetControlHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicControlHeaderFormatsValidationError{
					field:  "ControlHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicControlHeaderFormatsMultiError(errors)
	}

	return nil
}

// RicControlHeaderFormatsMultiError is an error wrapping multiple validation
// errors returned by RicControlHeaderFormats.ValidateAll() if the designated
// constraints aren't met.
type RicControlHeaderFormatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicControlHeaderFormatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicControlHeaderFormatsMultiError) AllErrors() []error { return m }

// RicControlHeaderFormatsValidationError is the validation error returned by
// RicControlHeaderFormats.Validate if the designated constraints aren't met.
type RicControlHeaderFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlHeaderFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlHeaderFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlHeaderFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlHeaderFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlHeaderFormatsValidationError) ErrorName() string {
	return "RicControlHeaderFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e RicControlHeaderFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControlHeaderFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlHeaderFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlHeaderFormatsValidationError{}

// Validate checks the field values on E2SmRcControlHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcControlHeaderFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcControlHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcControlHeaderFormat1MultiError, or nil if none found.
func (m *E2SmRcControlHeaderFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcControlHeaderFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcControlHeaderFormat1ValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcControlHeaderFormat1ValidationError{
					field:  "UeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcControlHeaderFormat1ValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcControlHeaderFormat1ValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcControlHeaderFormat1ValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcControlHeaderFormat1ValidationError{
				field:  "RicStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicControlActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcControlHeaderFormat1ValidationError{
					field:  "RicControlActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcControlHeaderFormat1ValidationError{
					field:  "RicControlActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcControlHeaderFormat1ValidationError{
				field:  "RicControlActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RicControlDecision != nil {
		// no validation rules for RicControlDecision
	}

	if len(errors) > 0 {
		return E2SmRcControlHeaderFormat1MultiError(errors)
	}

	return nil
}

// E2SmRcControlHeaderFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmRcControlHeaderFormat1.ValidateAll() if
// the designated constraints aren't met.
type E2SmRcControlHeaderFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcControlHeaderFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcControlHeaderFormat1MultiError) AllErrors() []error { return m }

// E2SmRcControlHeaderFormat1ValidationError is the validation error returned
// by E2SmRcControlHeaderFormat1.Validate if the designated constraints aren't met.
type E2SmRcControlHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcControlHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcControlHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcControlHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcControlHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcControlHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmRcControlHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcControlHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcControlHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcControlHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcControlHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmRcControlMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcControlMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcControlMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcControlMessageMultiError, or nil if none found.
func (m *E2SmRcControlMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcControlMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicControlMessageFormats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcControlMessageValidationError{
					field:  "RicControlMessageFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcControlMessageValidationError{
					field:  "RicControlMessageFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlMessageFormats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcControlMessageValidationError{
				field:  "RicControlMessageFormats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcControlMessageMultiError(errors)
	}

	return nil
}

// E2SmRcControlMessageMultiError is an error wrapping multiple validation
// errors returned by E2SmRcControlMessage.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcControlMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcControlMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcControlMessageMultiError) AllErrors() []error { return m }

// E2SmRcControlMessageValidationError is the validation error returned by
// E2SmRcControlMessage.Validate if the designated constraints aren't met.
type E2SmRcControlMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcControlMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcControlMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcControlMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcControlMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcControlMessageValidationError) ErrorName() string {
	return "E2SmRcControlMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcControlMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcControlMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcControlMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcControlMessageValidationError{}

// Validate checks the field values on RicControlMessageFormats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicControlMessageFormats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicControlMessageFormats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicControlMessageFormatsMultiError, or nil if none found.
func (m *RicControlMessageFormats) ValidateAll() error {
	return m.validate(true)
}

func (m *RicControlMessageFormats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RicControlMessageFormats.(type) {

	case *RicControlMessageFormats_ControlMessageFormat1:

		if all {
			switch v := interface{}(m.GetControlMessageFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicControlMessageFormatsValidationError{
						field:  "ControlMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicControlMessageFormatsValidationError{
						field:  "ControlMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetControlMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicControlMessageFormatsValidationError{
					field:  "ControlMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicControlMessageFormatsMultiError(errors)
	}

	return nil
}

// RicControlMessageFormatsMultiError is an error wrapping multiple validation
// errors returned by RicControlMessageFormats.ValidateAll() if the designated
// constraints aren't met.
type RicControlMessageFormatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicControlMessageFormatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicControlMessageFormatsMultiError) AllErrors() []error { return m }

// RicControlMessageFormatsValidationError is the validation error returned by
// RicControlMessageFormats.Validate if the designated constraints aren't met.
type RicControlMessageFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlMessageFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlMessageFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlMessageFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlMessageFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlMessageFormatsValidationError) ErrorName() string {
	return "RicControlMessageFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e RicControlMessageFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControlMessageFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlMessageFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlMessageFormatsValidationError{}

// Validate checks the field values on E2SmRcControlMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcControlMessageFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcControlMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcControlMessageFormat1MultiError, or nil if none found.
func (m *E2SmRcControlMessageFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcControlMessageFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetRanPList()) > 65535 {
		err := E2SmRcControlMessageFormat1ValidationError{
			field:  "RanPList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanPList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcControlMessageFormat1ValidationError{
						field:  fmt.Sprintf("RanPList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcControlMessageFormat1ValidationError{
						field:  fmt.Sprintf("RanPList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcControlMessageFormat1ValidationError{
					field:  fmt.Sprintf("RanPList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcControlMessageFormat1MultiError(errors)
	}

	return nil
}

// E2SmRcControlMessageFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmRcControlMessageFormat1.ValidateAll() if
// the designated constraints aren't met.
type E2SmRcControlMessageFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcControlMessageFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcControlMessageFormat1MultiError) AllErrors() []error { return m }

// E2SmRcControlMessageFormat1ValidationError is the validation error returned
// by E2SmRcControlMessageFormat1.Validate if the designated constraints
// aren't met.
type E2SmRcControlMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcControlMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcControlMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcControlMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcControlMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcControlMessageFormat1ValidationError) ErrorName() string {
	return "E2SmRcControlMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcControlMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcControlMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcControlMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcControlMessageFormat1ValidationError{}

// Validate checks the field values on E2SmRcControlMessageFormat1Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcControlMessageFormat1Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcControlMessageFormat1Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcControlMessageFormat1ItemMultiError, or nil if none found.
func (m *E2SmRcControlMessageFormat1Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcControlMessageFormat1Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcControlMessageFormat1ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcControlMessageFormat1ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcControlMessageFormat1ItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterValueType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcControlMessageFormat1ItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcControlMessageFormat1ItemValidationError{
					field:  "RanParameterValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterValueType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcControlMessageFormat1ItemValidationError{
				field:  "RanParameterValueType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcControlMessageFormat1ItemMultiError(errors)
	}

	return nil
}

// E2SmRcControlMessageFormat1ItemMultiError is an error wrapping multiple
// validation errors returned by E2SmRcControlMessageFormat1Item.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcControlMessageFormat1ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcControlMessageFormat1ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcControlMessageFormat1ItemMultiError) AllErrors() []error { return m }

// E2SmRcControlMessageFormat1ItemValidationError is the validation error
// returned by E2SmRcControlMessageFormat1Item.Validate if the designated
// constraints aren't met.
type E2SmRcControlMessageFormat1ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcControlMessageFormat1ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcControlMessageFormat1ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcControlMessageFormat1ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcControlMessageFormat1ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcControlMessageFormat1ItemValidationError) ErrorName() string {
	return "E2SmRcControlMessageFormat1ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcControlMessageFormat1ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcControlMessageFormat1Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcControlMessageFormat1ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcControlMessageFormat1ItemValidationError{}

// Validate checks the field values on E2SmRcControlOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcControlOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcControlOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcControlOutcomeMultiError, or nil if none found.
func (m *E2SmRcControlOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcControlOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicControlOutcomeFormats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcControlOutcomeValidationError{
					field:  "RicControlOutcomeFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcControlOutcomeValidationError{
					field:  "RicControlOutcomeFormats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlOutcomeFormats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcControlOutcomeValidationError{
				field:  "RicControlOutcomeFormats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcControlOutcomeMultiError(errors)
	}

	return nil
}

// E2SmRcControlOutcomeMultiError is an error wrapping multiple validation
// errors returned by E2SmRcControlOutcome.ValidateAll() if the designated
// constraints aren't met.
type E2SmRcControlOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcControlOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcControlOutcomeMultiError) AllErrors() []error { return m }

// E2SmRcControlOutcomeValidationError is the validation error returned by
// E2SmRcControlOutcome.Validate if the designated constraints aren't met.
type E2SmRcControlOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcControlOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcControlOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcControlOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcControlOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcControlOutcomeValidationError) ErrorName() string {
	return "E2SmRcControlOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcControlOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcControlOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcControlOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcControlOutcomeValidationError{}

// Validate checks the field values on RicControlOutcomeFormats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicControlOutcomeFormats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicControlOutcomeFormats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicControlOutcomeFormatsMultiError, or nil if none found.
func (m *RicControlOutcomeFormats) ValidateAll() error {
	return m.validate(true)
}

func (m *RicControlOutcomeFormats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RicControlOutcomeFormats.(type) {

	case *RicControlOutcomeFormats_ControlOutcomeFormat1:

		if all {
			switch v := interface{}(m.GetControlOutcomeFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicControlOutcomeFormatsValidationError{
						field:  "ControlOutcomeFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicControlOutcomeFormatsValidationError{
						field:  "ControlOutcomeFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetControlOutcomeFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicControlOutcomeFormatsValidationError{
					field:  "ControlOutcomeFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicControlOutcomeFormatsMultiError(errors)
	}

	return nil
}

// RicControlOutcomeFormatsMultiError is an error wrapping multiple validation
// errors returned by RicControlOutcomeFormats.ValidateAll() if the designated
// constraints aren't met.
type RicControlOutcomeFormatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicControlOutcomeFormatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicControlOutcomeFormatsMultiError) AllErrors() []error { return m }

// RicControlOutcomeFormatsValidationError is the validation error returned by
// RicControlOutcomeFormats.Validate if the designated constraints aren't met.
type RicControlOutcomeFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlOutcomeFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlOutcomeFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlOutcomeFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlOutcomeFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlOutcomeFormatsValidationError) ErrorName() string {
	return "RicControlOutcomeFormatsValidationError"
}

// Error satisfies the builtin error interface
func (e RicControlOutcomeFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControlOutcomeFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlOutcomeFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlOutcomeFormatsValidationError{}

// Validate checks the field values on E2SmRcControlOutcomeFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcControlOutcomeFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcControlOutcomeFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcControlOutcomeFormat1MultiError, or nil if none found.
func (m *E2SmRcControlOutcomeFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcControlOutcomeFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetRanPList()) > 255 {
		err := E2SmRcControlOutcomeFormat1ValidationError{
			field:  "RanPList",
			reason: "value must contain no more than 255 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanPList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcControlOutcomeFormat1ValidationError{
						field:  fmt.Sprintf("RanPList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcControlOutcomeFormat1ValidationError{
						field:  fmt.Sprintf("RanPList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcControlOutcomeFormat1ValidationError{
					field:  fmt.Sprintf("RanPList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcControlOutcomeFormat1MultiError(errors)
	}

	return nil
}

// E2SmRcControlOutcomeFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmRcControlOutcomeFormat1.ValidateAll() if
// the designated constraints aren't met.
type E2SmRcControlOutcomeFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcControlOutcomeFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcControlOutcomeFormat1MultiError) AllErrors() []error { return m }

// E2SmRcControlOutcomeFormat1ValidationError is the validation error returned
// by E2SmRcControlOutcomeFormat1.Validate if the designated constraints
// aren't met.
type E2SmRcControlOutcomeFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcControlOutcomeFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcControlOutcomeFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcControlOutcomeFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcControlOutcomeFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcControlOutcomeFormat1ValidationError) ErrorName() string {
	return "E2SmRcControlOutcomeFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcControlOutcomeFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcControlOutcomeFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcControlOutcomeFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcControlOutcomeFormat1ValidationError{}

// Validate checks the field values on E2SmRcControlOutcomeFormat1Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcControlOutcomeFormat1Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcControlOutcomeFormat1Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmRcControlOutcomeFormat1ItemMultiError, or nil if none found.
func (m *E2SmRcControlOutcomeFormat1Item) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcControlOutcomeFormat1Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcControlOutcomeFormat1ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcControlOutcomeFormat1ItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcControlOutcomeFormat1ItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcControlOutcomeFormat1ItemValidationError{
					field:  "RanParameterValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcControlOutcomeFormat1ItemValidationError{
					field:  "RanParameterValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcControlOutcomeFormat1ItemValidationError{
				field:  "RanParameterValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmRcControlOutcomeFormat1ItemMultiError(errors)
	}

	return nil
}

// E2SmRcControlOutcomeFormat1ItemMultiError is an error wrapping multiple
// validation errors returned by E2SmRcControlOutcomeFormat1Item.ValidateAll()
// if the designated constraints aren't met.
type E2SmRcControlOutcomeFormat1ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcControlOutcomeFormat1ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcControlOutcomeFormat1ItemMultiError) AllErrors() []error { return m }

// E2SmRcControlOutcomeFormat1ItemValidationError is the validation error
// returned by E2SmRcControlOutcomeFormat1Item.Validate if the designated
// constraints aren't met.
type E2SmRcControlOutcomeFormat1ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcControlOutcomeFormat1ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcControlOutcomeFormat1ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcControlOutcomeFormat1ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcControlOutcomeFormat1ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcControlOutcomeFormat1ItemValidationError) ErrorName() string {
	return "E2SmRcControlOutcomeFormat1ItemValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcControlOutcomeFormat1ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcControlOutcomeFormat1Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcControlOutcomeFormat1ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcControlOutcomeFormat1ItemValidationError{}

// Validate checks the field values on E2SmRcRanfunctionDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmRcRanfunctionDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmRcRanfunctionDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmRcRanfunctionDefinitionMultiError, or nil if none found.
func (m *E2SmRcRanfunctionDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmRcRanfunctionDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanFunctionName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
					field:  "RanFunctionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
					field:  "RanFunctionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcRanfunctionDefinitionValidationError{
				field:  "RanFunctionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanFunctionDefinitionEventTrigger != nil {

		if all {
			switch v := interface{}(m.GetRanFunctionDefinitionEventTrigger()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
						field:  "RanFunctionDefinitionEventTrigger",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
						field:  "RanFunctionDefinitionEventTrigger",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanFunctionDefinitionEventTrigger()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcRanfunctionDefinitionValidationError{
					field:  "RanFunctionDefinitionEventTrigger",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RanFunctionDefinitionReport != nil {

		if all {
			switch v := interface{}(m.GetRanFunctionDefinitionReport()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
						field:  "RanFunctionDefinitionReport",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
						field:  "RanFunctionDefinitionReport",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanFunctionDefinitionReport()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcRanfunctionDefinitionValidationError{
					field:  "RanFunctionDefinitionReport",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RanFunctionDefinitionInsert != nil {

		if all {
			switch v := interface{}(m.GetRanFunctionDefinitionInsert()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
						field:  "RanFunctionDefinitionInsert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
						field:  "RanFunctionDefinitionInsert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanFunctionDefinitionInsert()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcRanfunctionDefinitionValidationError{
					field:  "RanFunctionDefinitionInsert",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RanFunctionDefinitionControl != nil {

		if all {
			switch v := interface{}(m.GetRanFunctionDefinitionControl()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
						field:  "RanFunctionDefinitionControl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
						field:  "RanFunctionDefinitionControl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanFunctionDefinitionControl()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcRanfunctionDefinitionValidationError{
					field:  "RanFunctionDefinitionControl",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RanFunctionDefinitionPolicy != nil {

		if all {
			switch v := interface{}(m.GetRanFunctionDefinitionPolicy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
						field:  "RanFunctionDefinitionPolicy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmRcRanfunctionDefinitionValidationError{
						field:  "RanFunctionDefinitionPolicy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanFunctionDefinitionPolicy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcRanfunctionDefinitionValidationError{
					field:  "RanFunctionDefinitionPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmRcRanfunctionDefinitionMultiError(errors)
	}

	return nil
}

// E2SmRcRanfunctionDefinitionMultiError is an error wrapping multiple
// validation errors returned by E2SmRcRanfunctionDefinition.ValidateAll() if
// the designated constraints aren't met.
type E2SmRcRanfunctionDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmRcRanfunctionDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmRcRanfunctionDefinitionMultiError) AllErrors() []error { return m }

// E2SmRcRanfunctionDefinitionValidationError is the validation error returned
// by E2SmRcRanfunctionDefinition.Validate if the designated constraints
// aren't met.
type E2SmRcRanfunctionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcRanfunctionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcRanfunctionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcRanfunctionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcRanfunctionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcRanfunctionDefinitionValidationError) ErrorName() string {
	return "E2SmRcRanfunctionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcRanfunctionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcRanfunctionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcRanfunctionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcRanfunctionDefinitionValidationError{}

// Validate checks the field values on RanfunctionDefinitionEventTrigger with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RanfunctionDefinitionEventTrigger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinitionEventTrigger
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionEventTriggerMultiError, or nil if none found.
func (m *RanfunctionDefinitionEventTrigger) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionEventTrigger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRicEventTriggerStyleList()); l < 1 || l > 63 {
		err := RanfunctionDefinitionEventTriggerValidationError{
			field:  "RicEventTriggerStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicEventTriggerStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerValidationError{
						field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerValidationError{
						field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionEventTriggerValidationError{
					field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetRanL2ParametersList()) > 65535 {
		err := RanfunctionDefinitionEventTriggerValidationError{
			field:  "RanL2ParametersList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanL2ParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerValidationError{
						field:  fmt.Sprintf("RanL2ParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerValidationError{
						field:  fmt.Sprintf("RanL2ParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionEventTriggerValidationError{
					field:  fmt.Sprintf("RanL2ParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetRanCallProcessTypesList()) > 65535 {
		err := RanfunctionDefinitionEventTriggerValidationError{
			field:  "RanCallProcessTypesList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanCallProcessTypesList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerValidationError{
						field:  fmt.Sprintf("RanCallProcessTypesList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerValidationError{
						field:  fmt.Sprintf("RanCallProcessTypesList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionEventTriggerValidationError{
					field:  fmt.Sprintf("RanCallProcessTypesList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetRanUeidentificationParametersList()) > 65535 {
		err := RanfunctionDefinitionEventTriggerValidationError{
			field:  "RanUeidentificationParametersList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanUeidentificationParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerValidationError{
						field:  fmt.Sprintf("RanUeidentificationParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerValidationError{
						field:  fmt.Sprintf("RanUeidentificationParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionEventTriggerValidationError{
					field:  fmt.Sprintf("RanUeidentificationParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetRanCellIdentificationParametersList()) > 65535 {
		err := RanfunctionDefinitionEventTriggerValidationError{
			field:  "RanCellIdentificationParametersList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanCellIdentificationParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerValidationError{
						field:  fmt.Sprintf("RanCellIdentificationParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerValidationError{
						field:  fmt.Sprintf("RanCellIdentificationParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionEventTriggerValidationError{
					field:  fmt.Sprintf("RanCellIdentificationParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionEventTriggerMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionEventTriggerMultiError is an error wrapping multiple
// validation errors returned by
// RanfunctionDefinitionEventTrigger.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionDefinitionEventTriggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionEventTriggerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionEventTriggerMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionEventTriggerValidationError is the validation error
// returned by RanfunctionDefinitionEventTrigger.Validate if the designated
// constraints aren't met.
type RanfunctionDefinitionEventTriggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionEventTriggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionEventTriggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionEventTriggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionEventTriggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionEventTriggerValidationError) ErrorName() string {
	return "RanfunctionDefinitionEventTriggerValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionEventTriggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionEventTrigger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionEventTriggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionEventTriggerValidationError{}

// Validate checks the field values on
// RanfunctionDefinitionEventTriggerStyleItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionEventTriggerStyleItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanfunctionDefinitionEventTriggerStyleItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RanfunctionDefinitionEventTriggerStyleItemMultiError, or nil if none found.
func (m *RanfunctionDefinitionEventTriggerStyleItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionEventTriggerStyleItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicEventTriggerStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerStyleItemValidationError{
					field:  "RicEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerStyleItemValidationError{
					field:  "RicEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionEventTriggerStyleItemValidationError{
				field:  "RicEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicEventTriggerStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerStyleItemValidationError{
					field:  "RicEventTriggerStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerStyleItemValidationError{
					field:  "RicEventTriggerStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionEventTriggerStyleItemValidationError{
				field:  "RicEventTriggerStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicEventTriggerFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerStyleItemValidationError{
					field:  "RicEventTriggerFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerStyleItemValidationError{
					field:  "RicEventTriggerFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionEventTriggerStyleItemValidationError{
				field:  "RicEventTriggerFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanfunctionDefinitionEventTriggerStyleItemMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionEventTriggerStyleItemMultiError is an error wrapping
// multiple validation errors returned by
// RanfunctionDefinitionEventTriggerStyleItem.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionDefinitionEventTriggerStyleItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionEventTriggerStyleItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionEventTriggerStyleItemMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionEventTriggerStyleItemValidationError is the validation
// error returned by RanfunctionDefinitionEventTriggerStyleItem.Validate if
// the designated constraints aren't met.
type RanfunctionDefinitionEventTriggerStyleItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionEventTriggerStyleItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionEventTriggerStyleItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionEventTriggerStyleItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionEventTriggerStyleItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionEventTriggerStyleItemValidationError) ErrorName() string {
	return "RanfunctionDefinitionEventTriggerStyleItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionEventTriggerStyleItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionEventTriggerStyleItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionEventTriggerStyleItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionEventTriggerStyleItemValidationError{}

// Validate checks the field values on L2ParametersRanparameterItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *L2ParametersRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on L2ParametersRanparameterItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// L2ParametersRanparameterItemMultiError, or nil if none found.
func (m *L2ParametersRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *L2ParametersRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, L2ParametersRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, L2ParametersRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return L2ParametersRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, L2ParametersRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, L2ParametersRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return L2ParametersRanparameterItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, L2ParametersRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, L2ParametersRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return L2ParametersRanparameterItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return L2ParametersRanparameterItemMultiError(errors)
	}

	return nil
}

// L2ParametersRanparameterItemMultiError is an error wrapping multiple
// validation errors returned by L2ParametersRanparameterItem.ValidateAll() if
// the designated constraints aren't met.
type L2ParametersRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m L2ParametersRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m L2ParametersRanparameterItemMultiError) AllErrors() []error { return m }

// L2ParametersRanparameterItemValidationError is the validation error returned
// by L2ParametersRanparameterItem.Validate if the designated constraints
// aren't met.
type L2ParametersRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e L2ParametersRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e L2ParametersRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e L2ParametersRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e L2ParametersRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e L2ParametersRanparameterItemValidationError) ErrorName() string {
	return "L2ParametersRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e L2ParametersRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sL2ParametersRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = L2ParametersRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = L2ParametersRanparameterItemValidationError{}

// Validate checks the field values on UeidentificationRanparameterItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UeidentificationRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidentificationRanparameterItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UeidentificationRanparameterItemMultiError, or nil if none found.
func (m *UeidentificationRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidentificationRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidentificationRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidentificationRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidentificationRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidentificationRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidentificationRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidentificationRanparameterItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidentificationRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidentificationRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidentificationRanparameterItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidentificationRanparameterItemMultiError(errors)
	}

	return nil
}

// UeidentificationRanparameterItemMultiError is an error wrapping multiple
// validation errors returned by
// UeidentificationRanparameterItem.ValidateAll() if the designated
// constraints aren't met.
type UeidentificationRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidentificationRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidentificationRanparameterItemMultiError) AllErrors() []error { return m }

// UeidentificationRanparameterItemValidationError is the validation error
// returned by UeidentificationRanparameterItem.Validate if the designated
// constraints aren't met.
type UeidentificationRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidentificationRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidentificationRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidentificationRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidentificationRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidentificationRanparameterItemValidationError) ErrorName() string {
	return "UeidentificationRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e UeidentificationRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidentificationRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidentificationRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidentificationRanparameterItemValidationError{}

// Validate checks the field values on CellIdentificationRanparameterItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CellIdentificationRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellIdentificationRanparameterItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CellIdentificationRanparameterItemMultiError, or nil if none found.
func (m *CellIdentificationRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CellIdentificationRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CellIdentificationRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CellIdentificationRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellIdentificationRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CellIdentificationRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CellIdentificationRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellIdentificationRanparameterItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellIdentificationRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellIdentificationRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellIdentificationRanparameterItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CellIdentificationRanparameterItemMultiError(errors)
	}

	return nil
}

// CellIdentificationRanparameterItemMultiError is an error wrapping multiple
// validation errors returned by
// CellIdentificationRanparameterItem.ValidateAll() if the designated
// constraints aren't met.
type CellIdentificationRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellIdentificationRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellIdentificationRanparameterItemMultiError) AllErrors() []error { return m }

// CellIdentificationRanparameterItemValidationError is the validation error
// returned by CellIdentificationRanparameterItem.Validate if the designated
// constraints aren't met.
type CellIdentificationRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellIdentificationRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellIdentificationRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellIdentificationRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellIdentificationRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellIdentificationRanparameterItemValidationError) ErrorName() string {
	return "CellIdentificationRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e CellIdentificationRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellIdentificationRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellIdentificationRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellIdentificationRanparameterItemValidationError{}

// Validate checks the field values on
// RanfunctionDefinitionEventTriggerCallProcessItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionEventTriggerCallProcessItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanfunctionDefinitionEventTriggerCallProcessItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RanfunctionDefinitionEventTriggerCallProcessItemMultiError, or nil if none found.
func (m *RanfunctionDefinitionEventTriggerCallProcessItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionEventTriggerCallProcessItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCallProcessTypeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerCallProcessItemValidationError{
					field:  "CallProcessTypeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerCallProcessItemValidationError{
					field:  "CallProcessTypeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallProcessTypeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionEventTriggerCallProcessItemValidationError{
				field:  "CallProcessTypeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCallProcessTypeName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerCallProcessItemValidationError{
					field:  "CallProcessTypeName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerCallProcessItemValidationError{
					field:  "CallProcessTypeName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallProcessTypeName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionEventTriggerCallProcessItemValidationError{
				field:  "CallProcessTypeName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetCallProcessBreakpointsList()); l < 1 || l > 65535 {
		err := RanfunctionDefinitionEventTriggerCallProcessItemValidationError{
			field:  "CallProcessBreakpointsList",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCallProcessBreakpointsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerCallProcessItemValidationError{
						field:  fmt.Sprintf("CallProcessBreakpointsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerCallProcessItemValidationError{
						field:  fmt.Sprintf("CallProcessBreakpointsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionEventTriggerCallProcessItemValidationError{
					field:  fmt.Sprintf("CallProcessBreakpointsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionEventTriggerCallProcessItemMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionEventTriggerCallProcessItemMultiError is an error
// wrapping multiple validation errors returned by
// RanfunctionDefinitionEventTriggerCallProcessItem.ValidateAll() if the
// designated constraints aren't met.
type RanfunctionDefinitionEventTriggerCallProcessItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionEventTriggerCallProcessItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionEventTriggerCallProcessItemMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionEventTriggerCallProcessItemValidationError is the
// validation error returned by
// RanfunctionDefinitionEventTriggerCallProcessItem.Validate if the designated
// constraints aren't met.
type RanfunctionDefinitionEventTriggerCallProcessItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionEventTriggerCallProcessItemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RanfunctionDefinitionEventTriggerCallProcessItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RanfunctionDefinitionEventTriggerCallProcessItemValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RanfunctionDefinitionEventTriggerCallProcessItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionEventTriggerCallProcessItemValidationError) ErrorName() string {
	return "RanfunctionDefinitionEventTriggerCallProcessItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionEventTriggerCallProcessItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionEventTriggerCallProcessItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionEventTriggerCallProcessItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionEventTriggerCallProcessItemValidationError{}

// Validate checks the field values on
// RanfunctionDefinitionEventTriggerBreakpointItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionEventTriggerBreakpointItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanfunctionDefinitionEventTriggerBreakpointItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RanfunctionDefinitionEventTriggerBreakpointItemMultiError, or nil if none found.
func (m *RanfunctionDefinitionEventTriggerBreakpointItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionEventTriggerBreakpointItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCallProcessBreakpointId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerBreakpointItemValidationError{
					field:  "CallProcessBreakpointId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerBreakpointItemValidationError{
					field:  "CallProcessBreakpointId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallProcessBreakpointId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionEventTriggerBreakpointItemValidationError{
				field:  "CallProcessBreakpointId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCallProcessBreakpointName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerBreakpointItemValidationError{
					field:  "CallProcessBreakpointName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionEventTriggerBreakpointItemValidationError{
					field:  "CallProcessBreakpointName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallProcessBreakpointName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionEventTriggerBreakpointItemValidationError{
				field:  "CallProcessBreakpointName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRanCallProcessBreakpointParametersList()) > 65535 {
		err := RanfunctionDefinitionEventTriggerBreakpointItemValidationError{
			field:  "RanCallProcessBreakpointParametersList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanCallProcessBreakpointParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerBreakpointItemValidationError{
						field:  fmt.Sprintf("RanCallProcessBreakpointParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionEventTriggerBreakpointItemValidationError{
						field:  fmt.Sprintf("RanCallProcessBreakpointParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionEventTriggerBreakpointItemValidationError{
					field:  fmt.Sprintf("RanCallProcessBreakpointParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionEventTriggerBreakpointItemMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionEventTriggerBreakpointItemMultiError is an error
// wrapping multiple validation errors returned by
// RanfunctionDefinitionEventTriggerBreakpointItem.ValidateAll() if the
// designated constraints aren't met.
type RanfunctionDefinitionEventTriggerBreakpointItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionEventTriggerBreakpointItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionEventTriggerBreakpointItemMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionEventTriggerBreakpointItemValidationError is the
// validation error returned by
// RanfunctionDefinitionEventTriggerBreakpointItem.Validate if the designated
// constraints aren't met.
type RanfunctionDefinitionEventTriggerBreakpointItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionEventTriggerBreakpointItemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RanfunctionDefinitionEventTriggerBreakpointItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RanfunctionDefinitionEventTriggerBreakpointItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionEventTriggerBreakpointItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionEventTriggerBreakpointItemValidationError) ErrorName() string {
	return "RanfunctionDefinitionEventTriggerBreakpointItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionEventTriggerBreakpointItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionEventTriggerBreakpointItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionEventTriggerBreakpointItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionEventTriggerBreakpointItemValidationError{}

// Validate checks the field values on CallProcessBreakpointRanparameterItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CallProcessBreakpointRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallProcessBreakpointRanparameterItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CallProcessBreakpointRanparameterItemMultiError, or nil if none found.
func (m *CallProcessBreakpointRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CallProcessBreakpointRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallProcessBreakpointRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallProcessBreakpointRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallProcessBreakpointRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallProcessBreakpointRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallProcessBreakpointRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallProcessBreakpointRanparameterItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CallProcessBreakpointRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CallProcessBreakpointRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallProcessBreakpointRanparameterItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CallProcessBreakpointRanparameterItemMultiError(errors)
	}

	return nil
}

// CallProcessBreakpointRanparameterItemMultiError is an error wrapping
// multiple validation errors returned by
// CallProcessBreakpointRanparameterItem.ValidateAll() if the designated
// constraints aren't met.
type CallProcessBreakpointRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallProcessBreakpointRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallProcessBreakpointRanparameterItemMultiError) AllErrors() []error { return m }

// CallProcessBreakpointRanparameterItemValidationError is the validation error
// returned by CallProcessBreakpointRanparameterItem.Validate if the
// designated constraints aren't met.
type CallProcessBreakpointRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallProcessBreakpointRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallProcessBreakpointRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallProcessBreakpointRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallProcessBreakpointRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallProcessBreakpointRanparameterItemValidationError) ErrorName() string {
	return "CallProcessBreakpointRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e CallProcessBreakpointRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallProcessBreakpointRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallProcessBreakpointRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallProcessBreakpointRanparameterItemValidationError{}

// Validate checks the field values on RanfunctionDefinitionReport with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinitionReport with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionReportMultiError, or nil if none found.
func (m *RanfunctionDefinitionReport) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRicReportStyleList()); l < 1 || l > 63 {
		err := RanfunctionDefinitionReportValidationError{
			field:  "RicReportStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicReportStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionReportValidationError{
						field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionReportValidationError{
						field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionReportValidationError{
					field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionReportMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionReportMultiError is an error wrapping multiple
// validation errors returned by RanfunctionDefinitionReport.ValidateAll() if
// the designated constraints aren't met.
type RanfunctionDefinitionReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionReportMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionReportValidationError is the validation error returned
// by RanfunctionDefinitionReport.Validate if the designated constraints
// aren't met.
type RanfunctionDefinitionReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionReportValidationError) ErrorName() string {
	return "RanfunctionDefinitionReportValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionReportValidationError{}

// Validate checks the field values on RanfunctionDefinitionReportItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionReportItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinitionReportItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionReportItemMultiError, or nil if none found.
func (m *RanfunctionDefinitionReportItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionReportItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicReportStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicReportStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicReportStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicReportStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionReportItemValidationError{
				field:  "RicReportStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicReportStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicReportStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicReportStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicReportStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionReportItemValidationError{
				field:  "RicReportStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicSupportedEventTriggerStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicSupportedEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicSupportedEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicSupportedEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionReportItemValidationError{
				field:  "RicSupportedEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicReportActionFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicReportActionFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicReportActionFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicReportActionFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionReportItemValidationError{
				field:  "RicReportActionFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicIndicationHeaderFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionReportItemValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicIndicationMessageFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionReportItemValidationError{
					field:  "RicIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionReportItemValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRanReportParametersList()) > 65535 {
		err := RanfunctionDefinitionReportItemValidationError{
			field:  "RanReportParametersList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanReportParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionReportItemValidationError{
						field:  fmt.Sprintf("RanReportParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionReportItemValidationError{
						field:  fmt.Sprintf("RanReportParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionReportItemValidationError{
					field:  fmt.Sprintf("RanReportParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionReportItemMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionReportItemMultiError is an error wrapping multiple
// validation errors returned by RanfunctionDefinitionReportItem.ValidateAll()
// if the designated constraints aren't met.
type RanfunctionDefinitionReportItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionReportItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionReportItemMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionReportItemValidationError is the validation error
// returned by RanfunctionDefinitionReportItem.Validate if the designated
// constraints aren't met.
type RanfunctionDefinitionReportItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionReportItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionReportItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionReportItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionReportItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionReportItemValidationError) ErrorName() string {
	return "RanfunctionDefinitionReportItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionReportItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionReportItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionReportItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionReportItemValidationError{}

// Validate checks the field values on ReportRanparameterItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportRanparameterItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportRanparameterItemMultiError, or nil if none found.
func (m *ReportRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRanparameterItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportRanparameterItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReportRanparameterItemMultiError(errors)
	}

	return nil
}

// ReportRanparameterItemMultiError is an error wrapping multiple validation
// errors returned by ReportRanparameterItem.ValidateAll() if the designated
// constraints aren't met.
type ReportRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportRanparameterItemMultiError) AllErrors() []error { return m }

// ReportRanparameterItemValidationError is the validation error returned by
// ReportRanparameterItem.Validate if the designated constraints aren't met.
type ReportRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportRanparameterItemValidationError) ErrorName() string {
	return "ReportRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e ReportRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportRanparameterItemValidationError{}

// Validate checks the field values on RanfunctionDefinitionInsert with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionInsert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinitionInsert with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionInsertMultiError, or nil if none found.
func (m *RanfunctionDefinitionInsert) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionInsert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRicInsertStyleList()); l < 1 || l > 63 {
		err := RanfunctionDefinitionInsertValidationError{
			field:  "RicInsertStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicInsertStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionInsertValidationError{
						field:  fmt.Sprintf("RicInsertStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionInsertValidationError{
						field:  fmt.Sprintf("RicInsertStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionInsertValidationError{
					field:  fmt.Sprintf("RicInsertStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionInsertMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionInsertMultiError is an error wrapping multiple
// validation errors returned by RanfunctionDefinitionInsert.ValidateAll() if
// the designated constraints aren't met.
type RanfunctionDefinitionInsertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionInsertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionInsertMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionInsertValidationError is the validation error returned
// by RanfunctionDefinitionInsert.Validate if the designated constraints
// aren't met.
type RanfunctionDefinitionInsertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionInsertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionInsertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionInsertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionInsertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionInsertValidationError) ErrorName() string {
	return "RanfunctionDefinitionInsertValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionInsertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionInsert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionInsertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionInsertValidationError{}

// Validate checks the field values on RanfunctionDefinitionInsertItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionInsertItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinitionInsertItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionInsertItemMultiError, or nil if none found.
func (m *RanfunctionDefinitionInsertItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionInsertItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicInsertStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicInsertStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicInsertStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicInsertStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionInsertItemValidationError{
				field:  "RicInsertStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicInsertStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicInsertStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicInsertStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicInsertStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionInsertItemValidationError{
				field:  "RicInsertStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicSupportedEventTriggerStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicSupportedEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicSupportedEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicSupportedEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionInsertItemValidationError{
				field:  "RicSupportedEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicActionDefinitionFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicActionDefinitionFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicActionDefinitionFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicActionDefinitionFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionInsertItemValidationError{
				field:  "RicActionDefinitionFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRicInsertIndicationList()) > 65535 {
		err := RanfunctionDefinitionInsertItemValidationError{
			field:  "RicInsertIndicationList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicInsertIndicationList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
						field:  fmt.Sprintf("RicInsertIndicationList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
						field:  fmt.Sprintf("RicInsertIndicationList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionInsertItemValidationError{
					field:  fmt.Sprintf("RicInsertIndicationList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRicIndicationHeaderFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionInsertItemValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicIndicationMessageFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionInsertItemValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicCallProcessIdformatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicCallProcessIdformatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertItemValidationError{
					field:  "RicCallProcessIdformatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicCallProcessIdformatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionInsertItemValidationError{
				field:  "RicCallProcessIdformatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RanfunctionDefinitionInsertItemMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionInsertItemMultiError is an error wrapping multiple
// validation errors returned by RanfunctionDefinitionInsertItem.ValidateAll()
// if the designated constraints aren't met.
type RanfunctionDefinitionInsertItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionInsertItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionInsertItemMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionInsertItemValidationError is the validation error
// returned by RanfunctionDefinitionInsertItem.Validate if the designated
// constraints aren't met.
type RanfunctionDefinitionInsertItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionInsertItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionInsertItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionInsertItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionInsertItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionInsertItemValidationError) ErrorName() string {
	return "RanfunctionDefinitionInsertItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionInsertItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionInsertItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionInsertItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionInsertItemValidationError{}

// Validate checks the field values on
// RanfunctionDefinitionInsertIndicationItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionInsertIndicationItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanfunctionDefinitionInsertIndicationItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RanfunctionDefinitionInsertIndicationItemMultiError, or nil if none found.
func (m *RanfunctionDefinitionInsertIndicationItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionInsertIndicationItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicInsertIndicationId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertIndicationItemValidationError{
					field:  "RicInsertIndicationId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertIndicationItemValidationError{
					field:  "RicInsertIndicationId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicInsertIndicationId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionInsertIndicationItemValidationError{
				field:  "RicInsertIndicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicInsertIndicationName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertIndicationItemValidationError{
					field:  "RicInsertIndicationName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionInsertIndicationItemValidationError{
					field:  "RicInsertIndicationName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicInsertIndicationName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionInsertIndicationItemValidationError{
				field:  "RicInsertIndicationName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRanInsertIndicationParametersList()) > 65535 {
		err := RanfunctionDefinitionInsertIndicationItemValidationError{
			field:  "RanInsertIndicationParametersList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanInsertIndicationParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionInsertIndicationItemValidationError{
						field:  fmt.Sprintf("RanInsertIndicationParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionInsertIndicationItemValidationError{
						field:  fmt.Sprintf("RanInsertIndicationParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionInsertIndicationItemValidationError{
					field:  fmt.Sprintf("RanInsertIndicationParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionInsertIndicationItemMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionInsertIndicationItemMultiError is an error wrapping
// multiple validation errors returned by
// RanfunctionDefinitionInsertIndicationItem.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionDefinitionInsertIndicationItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionInsertIndicationItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionInsertIndicationItemMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionInsertIndicationItemValidationError is the validation
// error returned by RanfunctionDefinitionInsertIndicationItem.Validate if the
// designated constraints aren't met.
type RanfunctionDefinitionInsertIndicationItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionInsertIndicationItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionInsertIndicationItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionInsertIndicationItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionInsertIndicationItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionInsertIndicationItemValidationError) ErrorName() string {
	return "RanfunctionDefinitionInsertIndicationItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionInsertIndicationItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionInsertIndicationItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionInsertIndicationItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionInsertIndicationItemValidationError{}

// Validate checks the field values on InsertIndicationRanparameterItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InsertIndicationRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertIndicationRanparameterItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InsertIndicationRanparameterItemMultiError, or nil if none found.
func (m *InsertIndicationRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertIndicationRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InsertIndicationRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InsertIndicationRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsertIndicationRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InsertIndicationRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InsertIndicationRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsertIndicationRanparameterItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertIndicationRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertIndicationRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertIndicationRanparameterItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InsertIndicationRanparameterItemMultiError(errors)
	}

	return nil
}

// InsertIndicationRanparameterItemMultiError is an error wrapping multiple
// validation errors returned by
// InsertIndicationRanparameterItem.ValidateAll() if the designated
// constraints aren't met.
type InsertIndicationRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertIndicationRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertIndicationRanparameterItemMultiError) AllErrors() []error { return m }

// InsertIndicationRanparameterItemValidationError is the validation error
// returned by InsertIndicationRanparameterItem.Validate if the designated
// constraints aren't met.
type InsertIndicationRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertIndicationRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertIndicationRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertIndicationRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertIndicationRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertIndicationRanparameterItemValidationError) ErrorName() string {
	return "InsertIndicationRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e InsertIndicationRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertIndicationRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertIndicationRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertIndicationRanparameterItemValidationError{}

// Validate checks the field values on RanfunctionDefinitionControl with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionControl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinitionControl with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionControlMultiError, or nil if none found.
func (m *RanfunctionDefinitionControl) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionControl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRicControlStyleList()); l < 1 || l > 63 {
		err := RanfunctionDefinitionControlValidationError{
			field:  "RicControlStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicControlStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionControlValidationError{
						field:  fmt.Sprintf("RicControlStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionControlValidationError{
						field:  fmt.Sprintf("RicControlStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionControlValidationError{
					field:  fmt.Sprintf("RicControlStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionControlMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionControlMultiError is an error wrapping multiple
// validation errors returned by RanfunctionDefinitionControl.ValidateAll() if
// the designated constraints aren't met.
type RanfunctionDefinitionControlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionControlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionControlMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionControlValidationError is the validation error returned
// by RanfunctionDefinitionControl.Validate if the designated constraints
// aren't met.
type RanfunctionDefinitionControlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionControlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionControlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionControlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionControlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionControlValidationError) ErrorName() string {
	return "RanfunctionDefinitionControlValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionControlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionControl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionControlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionControlValidationError{}

// Validate checks the field values on RanfunctionDefinitionControlItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RanfunctionDefinitionControlItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinitionControlItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionControlItemMultiError, or nil if none found.
func (m *RanfunctionDefinitionControlItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionControlItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicControlStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlItemValidationError{
					field:  "RicControlStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlItemValidationError{
					field:  "RicControlStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionControlItemValidationError{
				field:  "RicControlStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicControlStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlItemValidationError{
					field:  "RicControlStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlItemValidationError{
					field:  "RicControlStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionControlItemValidationError{
				field:  "RicControlStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRicControlActionList()) > 65535 {
		err := RanfunctionDefinitionControlItemValidationError{
			field:  "RicControlActionList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicControlActionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionControlItemValidationError{
						field:  fmt.Sprintf("RicControlActionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionControlItemValidationError{
						field:  fmt.Sprintf("RicControlActionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionControlItemValidationError{
					field:  fmt.Sprintf("RicControlActionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRicControlHeaderFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlItemValidationError{
					field:  "RicControlHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlItemValidationError{
					field:  "RicControlHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionControlItemValidationError{
				field:  "RicControlHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicControlMessageFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlItemValidationError{
					field:  "RicControlMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlItemValidationError{
					field:  "RicControlMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionControlItemValidationError{
				field:  "RicControlMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicControlOutcomeFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlItemValidationError{
					field:  "RicControlOutcomeFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlItemValidationError{
					field:  "RicControlOutcomeFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlOutcomeFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionControlItemValidationError{
				field:  "RicControlOutcomeFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRanControlOutcomeParametersList()) > 255 {
		err := RanfunctionDefinitionControlItemValidationError{
			field:  "RanControlOutcomeParametersList",
			reason: "value must contain no more than 255 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanControlOutcomeParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionControlItemValidationError{
						field:  fmt.Sprintf("RanControlOutcomeParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionControlItemValidationError{
						field:  fmt.Sprintf("RanControlOutcomeParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionControlItemValidationError{
					field:  fmt.Sprintf("RanControlOutcomeParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RicCallProcessIdformatType != nil {

		if all {
			switch v := interface{}(m.GetRicCallProcessIdformatType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionControlItemValidationError{
						field:  "RicCallProcessIdformatType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionControlItemValidationError{
						field:  "RicCallProcessIdformatType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicCallProcessIdformatType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionControlItemValidationError{
					field:  "RicCallProcessIdformatType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionControlItemMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionControlItemMultiError is an error wrapping multiple
// validation errors returned by
// RanfunctionDefinitionControlItem.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionDefinitionControlItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionControlItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionControlItemMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionControlItemValidationError is the validation error
// returned by RanfunctionDefinitionControlItem.Validate if the designated
// constraints aren't met.
type RanfunctionDefinitionControlItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionControlItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionControlItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionControlItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionControlItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionControlItemValidationError) ErrorName() string {
	return "RanfunctionDefinitionControlItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionControlItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionControlItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionControlItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionControlItemValidationError{}

// Validate checks the field values on ControlOutcomeRanparameterItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ControlOutcomeRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControlOutcomeRanparameterItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ControlOutcomeRanparameterItemMultiError, or nil if none found.
func (m *ControlOutcomeRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ControlOutcomeRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ControlOutcomeRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ControlOutcomeRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ControlOutcomeRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ControlOutcomeRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ControlOutcomeRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ControlOutcomeRanparameterItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControlOutcomeRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControlOutcomeRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControlOutcomeRanparameterItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ControlOutcomeRanparameterItemMultiError(errors)
	}

	return nil
}

// ControlOutcomeRanparameterItemMultiError is an error wrapping multiple
// validation errors returned by ControlOutcomeRanparameterItem.ValidateAll()
// if the designated constraints aren't met.
type ControlOutcomeRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControlOutcomeRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControlOutcomeRanparameterItemMultiError) AllErrors() []error { return m }

// ControlOutcomeRanparameterItemValidationError is the validation error
// returned by ControlOutcomeRanparameterItem.Validate if the designated
// constraints aren't met.
type ControlOutcomeRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlOutcomeRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlOutcomeRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlOutcomeRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlOutcomeRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlOutcomeRanparameterItemValidationError) ErrorName() string {
	return "ControlOutcomeRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e ControlOutcomeRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlOutcomeRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlOutcomeRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlOutcomeRanparameterItemValidationError{}

// Validate checks the field values on RanfunctionDefinitionControlActionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanfunctionDefinitionControlActionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanfunctionDefinitionControlActionItem with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RanfunctionDefinitionControlActionItemMultiError, or nil if none found.
func (m *RanfunctionDefinitionControlActionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionControlActionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicControlActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlActionItemValidationError{
					field:  "RicControlActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlActionItemValidationError{
					field:  "RicControlActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionControlActionItemValidationError{
				field:  "RicControlActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicControlActionName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlActionItemValidationError{
					field:  "RicControlActionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionControlActionItemValidationError{
					field:  "RicControlActionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicControlActionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionControlActionItemValidationError{
				field:  "RicControlActionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRanControlActionParametersList()) > 65535 {
		err := RanfunctionDefinitionControlActionItemValidationError{
			field:  "RanControlActionParametersList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanControlActionParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionControlActionItemValidationError{
						field:  fmt.Sprintf("RanControlActionParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionControlActionItemValidationError{
						field:  fmt.Sprintf("RanControlActionParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionControlActionItemValidationError{
					field:  fmt.Sprintf("RanControlActionParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionControlActionItemMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionControlActionItemMultiError is an error wrapping
// multiple validation errors returned by
// RanfunctionDefinitionControlActionItem.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionDefinitionControlActionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionControlActionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionControlActionItemMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionControlActionItemValidationError is the validation
// error returned by RanfunctionDefinitionControlActionItem.Validate if the
// designated constraints aren't met.
type RanfunctionDefinitionControlActionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionControlActionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionControlActionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionControlActionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionControlActionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionControlActionItemValidationError) ErrorName() string {
	return "RanfunctionDefinitionControlActionItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionControlActionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionControlActionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionControlActionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionControlActionItemValidationError{}

// Validate checks the field values on ControlActionRanparameterItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ControlActionRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControlActionRanparameterItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ControlActionRanparameterItemMultiError, or nil if none found.
func (m *ControlActionRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ControlActionRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ControlActionRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ControlActionRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ControlActionRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ControlActionRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ControlActionRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ControlActionRanparameterItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControlActionRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControlActionRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControlActionRanparameterItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ControlActionRanparameterItemMultiError(errors)
	}

	return nil
}

// ControlActionRanparameterItemMultiError is an error wrapping multiple
// validation errors returned by ControlActionRanparameterItem.ValidateAll()
// if the designated constraints aren't met.
type ControlActionRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControlActionRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControlActionRanparameterItemMultiError) AllErrors() []error { return m }

// ControlActionRanparameterItemValidationError is the validation error
// returned by ControlActionRanparameterItem.Validate if the designated
// constraints aren't met.
type ControlActionRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlActionRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlActionRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlActionRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlActionRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlActionRanparameterItemValidationError) ErrorName() string {
	return "ControlActionRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e ControlActionRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlActionRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlActionRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlActionRanparameterItemValidationError{}

// Validate checks the field values on RanfunctionDefinitionPolicy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinitionPolicy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionPolicyMultiError, or nil if none found.
func (m *RanfunctionDefinitionPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRicPolicyStyleList()); l < 1 || l > 63 {
		err := RanfunctionDefinitionPolicyValidationError{
			field:  "RicPolicyStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicPolicyStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionPolicyValidationError{
						field:  fmt.Sprintf("RicPolicyStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionPolicyValidationError{
						field:  fmt.Sprintf("RicPolicyStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionPolicyValidationError{
					field:  fmt.Sprintf("RicPolicyStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionPolicyMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionPolicyMultiError is an error wrapping multiple
// validation errors returned by RanfunctionDefinitionPolicy.ValidateAll() if
// the designated constraints aren't met.
type RanfunctionDefinitionPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionPolicyMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionPolicyValidationError is the validation error returned
// by RanfunctionDefinitionPolicy.Validate if the designated constraints
// aren't met.
type RanfunctionDefinitionPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionPolicyValidationError) ErrorName() string {
	return "RanfunctionDefinitionPolicyValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionPolicyValidationError{}

// Validate checks the field values on RanfunctionDefinitionPolicyItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionDefinitionPolicyItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinitionPolicyItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionPolicyItemMultiError, or nil if none found.
func (m *RanfunctionDefinitionPolicyItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionPolicyItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicPolicyStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyItemValidationError{
					field:  "RicPolicyStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyItemValidationError{
					field:  "RicPolicyStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicPolicyStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionPolicyItemValidationError{
				field:  "RicPolicyStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicPolicyStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyItemValidationError{
					field:  "RicPolicyStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyItemValidationError{
					field:  "RicPolicyStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicPolicyStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionPolicyItemValidationError{
				field:  "RicPolicyStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicSupportedEventTriggerStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyItemValidationError{
					field:  "RicSupportedEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyItemValidationError{
					field:  "RicSupportedEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicSupportedEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionPolicyItemValidationError{
				field:  "RicSupportedEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRicPolicyActionList()) > 65535 {
		err := RanfunctionDefinitionPolicyItemValidationError{
			field:  "RicPolicyActionList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicPolicyActionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionPolicyItemValidationError{
						field:  fmt.Sprintf("RicPolicyActionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionPolicyItemValidationError{
						field:  fmt.Sprintf("RicPolicyActionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionPolicyItemValidationError{
					field:  fmt.Sprintf("RicPolicyActionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionPolicyItemMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionPolicyItemMultiError is an error wrapping multiple
// validation errors returned by RanfunctionDefinitionPolicyItem.ValidateAll()
// if the designated constraints aren't met.
type RanfunctionDefinitionPolicyItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionPolicyItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionPolicyItemMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionPolicyItemValidationError is the validation error
// returned by RanfunctionDefinitionPolicyItem.Validate if the designated
// constraints aren't met.
type RanfunctionDefinitionPolicyItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionPolicyItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionPolicyItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionPolicyItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionPolicyItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionPolicyItemValidationError) ErrorName() string {
	return "RanfunctionDefinitionPolicyItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionPolicyItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionPolicyItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionPolicyItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionPolicyItemValidationError{}

// Validate checks the field values on RanfunctionDefinitionPolicyActionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanfunctionDefinitionPolicyActionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionDefinitionPolicyActionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RanfunctionDefinitionPolicyActionItemMultiError, or nil if none found.
func (m *RanfunctionDefinitionPolicyActionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionDefinitionPolicyActionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicPolicyActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyActionItemValidationError{
					field:  "RicPolicyActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyActionItemValidationError{
					field:  "RicPolicyActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicPolicyActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionPolicyActionItemValidationError{
				field:  "RicPolicyActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicPolicyActionName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyActionItemValidationError{
					field:  "RicPolicyActionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyActionItemValidationError{
					field:  "RicPolicyActionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicPolicyActionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionPolicyActionItemValidationError{
				field:  "RicPolicyActionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicActionDefinitionFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyActionItemValidationError{
					field:  "RicActionDefinitionFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanfunctionDefinitionPolicyActionItemValidationError{
					field:  "RicActionDefinitionFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicActionDefinitionFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanfunctionDefinitionPolicyActionItemValidationError{
				field:  "RicActionDefinitionFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRanPolicyActionParametersList()) > 65535 {
		err := RanfunctionDefinitionPolicyActionItemValidationError{
			field:  "RanPolicyActionParametersList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanPolicyActionParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionPolicyActionItemValidationError{
						field:  fmt.Sprintf("RanPolicyActionParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionPolicyActionItemValidationError{
						field:  fmt.Sprintf("RanPolicyActionParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionPolicyActionItemValidationError{
					field:  fmt.Sprintf("RanPolicyActionParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetRanPolicyConditionParametersList()) > 65535 {
		err := RanfunctionDefinitionPolicyActionItemValidationError{
			field:  "RanPolicyConditionParametersList",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanPolicyConditionParametersList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanfunctionDefinitionPolicyActionItemValidationError{
						field:  fmt.Sprintf("RanPolicyConditionParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanfunctionDefinitionPolicyActionItemValidationError{
						field:  fmt.Sprintf("RanPolicyConditionParametersList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanfunctionDefinitionPolicyActionItemValidationError{
					field:  fmt.Sprintf("RanPolicyConditionParametersList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanfunctionDefinitionPolicyActionItemMultiError(errors)
	}

	return nil
}

// RanfunctionDefinitionPolicyActionItemMultiError is an error wrapping
// multiple validation errors returned by
// RanfunctionDefinitionPolicyActionItem.ValidateAll() if the designated
// constraints aren't met.
type RanfunctionDefinitionPolicyActionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionDefinitionPolicyActionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionDefinitionPolicyActionItemMultiError) AllErrors() []error { return m }

// RanfunctionDefinitionPolicyActionItemValidationError is the validation error
// returned by RanfunctionDefinitionPolicyActionItem.Validate if the
// designated constraints aren't met.
type RanfunctionDefinitionPolicyActionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionDefinitionPolicyActionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionDefinitionPolicyActionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionDefinitionPolicyActionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionDefinitionPolicyActionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionDefinitionPolicyActionItemValidationError) ErrorName() string {
	return "RanfunctionDefinitionPolicyActionItemValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionDefinitionPolicyActionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionDefinitionPolicyActionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionDefinitionPolicyActionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionDefinitionPolicyActionItemValidationError{}

// Validate checks the field values on PolicyActionRanparameterItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyActionRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyActionRanparameterItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyActionRanparameterItemMultiError, or nil if none found.
func (m *PolicyActionRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyActionRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyActionRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyActionRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyActionRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyActionRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyActionRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyActionRanparameterItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyActionRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyActionRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyActionRanparameterItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PolicyActionRanparameterItemMultiError(errors)
	}

	return nil
}

// PolicyActionRanparameterItemMultiError is an error wrapping multiple
// validation errors returned by PolicyActionRanparameterItem.ValidateAll() if
// the designated constraints aren't met.
type PolicyActionRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyActionRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyActionRanparameterItemMultiError) AllErrors() []error { return m }

// PolicyActionRanparameterItemValidationError is the validation error returned
// by PolicyActionRanparameterItem.Validate if the designated constraints
// aren't met.
type PolicyActionRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyActionRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyActionRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyActionRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyActionRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyActionRanparameterItemValidationError) ErrorName() string {
	return "PolicyActionRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyActionRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyActionRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyActionRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyActionRanparameterItemValidationError{}

// Validate checks the field values on PolicyConditionRanparameterItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyConditionRanparameterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyConditionRanparameterItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PolicyConditionRanparameterItemMultiError, or nil if none found.
func (m *PolicyConditionRanparameterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyConditionRanparameterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanParameterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyConditionRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyConditionRanparameterItemValidationError{
					field:  "RanParameterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyConditionRanparameterItemValidationError{
				field:  "RanParameterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanParameterName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyConditionRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyConditionRanparameterItemValidationError{
					field:  "RanParameterName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanParameterName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyConditionRanparameterItemValidationError{
				field:  "RanParameterName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanParameterDefinition != nil {

		if all {
			switch v := interface{}(m.GetRanParameterDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyConditionRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyConditionRanparameterItemValidationError{
						field:  "RanParameterDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanParameterDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyConditionRanparameterItemValidationError{
					field:  "RanParameterDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PolicyConditionRanparameterItemMultiError(errors)
	}

	return nil
}

// PolicyConditionRanparameterItemMultiError is an error wrapping multiple
// validation errors returned by PolicyConditionRanparameterItem.ValidateAll()
// if the designated constraints aren't met.
type PolicyConditionRanparameterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyConditionRanparameterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyConditionRanparameterItemMultiError) AllErrors() []error { return m }

// PolicyConditionRanparameterItemValidationError is the validation error
// returned by PolicyConditionRanparameterItem.Validate if the designated
// constraints aren't met.
type PolicyConditionRanparameterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyConditionRanparameterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyConditionRanparameterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyConditionRanparameterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyConditionRanparameterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyConditionRanparameterItemValidationError) ErrorName() string {
	return "PolicyConditionRanparameterItemValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyConditionRanparameterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyConditionRanparameterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyConditionRanparameterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyConditionRanparameterItemValidationError{}
