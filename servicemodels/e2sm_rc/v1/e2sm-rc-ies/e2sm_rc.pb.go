// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.19.4
// source: e2sm_rc/v1/e2sm_rc.proto

package e2smrcies

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	e2sm_common_ies "github.com/onosproject/onos-e2-sm/servicemodels/e2sm_rc/v1/e2sm-common-ies"
	asn1 "github.com/onosproject/onos-lib-go/api/asn1/v1/asn1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// enumerated from e2sm_rc.asn1:76
type LogicalOr int32

const (
	LogicalOr_LOGICAL_OR_TRUE  LogicalOr = 0
	LogicalOr_LOGICAL_OR_FALSE LogicalOr = 1
)

// Enum value maps for LogicalOr.
var (
	LogicalOr_name = map[int32]string{
		0: "LOGICAL_OR_TRUE",
		1: "LOGICAL_OR_FALSE",
	}
	LogicalOr_value = map[string]int32{
		"LOGICAL_OR_TRUE":  0,
		"LOGICAL_OR_FALSE": 1,
	}
)

func (x LogicalOr) Enum() *LogicalOr {
	p := new(LogicalOr)
	*p = x
	return p
}

func (x LogicalOr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalOr) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[0].Descriptor()
}

func (LogicalOr) Type() protoreflect.EnumType {
	return &file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[0]
}

func (x LogicalOr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogicalOr.Descriptor instead.
func (LogicalOr) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{0}
}

// enumerated from e2sm_rc.asn1:116
type RrcState int32

const (
	RrcState_RRC_STATE_RRC_CONNECTED RrcState = 0
	RrcState_RRC_STATE_RRC_INACTIVE  RrcState = 1
	RrcState_RRC_STATE_RRC_IDLE      RrcState = 2
	RrcState_RRC_STATE_ANY           RrcState = 3
)

// Enum value maps for RrcState.
var (
	RrcState_name = map[int32]string{
		0: "RRC_STATE_RRC_CONNECTED",
		1: "RRC_STATE_RRC_INACTIVE",
		2: "RRC_STATE_RRC_IDLE",
		3: "RRC_STATE_ANY",
	}
	RrcState_value = map[string]int32{
		"RRC_STATE_RRC_CONNECTED": 0,
		"RRC_STATE_RRC_INACTIVE":  1,
		"RRC_STATE_RRC_IDLE":      2,
		"RRC_STATE_ANY":           3,
	}
)

func (x RrcState) Enum() *RrcState {
	p := new(RrcState)
	*p = x
	return p
}

func (x RrcState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RrcState) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[1].Descriptor()
}

func (RrcState) Type() protoreflect.EnumType {
	return &file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[1]
}

func (x RrcState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RrcState.Descriptor instead.
func (RrcState) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{1}
}

type NRModeInfo int32

const (
	NRModeInfo_NR_MODE_INFO_FDD NRModeInfo = 0
	NRModeInfo_NR_MODE_INFO_TDD NRModeInfo = 1
)

// Enum value maps for NRModeInfo.
var (
	NRModeInfo_name = map[int32]string{
		0: "NR_MODE_INFO_FDD",
		1: "NR_MODE_INFO_TDD",
	}
	NRModeInfo_value = map[string]int32{
		"NR_MODE_INFO_FDD": 0,
		"NR_MODE_INFO_TDD": 1,
	}
)

func (x NRModeInfo) Enum() *NRModeInfo {
	p := new(NRModeInfo)
	*p = x
	return p
}

func (x NRModeInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NRModeInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[2].Descriptor()
}

func (NRModeInfo) Type() protoreflect.EnumType {
	return &file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[2]
}

func (x NRModeInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NRModeInfo.Descriptor instead.
func (NRModeInfo) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{2}
}

type X2XNEstablished int32

const (
	X2XNEstablished_X2XN_ESTABLISHED_TRUE  X2XNEstablished = 0
	X2XNEstablished_X2XN_ESTABLISHED_FALSE X2XNEstablished = 1
)

// Enum value maps for X2XNEstablished.
var (
	X2XNEstablished_name = map[int32]string{
		0: "X2XN_ESTABLISHED_TRUE",
		1: "X2XN_ESTABLISHED_FALSE",
	}
	X2XNEstablished_value = map[string]int32{
		"X2XN_ESTABLISHED_TRUE":  0,
		"X2XN_ESTABLISHED_FALSE": 1,
	}
)

func (x X2XNEstablished) Enum() *X2XNEstablished {
	p := new(X2XNEstablished)
	*p = x
	return p
}

func (x X2XNEstablished) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (X2XNEstablished) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[3].Descriptor()
}

func (X2XNEstablished) Type() protoreflect.EnumType {
	return &file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[3]
}

func (x X2XNEstablished) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use X2XNEstablished.Descriptor instead.
func (X2XNEstablished) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{3}
}

type HOValidated int32

const (
	HOValidated_HO_VALIDATED_TRUE  HOValidated = 0
	HOValidated_HO_VALIDATED_FALSE HOValidated = 1
)

// Enum value maps for HOValidated.
var (
	HOValidated_name = map[int32]string{
		0: "HO_VALIDATED_TRUE",
		1: "HO_VALIDATED_FALSE",
	}
	HOValidated_value = map[string]int32{
		"HO_VALIDATED_TRUE":  0,
		"HO_VALIDATED_FALSE": 1,
	}
)

func (x HOValidated) Enum() *HOValidated {
	p := new(HOValidated)
	*p = x
	return p
}

func (x HOValidated) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HOValidated) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[4].Descriptor()
}

func (HOValidated) Type() protoreflect.EnumType {
	return &file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[4]
}

func (x HOValidated) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HOValidated.Descriptor instead.
func (HOValidated) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{4}
}

type RanPChoiceComparison int32

const (
	RanPChoiceComparison_RAN_P_CHOICE_COMPARISON_EQUAL       RanPChoiceComparison = 0
	RanPChoiceComparison_RAN_P_CHOICE_COMPARISON_DIFFERENCE  RanPChoiceComparison = 1
	RanPChoiceComparison_RAN_P_CHOICE_COMPARISON_GREATERTHAN RanPChoiceComparison = 2
	RanPChoiceComparison_RAN_P_CHOICE_COMPARISON_LESSTHAN    RanPChoiceComparison = 3
	RanPChoiceComparison_RAN_P_CHOICE_COMPARISON_CONTAINS    RanPChoiceComparison = 4
	RanPChoiceComparison_RAN_P_CHOICE_COMPARISON_STARTS_WITH RanPChoiceComparison = 5
)

// Enum value maps for RanPChoiceComparison.
var (
	RanPChoiceComparison_name = map[int32]string{
		0: "RAN_P_CHOICE_COMPARISON_EQUAL",
		1: "RAN_P_CHOICE_COMPARISON_DIFFERENCE",
		2: "RAN_P_CHOICE_COMPARISON_GREATERTHAN",
		3: "RAN_P_CHOICE_COMPARISON_LESSTHAN",
		4: "RAN_P_CHOICE_COMPARISON_CONTAINS",
		5: "RAN_P_CHOICE_COMPARISON_STARTS_WITH",
	}
	RanPChoiceComparison_value = map[string]int32{
		"RAN_P_CHOICE_COMPARISON_EQUAL":       0,
		"RAN_P_CHOICE_COMPARISON_DIFFERENCE":  1,
		"RAN_P_CHOICE_COMPARISON_GREATERTHAN": 2,
		"RAN_P_CHOICE_COMPARISON_LESSTHAN":    3,
		"RAN_P_CHOICE_COMPARISON_CONTAINS":    4,
		"RAN_P_CHOICE_COMPARISON_STARTS_WITH": 5,
	}
)

func (x RanPChoiceComparison) Enum() *RanPChoiceComparison {
	p := new(RanPChoiceComparison)
	*p = x
	return p
}

func (x RanPChoiceComparison) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RanPChoiceComparison) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[5].Descriptor()
}

func (RanPChoiceComparison) Type() protoreflect.EnumType {
	return &file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[5]
}

func (x RanPChoiceComparison) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RanPChoiceComparison.Descriptor instead.
func (RanPChoiceComparison) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{5}
}

type RanPChoicePresence int32

const (
	RanPChoicePresence_RAN_P_CHOICE_PRESENCE_PRESENT    RanPChoicePresence = 0
	RanPChoicePresence_RAN_P_CHOICE_PRESENCE_CONFIGURED RanPChoicePresence = 1
	RanPChoicePresence_RAN_P_CHOICE_PRESENCE_ROLLOVER   RanPChoicePresence = 2
	RanPChoicePresence_RAN_P_CHOICE_PRESENCE_NONZERO    RanPChoicePresence = 3
)

// Enum value maps for RanPChoicePresence.
var (
	RanPChoicePresence_name = map[int32]string{
		0: "RAN_P_CHOICE_PRESENCE_PRESENT",
		1: "RAN_P_CHOICE_PRESENCE_CONFIGURED",
		2: "RAN_P_CHOICE_PRESENCE_ROLLOVER",
		3: "RAN_P_CHOICE_PRESENCE_NONZERO",
	}
	RanPChoicePresence_value = map[string]int32{
		"RAN_P_CHOICE_PRESENCE_PRESENT":    0,
		"RAN_P_CHOICE_PRESENCE_CONFIGURED": 1,
		"RAN_P_CHOICE_PRESENCE_ROLLOVER":   2,
		"RAN_P_CHOICE_PRESENCE_NONZERO":    3,
	}
)

func (x RanPChoicePresence) Enum() *RanPChoicePresence {
	p := new(RanPChoicePresence)
	*p = x
	return p
}

func (x RanPChoicePresence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RanPChoicePresence) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[6].Descriptor()
}

func (RanPChoicePresence) Type() protoreflect.EnumType {
	return &file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[6]
}

func (x RanPChoicePresence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RanPChoicePresence.Descriptor instead.
func (RanPChoicePresence) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{6}
}

type MessageDirection int32

const (
	MessageDirection_MESSAGE_DIRECTION_INCOMING MessageDirection = 0
	MessageDirection_MESSAGE_DIRECTION_OUTGOING MessageDirection = 1
)

// Enum value maps for MessageDirection.
var (
	MessageDirection_name = map[int32]string{
		0: "MESSAGE_DIRECTION_INCOMING",
		1: "MESSAGE_DIRECTION_OUTGOING",
	}
	MessageDirection_value = map[string]int32{
		"MESSAGE_DIRECTION_INCOMING": 0,
		"MESSAGE_DIRECTION_OUTGOING": 1,
	}
)

func (x MessageDirection) Enum() *MessageDirection {
	p := new(MessageDirection)
	*p = x
	return p
}

func (x MessageDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[7].Descriptor()
}

func (MessageDirection) Type() protoreflect.EnumType {
	return &file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[7]
}

func (x MessageDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageDirection.Descriptor instead.
func (MessageDirection) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{7}
}

type OnDemand int32

const (
	OnDemand_ON_DEMAND_TRUE OnDemand = 0
)

// Enum value maps for OnDemand.
var (
	OnDemand_name = map[int32]string{
		0: "ON_DEMAND_TRUE",
	}
	OnDemand_value = map[string]int32{
		"ON_DEMAND_TRUE": 0,
	}
)

func (x OnDemand) Enum() *OnDemand {
	p := new(OnDemand)
	*p = x
	return p
}

func (x OnDemand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnDemand) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[8].Descriptor()
}

func (OnDemand) Type() protoreflect.EnumType {
	return &file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[8]
}

func (x OnDemand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnDemand.Descriptor instead.
func (OnDemand) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{8}
}

type RicControlDecision int32

const (
	RicControlDecision_RIC_CONTROL_DECISION_ACCEPT RicControlDecision = 0
	RicControlDecision_RIC_CONTROL_DECISION_REJECT RicControlDecision = 1
)

// Enum value maps for RicControlDecision.
var (
	RicControlDecision_name = map[int32]string{
		0: "RIC_CONTROL_DECISION_ACCEPT",
		1: "RIC_CONTROL_DECISION_REJECT",
	}
	RicControlDecision_value = map[string]int32{
		"RIC_CONTROL_DECISION_ACCEPT": 0,
		"RIC_CONTROL_DECISION_REJECT": 1,
	}
)

func (x RicControlDecision) Enum() *RicControlDecision {
	p := new(RicControlDecision)
	*p = x
	return p
}

func (x RicControlDecision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RicControlDecision) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[9].Descriptor()
}

func (RicControlDecision) Type() protoreflect.EnumType {
	return &file_e2sm_rc_v1_e2sm_rc_proto_enumTypes[9]
}

func (x RicControlDecision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RicControlDecision.Descriptor instead.
func (RicControlDecision) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{9}
}

// constant Integer from e2sm_rc.asn1:47
// {-}
type MaxnoofMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofMessages) Reset() {
	*x = MaxnoofMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofMessages) ProtoMessage() {}

func (x *MaxnoofMessages) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofMessages.ProtoReflect.Descriptor instead.
func (*MaxnoofMessages) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{0}
}

func (x *MaxnoofMessages) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:48
// {-}
type MaxnoofE2InfoChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofE2InfoChanges) Reset() {
	*x = MaxnoofE2InfoChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofE2InfoChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofE2InfoChanges) ProtoMessage() {}

func (x *MaxnoofE2InfoChanges) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofE2InfoChanges.ProtoReflect.Descriptor instead.
func (*MaxnoofE2InfoChanges) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{1}
}

func (x *MaxnoofE2InfoChanges) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:49
// {-}
type MaxnoofUeinfoChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofUeinfoChanges) Reset() {
	*x = MaxnoofUeinfoChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofUeinfoChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofUeinfoChanges) ProtoMessage() {}

func (x *MaxnoofUeinfoChanges) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofUeinfoChanges.ProtoReflect.Descriptor instead.
func (*MaxnoofUeinfoChanges) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{2}
}

func (x *MaxnoofUeinfoChanges) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:50
// {-}
type MaxnoofRrcstate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:8,valueUB:8,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:8,valueUB:8,"`
}

func (x *MaxnoofRrcstate) Reset() {
	*x = MaxnoofRrcstate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofRrcstate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofRrcstate) ProtoMessage() {}

func (x *MaxnoofRrcstate) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofRrcstate.ProtoReflect.Descriptor instead.
func (*MaxnoofRrcstate) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{3}
}

func (x *MaxnoofRrcstate) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:51
// {-}
type MaxnoofParametersToReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofParametersToReport) Reset() {
	*x = MaxnoofParametersToReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofParametersToReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofParametersToReport) ProtoMessage() {}

func (x *MaxnoofParametersToReport) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofParametersToReport.ProtoReflect.Descriptor instead.
func (*MaxnoofParametersToReport) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{4}
}

func (x *MaxnoofParametersToReport) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:52
// {-}
type MaxnoofPolicyConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofPolicyConditions) Reset() {
	*x = MaxnoofPolicyConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofPolicyConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofPolicyConditions) ProtoMessage() {}

func (x *MaxnoofPolicyConditions) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofPolicyConditions.ProtoReflect.Descriptor instead.
func (*MaxnoofPolicyConditions) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{5}
}

func (x *MaxnoofPolicyConditions) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:53
// {-}
type MaxnoofAssociatedRanparameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofAssociatedRanparameters) Reset() {
	*x = MaxnoofAssociatedRanparameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofAssociatedRanparameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofAssociatedRanparameters) ProtoMessage() {}

func (x *MaxnoofAssociatedRanparameters) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofAssociatedRanparameters.ProtoReflect.Descriptor instead.
func (*MaxnoofAssociatedRanparameters) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{6}
}

func (x *MaxnoofAssociatedRanparameters) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:54
// {-}
type MaxnoofUeid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofUeid) Reset() {
	*x = MaxnoofUeid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofUeid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofUeid) ProtoMessage() {}

func (x *MaxnoofUeid) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofUeid.ProtoReflect.Descriptor instead.
func (*MaxnoofUeid) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{7}
}

func (x *MaxnoofUeid) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:55
// {-}
type MaxnoofCellId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofCellId) Reset() {
	*x = MaxnoofCellId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofCellId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofCellId) ProtoMessage() {}

func (x *MaxnoofCellId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofCellId.ProtoReflect.Descriptor instead.
func (*MaxnoofCellId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{8}
}

func (x *MaxnoofCellId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:56
// {-}
type MaxnoofRanoutcomeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:255,valueUB:255,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:255,valueUB:255,"`
}

func (x *MaxnoofRanoutcomeParameters) Reset() {
	*x = MaxnoofRanoutcomeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofRanoutcomeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofRanoutcomeParameters) ProtoMessage() {}

func (x *MaxnoofRanoutcomeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofRanoutcomeParameters.ProtoReflect.Descriptor instead.
func (*MaxnoofRanoutcomeParameters) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{9}
}

func (x *MaxnoofRanoutcomeParameters) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:57
// {-}
type MaxnoofParametersinStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofParametersinStructure) Reset() {
	*x = MaxnoofParametersinStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofParametersinStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofParametersinStructure) ProtoMessage() {}

func (x *MaxnoofParametersinStructure) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofParametersinStructure.ProtoReflect.Descriptor instead.
func (*MaxnoofParametersinStructure) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{10}
}

func (x *MaxnoofParametersinStructure) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:58
// {-}
type MaxnoofItemsinList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofItemsinList) Reset() {
	*x = MaxnoofItemsinList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofItemsinList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofItemsinList) ProtoMessage() {}

func (x *MaxnoofItemsinList) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofItemsinList.ProtoReflect.Descriptor instead.
func (*MaxnoofItemsinList) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{11}
}

func (x *MaxnoofItemsinList) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:59
// {-}
type MaxnoofUeinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofUeinfo) Reset() {
	*x = MaxnoofUeinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofUeinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofUeinfo) ProtoMessage() {}

func (x *MaxnoofUeinfo) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofUeinfo.ProtoReflect.Descriptor instead.
func (*MaxnoofUeinfo) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{12}
}

func (x *MaxnoofUeinfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:60
// {-}
type MaxnoofCellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofCellInfo) Reset() {
	*x = MaxnoofCellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofCellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofCellInfo) ProtoMessage() {}

func (x *MaxnoofCellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofCellInfo.ProtoReflect.Descriptor instead.
func (*MaxnoofCellInfo) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{13}
}

func (x *MaxnoofCellInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:61
// {-}
type MaxnoofUeeventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofUeeventInfo) Reset() {
	*x = MaxnoofUeeventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofUeeventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofUeeventInfo) ProtoMessage() {}

func (x *MaxnoofUeeventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofUeeventInfo.ProtoReflect.Descriptor instead.
func (*MaxnoofUeeventInfo) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{14}
}

func (x *MaxnoofUeeventInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:62
// {-}
type MaxnoofRanparamTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:255,valueUB:255,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:255,valueUB:255,"`
}

func (x *MaxnoofRanparamTest) Reset() {
	*x = MaxnoofRanparamTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofRanparamTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofRanparamTest) ProtoMessage() {}

func (x *MaxnoofRanparamTest) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofRanparamTest.ProtoReflect.Descriptor instead.
func (*MaxnoofRanparamTest) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{15}
}

func (x *MaxnoofRanparamTest) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:63
// {-}
type MaxnoofNeighbourCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofNeighbourCell) Reset() {
	*x = MaxnoofNeighbourCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofNeighbourCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofNeighbourCell) ProtoMessage() {}

func (x *MaxnoofNeighbourCell) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofNeighbourCell.ProtoReflect.Descriptor instead.
func (*MaxnoofNeighbourCell) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{16}
}

func (x *MaxnoofNeighbourCell) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:64
// {-}
type MaxnoofRicstyles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:63,valueUB:63,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:63,valueUB:63,"`
}

func (x *MaxnoofRicstyles) Reset() {
	*x = MaxnoofRicstyles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofRicstyles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofRicstyles) ProtoMessage() {}

func (x *MaxnoofRicstyles) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofRicstyles.ProtoReflect.Descriptor instead.
func (*MaxnoofRicstyles) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{17}
}

func (x *MaxnoofRicstyles) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:65
// {-}
type MaxnoofCallProcessTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofCallProcessTypes) Reset() {
	*x = MaxnoofCallProcessTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofCallProcessTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofCallProcessTypes) ProtoMessage() {}

func (x *MaxnoofCallProcessTypes) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofCallProcessTypes.ProtoReflect.Descriptor instead.
func (*MaxnoofCallProcessTypes) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{18}
}

func (x *MaxnoofCallProcessTypes) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:66
// {-}
type MaxnoofCallProcessBreakpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofCallProcessBreakpoints) Reset() {
	*x = MaxnoofCallProcessBreakpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofCallProcessBreakpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofCallProcessBreakpoints) ProtoMessage() {}

func (x *MaxnoofCallProcessBreakpoints) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofCallProcessBreakpoints.ProtoReflect.Descriptor instead.
func (*MaxnoofCallProcessBreakpoints) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{19}
}

func (x *MaxnoofCallProcessBreakpoints) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:67
// {-}
type MaxnoofInsertIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofInsertIndication) Reset() {
	*x = MaxnoofInsertIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofInsertIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofInsertIndication) ProtoMessage() {}

func (x *MaxnoofInsertIndication) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofInsertIndication.ProtoReflect.Descriptor instead.
func (*MaxnoofInsertIndication) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{20}
}

func (x *MaxnoofInsertIndication) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:68
// {-}
type MaxnoofControlAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofControlAction) Reset() {
	*x = MaxnoofControlAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofControlAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofControlAction) ProtoMessage() {}

func (x *MaxnoofControlAction) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofControlAction.ProtoReflect.Descriptor instead.
func (*MaxnoofControlAction) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{21}
}

func (x *MaxnoofControlAction) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm_rc.asn1:69
// {-}
type MaxnoofPolicyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:65535,valueUB:65535,"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:65535,valueUB:65535,"`
}

func (x *MaxnoofPolicyAction) Reset() {
	*x = MaxnoofPolicyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxnoofPolicyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxnoofPolicyAction) ProtoMessage() {}

func (x *MaxnoofPolicyAction) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxnoofPolicyAction.ProtoReflect.Descriptor instead.
func (*MaxnoofPolicyAction) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{22}
}

func (x *MaxnoofPolicyAction) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from e2sm_rc.asn1:80
// {NeighborCell-List}
type NeighborCellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,choiceExt"
	Value []*NeighborCellItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:65535,choiceExt"`
}

func (x *NeighborCellList) Reset() {
	*x = NeighborCellList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighborCellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighborCellList) ProtoMessage() {}

func (x *NeighborCellList) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighborCellList.ProtoReflect.Descriptor instead.
func (*NeighborCellList) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{23}
}

func (x *NeighborCellList) GetValue() []*NeighborCellItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from e2sm_rc.asn1:81
// {NeighborCell-Item}
type NeighborCellItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm_rc.asn1:81
	//
	// Types that are assignable to NeighborCellItem:
	//	*NeighborCellItem_RanTypeChoiceNr
	//	*NeighborCellItem_RanTypeChoiceEutra
	NeighborCellItem isNeighborCellItem_NeighborCellItem `protobuf_oneof:"neighbor_cell_item"`
}

func (x *NeighborCellItem) Reset() {
	*x = NeighborCellItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighborCellItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighborCellItem) ProtoMessage() {}

func (x *NeighborCellItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighborCellItem.ProtoReflect.Descriptor instead.
func (*NeighborCellItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{24}
}

func (m *NeighborCellItem) GetNeighborCellItem() isNeighborCellItem_NeighborCellItem {
	if m != nil {
		return m.NeighborCellItem
	}
	return nil
}

func (x *NeighborCellItem) GetRanTypeChoiceNr() *NeighborCellItemChoiceNr {
	if x, ok := x.GetNeighborCellItem().(*NeighborCellItem_RanTypeChoiceNr); ok {
		return x.RanTypeChoiceNr
	}
	return nil
}

func (x *NeighborCellItem) GetRanTypeChoiceEutra() *NeighborCellItemChoiceEUtra {
	if x, ok := x.GetNeighborCellItem().(*NeighborCellItem_RanTypeChoiceEutra); ok {
		return x.RanTypeChoiceEutra
	}
	return nil
}

type isNeighborCellItem_NeighborCellItem interface {
	isNeighborCellItem_NeighborCellItem()
}

type NeighborCellItem_RanTypeChoiceNr struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	RanTypeChoiceNr *NeighborCellItemChoiceNr `protobuf:"bytes,1,opt,name=ran_type_choice_nr,json=ranType-Choice-NR,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type NeighborCellItem_RanTypeChoiceEutra struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	RanTypeChoiceEutra *NeighborCellItemChoiceEUtra `protobuf:"bytes,2,opt,name=ran_type_choice_eutra,json=ranType-Choice-EUTRA,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

func (*NeighborCellItem_RanTypeChoiceNr) isNeighborCellItem_NeighborCellItem() {}

func (*NeighborCellItem_RanTypeChoiceEutra) isNeighborCellItem_NeighborCellItem() {}

// sequence from e2sm_rc.asn1:87
// {NeighborCell-Item-Choice-NR}
type NeighborCellItemChoiceNr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt"
	NRCgi     *e2sm_common_ies.NrCgi     `protobuf:"bytes,1,opt,name=n_r_cgi,json=nR-CGI,proto3" json:"n_r_cgi,omitempty" aper:"valueExt"`
	NRPci     *e2sm_common_ies.NrPci     `protobuf:"bytes,2,opt,name=n_r_pci,json=nR-PCI,proto3" json:"n_r_pci,omitempty"`
	FiveGsTac *e2sm_common_ies.FiveGsTac `protobuf:"bytes,3,opt,name=five_gs_tac,json=fiveGS-TAC,proto3" json:"five_gs_tac,omitempty"`
	// @inject_tag: aper:"valueLB:0,valueUB:1,valueExt"
	NRModeInfo NRModeInfo `protobuf:"varint,4,opt,name=n_r_mode_info,json=nR-mode-info,proto3,enum=e2sm_rc.v1.NRModeInfo" json:"n_r_mode_info,omitempty" aper:"valueLB:0,valueUB:1,valueExt"`
	// @inject_tag: aper:"valueExt"
	NRFreqInfo *e2sm_common_ies.NrfrequencyInfo `protobuf:"bytes,5,opt,name=n_r_freq_info,json=nR-FreqInfo,proto3" json:"n_r_freq_info,omitempty" aper:"valueExt"`
	// @inject_tag: aper:"valueLB:0,valueUB:1,valueExt"
	X2XnEstablished X2XNEstablished `protobuf:"varint,6,opt,name=x2_xn_established,json=x2-Xn-established,proto3,enum=e2sm_rc.v1.X2XNEstablished" json:"x2_xn_established,omitempty" aper:"valueLB:0,valueUB:1,valueExt"`
	// @inject_tag: aper:"valueLB:0,valueUB:1,valueExt"
	HOValidated HOValidated `protobuf:"varint,7,opt,name=h_o_validated,json=hO-validated,proto3,enum=e2sm_rc.v1.HOValidated" json:"h_o_validated,omitempty" aper:"valueLB:0,valueUB:1,valueExt"`
	// @inject_tag: aper:"valueLB:1,valueUB:65535,valueExt"
	Version int32 `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty" aper:"valueLB:1,valueUB:65535,valueExt"`
}

func (x *NeighborCellItemChoiceNr) Reset() {
	*x = NeighborCellItemChoiceNr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighborCellItemChoiceNr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighborCellItemChoiceNr) ProtoMessage() {}

func (x *NeighborCellItemChoiceNr) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighborCellItemChoiceNr.ProtoReflect.Descriptor instead.
func (*NeighborCellItemChoiceNr) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{25}
}

func (x *NeighborCellItemChoiceNr) GetNRCgi() *e2sm_common_ies.NrCgi {
	if x != nil {
		return x.NRCgi
	}
	return nil
}

func (x *NeighborCellItemChoiceNr) GetNRPci() *e2sm_common_ies.NrPci {
	if x != nil {
		return x.NRPci
	}
	return nil
}

func (x *NeighborCellItemChoiceNr) GetFiveGsTac() *e2sm_common_ies.FiveGsTac {
	if x != nil {
		return x.FiveGsTac
	}
	return nil
}

func (x *NeighborCellItemChoiceNr) GetNRModeInfo() NRModeInfo {
	if x != nil {
		return x.NRModeInfo
	}
	return NRModeInfo_NR_MODE_INFO_FDD
}

func (x *NeighborCellItemChoiceNr) GetNRFreqInfo() *e2sm_common_ies.NrfrequencyInfo {
	if x != nil {
		return x.NRFreqInfo
	}
	return nil
}

func (x *NeighborCellItemChoiceNr) GetX2XnEstablished() X2XNEstablished {
	if x != nil {
		return x.X2XnEstablished
	}
	return X2XNEstablished_X2XN_ESTABLISHED_TRUE
}

func (x *NeighborCellItemChoiceNr) GetHOValidated() HOValidated {
	if x != nil {
		return x.HOValidated
	}
	return HOValidated_HO_VALIDATED_TRUE
}

func (x *NeighborCellItemChoiceNr) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// sequence from e2sm_rc.asn1:99
// {NeighborCell-Item-Choice-E-UTRA}
type NeighborCellItemChoiceEUtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt"
	EUtraCgi   *e2sm_common_ies.EutraCgi   `protobuf:"bytes,1,opt,name=e_utra_cgi,json=eUTRA-CGI,proto3" json:"e_utra_cgi,omitempty" aper:"valueExt"`
	EUtraPci   *e2sm_common_ies.EUtraPci   `protobuf:"bytes,2,opt,name=e_utra_pci,json=eUTRA-PCI,proto3" json:"e_utra_pci,omitempty"`
	EUtraArfcn *e2sm_common_ies.EUtraArfcn `protobuf:"bytes,3,opt,name=e_utra_arfcn,json=eUTRA-ARFCN,proto3" json:"e_utra_arfcn,omitempty"`
	EUtraTac   *e2sm_common_ies.EUtraTac   `protobuf:"bytes,4,opt,name=e_utra_tac,json=eUTRA-TAC,proto3" json:"e_utra_tac,omitempty"`
	// @inject_tag: aper:"valueLB:0,valueUB:1,valueExt"
	X2XnEstablished X2XNEstablished `protobuf:"varint,5,opt,name=x2_xn_established,json=x2-Xn-established,proto3,enum=e2sm_rc.v1.X2XNEstablished" json:"x2_xn_established,omitempty" aper:"valueLB:0,valueUB:1,valueExt"`
	// @inject_tag: aper:"valueLB:0,valueUB:1,valueExt"
	HOValidated HOValidated `protobuf:"varint,6,opt,name=h_o_validated,json=hO-validated,proto3,enum=e2sm_rc.v1.HOValidated" json:"h_o_validated,omitempty" aper:"valueLB:0,valueUB:1,valueExt"`
	// @inject_tag: aper:"valueLB:1,valueUB:65535,valueExt"
	Version int32 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty" aper:"valueLB:1,valueUB:65535,valueExt"`
}

func (x *NeighborCellItemChoiceEUtra) Reset() {
	*x = NeighborCellItemChoiceEUtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighborCellItemChoiceEUtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighborCellItemChoiceEUtra) ProtoMessage() {}

func (x *NeighborCellItemChoiceEUtra) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighborCellItemChoiceEUtra.ProtoReflect.Descriptor instead.
func (*NeighborCellItemChoiceEUtra) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{26}
}

func (x *NeighborCellItemChoiceEUtra) GetEUtraCgi() *e2sm_common_ies.EutraCgi {
	if x != nil {
		return x.EUtraCgi
	}
	return nil
}

func (x *NeighborCellItemChoiceEUtra) GetEUtraPci() *e2sm_common_ies.EUtraPci {
	if x != nil {
		return x.EUtraPci
	}
	return nil
}

func (x *NeighborCellItemChoiceEUtra) GetEUtraArfcn() *e2sm_common_ies.EUtraArfcn {
	if x != nil {
		return x.EUtraArfcn
	}
	return nil
}

func (x *NeighborCellItemChoiceEUtra) GetEUtraTac() *e2sm_common_ies.EUtraTac {
	if x != nil {
		return x.EUtraTac
	}
	return nil
}

func (x *NeighborCellItemChoiceEUtra) GetX2XnEstablished() X2XNEstablished {
	if x != nil {
		return x.X2XnEstablished
	}
	return X2XNEstablished_X2XN_ESTABLISHED_TRUE
}

func (x *NeighborCellItemChoiceEUtra) GetHOValidated() HOValidated {
	if x != nil {
		return x.HOValidated
	}
	return HOValidated_HO_VALIDATED_TRUE
}

func (x *NeighborCellItemChoiceEUtra) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// sequence from e2sm_rc.asn1:110
// {NeighborRelation-Info}
type NeighborRelationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	ServingCellPci *e2sm_common_ies.ServingCellPci `protobuf:"bytes,1,opt,name=serving_cell_pci,json=servingCellPCI,proto3" json:"serving_cell_pci,omitempty" aper:"choiceExt"`
	// @inject_tag: aper:"choiceExt"
	ServingCellArfcn *e2sm_common_ies.ServingCellArfcn `protobuf:"bytes,2,opt,name=serving_cell_arfcn,json=servingCellARFCN,proto3" json:"serving_cell_arfcn,omitempty" aper:"choiceExt"`
	NeighborCellList *NeighborCellList                 `protobuf:"bytes,3,opt,name=neighbor_cell_list,json=neighborCell-List,proto3" json:"neighbor_cell_list,omitempty"`
}

func (x *NeighborRelationInfo) Reset() {
	*x = NeighborRelationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighborRelationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighborRelationInfo) ProtoMessage() {}

func (x *NeighborRelationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighborRelationInfo.ProtoReflect.Descriptor instead.
func (*NeighborRelationInfo) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{27}
}

func (x *NeighborRelationInfo) GetServingCellPci() *e2sm_common_ies.ServingCellPci {
	if x != nil {
		return x.ServingCellPci
	}
	return nil
}

func (x *NeighborRelationInfo) GetServingCellArfcn() *e2sm_common_ies.ServingCellArfcn {
	if x != nil {
		return x.ServingCellArfcn
	}
	return nil
}

func (x *NeighborRelationInfo) GetNeighborCellList() *NeighborCellList {
	if x != nil {
		return x.NeighborCellList
	}
	return nil
}

// sequence from e2sm_rc.asn1:126
// {EventTrigger-Cell-Info}
type EventTriggerCellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	CellInfoList []*EventTriggerCellInfoItem `protobuf:"bytes,1,rep,name=cell_info_list,json=cellInfo-List,proto3" json:"cell_info_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *EventTriggerCellInfo) Reset() {
	*x = EventTriggerCellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerCellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerCellInfo) ProtoMessage() {}

func (x *EventTriggerCellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerCellInfo.ProtoReflect.Descriptor instead.
func (*EventTriggerCellInfo) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{28}
}

func (x *EventTriggerCellInfo) GetCellInfoList() []*EventTriggerCellInfoItem {
	if x != nil {
		return x.CellInfoList
	}
	return nil
}

// sequence from e2sm_rc.asn1:131
// {EventTrigger-Cell-Info-Item}
type EventTriggerCellInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTriggerCellId *RicEventTriggerCellId `protobuf:"bytes,1,opt,name=event_trigger_cell_id,json=eventTriggerCellID,proto3" json:"event_trigger_cell_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	CellType *CellType `protobuf:"bytes,2,opt,name=cell_type,json=cellType,proto3" json:"cell_type,omitempty" aper:"choiceExt"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
	LogicalOr *LogicalOr `protobuf:"varint,3,opt,name=logical_or,json=logicalOR,proto3,enum=e2sm_rc.v1.LogicalOr,oneof" json:"logical_or,omitempty" aper:"optional,valueLB:0,valueUB:1,valueExt"`
}

func (x *EventTriggerCellInfoItem) Reset() {
	*x = EventTriggerCellInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerCellInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerCellInfoItem) ProtoMessage() {}

func (x *EventTriggerCellInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerCellInfoItem.ProtoReflect.Descriptor instead.
func (*EventTriggerCellInfoItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{29}
}

func (x *EventTriggerCellInfoItem) GetEventTriggerCellId() *RicEventTriggerCellId {
	if x != nil {
		return x.EventTriggerCellId
	}
	return nil
}

func (x *EventTriggerCellInfoItem) GetCellType() *CellType {
	if x != nil {
		return x.CellType
	}
	return nil
}

func (x *EventTriggerCellInfoItem) GetLogicalOr() LogicalOr {
	if x != nil && x.LogicalOr != nil {
		return *x.LogicalOr
	}
	return LogicalOr_LOGICAL_OR_TRUE
}

type CellType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CellType:
	//	*CellType_CellTypeChoiceIndividual
	//	*CellType_CellTypeChoiceGroup
	CellType isCellType_CellType `protobuf_oneof:"cell_type"`
}

func (x *CellType) Reset() {
	*x = CellType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellType) ProtoMessage() {}

func (x *CellType) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellType.ProtoReflect.Descriptor instead.
func (*CellType) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{30}
}

func (m *CellType) GetCellType() isCellType_CellType {
	if m != nil {
		return m.CellType
	}
	return nil
}

func (x *CellType) GetCellTypeChoiceIndividual() *EventTriggerCellInfoItemChoiceIndividual {
	if x, ok := x.GetCellType().(*CellType_CellTypeChoiceIndividual); ok {
		return x.CellTypeChoiceIndividual
	}
	return nil
}

func (x *CellType) GetCellTypeChoiceGroup() *EventTriggerCellInfoItemChoiceGroup {
	if x, ok := x.GetCellType().(*CellType_CellTypeChoiceGroup); ok {
		return x.CellTypeChoiceGroup
	}
	return nil
}

type isCellType_CellType interface {
	isCellType_CellType()
}

type CellType_CellTypeChoiceIndividual struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	CellTypeChoiceIndividual *EventTriggerCellInfoItemChoiceIndividual `protobuf:"bytes,1,opt,name=cell_type_choice_individual,json=cellTypeChoiceIndividual,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type CellType_CellTypeChoiceGroup struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	CellTypeChoiceGroup *EventTriggerCellInfoItemChoiceGroup `protobuf:"bytes,2,opt,name=cell_type_choice_group,json=cellTypeChoiceGroup,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

func (*CellType_CellTypeChoiceIndividual) isCellType_CellType() {}

func (*CellType_CellTypeChoiceGroup) isCellType_CellType() {}

// sequence from e2sm_rc.asn1:142
// {EventTrigger-Cell-Info-Item-Choice-Individual}
type EventTriggerCellInfoItemChoiceIndividual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	CellGlobalId *e2sm_common_ies.Cgi `protobuf:"bytes,1,opt,name=cell_global_id,json=cellGlobalID,proto3" json:"cell_global_id,omitempty" aper:"choiceExt"`
}

func (x *EventTriggerCellInfoItemChoiceIndividual) Reset() {
	*x = EventTriggerCellInfoItemChoiceIndividual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerCellInfoItemChoiceIndividual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerCellInfoItemChoiceIndividual) ProtoMessage() {}

func (x *EventTriggerCellInfoItemChoiceIndividual) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerCellInfoItemChoiceIndividual.ProtoReflect.Descriptor instead.
func (*EventTriggerCellInfoItemChoiceIndividual) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{31}
}

func (x *EventTriggerCellInfoItemChoiceIndividual) GetCellGlobalId() *e2sm_common_ies.Cgi {
	if x != nil {
		return x.CellGlobalId
	}
	return nil
}

// sequence from e2sm_rc.asn1:147
// {EventTrigger-Cell-Info-Item-Choice-Group}
type EventTriggerCellInfoItemChoiceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterTesting *RanparameterTesting `protobuf:"bytes,1,opt,name=ran_parameter_testing,json=ranParameterTesting,proto3" json:"ran_parameter_testing,omitempty"`
}

func (x *EventTriggerCellInfoItemChoiceGroup) Reset() {
	*x = EventTriggerCellInfoItemChoiceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerCellInfoItemChoiceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerCellInfoItemChoiceGroup) ProtoMessage() {}

func (x *EventTriggerCellInfoItemChoiceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerCellInfoItemChoiceGroup.ProtoReflect.Descriptor instead.
func (*EventTriggerCellInfoItemChoiceGroup) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{32}
}

func (x *EventTriggerCellInfoItemChoiceGroup) GetRanParameterTesting() *RanparameterTesting {
	if x != nil {
		return x.RanParameterTesting
	}
	return nil
}

// sequence from e2sm_rc.asn1:154
// {EventTrigger-UE-Info}
type EventTriggerUeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	UeInfoList []*EventTriggerUeInfoItem `protobuf:"bytes,1,rep,name=ue_info_list,json=ueInfo-List,proto3" json:"ue_info_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *EventTriggerUeInfo) Reset() {
	*x = EventTriggerUeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerUeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerUeInfo) ProtoMessage() {}

func (x *EventTriggerUeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerUeInfo.ProtoReflect.Descriptor instead.
func (*EventTriggerUeInfo) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{33}
}

func (x *EventTriggerUeInfo) GetUeInfoList() []*EventTriggerUeInfoItem {
	if x != nil {
		return x.UeInfoList
	}
	return nil
}

// sequence from e2sm_rc.asn1:159
// {EventTrigger-UE-Info-Item}
type EventTriggerUeInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTriggerUeid *RicEventTriggerUeId `protobuf:"bytes,1,opt,name=event_trigger_ueid,json=eventTriggerUEID,proto3" json:"event_trigger_ueid,omitempty"`
	// @inject_tag: aper:"choiceExt"
	UeType *UeType `protobuf:"bytes,2,opt,name=ue_type,json=ueType,proto3" json:"ue_type,omitempty" aper:"choiceExt"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
	LogicalOr *LogicalOr `protobuf:"varint,3,opt,name=logical_or,json=logicalOR,proto3,enum=e2sm_rc.v1.LogicalOr,oneof" json:"logical_or,omitempty" aper:"optional,valueLB:0,valueUB:1,valueExt"`
}

func (x *EventTriggerUeInfoItem) Reset() {
	*x = EventTriggerUeInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerUeInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerUeInfoItem) ProtoMessage() {}

func (x *EventTriggerUeInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerUeInfoItem.ProtoReflect.Descriptor instead.
func (*EventTriggerUeInfoItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{34}
}

func (x *EventTriggerUeInfoItem) GetEventTriggerUeid() *RicEventTriggerUeId {
	if x != nil {
		return x.EventTriggerUeid
	}
	return nil
}

func (x *EventTriggerUeInfoItem) GetUeType() *UeType {
	if x != nil {
		return x.UeType
	}
	return nil
}

func (x *EventTriggerUeInfoItem) GetLogicalOr() LogicalOr {
	if x != nil && x.LogicalOr != nil {
		return *x.LogicalOr
	}
	return LogicalOr_LOGICAL_OR_TRUE
}

type UeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UeType:
	//	*UeType_UeTypeChoiceIndividual
	//	*UeType_UeTypeChoiceGroup
	UeType isUeType_UeType `protobuf_oneof:"ue_type"`
}

func (x *UeType) Reset() {
	*x = UeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeType) ProtoMessage() {}

func (x *UeType) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeType.ProtoReflect.Descriptor instead.
func (*UeType) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{35}
}

func (m *UeType) GetUeType() isUeType_UeType {
	if m != nil {
		return m.UeType
	}
	return nil
}

func (x *UeType) GetUeTypeChoiceIndividual() *EventTriggerUeInfoItemChoiceIndividual {
	if x, ok := x.GetUeType().(*UeType_UeTypeChoiceIndividual); ok {
		return x.UeTypeChoiceIndividual
	}
	return nil
}

func (x *UeType) GetUeTypeChoiceGroup() *EventTriggerUeInfoItemChoiceGroup {
	if x, ok := x.GetUeType().(*UeType_UeTypeChoiceGroup); ok {
		return x.UeTypeChoiceGroup
	}
	return nil
}

type isUeType_UeType interface {
	isUeType_UeType()
}

type UeType_UeTypeChoiceIndividual struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	UeTypeChoiceIndividual *EventTriggerUeInfoItemChoiceIndividual `protobuf:"bytes,1,opt,name=ue_type_choice_individual,json=ueTypeChoiceIndividual,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type UeType_UeTypeChoiceGroup struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	UeTypeChoiceGroup *EventTriggerUeInfoItemChoiceGroup `protobuf:"bytes,2,opt,name=ue_type_choice_group,json=ueTypeChoiceGroup,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

func (*UeType_UeTypeChoiceIndividual) isUeType_UeType() {}

func (*UeType_UeTypeChoiceGroup) isUeType_UeType() {}

// sequence from e2sm_rc.asn1:170
// {EventTrigger-UE-Info-Item-Choice-Individual}
type EventTriggerUeInfoItemChoiceIndividual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	UeId                *e2sm_common_ies.Ueid `protobuf:"bytes,1,opt,name=ue_id,json=ueID,proto3" json:"ue_id,omitempty" aper:"choiceExt"`
	RanParameterTesting *RanparameterTesting  `protobuf:"bytes,2,opt,name=ran_parameter_testing,json=ranParameterTesting,proto3" json:"ran_parameter_testing,omitempty"`
}

func (x *EventTriggerUeInfoItemChoiceIndividual) Reset() {
	*x = EventTriggerUeInfoItemChoiceIndividual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerUeInfoItemChoiceIndividual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerUeInfoItemChoiceIndividual) ProtoMessage() {}

func (x *EventTriggerUeInfoItemChoiceIndividual) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerUeInfoItemChoiceIndividual.ProtoReflect.Descriptor instead.
func (*EventTriggerUeInfoItemChoiceIndividual) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{36}
}

func (x *EventTriggerUeInfoItemChoiceIndividual) GetUeId() *e2sm_common_ies.Ueid {
	if x != nil {
		return x.UeId
	}
	return nil
}

func (x *EventTriggerUeInfoItemChoiceIndividual) GetRanParameterTesting() *RanparameterTesting {
	if x != nil {
		return x.RanParameterTesting
	}
	return nil
}

// sequence from e2sm_rc.asn1:176
// {EventTrigger-UE-Info-Item-Choice-Group}
type EventTriggerUeInfoItemChoiceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterTesting *RanparameterTesting `protobuf:"bytes,1,opt,name=ran_parameter_testing,json=ranParameterTesting,proto3" json:"ran_parameter_testing,omitempty"`
}

func (x *EventTriggerUeInfoItemChoiceGroup) Reset() {
	*x = EventTriggerUeInfoItemChoiceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerUeInfoItemChoiceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerUeInfoItemChoiceGroup) ProtoMessage() {}

func (x *EventTriggerUeInfoItemChoiceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerUeInfoItemChoiceGroup.ProtoReflect.Descriptor instead.
func (*EventTriggerUeInfoItemChoiceGroup) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{37}
}

func (x *EventTriggerUeInfoItemChoiceGroup) GetRanParameterTesting() *RanparameterTesting {
	if x != nil {
		return x.RanParameterTesting
	}
	return nil
}

// sequence from e2sm_rc.asn1:183
// {EventTrigger-UEevent-Info}
type EventTriggerUeeventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	UeEventList []*EventTriggerUeeventInfoItem `protobuf:"bytes,1,rep,name=ue_event_list,json=ueEvent-List,proto3" json:"ue_event_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *EventTriggerUeeventInfo) Reset() {
	*x = EventTriggerUeeventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerUeeventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerUeeventInfo) ProtoMessage() {}

func (x *EventTriggerUeeventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerUeeventInfo.ProtoReflect.Descriptor instead.
func (*EventTriggerUeeventInfo) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{38}
}

func (x *EventTriggerUeeventInfo) GetUeEventList() []*EventTriggerUeeventInfoItem {
	if x != nil {
		return x.UeEventList
	}
	return nil
}

// sequence from e2sm_rc.asn1:188
// {EventTrigger-UEevent-Info-Item}
type EventTriggerUeeventInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UeEventId *RicEventTriggerUeeventId `protobuf:"bytes,1,opt,name=ue_event_id,json=ueEventID,proto3" json:"ue_event_id,omitempty"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
	LogicalOr *LogicalOr `protobuf:"varint,2,opt,name=logical_or,json=logicalOR,proto3,enum=e2sm_rc.v1.LogicalOr,oneof" json:"logical_or,omitempty" aper:"optional,valueLB:0,valueUB:1,valueExt"`
}

func (x *EventTriggerUeeventInfoItem) Reset() {
	*x = EventTriggerUeeventInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerUeeventInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerUeeventInfoItem) ProtoMessage() {}

func (x *EventTriggerUeeventInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerUeeventInfoItem.ProtoReflect.Descriptor instead.
func (*EventTriggerUeeventInfoItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{39}
}

func (x *EventTriggerUeeventInfoItem) GetUeEventId() *RicEventTriggerUeeventId {
	if x != nil {
		return x.UeEventId
	}
	return nil
}

func (x *EventTriggerUeeventInfoItem) GetLogicalOr() LogicalOr {
	if x != nil && x.LogicalOr != nil {
		return *x.LogicalOr
	}
	return LogicalOr_LOGICAL_OR_TRUE
}

// range of Integer from e2sm_rc.asn1:200
// {RANParameter-ID}
type RanparameterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:4294967296,valueExt"
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:4294967296,valueExt"`
}

func (x *RanparameterId) Reset() {
	*x = RanparameterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterId) ProtoMessage() {}

func (x *RanparameterId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterId.ProtoReflect.Descriptor instead.
func (*RanparameterId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{40}
}

func (x *RanparameterId) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RanparameterName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:150,sizeExt"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:150,sizeExt"`
}

func (x *RanparameterName) Reset() {
	*x = RanparameterName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterName) ProtoMessage() {}

func (x *RanparameterName) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterName.ProtoReflect.Descriptor instead.
func (*RanparameterName) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{41}
}

func (x *RanparameterName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// sequence from e2sm_rc.asn1:205
// {RANParameter-Definition}
type RanparameterDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RanParameterDefinitionChoice *RanparameterDefinitionChoice `protobuf:"bytes,1,opt,name=ran_parameter_definition_choice,json=ranParameter-Definition-Choice,proto3" json:"ran_parameter_definition_choice,omitempty" aper:"choiceExt"`
}

func (x *RanparameterDefinition) Reset() {
	*x = RanparameterDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterDefinition) ProtoMessage() {}

func (x *RanparameterDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterDefinition.ProtoReflect.Descriptor instead.
func (*RanparameterDefinition) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{42}
}

func (x *RanparameterDefinition) GetRanParameterDefinitionChoice() *RanparameterDefinitionChoice {
	if x != nil {
		return x.RanParameterDefinitionChoice
	}
	return nil
}

// sequence from e2sm_rc.asn1:210
// {RANParameter-Definition-Choice}
type RanparameterDefinitionChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm_rc.asn1:210
	//
	// Types that are assignable to RanparameterDefinitionChoice:
	//	*RanparameterDefinitionChoice_ChoiceList
	//	*RanparameterDefinitionChoice_ChoiceStructure
	RanparameterDefinitionChoice isRanparameterDefinitionChoice_RanparameterDefinitionChoice `protobuf_oneof:"ranparameter_definition_choice"`
}

func (x *RanparameterDefinitionChoice) Reset() {
	*x = RanparameterDefinitionChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterDefinitionChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterDefinitionChoice) ProtoMessage() {}

func (x *RanparameterDefinitionChoice) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterDefinitionChoice.ProtoReflect.Descriptor instead.
func (*RanparameterDefinitionChoice) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{43}
}

func (m *RanparameterDefinitionChoice) GetRanparameterDefinitionChoice() isRanparameterDefinitionChoice_RanparameterDefinitionChoice {
	if m != nil {
		return m.RanparameterDefinitionChoice
	}
	return nil
}

func (x *RanparameterDefinitionChoice) GetChoiceList() *RanparameterDefinitionChoiceList {
	if x, ok := x.GetRanparameterDefinitionChoice().(*RanparameterDefinitionChoice_ChoiceList); ok {
		return x.ChoiceList
	}
	return nil
}

func (x *RanparameterDefinitionChoice) GetChoiceStructure() *RanparameterDefinitionChoiceStructure {
	if x, ok := x.GetRanparameterDefinitionChoice().(*RanparameterDefinitionChoice_ChoiceStructure); ok {
		return x.ChoiceStructure
	}
	return nil
}

type isRanparameterDefinitionChoice_RanparameterDefinitionChoice interface {
	isRanparameterDefinitionChoice_RanparameterDefinitionChoice()
}

type RanparameterDefinitionChoice_ChoiceList struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	ChoiceList *RanparameterDefinitionChoiceList `protobuf:"bytes,1,opt,name=choice_list,json=choiceLIST,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type RanparameterDefinitionChoice_ChoiceStructure struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	ChoiceStructure *RanparameterDefinitionChoiceStructure `protobuf:"bytes,2,opt,name=choice_structure,json=choiceSTRUCTURE,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

func (*RanparameterDefinitionChoice_ChoiceList) isRanparameterDefinitionChoice_RanparameterDefinitionChoice() {
}

func (*RanparameterDefinitionChoice_ChoiceStructure) isRanparameterDefinitionChoice_RanparameterDefinitionChoice() {
}

// sequence from e2sm_rc.asn1:216
// {RANParameter-Definition-Choice-LIST}
type RanparameterDefinitionChoiceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	RanParameterList []*RanparameterDefinitionChoiceListItem `protobuf:"bytes,1,rep,name=ran_parameter_list,json=ranParameter-List,proto3" json:"ran_parameter_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanparameterDefinitionChoiceList) Reset() {
	*x = RanparameterDefinitionChoiceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterDefinitionChoiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterDefinitionChoiceList) ProtoMessage() {}

func (x *RanparameterDefinitionChoiceList) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterDefinitionChoiceList.ProtoReflect.Descriptor instead.
func (*RanparameterDefinitionChoiceList) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{44}
}

func (x *RanparameterDefinitionChoiceList) GetRanParameterList() []*RanparameterDefinitionChoiceListItem {
	if x != nil {
		return x.RanParameterList
	}
	return nil
}

// sequence from e2sm_rc.asn1:221
// {RANParameter-Definition-Choice-LIST-Item}
type RanparameterDefinitionChoiceListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt"`
}

func (x *RanparameterDefinitionChoiceListItem) Reset() {
	*x = RanparameterDefinitionChoiceListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterDefinitionChoiceListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterDefinitionChoiceListItem) ProtoMessage() {}

func (x *RanparameterDefinitionChoiceListItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterDefinitionChoiceListItem.ProtoReflect.Descriptor instead.
func (*RanparameterDefinitionChoiceListItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{45}
}

func (x *RanparameterDefinitionChoiceListItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *RanparameterDefinitionChoiceListItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *RanparameterDefinitionChoiceListItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:228
// {RANParameter-Definition-Choice-STRUCTURE}
type RanparameterDefinitionChoiceStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	RanParameterStructure []*RanparameterDefinitionChoiceStructureItem `protobuf:"bytes,1,rep,name=ran_parameter_structure,json=ranParameter-STRUCTURE,proto3" json:"ran_parameter_structure,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanparameterDefinitionChoiceStructure) Reset() {
	*x = RanparameterDefinitionChoiceStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterDefinitionChoiceStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterDefinitionChoiceStructure) ProtoMessage() {}

func (x *RanparameterDefinitionChoiceStructure) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterDefinitionChoiceStructure.ProtoReflect.Descriptor instead.
func (*RanparameterDefinitionChoiceStructure) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{46}
}

func (x *RanparameterDefinitionChoiceStructure) GetRanParameterStructure() []*RanparameterDefinitionChoiceStructureItem {
	if x != nil {
		return x.RanParameterStructure
	}
	return nil
}

// sequence from e2sm_rc.asn1:233
// {RANParameter-Definition-Choice-STRUCTURE-Item}
type RanparameterDefinitionChoiceStructureItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt"`
}

func (x *RanparameterDefinitionChoiceStructureItem) Reset() {
	*x = RanparameterDefinitionChoiceStructureItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterDefinitionChoiceStructureItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterDefinitionChoiceStructureItem) ProtoMessage() {}

func (x *RanparameterDefinitionChoiceStructureItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterDefinitionChoiceStructureItem.ProtoReflect.Descriptor instead.
func (*RanparameterDefinitionChoiceStructureItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{47}
}

func (x *RanparameterDefinitionChoiceStructureItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *RanparameterDefinitionChoiceStructureItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *RanparameterDefinitionChoiceStructureItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:240
// {RANParameter-Value}
type RanparameterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm_rc.asn1:240
	//
	// Types that are assignable to RanparameterValue:
	//	*RanparameterValue_ValueBoolean
	//	*RanparameterValue_ValueInt
	//	*RanparameterValue_ValueReal
	//	*RanparameterValue_ValueBitS
	//	*RanparameterValue_ValueOctS
	//	*RanparameterValue_ValuePrintableString
	RanparameterValue isRanparameterValue_RanparameterValue `protobuf_oneof:"ranparameter_value"`
}

func (x *RanparameterValue) Reset() {
	*x = RanparameterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterValue) ProtoMessage() {}

func (x *RanparameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterValue.ProtoReflect.Descriptor instead.
func (*RanparameterValue) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{48}
}

func (m *RanparameterValue) GetRanparameterValue() isRanparameterValue_RanparameterValue {
	if m != nil {
		return m.RanparameterValue
	}
	return nil
}

func (x *RanparameterValue) GetValueBoolean() bool {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValueBoolean); ok {
		return x.ValueBoolean
	}
	return false
}

func (x *RanparameterValue) GetValueInt() int64 {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValueInt); ok {
		return x.ValueInt
	}
	return 0
}

func (x *RanparameterValue) GetValueReal() float32 {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValueReal); ok {
		return x.ValueReal
	}
	return 0
}

func (x *RanparameterValue) GetValueBitS() *asn1.BitString {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValueBitS); ok {
		return x.ValueBitS
	}
	return nil
}

func (x *RanparameterValue) GetValueOctS() []byte {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValueOctS); ok {
		return x.ValueOctS
	}
	return nil
}

func (x *RanparameterValue) GetValuePrintableString() string {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValuePrintableString); ok {
		return x.ValuePrintableString
	}
	return ""
}

type isRanparameterValue_RanparameterValue interface {
	isRanparameterValue_RanparameterValue()
}

type RanparameterValue_ValueBoolean struct {
	// @inject_tag: aper:"choiceIdx:1"
	ValueBoolean bool `protobuf:"varint,1,opt,name=value_boolean,json=valueBoolean,proto3,oneof" aper:"choiceIdx:1"`
}

type RanparameterValue_ValueInt struct {
	// @inject_tag: aper:"choiceIdx:2"
	ValueInt int64 `protobuf:"varint,2,opt,name=value_int,json=valueInt,proto3,oneof" aper:"choiceIdx:2"`
}

type RanparameterValue_ValueReal struct {
	// @inject_tag: aper:"choiceIdx:3"
	ValueReal float32 `protobuf:"fixed32,3,opt,name=value_real,json=valueReal,proto3,oneof" aper:"choiceIdx:3"`
}

type RanparameterValue_ValueBitS struct {
	// @inject_tag: aper:"choiceIdx:4"
	ValueBitS *asn1.BitString `protobuf:"bytes,4,opt,name=value_bit_s,json=valueBitS,proto3,oneof" aper:"choiceIdx:4"`
}

type RanparameterValue_ValueOctS struct {
	// @inject_tag: aper:"choiceIdx:5"
	ValueOctS []byte `protobuf:"bytes,5,opt,name=value_oct_s,json=valueOctS,proto3,oneof" aper:"choiceIdx:5"`
}

type RanparameterValue_ValuePrintableString struct {
	// @inject_tag: aper:"choiceIdx:6"
	ValuePrintableString string `protobuf:"bytes,6,opt,name=value_printable_string,json=valuePrintableString,proto3,oneof" aper:"choiceIdx:6"`
}

func (*RanparameterValue_ValueBoolean) isRanparameterValue_RanparameterValue() {}

func (*RanparameterValue_ValueInt) isRanparameterValue_RanparameterValue() {}

func (*RanparameterValue_ValueReal) isRanparameterValue_RanparameterValue() {}

func (*RanparameterValue_ValueBitS) isRanparameterValue_RanparameterValue() {}

func (*RanparameterValue_ValueOctS) isRanparameterValue_RanparameterValue() {}

func (*RanparameterValue_ValuePrintableString) isRanparameterValue_RanparameterValue() {}

// sequence from e2sm_rc.asn1:250
// {RANParameter-ValueType}
type RanparameterValueType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm_rc.asn1:250
	//
	// Types that are assignable to RanparameterValueType:
	//	*RanparameterValueType_RanPChoiceElementTrue
	//	*RanparameterValueType_RanPChoiceElementFalse
	//	*RanparameterValueType_RanPChoiceStructure
	//	*RanparameterValueType_RanPChoiceList
	RanparameterValueType isRanparameterValueType_RanparameterValueType `protobuf_oneof:"ranparameter_value_type"`
}

func (x *RanparameterValueType) Reset() {
	*x = RanparameterValueType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterValueType) ProtoMessage() {}

func (x *RanparameterValueType) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterValueType.ProtoReflect.Descriptor instead.
func (*RanparameterValueType) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{49}
}

func (m *RanparameterValueType) GetRanparameterValueType() isRanparameterValueType_RanparameterValueType {
	if m != nil {
		return m.RanparameterValueType
	}
	return nil
}

func (x *RanparameterValueType) GetRanPChoiceElementTrue() *RanparameterValueTypeChoiceElementTrue {
	if x, ok := x.GetRanparameterValueType().(*RanparameterValueType_RanPChoiceElementTrue); ok {
		return x.RanPChoiceElementTrue
	}
	return nil
}

func (x *RanparameterValueType) GetRanPChoiceElementFalse() *RanparameterValueTypeChoiceElementFalse {
	if x, ok := x.GetRanparameterValueType().(*RanparameterValueType_RanPChoiceElementFalse); ok {
		return x.RanPChoiceElementFalse
	}
	return nil
}

func (x *RanparameterValueType) GetRanPChoiceStructure() *RanparameterValueTypeChoiceStructure {
	if x, ok := x.GetRanparameterValueType().(*RanparameterValueType_RanPChoiceStructure); ok {
		return x.RanPChoiceStructure
	}
	return nil
}

func (x *RanparameterValueType) GetRanPChoiceList() *RanparameterValueTypeChoiceList {
	if x, ok := x.GetRanparameterValueType().(*RanparameterValueType_RanPChoiceList); ok {
		return x.RanPChoiceList
	}
	return nil
}

type isRanparameterValueType_RanparameterValueType interface {
	isRanparameterValueType_RanparameterValueType()
}

type RanparameterValueType_RanPChoiceElementTrue struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	RanPChoiceElementTrue *RanparameterValueTypeChoiceElementTrue `protobuf:"bytes,1,opt,name=ran_p_choice_element_true,json=ranP-Choice-ElementTrue,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type RanparameterValueType_RanPChoiceElementFalse struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	RanPChoiceElementFalse *RanparameterValueTypeChoiceElementFalse `protobuf:"bytes,2,opt,name=ran_p_choice_element_false,json=ranP-Choice-ElementFalse,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

type RanparameterValueType_RanPChoiceStructure struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt"
	RanPChoiceStructure *RanparameterValueTypeChoiceStructure `protobuf:"bytes,3,opt,name=ran_p_choice_structure,json=ranP-Choice-Structure,proto3,oneof" aper:"choiceIdx:3,valueExt"`
}

type RanparameterValueType_RanPChoiceList struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt"
	RanPChoiceList *RanparameterValueTypeChoiceList `protobuf:"bytes,4,opt,name=ran_p_choice_list,json=ranP-Choice-List,proto3,oneof" aper:"choiceIdx:4,valueExt"`
}

func (*RanparameterValueType_RanPChoiceElementTrue) isRanparameterValueType_RanparameterValueType() {}

func (*RanparameterValueType_RanPChoiceElementFalse) isRanparameterValueType_RanparameterValueType() {
}

func (*RanparameterValueType_RanPChoiceStructure) isRanparameterValueType_RanparameterValueType() {}

func (*RanparameterValueType_RanPChoiceList) isRanparameterValueType_RanparameterValueType() {}

// sequence from e2sm_rc.asn1:260
// {RANParameter-ValueType-Choice-ElementTrue}
type RanparameterValueTypeChoiceElementTrue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RanParameterValue *RanparameterValue `protobuf:"bytes,1,opt,name=ran_parameter_value,json=ranParameter-value,proto3" json:"ran_parameter_value,omitempty" aper:"choiceExt"`
}

func (x *RanparameterValueTypeChoiceElementTrue) Reset() {
	*x = RanparameterValueTypeChoiceElementTrue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterValueTypeChoiceElementTrue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterValueTypeChoiceElementTrue) ProtoMessage() {}

func (x *RanparameterValueTypeChoiceElementTrue) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterValueTypeChoiceElementTrue.ProtoReflect.Descriptor instead.
func (*RanparameterValueTypeChoiceElementTrue) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{50}
}

func (x *RanparameterValueTypeChoiceElementTrue) GetRanParameterValue() *RanparameterValue {
	if x != nil {
		return x.RanParameterValue
	}
	return nil
}

// sequence from e2sm_rc.asn1:265
// {RANParameter-ValueType-Choice-ElementFalse}
type RanparameterValueTypeChoiceElementFalse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional,choiceExt"
	RanParameterValue *RanparameterValue `protobuf:"bytes,1,opt,name=ran_parameter_value,json=ranParameter-value,proto3,oneof" json:"ran_parameter_value,omitempty" aper:"optional,choiceExt"`
}

func (x *RanparameterValueTypeChoiceElementFalse) Reset() {
	*x = RanparameterValueTypeChoiceElementFalse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterValueTypeChoiceElementFalse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterValueTypeChoiceElementFalse) ProtoMessage() {}

func (x *RanparameterValueTypeChoiceElementFalse) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterValueTypeChoiceElementFalse.ProtoReflect.Descriptor instead.
func (*RanparameterValueTypeChoiceElementFalse) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{51}
}

func (x *RanparameterValueTypeChoiceElementFalse) GetRanParameterValue() *RanparameterValue {
	if x != nil {
		return x.RanParameterValue
	}
	return nil
}

// sequence from e2sm_rc.asn1:271
// {RANParameter-ValueType-Choice-Structure}
type RanparameterValueTypeChoiceStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt"
	RanParameterStructure *RanparameterStructure `protobuf:"bytes,1,opt,name=ran_parameter_structure,json=ranParameter-Structure,proto3" json:"ran_parameter_structure,omitempty" aper:"valueExt"`
}

func (x *RanparameterValueTypeChoiceStructure) Reset() {
	*x = RanparameterValueTypeChoiceStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterValueTypeChoiceStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterValueTypeChoiceStructure) ProtoMessage() {}

func (x *RanparameterValueTypeChoiceStructure) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterValueTypeChoiceStructure.ProtoReflect.Descriptor instead.
func (*RanparameterValueTypeChoiceStructure) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{52}
}

func (x *RanparameterValueTypeChoiceStructure) GetRanParameterStructure() *RanparameterStructure {
	if x != nil {
		return x.RanParameterStructure
	}
	return nil
}

// sequence from e2sm_rc.asn1:276
// {RANParameter-ValueType-Choice-List}
type RanparameterValueTypeChoiceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt"
	RanParameterList *RanparameterList `protobuf:"bytes,1,opt,name=ran_parameter_list,json=ranParameter-List,proto3" json:"ran_parameter_list,omitempty" aper:"valueExt"`
}

func (x *RanparameterValueTypeChoiceList) Reset() {
	*x = RanparameterValueTypeChoiceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterValueTypeChoiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterValueTypeChoiceList) ProtoMessage() {}

func (x *RanparameterValueTypeChoiceList) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterValueTypeChoiceList.ProtoReflect.Descriptor instead.
func (*RanparameterValueTypeChoiceList) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{53}
}

func (x *RanparameterValueTypeChoiceList) GetRanParameterList() *RanparameterList {
	if x != nil {
		return x.RanParameterList
	}
	return nil
}

// sequence from e2sm_rc.asn1:282
// {RANParameter-STRUCTURE}
type RanparameterStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	SequenceOfRanParameters []*RanparameterStructureItem `protobuf:"bytes,1,rep,name=sequence_of_ran_parameters,json=sequence-of-ranParameters,proto3" json:"sequence_of_ran_parameters,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanparameterStructure) Reset() {
	*x = RanparameterStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterStructure) ProtoMessage() {}

func (x *RanparameterStructure) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterStructure.ProtoReflect.Descriptor instead.
func (*RanparameterStructure) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{54}
}

func (x *RanparameterStructure) GetSequenceOfRanParameters() []*RanparameterStructureItem {
	if x != nil {
		return x.SequenceOfRanParameters
	}
	return nil
}

// sequence from e2sm_rc.asn1:287
// {RANParameter-STRUCTURE-Item}
type RanparameterStructureItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId *RanparameterId `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	RanParameterValueType *RanparameterValueType `protobuf:"bytes,2,opt,name=ran_parameter_value_type,json=ranParameter-valueType,proto3" json:"ran_parameter_value_type,omitempty" aper:"choiceExt"`
}

func (x *RanparameterStructureItem) Reset() {
	*x = RanparameterStructureItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterStructureItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterStructureItem) ProtoMessage() {}

func (x *RanparameterStructureItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterStructureItem.ProtoReflect.Descriptor instead.
func (*RanparameterStructureItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{55}
}

func (x *RanparameterStructureItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *RanparameterStructureItem) GetRanParameterValueType() *RanparameterValueType {
	if x != nil {
		return x.RanParameterValueType
	}
	return nil
}

// sequence from e2sm_rc.asn1:293
// {RANParameter-LIST}
type RanparameterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	ListOfRanParameter []*RanparameterStructure `protobuf:"bytes,1,rep,name=list_of_ran_parameter,json=list-of-ranParameter,proto3" json:"list_of_ran_parameter,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanparameterList) Reset() {
	*x = RanparameterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterList) ProtoMessage() {}

func (x *RanparameterList) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterList.ProtoReflect.Descriptor instead.
func (*RanparameterList) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{56}
}

func (x *RanparameterList) GetListOfRanParameter() []*RanparameterStructure {
	if x != nil {
		return x.ListOfRanParameter
	}
	return nil
}

// sequence from e2sm_rc.asn1:300
// {RANParameter-Testing}
type RanparameterTesting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:255,valueExt"
	Value []*RanparameterTestingItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:255,valueExt"`
}

func (x *RanparameterTesting) Reset() {
	*x = RanparameterTesting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterTesting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterTesting) ProtoMessage() {}

func (x *RanparameterTesting) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterTesting.ProtoReflect.Descriptor instead.
func (*RanparameterTesting) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{57}
}

func (x *RanparameterTesting) GetValue() []*RanparameterTestingItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from e2sm_rc.asn1:301
// {RANParameter-TestingCondition}
type RanparameterTestingCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm_rc.asn1:301
	//
	// Types that are assignable to RanparameterTestingCondition:
	//	*RanparameterTestingCondition_RanPChoiceComparison
	//	*RanparameterTestingCondition_RanPChoicePresence
	RanparameterTestingCondition isRanparameterTestingCondition_RanparameterTestingCondition `protobuf_oneof:"ranparameter_testing_condition"`
}

func (x *RanparameterTestingCondition) Reset() {
	*x = RanparameterTestingCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterTestingCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterTestingCondition) ProtoMessage() {}

func (x *RanparameterTestingCondition) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterTestingCondition.ProtoReflect.Descriptor instead.
func (*RanparameterTestingCondition) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{58}
}

func (m *RanparameterTestingCondition) GetRanparameterTestingCondition() isRanparameterTestingCondition_RanparameterTestingCondition {
	if m != nil {
		return m.RanparameterTestingCondition
	}
	return nil
}

func (x *RanparameterTestingCondition) GetRanPChoiceComparison() RanPChoiceComparison {
	if x, ok := x.GetRanparameterTestingCondition().(*RanparameterTestingCondition_RanPChoiceComparison); ok {
		return x.RanPChoiceComparison
	}
	return RanPChoiceComparison_RAN_P_CHOICE_COMPARISON_EQUAL
}

func (x *RanparameterTestingCondition) GetRanPChoicePresence() RanPChoicePresence {
	if x, ok := x.GetRanparameterTestingCondition().(*RanparameterTestingCondition_RanPChoicePresence); ok {
		return x.RanPChoicePresence
	}
	return RanPChoicePresence_RAN_P_CHOICE_PRESENCE_PRESENT
}

type isRanparameterTestingCondition_RanparameterTestingCondition interface {
	isRanparameterTestingCondition_RanparameterTestingCondition()
}

type RanparameterTestingCondition_RanPChoiceComparison struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:5"
	RanPChoiceComparison RanPChoiceComparison `protobuf:"varint,1,opt,name=ran_p_choice_comparison,json=ranP-Choice-comparison,proto3,enum=e2sm_rc.v1.RanPChoiceComparison,oneof" aper:"choiceIdx:1,valueExt,valueLB:0,valueUB:5"`
}

type RanparameterTestingCondition_RanPChoicePresence struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:3"
	RanPChoicePresence RanPChoicePresence `protobuf:"varint,2,opt,name=ran_p_choice_presence,json=ranP-Choice-presence,proto3,enum=e2sm_rc.v1.RanPChoicePresence,oneof" aper:"choiceIdx:2,valueExt,valueLB:0,valueUB:3"`
}

func (*RanparameterTestingCondition_RanPChoiceComparison) isRanparameterTestingCondition_RanparameterTestingCondition() {
}

func (*RanparameterTestingCondition_RanPChoicePresence) isRanparameterTestingCondition_RanparameterTestingCondition() {
}

// sequence from e2sm_rc.asn1:307
// {RANParameter-Testing-Item}
type RanparameterTestingItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId *RanparameterId `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	RanParameterType *RanParameterType `protobuf:"bytes,2,opt,name=ran_parameter_type,json=ranParameter-Type,proto3" json:"ran_parameter_type,omitempty" aper:"choiceExt"`
}

func (x *RanparameterTestingItem) Reset() {
	*x = RanparameterTestingItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterTestingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterTestingItem) ProtoMessage() {}

func (x *RanparameterTestingItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterTestingItem.ProtoReflect.Descriptor instead.
func (*RanparameterTestingItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{59}
}

func (x *RanparameterTestingItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *RanparameterTestingItem) GetRanParameterType() *RanParameterType {
	if x != nil {
		return x.RanParameterType
	}
	return nil
}

type RanParameterType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RanParameterType:
	//	*RanParameterType_RanPChoiceList
	//	*RanParameterType_RanPChoiceStructure
	//	*RanParameterType_RanPChoiceElementTrue
	//	*RanParameterType_RanPChoiceElementFalse
	RanParameterType isRanParameterType_RanParameterType `protobuf_oneof:"ran_parameter_type"`
}

func (x *RanParameterType) Reset() {
	*x = RanParameterType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanParameterType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanParameterType) ProtoMessage() {}

func (x *RanParameterType) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanParameterType.ProtoReflect.Descriptor instead.
func (*RanParameterType) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{60}
}

func (m *RanParameterType) GetRanParameterType() isRanParameterType_RanParameterType {
	if m != nil {
		return m.RanParameterType
	}
	return nil
}

func (x *RanParameterType) GetRanPChoiceList() *RanparameterTestingItemChoiceList {
	if x, ok := x.GetRanParameterType().(*RanParameterType_RanPChoiceList); ok {
		return x.RanPChoiceList
	}
	return nil
}

func (x *RanParameterType) GetRanPChoiceStructure() *RanparameterTestingItemChoiceStructure {
	if x, ok := x.GetRanParameterType().(*RanParameterType_RanPChoiceStructure); ok {
		return x.RanPChoiceStructure
	}
	return nil
}

func (x *RanParameterType) GetRanPChoiceElementTrue() *RanparameterTestingItemChoiceElementTrue {
	if x, ok := x.GetRanParameterType().(*RanParameterType_RanPChoiceElementTrue); ok {
		return x.RanPChoiceElementTrue
	}
	return nil
}

func (x *RanParameterType) GetRanPChoiceElementFalse() *RanparameterTestingItemChoiceElementFalse {
	if x, ok := x.GetRanParameterType().(*RanParameterType_RanPChoiceElementFalse); ok {
		return x.RanPChoiceElementFalse
	}
	return nil
}

type isRanParameterType_RanParameterType interface {
	isRanParameterType_RanParameterType()
}

type RanParameterType_RanPChoiceList struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	RanPChoiceList *RanparameterTestingItemChoiceList `protobuf:"bytes,1,opt,name=ran_p_choice_list,json=ranPChoiceList,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type RanParameterType_RanPChoiceStructure struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	RanPChoiceStructure *RanparameterTestingItemChoiceStructure `protobuf:"bytes,2,opt,name=ran_p_choice_structure,json=ranPChoiceStructure,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

type RanParameterType_RanPChoiceElementTrue struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt"
	RanPChoiceElementTrue *RanparameterTestingItemChoiceElementTrue `protobuf:"bytes,3,opt,name=ran_p_choice_element_true,json=ranPChoiceElementTrue,proto3,oneof" aper:"choiceIdx:3,valueExt"`
}

type RanParameterType_RanPChoiceElementFalse struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt"
	RanPChoiceElementFalse *RanparameterTestingItemChoiceElementFalse `protobuf:"bytes,4,opt,name=ran_p_choice_element_false,json=ranPChoiceElementFalse,proto3,oneof" aper:"choiceIdx:4,valueExt"`
}

func (*RanParameterType_RanPChoiceList) isRanParameterType_RanParameterType() {}

func (*RanParameterType_RanPChoiceStructure) isRanParameterType_RanParameterType() {}

func (*RanParameterType_RanPChoiceElementTrue) isRanParameterType_RanParameterType() {}

func (*RanParameterType_RanPChoiceElementFalse) isRanParameterType_RanParameterType() {}

// sequence from e2sm_rc.asn1:319
// {RANParameter-Testing-Item-Choice-List}
type RanparameterTestingItemChoiceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterList *RanparameterTestingList `protobuf:"bytes,1,opt,name=ran_parameter_list,json=ranParameter-List,proto3" json:"ran_parameter_list,omitempty"`
}

func (x *RanparameterTestingItemChoiceList) Reset() {
	*x = RanparameterTestingItemChoiceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterTestingItemChoiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterTestingItemChoiceList) ProtoMessage() {}

func (x *RanparameterTestingItemChoiceList) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterTestingItemChoiceList.ProtoReflect.Descriptor instead.
func (*RanparameterTestingItemChoiceList) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{61}
}

func (x *RanparameterTestingItemChoiceList) GetRanParameterList() *RanparameterTestingList {
	if x != nil {
		return x.RanParameterList
	}
	return nil
}

// sequence from e2sm_rc.asn1:324
// {RANParameter-Testing-Item-Choice-Structure}
type RanparameterTestingItemChoiceStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterStructure *RanparameterTestingStructure `protobuf:"bytes,1,opt,name=ran_parameter_structure,json=ranParameter-Structure,proto3" json:"ran_parameter_structure,omitempty"`
}

func (x *RanparameterTestingItemChoiceStructure) Reset() {
	*x = RanparameterTestingItemChoiceStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterTestingItemChoiceStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterTestingItemChoiceStructure) ProtoMessage() {}

func (x *RanparameterTestingItemChoiceStructure) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterTestingItemChoiceStructure.ProtoReflect.Descriptor instead.
func (*RanparameterTestingItemChoiceStructure) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{62}
}

func (x *RanparameterTestingItemChoiceStructure) GetRanParameterStructure() *RanparameterTestingStructure {
	if x != nil {
		return x.RanParameterStructure
	}
	return nil
}

// sequence from e2sm_rc.asn1:329
// {RANParameter-Testing-Item-Choice-ElementTrue}
type RanparameterTestingItemChoiceElementTrue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RanParameterValue *RanparameterValue `protobuf:"bytes,1,opt,name=ran_parameter_value,json=ranParameter-value,proto3" json:"ran_parameter_value,omitempty" aper:"choiceExt"`
}

func (x *RanparameterTestingItemChoiceElementTrue) Reset() {
	*x = RanparameterTestingItemChoiceElementTrue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterTestingItemChoiceElementTrue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterTestingItemChoiceElementTrue) ProtoMessage() {}

func (x *RanparameterTestingItemChoiceElementTrue) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterTestingItemChoiceElementTrue.ProtoReflect.Descriptor instead.
func (*RanparameterTestingItemChoiceElementTrue) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{63}
}

func (x *RanparameterTestingItemChoiceElementTrue) GetRanParameterValue() *RanparameterValue {
	if x != nil {
		return x.RanParameterValue
	}
	return nil
}

// sequence from e2sm_rc.asn1:334
// {RANParameter-Testing-Item-Choice-ElementFalse}
type RanparameterTestingItemChoiceElementFalse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RanParameterTestCondition *RanparameterTestingCondition `protobuf:"bytes,1,opt,name=ran_parameter_test_condition,json=ranParameter-TestCondition,proto3" json:"ran_parameter_test_condition,omitempty" aper:"choiceExt"`
	// @inject_tag: aper:"optional,choiceExt"
	RanParameterValue *RanparameterValue `protobuf:"bytes,2,opt,name=ran_parameter_value,json=ranParameter-Value,proto3,oneof" json:"ran_parameter_value,omitempty" aper:"optional,choiceExt"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
	LogicalOr *LogicalOr `protobuf:"varint,3,opt,name=logical_or,json=logicalOR,proto3,enum=e2sm_rc.v1.LogicalOr,oneof" json:"logical_or,omitempty" aper:"optional,valueLB:0,valueUB:1,valueExt"`
}

func (x *RanparameterTestingItemChoiceElementFalse) Reset() {
	*x = RanparameterTestingItemChoiceElementFalse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterTestingItemChoiceElementFalse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterTestingItemChoiceElementFalse) ProtoMessage() {}

func (x *RanparameterTestingItemChoiceElementFalse) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterTestingItemChoiceElementFalse.ProtoReflect.Descriptor instead.
func (*RanparameterTestingItemChoiceElementFalse) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{64}
}

func (x *RanparameterTestingItemChoiceElementFalse) GetRanParameterTestCondition() *RanparameterTestingCondition {
	if x != nil {
		return x.RanParameterTestCondition
	}
	return nil
}

func (x *RanparameterTestingItemChoiceElementFalse) GetRanParameterValue() *RanparameterValue {
	if x != nil {
		return x.RanParameterValue
	}
	return nil
}

func (x *RanparameterTestingItemChoiceElementFalse) GetLogicalOr() LogicalOr {
	if x != nil && x.LogicalOr != nil {
		return *x.LogicalOr
	}
	return LogicalOr_LOGICAL_OR_TRUE
}

// sequence from e2sm_rc.asn1:342
// {RANParameter-Testing-LIST}
type RanparameterTestingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	Value []*RanparameterTestingItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanparameterTestingList) Reset() {
	*x = RanparameterTestingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterTestingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterTestingList) ProtoMessage() {}

func (x *RanparameterTestingList) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterTestingList.ProtoReflect.Descriptor instead.
func (*RanparameterTestingList) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{65}
}

func (x *RanparameterTestingList) GetValue() []*RanparameterTestingItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// sequence from e2sm_rc.asn1:352
// {RANParameter-Testing-STRUCTURE}
type RanparameterTestingStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	Value []*RanparameterTestingItem `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanparameterTestingStructure) Reset() {
	*x = RanparameterTestingStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterTestingStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterTestingStructure) ProtoMessage() {}

func (x *RanparameterTestingStructure) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterTestingStructure.ProtoReflect.Descriptor instead.
func (*RanparameterTestingStructure) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{66}
}

func (x *RanparameterTestingStructure) GetValue() []*RanparameterTestingItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// range of Integer from e2sm_rc.asn1:352
// {RAN-CallProcess-ID}
type RanCallProcessId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:232,valueExt"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:232,valueExt"`
}

func (x *RanCallProcessId) Reset() {
	*x = RanCallProcessId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanCallProcessId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanCallProcessId) ProtoMessage() {}

func (x *RanCallProcessId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanCallProcessId.ProtoReflect.Descriptor instead.
func (*RanCallProcessId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{67}
}

func (x *RanCallProcessId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from e2sm_rc.asn1:354
// {RIC-CallProcessType-ID}
type RicCallProcessTypeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:65535,valueExt"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:65535,valueExt"`
}

func (x *RicCallProcessTypeId) Reset() {
	*x = RicCallProcessTypeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicCallProcessTypeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicCallProcessTypeId) ProtoMessage() {}

func (x *RicCallProcessTypeId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicCallProcessTypeId.ProtoReflect.Descriptor instead.
func (*RicCallProcessTypeId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{68}
}

func (x *RicCallProcessTypeId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RicCallProcessTypeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:150,sizeExt"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:150,sizeExt"`
}

func (x *RicCallProcessTypeName) Reset() {
	*x = RicCallProcessTypeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicCallProcessTypeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicCallProcessTypeName) ProtoMessage() {}

func (x *RicCallProcessTypeName) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicCallProcessTypeName.ProtoReflect.Descriptor instead.
func (*RicCallProcessTypeName) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{69}
}

func (x *RicCallProcessTypeName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// range of Integer from e2sm_rc.asn1:358
// {RIC-CallProcessBreakpoint-ID}
type RicCallProcessBreakpointId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:65535,valueExt"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:65535,valueExt"`
}

func (x *RicCallProcessBreakpointId) Reset() {
	*x = RicCallProcessBreakpointId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicCallProcessBreakpointId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicCallProcessBreakpointId) ProtoMessage() {}

func (x *RicCallProcessBreakpointId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicCallProcessBreakpointId.ProtoReflect.Descriptor instead.
func (*RicCallProcessBreakpointId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{70}
}

func (x *RicCallProcessBreakpointId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RicCallProcessBreakpointName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:150,sizeExt"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:150,sizeExt"`
}

func (x *RicCallProcessBreakpointName) Reset() {
	*x = RicCallProcessBreakpointName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicCallProcessBreakpointName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicCallProcessBreakpointName) ProtoMessage() {}

func (x *RicCallProcessBreakpointName) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicCallProcessBreakpointName.ProtoReflect.Descriptor instead.
func (*RicCallProcessBreakpointName) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{71}
}

func (x *RicCallProcessBreakpointName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// range of Integer from e2sm_rc.asn1:362
// {RIC-ControlAction-ID}
type RicControlActionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:65535,valueExt"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:65535,valueExt"`
}

func (x *RicControlActionId) Reset() {
	*x = RicControlActionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicControlActionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicControlActionId) ProtoMessage() {}

func (x *RicControlActionId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicControlActionId.ProtoReflect.Descriptor instead.
func (*RicControlActionId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{72}
}

func (x *RicControlActionId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RicControlActionName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:150,sizeExt"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:150,sizeExt"`
}

func (x *RicControlActionName) Reset() {
	*x = RicControlActionName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicControlActionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicControlActionName) ProtoMessage() {}

func (x *RicControlActionName) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicControlActionName.ProtoReflect.Descriptor instead.
func (*RicControlActionName) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{73}
}

func (x *RicControlActionName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// range of Integer from e2sm_rc.asn1:366
// {RIC-EventTriggerCondition-ID}
type RicEventTriggerConditionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:65535,valueExt"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:65535,valueExt"`
}

func (x *RicEventTriggerConditionId) Reset() {
	*x = RicEventTriggerConditionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicEventTriggerConditionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicEventTriggerConditionId) ProtoMessage() {}

func (x *RicEventTriggerConditionId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicEventTriggerConditionId.ProtoReflect.Descriptor instead.
func (*RicEventTriggerConditionId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{74}
}

func (x *RicEventTriggerConditionId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from e2sm_rc.asn1:368
// {RIC-EventTrigger-UE-ID}
type RicEventTriggerUeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:65535,valueExt"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:65535,valueExt"`
}

func (x *RicEventTriggerUeId) Reset() {
	*x = RicEventTriggerUeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicEventTriggerUeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicEventTriggerUeId) ProtoMessage() {}

func (x *RicEventTriggerUeId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicEventTriggerUeId.ProtoReflect.Descriptor instead.
func (*RicEventTriggerUeId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{75}
}

func (x *RicEventTriggerUeId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from e2sm_rc.asn1:370
// {RIC-EventTrigger-UEevent-ID}
type RicEventTriggerUeeventId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:65535,valueExt"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:65535,valueExt"`
}

func (x *RicEventTriggerUeeventId) Reset() {
	*x = RicEventTriggerUeeventId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicEventTriggerUeeventId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicEventTriggerUeeventId) ProtoMessage() {}

func (x *RicEventTriggerUeeventId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicEventTriggerUeeventId.ProtoReflect.Descriptor instead.
func (*RicEventTriggerUeeventId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{76}
}

func (x *RicEventTriggerUeeventId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from e2sm_rc.asn1:372
// {RIC-EventTrigger-Cell-ID}
type RicEventTriggerCellId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:65535,valueExt"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:65535,valueExt"`
}

func (x *RicEventTriggerCellId) Reset() {
	*x = RicEventTriggerCellId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicEventTriggerCellId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicEventTriggerCellId) ProtoMessage() {}

func (x *RicEventTriggerCellId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicEventTriggerCellId.ProtoReflect.Descriptor instead.
func (*RicEventTriggerCellId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{77}
}

func (x *RicEventTriggerCellId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from e2sm_rc.asn1:374
// {RIC-InsertIndication-ID}
type RicInsertIndicationId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:65535,valueExt"
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" aper:"valueLB:1,valueUB:65535,valueExt"`
}

func (x *RicInsertIndicationId) Reset() {
	*x = RicInsertIndicationId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicInsertIndicationId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicInsertIndicationId) ProtoMessage() {}

func (x *RicInsertIndicationId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicInsertIndicationId.ProtoReflect.Descriptor instead.
func (*RicInsertIndicationId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{78}
}

func (x *RicInsertIndicationId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RicInsertIndicationName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:150,sizeExt"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" aper:"sizeLB:1,sizeUB:150,sizeExt"`
}

func (x *RicInsertIndicationName) Reset() {
	*x = RicInsertIndicationName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicInsertIndicationName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicInsertIndicationName) ProtoMessage() {}

func (x *RicInsertIndicationName) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicInsertIndicationName.ProtoReflect.Descriptor instead.
func (*RicInsertIndicationName) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{79}
}

func (x *RicInsertIndicationName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// sequence from e2sm_rc.asn1:379
// {RIC-PolicyAction}
type RicPolicyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicPolicyActionId *RicControlActionId `protobuf:"bytes,1,opt,name=ric_policy_action_id,json=ric-PolicyAction-ID,proto3" json:"ric_policy_action_id,omitempty"`
	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	RanParametersList []*RicPolicyActionRanparameterItem `protobuf:"bytes,2,rep,name=ran_parameters_list,json=ranParameters-List,proto3" json:"ran_parameters_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RicPolicyAction) Reset() {
	*x = RicPolicyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicPolicyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicPolicyAction) ProtoMessage() {}

func (x *RicPolicyAction) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicPolicyAction.ProtoReflect.Descriptor instead.
func (*RicPolicyAction) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{80}
}

func (x *RicPolicyAction) GetRicPolicyActionId() *RicControlActionId {
	if x != nil {
		return x.RicPolicyActionId
	}
	return nil
}

func (x *RicPolicyAction) GetRanParametersList() []*RicPolicyActionRanparameterItem {
	if x != nil {
		return x.RanParametersList
	}
	return nil
}

// sequence from e2sm_rc.asn1:386
// {RIC-PolicyAction-RANParameter-Item}
type RicPolicyActionRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId *RanparameterId `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	RanParameterValueType *RanparameterValueType `protobuf:"bytes,2,opt,name=ran_parameter_value_type,json=ranParameter-valueType,proto3" json:"ran_parameter_value_type,omitempty" aper:"choiceExt"`
}

func (x *RicPolicyActionRanparameterItem) Reset() {
	*x = RicPolicyActionRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicPolicyActionRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicPolicyActionRanparameterItem) ProtoMessage() {}

func (x *RicPolicyActionRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicPolicyActionRanparameterItem.ProtoReflect.Descriptor instead.
func (*RicPolicyActionRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{81}
}

func (x *RicPolicyActionRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *RicPolicyActionRanparameterItem) GetRanParameterValueType() *RanparameterValueType {
	if x != nil {
		return x.RanParameterValueType
	}
	return nil
}

// sequence from e2sm_rc.asn1:409
// {E2SM-RC-EventTrigger}
// @inject_tag: aper:"valueExt"
type E2SmRcEventTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RicEventTriggerFormats *RicEventTriggerFormats `protobuf:"bytes,1,opt,name=ric_event_trigger_formats,json=ric-eventTrigger-formats,proto3" json:"ric_event_trigger_formats,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcEventTrigger) Reset() {
	*x = E2SmRcEventTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcEventTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcEventTrigger) ProtoMessage() {}

func (x *E2SmRcEventTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcEventTrigger.ProtoReflect.Descriptor instead.
func (*E2SmRcEventTrigger) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{82}
}

func (x *E2SmRcEventTrigger) GetRicEventTriggerFormats() *RicEventTriggerFormats {
	if x != nil {
		return x.RicEventTriggerFormats
	}
	return nil
}

type RicEventTriggerFormats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RicEventTriggerFormats:
	//	*RicEventTriggerFormats_EventTriggerFormat1
	//	*RicEventTriggerFormats_EventTriggerFormat2
	//	*RicEventTriggerFormats_EventTriggerFormat3
	//	*RicEventTriggerFormats_EventTriggerFormat4
	//	*RicEventTriggerFormats_EventTriggerFormat5
	RicEventTriggerFormats isRicEventTriggerFormats_RicEventTriggerFormats `protobuf_oneof:"ric_event_trigger_formats"`
}

func (x *RicEventTriggerFormats) Reset() {
	*x = RicEventTriggerFormats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicEventTriggerFormats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicEventTriggerFormats) ProtoMessage() {}

func (x *RicEventTriggerFormats) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicEventTriggerFormats.ProtoReflect.Descriptor instead.
func (*RicEventTriggerFormats) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{83}
}

func (m *RicEventTriggerFormats) GetRicEventTriggerFormats() isRicEventTriggerFormats_RicEventTriggerFormats {
	if m != nil {
		return m.RicEventTriggerFormats
	}
	return nil
}

func (x *RicEventTriggerFormats) GetEventTriggerFormat1() *E2SmRcEventTriggerFormat1 {
	if x, ok := x.GetRicEventTriggerFormats().(*RicEventTriggerFormats_EventTriggerFormat1); ok {
		return x.EventTriggerFormat1
	}
	return nil
}

func (x *RicEventTriggerFormats) GetEventTriggerFormat2() *E2SmRcEventTriggerFormat2 {
	if x, ok := x.GetRicEventTriggerFormats().(*RicEventTriggerFormats_EventTriggerFormat2); ok {
		return x.EventTriggerFormat2
	}
	return nil
}

func (x *RicEventTriggerFormats) GetEventTriggerFormat3() *E2SmRcEventTriggerFormat3 {
	if x, ok := x.GetRicEventTriggerFormats().(*RicEventTriggerFormats_EventTriggerFormat3); ok {
		return x.EventTriggerFormat3
	}
	return nil
}

func (x *RicEventTriggerFormats) GetEventTriggerFormat4() *E2SmRcEventTriggerFormat4 {
	if x, ok := x.GetRicEventTriggerFormats().(*RicEventTriggerFormats_EventTriggerFormat4); ok {
		return x.EventTriggerFormat4
	}
	return nil
}

func (x *RicEventTriggerFormats) GetEventTriggerFormat5() *E2SmRcEventTriggerFormat5 {
	if x, ok := x.GetRicEventTriggerFormats().(*RicEventTriggerFormats_EventTriggerFormat5); ok {
		return x.EventTriggerFormat5
	}
	return nil
}

type isRicEventTriggerFormats_RicEventTriggerFormats interface {
	isRicEventTriggerFormats_RicEventTriggerFormats()
}

type RicEventTriggerFormats_EventTriggerFormat1 struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	EventTriggerFormat1 *E2SmRcEventTriggerFormat1 `protobuf:"bytes,1,opt,name=event_trigger_format1,json=eventTriggerFormat1,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type RicEventTriggerFormats_EventTriggerFormat2 struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	EventTriggerFormat2 *E2SmRcEventTriggerFormat2 `protobuf:"bytes,2,opt,name=event_trigger_format2,json=eventTriggerFormat2,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

type RicEventTriggerFormats_EventTriggerFormat3 struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt"
	EventTriggerFormat3 *E2SmRcEventTriggerFormat3 `protobuf:"bytes,3,opt,name=event_trigger_format3,json=eventTriggerFormat3,proto3,oneof" aper:"choiceIdx:3,valueExt"`
}

type RicEventTriggerFormats_EventTriggerFormat4 struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt"
	EventTriggerFormat4 *E2SmRcEventTriggerFormat4 `protobuf:"bytes,4,opt,name=event_trigger_format4,json=eventTriggerFormat4,proto3,oneof" aper:"choiceIdx:4,valueExt"`
}

type RicEventTriggerFormats_EventTriggerFormat5 struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt"
	EventTriggerFormat5 *E2SmRcEventTriggerFormat5 `protobuf:"bytes,5,opt,name=event_trigger_format5,json=eventTriggerFormat5,proto3,oneof" aper:"choiceIdx:5,valueExt"`
}

func (*RicEventTriggerFormats_EventTriggerFormat1) isRicEventTriggerFormats_RicEventTriggerFormats() {
}

func (*RicEventTriggerFormats_EventTriggerFormat2) isRicEventTriggerFormats_RicEventTriggerFormats() {
}

func (*RicEventTriggerFormats_EventTriggerFormat3) isRicEventTriggerFormats_RicEventTriggerFormats() {
}

func (*RicEventTriggerFormats_EventTriggerFormat4) isRicEventTriggerFormats_RicEventTriggerFormats() {
}

func (*RicEventTriggerFormats_EventTriggerFormat5) isRicEventTriggerFormats_RicEventTriggerFormats() {
}

// sequence from e2sm_rc.asn1:414
// {E2SM-RC-EventTrigger-Format1}
type E2SmRcEventTriggerFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	MessageList []*E2SmRcEventTriggerFormat1Item `protobuf:"bytes,1,rep,name=message_list,json=message-List,proto3" json:"message_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	GlobalAssociatedUeinfo *EventTriggerUeInfo `protobuf:"bytes,2,opt,name=global_associated_ueinfo,json=globalAssociatedUEInfo,proto3,oneof" json:"global_associated_ueinfo,omitempty" aper:"optional,valueExt"`
}

func (x *E2SmRcEventTriggerFormat1) Reset() {
	*x = E2SmRcEventTriggerFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcEventTriggerFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcEventTriggerFormat1) ProtoMessage() {}

func (x *E2SmRcEventTriggerFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcEventTriggerFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcEventTriggerFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{84}
}

func (x *E2SmRcEventTriggerFormat1) GetMessageList() []*E2SmRcEventTriggerFormat1Item {
	if x != nil {
		return x.MessageList
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat1) GetGlobalAssociatedUeinfo() *EventTriggerUeInfo {
	if x != nil {
		return x.GlobalAssociatedUeinfo
	}
	return nil
}

// sequence from e2sm_rc.asn1:420
// {E2SM-RC-EventTrigger-Format1-Item}
type E2SmRcEventTriggerFormat1Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicEventTriggerConditionId *RicEventTriggerConditionId `protobuf:"bytes,1,opt,name=ric_event_trigger_condition_id,json=ric-eventTriggerCondition-ID,proto3" json:"ric_event_trigger_condition_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	MessageType *MessageTypeChoice `protobuf:"bytes,2,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty" aper:"choiceExt"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
	MessageDirection *MessageDirection `protobuf:"varint,3,opt,name=message_direction,json=messageDirection,proto3,enum=e2sm_rc.v1.MessageDirection,oneof" json:"message_direction,omitempty" aper:"optional,valueLB:0,valueUB:1,valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	AssociatedUeinfo *EventTriggerUeInfo `protobuf:"bytes,4,opt,name=associated_ueinfo,json=associatedUEInfo,proto3,oneof" json:"associated_ueinfo,omitempty" aper:"optional,valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	AssociatedUeevent *EventTriggerUeeventInfo `protobuf:"bytes,5,opt,name=associated_ueevent,json=associatedUEEvent,proto3,oneof" json:"associated_ueevent,omitempty" aper:"optional,valueExt"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
	LogicalOr *LogicalOr `protobuf:"varint,6,opt,name=logical_or,json=logicalOR,proto3,enum=e2sm_rc.v1.LogicalOr,oneof" json:"logical_or,omitempty" aper:"optional,valueLB:0,valueUB:1,valueExt"`
}

func (x *E2SmRcEventTriggerFormat1Item) Reset() {
	*x = E2SmRcEventTriggerFormat1Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcEventTriggerFormat1Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcEventTriggerFormat1Item) ProtoMessage() {}

func (x *E2SmRcEventTriggerFormat1Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcEventTriggerFormat1Item.ProtoReflect.Descriptor instead.
func (*E2SmRcEventTriggerFormat1Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{85}
}

func (x *E2SmRcEventTriggerFormat1Item) GetRicEventTriggerConditionId() *RicEventTriggerConditionId {
	if x != nil {
		return x.RicEventTriggerConditionId
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat1Item) GetMessageType() *MessageTypeChoice {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat1Item) GetMessageDirection() MessageDirection {
	if x != nil && x.MessageDirection != nil {
		return *x.MessageDirection
	}
	return MessageDirection_MESSAGE_DIRECTION_INCOMING
}

func (x *E2SmRcEventTriggerFormat1Item) GetAssociatedUeinfo() *EventTriggerUeInfo {
	if x != nil {
		return x.AssociatedUeinfo
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat1Item) GetAssociatedUeevent() *EventTriggerUeeventInfo {
	if x != nil {
		return x.AssociatedUeevent
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat1Item) GetLogicalOr() LogicalOr {
	if x != nil && x.LogicalOr != nil {
		return *x.LogicalOr
	}
	return LogicalOr_LOGICAL_OR_TRUE
}

// sequence from e2sm_rc.asn1:431
// {MessageType-Choice}
type MessageTypeChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm_rc.asn1:431
	//
	// Types that are assignable to MessageTypeChoice:
	//	*MessageTypeChoice_MessageTypeChoiceNi
	//	*MessageTypeChoice_MessageTypeChoiceRrc
	MessageTypeChoice isMessageTypeChoice_MessageTypeChoice `protobuf_oneof:"message_type_choice"`
}

func (x *MessageTypeChoice) Reset() {
	*x = MessageTypeChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTypeChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTypeChoice) ProtoMessage() {}

func (x *MessageTypeChoice) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTypeChoice.ProtoReflect.Descriptor instead.
func (*MessageTypeChoice) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{86}
}

func (m *MessageTypeChoice) GetMessageTypeChoice() isMessageTypeChoice_MessageTypeChoice {
	if m != nil {
		return m.MessageTypeChoice
	}
	return nil
}

func (x *MessageTypeChoice) GetMessageTypeChoiceNi() *MessageTypeChoiceNi {
	if x, ok := x.GetMessageTypeChoice().(*MessageTypeChoice_MessageTypeChoiceNi); ok {
		return x.MessageTypeChoiceNi
	}
	return nil
}

func (x *MessageTypeChoice) GetMessageTypeChoiceRrc() *MessageTypeChoiceRrc {
	if x, ok := x.GetMessageTypeChoice().(*MessageTypeChoice_MessageTypeChoiceRrc); ok {
		return x.MessageTypeChoiceRrc
	}
	return nil
}

type isMessageTypeChoice_MessageTypeChoice interface {
	isMessageTypeChoice_MessageTypeChoice()
}

type MessageTypeChoice_MessageTypeChoiceNi struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	MessageTypeChoiceNi *MessageTypeChoiceNi `protobuf:"bytes,1,opt,name=message_type_choice_ni,json=messageType-Choice-NI,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type MessageTypeChoice_MessageTypeChoiceRrc struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	MessageTypeChoiceRrc *MessageTypeChoiceRrc `protobuf:"bytes,2,opt,name=message_type_choice_rrc,json=messageType-Choice-RRC,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

func (*MessageTypeChoice_MessageTypeChoiceNi) isMessageTypeChoice_MessageTypeChoice() {}

func (*MessageTypeChoice_MessageTypeChoiceRrc) isMessageTypeChoice_MessageTypeChoice() {}

// sequence from e2sm_rc.asn1:438
// {MessageType-Choice-NI}
type MessageTypeChoiceNi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:6,valueExt"
	NIType e2sm_common_ies.InterfaceType `protobuf:"varint,1,opt,name=n_i_type,json=nI-Type,proto3,enum=e2sm_rc.v1.InterfaceType" json:"n_i_type,omitempty" aper:"valueLB:0,valueUB:6,valueExt"`
	// @inject_tag: aper:"optional,choiceExt"
	NIIdentifier *e2sm_common_ies.InterfaceIdentifier `protobuf:"bytes,2,opt,name=n_i_identifier,json=nI-Identifier,proto3,oneof" json:"n_i_identifier,omitempty" aper:"optional,choiceExt"`
	// @inject_tag: aper:"optional,valueExt"
	NIMessage *e2sm_common_ies.InterfaceMessageId `protobuf:"bytes,3,opt,name=n_i_message,json=nI-Message,proto3,oneof" json:"n_i_message,omitempty" aper:"optional,valueExt"`
}

func (x *MessageTypeChoiceNi) Reset() {
	*x = MessageTypeChoiceNi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTypeChoiceNi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTypeChoiceNi) ProtoMessage() {}

func (x *MessageTypeChoiceNi) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTypeChoiceNi.ProtoReflect.Descriptor instead.
func (*MessageTypeChoiceNi) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{87}
}

func (x *MessageTypeChoiceNi) GetNIType() e2sm_common_ies.InterfaceType {
	if x != nil {
		return x.NIType
	}
	return e2sm_common_ies.InterfaceType(0)
}

func (x *MessageTypeChoiceNi) GetNIIdentifier() *e2sm_common_ies.InterfaceIdentifier {
	if x != nil {
		return x.NIIdentifier
	}
	return nil
}

func (x *MessageTypeChoiceNi) GetNIMessage() *e2sm_common_ies.InterfaceMessageId {
	if x != nil {
		return x.NIMessage
	}
	return nil
}

// sequence from e2sm_rc.asn1:445
// {MessageType-Choice-RRC}
type MessageTypeChoiceRrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt"
	RRcMessage *e2sm_common_ies.RrcMessageId `protobuf:"bytes,1,opt,name=r_rc_message,json=rRC-Message,proto3" json:"r_rc_message,omitempty" aper:"valueExt"`
}

func (x *MessageTypeChoiceRrc) Reset() {
	*x = MessageTypeChoiceRrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTypeChoiceRrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTypeChoiceRrc) ProtoMessage() {}

func (x *MessageTypeChoiceRrc) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTypeChoiceRrc.ProtoReflect.Descriptor instead.
func (*MessageTypeChoiceRrc) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{88}
}

func (x *MessageTypeChoiceRrc) GetRRcMessage() *e2sm_common_ies.RrcMessageId {
	if x != nil {
		return x.RRcMessage
	}
	return nil
}

// sequence from e2sm_rc.asn1:451
// {E2SM-RC-EventTrigger-Format2}
type E2SmRcEventTriggerFormat2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicCallProcessTypeId       *RicCallProcessTypeId       `protobuf:"bytes,1,opt,name=ric_call_process_type_id,json=ric-callProcessType-ID,proto3" json:"ric_call_process_type_id,omitempty"`
	RicCallProcessBreakpointId *RicCallProcessBreakpointId `protobuf:"bytes,2,opt,name=ric_call_process_breakpoint_id,json=ric-callProcessBreakpoint-ID,proto3" json:"ric_call_process_breakpoint_id,omitempty"`
	// @inject_tag: aper:"optional"
	AssociatedE2NodeInfo *RanparameterTesting `protobuf:"bytes,3,opt,name=associated_e2_node_info,json=associatedE2NodeInfo,proto3,oneof" json:"associated_e2_node_info,omitempty" aper:"optional"`
	// @inject_tag: aper:"optional,valueExt"
	AssociatedUeinfo *EventTriggerUeInfo `protobuf:"bytes,4,opt,name=associated_ueinfo,json=associatedUEInfo,proto3,oneof" json:"associated_ueinfo,omitempty" aper:"optional,valueExt"`
}

func (x *E2SmRcEventTriggerFormat2) Reset() {
	*x = E2SmRcEventTriggerFormat2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcEventTriggerFormat2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcEventTriggerFormat2) ProtoMessage() {}

func (x *E2SmRcEventTriggerFormat2) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcEventTriggerFormat2.ProtoReflect.Descriptor instead.
func (*E2SmRcEventTriggerFormat2) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{89}
}

func (x *E2SmRcEventTriggerFormat2) GetRicCallProcessTypeId() *RicCallProcessTypeId {
	if x != nil {
		return x.RicCallProcessTypeId
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat2) GetRicCallProcessBreakpointId() *RicCallProcessBreakpointId {
	if x != nil {
		return x.RicCallProcessBreakpointId
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat2) GetAssociatedE2NodeInfo() *RanparameterTesting {
	if x != nil {
		return x.AssociatedE2NodeInfo
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat2) GetAssociatedUeinfo() *EventTriggerUeInfo {
	if x != nil {
		return x.AssociatedUeinfo
	}
	return nil
}

// sequence from e2sm_rc.asn1:460
// {E2SM-RC-EventTrigger-Format3}
type E2SmRcEventTriggerFormat3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	E2NodeInfoChangeList []*E2SmRcEventTriggerFormat3Item `protobuf:"bytes,1,rep,name=e2_node_info_change_list,json=e2NodeInfoChange-List,proto3" json:"e2_node_info_change_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *E2SmRcEventTriggerFormat3) Reset() {
	*x = E2SmRcEventTriggerFormat3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcEventTriggerFormat3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcEventTriggerFormat3) ProtoMessage() {}

func (x *E2SmRcEventTriggerFormat3) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcEventTriggerFormat3.ProtoReflect.Descriptor instead.
func (*E2SmRcEventTriggerFormat3) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{90}
}

func (x *E2SmRcEventTriggerFormat3) GetE2NodeInfoChangeList() []*E2SmRcEventTriggerFormat3Item {
	if x != nil {
		return x.E2NodeInfoChangeList
	}
	return nil
}

// sequence from e2sm_rc.asn1:465
// {E2SM-RC-EventTrigger-Format3-Item}
type E2SmRcEventTriggerFormat3Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicEventTriggerConditionId *RicEventTriggerConditionId `protobuf:"bytes,1,opt,name=ric_event_trigger_condition_id,json=ric-eventTriggerCondition-ID,proto3" json:"ric_event_trigger_condition_id,omitempty"`
	// @inject_tag: aper:"valueLB:1,valueUB:512,valueExt"
	E2NodeInfoChangeId int32 `protobuf:"varint,2,opt,name=e2_node_info_change_id,json=e2NodeInfoChange-ID,proto3" json:"e2_node_info_change_id,omitempty" aper:"valueLB:1,valueUB:512,valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	AssociatedCellInfo *EventTriggerCellInfo `protobuf:"bytes,3,opt,name=associated_cell_info,json=associatedCellInfo,proto3,oneof" json:"associated_cell_info,omitempty" aper:"optional,valueExt"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
	LogicalOr *LogicalOr `protobuf:"varint,4,opt,name=logical_or,json=logicalOR,proto3,enum=e2sm_rc.v1.LogicalOr,oneof" json:"logical_or,omitempty" aper:"optional,valueLB:0,valueUB:1,valueExt"`
}

func (x *E2SmRcEventTriggerFormat3Item) Reset() {
	*x = E2SmRcEventTriggerFormat3Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcEventTriggerFormat3Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcEventTriggerFormat3Item) ProtoMessage() {}

func (x *E2SmRcEventTriggerFormat3Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcEventTriggerFormat3Item.ProtoReflect.Descriptor instead.
func (*E2SmRcEventTriggerFormat3Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{91}
}

func (x *E2SmRcEventTriggerFormat3Item) GetRicEventTriggerConditionId() *RicEventTriggerConditionId {
	if x != nil {
		return x.RicEventTriggerConditionId
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat3Item) GetE2NodeInfoChangeId() int32 {
	if x != nil {
		return x.E2NodeInfoChangeId
	}
	return 0
}

func (x *E2SmRcEventTriggerFormat3Item) GetAssociatedCellInfo() *EventTriggerCellInfo {
	if x != nil {
		return x.AssociatedCellInfo
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat3Item) GetLogicalOr() LogicalOr {
	if x != nil && x.LogicalOr != nil {
		return *x.LogicalOr
	}
	return LogicalOr_LOGICAL_OR_TRUE
}

// sequence from e2sm_rc.asn1:474
// {E2SM-RC-EventTrigger-Format4}
type E2SmRcEventTriggerFormat4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	UEinfoChangeList []*E2SmRcEventTriggerFormat4Item `protobuf:"bytes,1,rep,name=u_einfo_change_list,json=uEInfoChange-List,proto3" json:"u_einfo_change_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *E2SmRcEventTriggerFormat4) Reset() {
	*x = E2SmRcEventTriggerFormat4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcEventTriggerFormat4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcEventTriggerFormat4) ProtoMessage() {}

func (x *E2SmRcEventTriggerFormat4) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcEventTriggerFormat4.ProtoReflect.Descriptor instead.
func (*E2SmRcEventTriggerFormat4) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{92}
}

func (x *E2SmRcEventTriggerFormat4) GetUEinfoChangeList() []*E2SmRcEventTriggerFormat4Item {
	if x != nil {
		return x.UEinfoChangeList
	}
	return nil
}

// sequence from e2sm_rc.asn1:479
// {E2SM-RC-EventTrigger-Format4-Item}
type E2SmRcEventTriggerFormat4Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicEventTriggerConditionId *RicEventTriggerConditionId `protobuf:"bytes,1,opt,name=ric_event_trigger_condition_id,json=ric-eventTriggerCondition-ID,proto3" json:"ric_event_trigger_condition_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	TriggerType *TriggerTypeChoice `protobuf:"bytes,2,opt,name=trigger_type,json=triggerType,proto3" json:"trigger_type,omitempty" aper:"choiceExt"`
	// @inject_tag: aper:"optional,valueExt"
	AssociatedUeinfo *EventTriggerUeInfo `protobuf:"bytes,3,opt,name=associated_ueinfo,json=associatedUEInfo,proto3,oneof" json:"associated_ueinfo,omitempty" aper:"optional,valueExt"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
	LogicalOr *LogicalOr `protobuf:"varint,4,opt,name=logical_or,json=logicalOR,proto3,enum=e2sm_rc.v1.LogicalOr,oneof" json:"logical_or,omitempty" aper:"optional,valueLB:0,valueUB:1,valueExt"`
}

func (x *E2SmRcEventTriggerFormat4Item) Reset() {
	*x = E2SmRcEventTriggerFormat4Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcEventTriggerFormat4Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcEventTriggerFormat4Item) ProtoMessage() {}

func (x *E2SmRcEventTriggerFormat4Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcEventTriggerFormat4Item.ProtoReflect.Descriptor instead.
func (*E2SmRcEventTriggerFormat4Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{93}
}

func (x *E2SmRcEventTriggerFormat4Item) GetRicEventTriggerConditionId() *RicEventTriggerConditionId {
	if x != nil {
		return x.RicEventTriggerConditionId
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat4Item) GetTriggerType() *TriggerTypeChoice {
	if x != nil {
		return x.TriggerType
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat4Item) GetAssociatedUeinfo() *EventTriggerUeInfo {
	if x != nil {
		return x.AssociatedUeinfo
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat4Item) GetLogicalOr() LogicalOr {
	if x != nil && x.LogicalOr != nil {
		return *x.LogicalOr
	}
	return LogicalOr_LOGICAL_OR_TRUE
}

// sequence from e2sm_rc.asn1:488
// {TriggerType-Choice}
type TriggerTypeChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm_rc.asn1:488
	//
	// Types that are assignable to TriggerTypeChoice:
	//	*TriggerTypeChoice_TriggerTypeChoiceRrcstate
	//	*TriggerTypeChoice_TriggerTypeChoiceUeid
	//	*TriggerTypeChoice_TriggerTypeChoiceL2State
	TriggerTypeChoice isTriggerTypeChoice_TriggerTypeChoice `protobuf_oneof:"trigger_type_choice"`
}

func (x *TriggerTypeChoice) Reset() {
	*x = TriggerTypeChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerTypeChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTypeChoice) ProtoMessage() {}

func (x *TriggerTypeChoice) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTypeChoice.ProtoReflect.Descriptor instead.
func (*TriggerTypeChoice) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{94}
}

func (m *TriggerTypeChoice) GetTriggerTypeChoice() isTriggerTypeChoice_TriggerTypeChoice {
	if m != nil {
		return m.TriggerTypeChoice
	}
	return nil
}

func (x *TriggerTypeChoice) GetTriggerTypeChoiceRrcstate() *TriggerTypeChoiceRrcstate {
	if x, ok := x.GetTriggerTypeChoice().(*TriggerTypeChoice_TriggerTypeChoiceRrcstate); ok {
		return x.TriggerTypeChoiceRrcstate
	}
	return nil
}

func (x *TriggerTypeChoice) GetTriggerTypeChoiceUeid() *TriggerTypeChoiceUeid {
	if x, ok := x.GetTriggerTypeChoice().(*TriggerTypeChoice_TriggerTypeChoiceUeid); ok {
		return x.TriggerTypeChoiceUeid
	}
	return nil
}

func (x *TriggerTypeChoice) GetTriggerTypeChoiceL2State() *TriggerTypeChoiceL2State {
	if x, ok := x.GetTriggerTypeChoice().(*TriggerTypeChoice_TriggerTypeChoiceL2State); ok {
		return x.TriggerTypeChoiceL2State
	}
	return nil
}

type isTriggerTypeChoice_TriggerTypeChoice interface {
	isTriggerTypeChoice_TriggerTypeChoice()
}

type TriggerTypeChoice_TriggerTypeChoiceRrcstate struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	TriggerTypeChoiceRrcstate *TriggerTypeChoiceRrcstate `protobuf:"bytes,1,opt,name=trigger_type_choice_rrcstate,json=triggerType-Choice-RRCstate,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type TriggerTypeChoice_TriggerTypeChoiceUeid struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	TriggerTypeChoiceUeid *TriggerTypeChoiceUeid `protobuf:"bytes,2,opt,name=trigger_type_choice_ueid,json=triggerType-Choice-UEID,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

type TriggerTypeChoice_TriggerTypeChoiceL2State struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt"
	TriggerTypeChoiceL2State *TriggerTypeChoiceL2State `protobuf:"bytes,3,opt,name=trigger_type_choice_l2state,json=triggerType-Choice-L2state,proto3,oneof" aper:"choiceIdx:3,valueExt"`
}

func (*TriggerTypeChoice_TriggerTypeChoiceRrcstate) isTriggerTypeChoice_TriggerTypeChoice() {}

func (*TriggerTypeChoice_TriggerTypeChoiceUeid) isTriggerTypeChoice_TriggerTypeChoice() {}

func (*TriggerTypeChoice_TriggerTypeChoiceL2State) isTriggerTypeChoice_TriggerTypeChoice() {}

// sequence from e2sm_rc.asn1:495
// {TriggerType-Choice-RRCstate}
type TriggerTypeChoiceRrcstate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:8,valueExt"
	RrcStateList []*TriggerTypeChoiceRrcstateItem `protobuf:"bytes,1,rep,name=rrc_state_list,json=rrcState-List,proto3" json:"rrc_state_list,omitempty" aper:"sizeLB:1,sizeUB:8,valueExt"`
}

func (x *TriggerTypeChoiceRrcstate) Reset() {
	*x = TriggerTypeChoiceRrcstate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerTypeChoiceRrcstate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTypeChoiceRrcstate) ProtoMessage() {}

func (x *TriggerTypeChoiceRrcstate) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTypeChoiceRrcstate.ProtoReflect.Descriptor instead.
func (*TriggerTypeChoiceRrcstate) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{95}
}

func (x *TriggerTypeChoiceRrcstate) GetRrcStateList() []*TriggerTypeChoiceRrcstateItem {
	if x != nil {
		return x.RrcStateList
	}
	return nil
}

// sequence from e2sm_rc.asn1:500
// {TriggerType-Choice-RRCstate-Item}
type TriggerTypeChoiceRrcstateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:3,valueExt"
	StateChangedTo RrcState `protobuf:"varint,1,opt,name=state_changed_to,json=stateChangedTo,proto3,enum=e2sm_rc.v1.RrcState" json:"state_changed_to,omitempty" aper:"valueLB:0,valueUB:3,valueExt"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
	LogicalOr *LogicalOr `protobuf:"varint,2,opt,name=logical_or,json=logicalOR,proto3,enum=e2sm_rc.v1.LogicalOr,oneof" json:"logical_or,omitempty" aper:"optional,valueLB:0,valueUB:1,valueExt"`
}

func (x *TriggerTypeChoiceRrcstateItem) Reset() {
	*x = TriggerTypeChoiceRrcstateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerTypeChoiceRrcstateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTypeChoiceRrcstateItem) ProtoMessage() {}

func (x *TriggerTypeChoiceRrcstateItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTypeChoiceRrcstateItem.ProtoReflect.Descriptor instead.
func (*TriggerTypeChoiceRrcstateItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{96}
}

func (x *TriggerTypeChoiceRrcstateItem) GetStateChangedTo() RrcState {
	if x != nil {
		return x.StateChangedTo
	}
	return RrcState_RRC_STATE_RRC_CONNECTED
}

func (x *TriggerTypeChoiceRrcstateItem) GetLogicalOr() LogicalOr {
	if x != nil && x.LogicalOr != nil {
		return *x.LogicalOr
	}
	return LogicalOr_LOGICAL_OR_TRUE
}

// sequence from e2sm_rc.asn1:506
// {TriggerType-Choice-UEID}
type TriggerTypeChoiceUeid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:1,valueUB:512,valueExt"
	UeIdchangeId int32 `protobuf:"varint,1,opt,name=ue_idchange_id,json=ueIDchange-ID,proto3" json:"ue_idchange_id,omitempty" aper:"valueLB:1,valueUB:512,valueExt"`
}

func (x *TriggerTypeChoiceUeid) Reset() {
	*x = TriggerTypeChoiceUeid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerTypeChoiceUeid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTypeChoiceUeid) ProtoMessage() {}

func (x *TriggerTypeChoiceUeid) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTypeChoiceUeid.ProtoReflect.Descriptor instead.
func (*TriggerTypeChoiceUeid) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{97}
}

func (x *TriggerTypeChoiceUeid) GetUeIdchangeId() int32 {
	if x != nil {
		return x.UeIdchangeId
	}
	return 0
}

// sequence from e2sm_rc.asn1:511
// {TriggerType-Choice-L2state}
type TriggerTypeChoiceL2State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssociatedL2Variables *RanparameterTesting `protobuf:"bytes,1,opt,name=associated_l2variables,json=associatedL2variables,proto3" json:"associated_l2variables,omitempty"`
}

func (x *TriggerTypeChoiceL2State) Reset() {
	*x = TriggerTypeChoiceL2State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerTypeChoiceL2State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTypeChoiceL2State) ProtoMessage() {}

func (x *TriggerTypeChoiceL2State) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTypeChoiceL2State.ProtoReflect.Descriptor instead.
func (*TriggerTypeChoiceL2State) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{98}
}

func (x *TriggerTypeChoiceL2State) GetAssociatedL2Variables() *RanparameterTesting {
	if x != nil {
		return x.AssociatedL2Variables
	}
	return nil
}

// sequence from e2sm_rc.asn1:517
// {E2SM-RC-EventTrigger-Format5}
type E2SmRcEventTriggerFormat5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueLB:0,valueUB:0,valueExt"
	OnDemand OnDemand `protobuf:"varint,1,opt,name=on_demand,json=onDemand,proto3,enum=e2sm_rc.v1.OnDemand" json:"on_demand,omitempty" aper:"valueLB:0,valueUB:0,valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	AssociatedUeinfo *EventTriggerUeInfo `protobuf:"bytes,2,opt,name=associated_ueinfo,json=associatedUEInfo,proto3,oneof" json:"associated_ueinfo,omitempty" aper:"optional,valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	AssociatedCellInfo *EventTriggerCellInfo `protobuf:"bytes,3,opt,name=associated_cell_info,json=associatedCellInfo,proto3,oneof" json:"associated_cell_info,omitempty" aper:"optional,valueExt"`
}

func (x *E2SmRcEventTriggerFormat5) Reset() {
	*x = E2SmRcEventTriggerFormat5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcEventTriggerFormat5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcEventTriggerFormat5) ProtoMessage() {}

func (x *E2SmRcEventTriggerFormat5) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcEventTriggerFormat5.ProtoReflect.Descriptor instead.
func (*E2SmRcEventTriggerFormat5) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{99}
}

func (x *E2SmRcEventTriggerFormat5) GetOnDemand() OnDemand {
	if x != nil {
		return x.OnDemand
	}
	return OnDemand_ON_DEMAND_TRUE
}

func (x *E2SmRcEventTriggerFormat5) GetAssociatedUeinfo() *EventTriggerUeInfo {
	if x != nil {
		return x.AssociatedUeinfo
	}
	return nil
}

func (x *E2SmRcEventTriggerFormat5) GetAssociatedCellInfo() *EventTriggerCellInfo {
	if x != nil {
		return x.AssociatedCellInfo
	}
	return nil
}

// sequence from e2sm_rc.asn1:530
// {E2SM-RC-ActionDefinition}
// @inject_tag: aper:"valueExt"
type E2SmRcActionDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicStyleType *e2sm_common_ies.RicStyleType `protobuf:"bytes,1,opt,name=ric_style_type,json=ric-Style-Type,proto3" json:"ric_style_type,omitempty"`
	// @inject_tag: aper:"choiceExt"
	RicActionDefinitionFormats *RicActionDefinitionFormats `protobuf:"bytes,2,opt,name=ric_action_definition_formats,json=ric-actionDefinition-formats,proto3" json:"ric_action_definition_formats,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcActionDefinition) Reset() {
	*x = E2SmRcActionDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcActionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcActionDefinition) ProtoMessage() {}

func (x *E2SmRcActionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcActionDefinition.ProtoReflect.Descriptor instead.
func (*E2SmRcActionDefinition) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{100}
}

func (x *E2SmRcActionDefinition) GetRicStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicStyleType
	}
	return nil
}

func (x *E2SmRcActionDefinition) GetRicActionDefinitionFormats() *RicActionDefinitionFormats {
	if x != nil {
		return x.RicActionDefinitionFormats
	}
	return nil
}

type RicActionDefinitionFormats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RicActionDefinitionFormats:
	//	*RicActionDefinitionFormats_ActionDefinitionFormat1
	//	*RicActionDefinitionFormats_ActionDefinitionFormat2
	//	*RicActionDefinitionFormats_ActionDefinitionFormat3
	RicActionDefinitionFormats isRicActionDefinitionFormats_RicActionDefinitionFormats `protobuf_oneof:"ric_action_definition_formats"`
}

func (x *RicActionDefinitionFormats) Reset() {
	*x = RicActionDefinitionFormats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicActionDefinitionFormats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicActionDefinitionFormats) ProtoMessage() {}

func (x *RicActionDefinitionFormats) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicActionDefinitionFormats.ProtoReflect.Descriptor instead.
func (*RicActionDefinitionFormats) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{101}
}

func (m *RicActionDefinitionFormats) GetRicActionDefinitionFormats() isRicActionDefinitionFormats_RicActionDefinitionFormats {
	if m != nil {
		return m.RicActionDefinitionFormats
	}
	return nil
}

func (x *RicActionDefinitionFormats) GetActionDefinitionFormat1() *E2SmRcActionDefinitionFormat1 {
	if x, ok := x.GetRicActionDefinitionFormats().(*RicActionDefinitionFormats_ActionDefinitionFormat1); ok {
		return x.ActionDefinitionFormat1
	}
	return nil
}

func (x *RicActionDefinitionFormats) GetActionDefinitionFormat2() *E2SmRcActionDefinitionFormat2 {
	if x, ok := x.GetRicActionDefinitionFormats().(*RicActionDefinitionFormats_ActionDefinitionFormat2); ok {
		return x.ActionDefinitionFormat2
	}
	return nil
}

func (x *RicActionDefinitionFormats) GetActionDefinitionFormat3() *E2SmRcActionDefinitionFormat3 {
	if x, ok := x.GetRicActionDefinitionFormats().(*RicActionDefinitionFormats_ActionDefinitionFormat3); ok {
		return x.ActionDefinitionFormat3
	}
	return nil
}

type isRicActionDefinitionFormats_RicActionDefinitionFormats interface {
	isRicActionDefinitionFormats_RicActionDefinitionFormats()
}

type RicActionDefinitionFormats_ActionDefinitionFormat1 struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	ActionDefinitionFormat1 *E2SmRcActionDefinitionFormat1 `protobuf:"bytes,1,opt,name=action_definition_format1,json=actionDefinitionFormat1,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type RicActionDefinitionFormats_ActionDefinitionFormat2 struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	ActionDefinitionFormat2 *E2SmRcActionDefinitionFormat2 `protobuf:"bytes,2,opt,name=action_definition_format2,json=actionDefinitionFormat2,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

type RicActionDefinitionFormats_ActionDefinitionFormat3 struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt"
	ActionDefinitionFormat3 *E2SmRcActionDefinitionFormat3 `protobuf:"bytes,3,opt,name=action_definition_format3,json=actionDefinitionFormat3,proto3,oneof" aper:"choiceIdx:3,valueExt"`
}

func (*RicActionDefinitionFormats_ActionDefinitionFormat1) isRicActionDefinitionFormats_RicActionDefinitionFormats() {
}

func (*RicActionDefinitionFormats_ActionDefinitionFormat2) isRicActionDefinitionFormats_RicActionDefinitionFormats() {
}

func (*RicActionDefinitionFormats_ActionDefinitionFormat3) isRicActionDefinitionFormats_RicActionDefinitionFormats() {
}

// sequence from e2sm_rc.asn1:541
// {E2SM-RC-ActionDefinition-Format1}
type E2SmRcActionDefinitionFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	RanPToBeReportedList []*E2SmRcActionDefinitionFormat1Item `protobuf:"bytes,1,rep,name=ran_p_to_be_reported_list,json=ranP-ToBeReported-List,proto3" json:"ran_p_to_be_reported_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *E2SmRcActionDefinitionFormat1) Reset() {
	*x = E2SmRcActionDefinitionFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcActionDefinitionFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcActionDefinitionFormat1) ProtoMessage() {}

func (x *E2SmRcActionDefinitionFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcActionDefinitionFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcActionDefinitionFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{102}
}

func (x *E2SmRcActionDefinitionFormat1) GetRanPToBeReportedList() []*E2SmRcActionDefinitionFormat1Item {
	if x != nil {
		return x.RanPToBeReportedList
	}
	return nil
}

// sequence from e2sm_rc.asn1:547
// {E2SM-RC-ActionDefinition-Format1-Item}
type E2SmRcActionDefinitionFormat1Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId *RanparameterId `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
}

func (x *E2SmRcActionDefinitionFormat1Item) Reset() {
	*x = E2SmRcActionDefinitionFormat1Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcActionDefinitionFormat1Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcActionDefinitionFormat1Item) ProtoMessage() {}

func (x *E2SmRcActionDefinitionFormat1Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcActionDefinitionFormat1Item.ProtoReflect.Descriptor instead.
func (*E2SmRcActionDefinitionFormat1Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{103}
}

func (x *E2SmRcActionDefinitionFormat1Item) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

// sequence from e2sm_rc.asn1:553
// {E2SM-RC-ActionDefinition-Format2}
type E2SmRcActionDefinitionFormat2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	RicPolicyConditionsList []*E2SmRcActionDefinitionFormat2Item `protobuf:"bytes,1,rep,name=ric_policy_conditions_list,json=ric-PolicyConditions-List,proto3" json:"ric_policy_conditions_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *E2SmRcActionDefinitionFormat2) Reset() {
	*x = E2SmRcActionDefinitionFormat2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcActionDefinitionFormat2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcActionDefinitionFormat2) ProtoMessage() {}

func (x *E2SmRcActionDefinitionFormat2) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcActionDefinitionFormat2.ProtoReflect.Descriptor instead.
func (*E2SmRcActionDefinitionFormat2) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{104}
}

func (x *E2SmRcActionDefinitionFormat2) GetRicPolicyConditionsList() []*E2SmRcActionDefinitionFormat2Item {
	if x != nil {
		return x.RicPolicyConditionsList
	}
	return nil
}

// sequence from e2sm_rc.asn1:558
// {E2SM-RC-ActionDefinition-Format2-Item}
type E2SmRcActionDefinitionFormat2Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt"
	RicPolicyAction *RicPolicyAction `protobuf:"bytes,1,opt,name=ric_policy_action,json=ric-PolicyAction,proto3" json:"ric_policy_action,omitempty" aper:"valueExt"`
	// @inject_tag: aper:"optional"
	RicPolicyConditionDefinition *RanparameterTesting `protobuf:"bytes,2,opt,name=ric_policy_condition_definition,json=ric-PolicyConditionDefinition,proto3,oneof" json:"ric_policy_condition_definition,omitempty" aper:"optional"`
}

func (x *E2SmRcActionDefinitionFormat2Item) Reset() {
	*x = E2SmRcActionDefinitionFormat2Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcActionDefinitionFormat2Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcActionDefinitionFormat2Item) ProtoMessage() {}

func (x *E2SmRcActionDefinitionFormat2Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcActionDefinitionFormat2Item.ProtoReflect.Descriptor instead.
func (*E2SmRcActionDefinitionFormat2Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{105}
}

func (x *E2SmRcActionDefinitionFormat2Item) GetRicPolicyAction() *RicPolicyAction {
	if x != nil {
		return x.RicPolicyAction
	}
	return nil
}

func (x *E2SmRcActionDefinitionFormat2Item) GetRicPolicyConditionDefinition() *RanparameterTesting {
	if x != nil {
		return x.RicPolicyConditionDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:564
// {E2SM-RC-ActionDefinition-Format3}
type E2SmRcActionDefinitionFormat3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicInsertIndicationId *RicInsertIndicationId `protobuf:"bytes,1,opt,name=ric_insert_indication_id,json=ric-InsertIndication-ID,proto3" json:"ric_insert_indication_id,omitempty"`
	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	RanPInsertIndicationList []*E2SmRcActionDefinitionFormat3Item `protobuf:"bytes,2,rep,name=ran_p_insert_indication_list,json=ranP-InsertIndication-List,proto3" json:"ran_p_insert_indication_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
	// @inject_tag: aper:"optional,choiceExt"
	UeId *e2sm_common_ies.Ueid `protobuf:"bytes,3,opt,name=ue_id,json=ueID,proto3,oneof" json:"ue_id,omitempty" aper:"optional,choiceExt"`
}

func (x *E2SmRcActionDefinitionFormat3) Reset() {
	*x = E2SmRcActionDefinitionFormat3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcActionDefinitionFormat3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcActionDefinitionFormat3) ProtoMessage() {}

func (x *E2SmRcActionDefinitionFormat3) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcActionDefinitionFormat3.ProtoReflect.Descriptor instead.
func (*E2SmRcActionDefinitionFormat3) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{106}
}

func (x *E2SmRcActionDefinitionFormat3) GetRicInsertIndicationId() *RicInsertIndicationId {
	if x != nil {
		return x.RicInsertIndicationId
	}
	return nil
}

func (x *E2SmRcActionDefinitionFormat3) GetRanPInsertIndicationList() []*E2SmRcActionDefinitionFormat3Item {
	if x != nil {
		return x.RanPInsertIndicationList
	}
	return nil
}

func (x *E2SmRcActionDefinitionFormat3) GetUeId() *e2sm_common_ies.Ueid {
	if x != nil {
		return x.UeId
	}
	return nil
}

// sequence from e2sm_rc.asn1:572
// {E2SM-RC-ActionDefinition-Format3-Item}
type E2SmRcActionDefinitionFormat3Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId *RanparameterId `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
}

func (x *E2SmRcActionDefinitionFormat3Item) Reset() {
	*x = E2SmRcActionDefinitionFormat3Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcActionDefinitionFormat3Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcActionDefinitionFormat3Item) ProtoMessage() {}

func (x *E2SmRcActionDefinitionFormat3Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcActionDefinitionFormat3Item.ProtoReflect.Descriptor instead.
func (*E2SmRcActionDefinitionFormat3Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{107}
}

func (x *E2SmRcActionDefinitionFormat3Item) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

// sequence from e2sm_rc.asn1:586
// {E2SM-RC-IndicationHeader}
// @inject_tag: aper:"valueExt"
type E2SmRcIndicationHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RicIndicationHeaderFormats *RicIndicationHeaderFormats `protobuf:"bytes,1,opt,name=ric_indication_header_formats,json=ric-indicationHeader-formats,proto3" json:"ric_indication_header_formats,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcIndicationHeader) Reset() {
	*x = E2SmRcIndicationHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationHeader) ProtoMessage() {}

func (x *E2SmRcIndicationHeader) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationHeader.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationHeader) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{108}
}

func (x *E2SmRcIndicationHeader) GetRicIndicationHeaderFormats() *RicIndicationHeaderFormats {
	if x != nil {
		return x.RicIndicationHeaderFormats
	}
	return nil
}

type RicIndicationHeaderFormats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RicIndicationHeaderFormats:
	//	*RicIndicationHeaderFormats_IndicationHeaderFormat1
	//	*RicIndicationHeaderFormats_IndicationHeaderFormat2
	RicIndicationHeaderFormats isRicIndicationHeaderFormats_RicIndicationHeaderFormats `protobuf_oneof:"ric_indication_header_formats"`
}

func (x *RicIndicationHeaderFormats) Reset() {
	*x = RicIndicationHeaderFormats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicIndicationHeaderFormats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicIndicationHeaderFormats) ProtoMessage() {}

func (x *RicIndicationHeaderFormats) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicIndicationHeaderFormats.ProtoReflect.Descriptor instead.
func (*RicIndicationHeaderFormats) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{109}
}

func (m *RicIndicationHeaderFormats) GetRicIndicationHeaderFormats() isRicIndicationHeaderFormats_RicIndicationHeaderFormats {
	if m != nil {
		return m.RicIndicationHeaderFormats
	}
	return nil
}

func (x *RicIndicationHeaderFormats) GetIndicationHeaderFormat1() *E2SmRcIndicationHeaderFormat1 {
	if x, ok := x.GetRicIndicationHeaderFormats().(*RicIndicationHeaderFormats_IndicationHeaderFormat1); ok {
		return x.IndicationHeaderFormat1
	}
	return nil
}

func (x *RicIndicationHeaderFormats) GetIndicationHeaderFormat2() *E2SmRcIndicationHeaderFormat2 {
	if x, ok := x.GetRicIndicationHeaderFormats().(*RicIndicationHeaderFormats_IndicationHeaderFormat2); ok {
		return x.IndicationHeaderFormat2
	}
	return nil
}

type isRicIndicationHeaderFormats_RicIndicationHeaderFormats interface {
	isRicIndicationHeaderFormats_RicIndicationHeaderFormats()
}

type RicIndicationHeaderFormats_IndicationHeaderFormat1 struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	IndicationHeaderFormat1 *E2SmRcIndicationHeaderFormat1 `protobuf:"bytes,1,opt,name=indication_header_format1,json=indicationHeaderFormat1,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type RicIndicationHeaderFormats_IndicationHeaderFormat2 struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	IndicationHeaderFormat2 *E2SmRcIndicationHeaderFormat2 `protobuf:"bytes,2,opt,name=indication_header_format2,json=indicationHeaderFormat2,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

func (*RicIndicationHeaderFormats_IndicationHeaderFormat1) isRicIndicationHeaderFormats_RicIndicationHeaderFormats() {
}

func (*RicIndicationHeaderFormats_IndicationHeaderFormat2) isRicIndicationHeaderFormats_RicIndicationHeaderFormats() {
}

// sequence from e2sm_rc.asn1:591
// {E2SM-RC-IndicationHeader-Format1}
type E2SmRcIndicationHeaderFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"optional"
	RicEventTriggerConditionId *RicEventTriggerConditionId `protobuf:"bytes,1,opt,name=ric_event_trigger_condition_id,json=ric-eventTriggerCondition-ID,proto3,oneof" json:"ric_event_trigger_condition_id,omitempty" aper:"optional"`
}

func (x *E2SmRcIndicationHeaderFormat1) Reset() {
	*x = E2SmRcIndicationHeaderFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationHeaderFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationHeaderFormat1) ProtoMessage() {}

func (x *E2SmRcIndicationHeaderFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationHeaderFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationHeaderFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{110}
}

func (x *E2SmRcIndicationHeaderFormat1) GetRicEventTriggerConditionId() *RicEventTriggerConditionId {
	if x != nil {
		return x.RicEventTriggerConditionId
	}
	return nil
}

// sequence from e2sm_rc.asn1:596
// {E2SM-RC-IndicationHeader-Format2}
type E2SmRcIndicationHeaderFormat2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	UeId                  *e2sm_common_ies.Ueid         `protobuf:"bytes,1,opt,name=ue_id,json=ueID,proto3" json:"ue_id,omitempty" aper:"choiceExt"`
	RicInsertStyleType    *e2sm_common_ies.RicStyleType `protobuf:"bytes,2,opt,name=ric_insert_style_type,json=ric-InsertStyle-Type,proto3" json:"ric_insert_style_type,omitempty"`
	RicInsertIndicationId *RicInsertIndicationId        `protobuf:"bytes,3,opt,name=ric_insert_indication_id,json=ric-InsertIndication-ID,proto3" json:"ric_insert_indication_id,omitempty"`
}

func (x *E2SmRcIndicationHeaderFormat2) Reset() {
	*x = E2SmRcIndicationHeaderFormat2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationHeaderFormat2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationHeaderFormat2) ProtoMessage() {}

func (x *E2SmRcIndicationHeaderFormat2) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationHeaderFormat2.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationHeaderFormat2) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{111}
}

func (x *E2SmRcIndicationHeaderFormat2) GetUeId() *e2sm_common_ies.Ueid {
	if x != nil {
		return x.UeId
	}
	return nil
}

func (x *E2SmRcIndicationHeaderFormat2) GetRicInsertStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicInsertStyleType
	}
	return nil
}

func (x *E2SmRcIndicationHeaderFormat2) GetRicInsertIndicationId() *RicInsertIndicationId {
	if x != nil {
		return x.RicInsertIndicationId
	}
	return nil
}

// sequence from e2sm_rc.asn1:615
// {E2SM-RC-IndicationMessage}
// @inject_tag: aper:"valueExt"
type E2SmRcIndicationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RicIndicationMessageFormats *RicIndicationMessageFormats `protobuf:"bytes,1,opt,name=ric_indication_message_formats,json=ric-indicationMessage-formats,proto3" json:"ric_indication_message_formats,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcIndicationMessage) Reset() {
	*x = E2SmRcIndicationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessage) ProtoMessage() {}

func (x *E2SmRcIndicationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessage.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessage) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{112}
}

func (x *E2SmRcIndicationMessage) GetRicIndicationMessageFormats() *RicIndicationMessageFormats {
	if x != nil {
		return x.RicIndicationMessageFormats
	}
	return nil
}

type RicIndicationMessageFormats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RicIndicationMessageFormats:
	//	*RicIndicationMessageFormats_IndicationMessageFormat1
	//	*RicIndicationMessageFormats_IndicationMessageFormat2
	//	*RicIndicationMessageFormats_IndicationMessageFormat3
	//	*RicIndicationMessageFormats_IndicationMessageFormat4
	//	*RicIndicationMessageFormats_IndicationMessageFormat5
	RicIndicationMessageFormats isRicIndicationMessageFormats_RicIndicationMessageFormats `protobuf_oneof:"ric_indication_message_formats"`
}

func (x *RicIndicationMessageFormats) Reset() {
	*x = RicIndicationMessageFormats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicIndicationMessageFormats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicIndicationMessageFormats) ProtoMessage() {}

func (x *RicIndicationMessageFormats) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicIndicationMessageFormats.ProtoReflect.Descriptor instead.
func (*RicIndicationMessageFormats) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{113}
}

func (m *RicIndicationMessageFormats) GetRicIndicationMessageFormats() isRicIndicationMessageFormats_RicIndicationMessageFormats {
	if m != nil {
		return m.RicIndicationMessageFormats
	}
	return nil
}

func (x *RicIndicationMessageFormats) GetIndicationMessageFormat1() *E2SmRcIndicationMessageFormat1 {
	if x, ok := x.GetRicIndicationMessageFormats().(*RicIndicationMessageFormats_IndicationMessageFormat1); ok {
		return x.IndicationMessageFormat1
	}
	return nil
}

func (x *RicIndicationMessageFormats) GetIndicationMessageFormat2() *E2SmRcIndicationMessageFormat2 {
	if x, ok := x.GetRicIndicationMessageFormats().(*RicIndicationMessageFormats_IndicationMessageFormat2); ok {
		return x.IndicationMessageFormat2
	}
	return nil
}

func (x *RicIndicationMessageFormats) GetIndicationMessageFormat3() *E2SmRcIndicationMessageFormat3 {
	if x, ok := x.GetRicIndicationMessageFormats().(*RicIndicationMessageFormats_IndicationMessageFormat3); ok {
		return x.IndicationMessageFormat3
	}
	return nil
}

func (x *RicIndicationMessageFormats) GetIndicationMessageFormat4() *E2SmRcIndicationMessageFormat4 {
	if x, ok := x.GetRicIndicationMessageFormats().(*RicIndicationMessageFormats_IndicationMessageFormat4); ok {
		return x.IndicationMessageFormat4
	}
	return nil
}

func (x *RicIndicationMessageFormats) GetIndicationMessageFormat5() *E2SmRcIndicationMessageFormat5 {
	if x, ok := x.GetRicIndicationMessageFormats().(*RicIndicationMessageFormats_IndicationMessageFormat5); ok {
		return x.IndicationMessageFormat5
	}
	return nil
}

type isRicIndicationMessageFormats_RicIndicationMessageFormats interface {
	isRicIndicationMessageFormats_RicIndicationMessageFormats()
}

type RicIndicationMessageFormats_IndicationMessageFormat1 struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	IndicationMessageFormat1 *E2SmRcIndicationMessageFormat1 `protobuf:"bytes,1,opt,name=indication_message_format1,json=indicationMessageFormat1,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

type RicIndicationMessageFormats_IndicationMessageFormat2 struct {
	// @inject_tag: aper:"choiceIdx:2,valueExt"
	IndicationMessageFormat2 *E2SmRcIndicationMessageFormat2 `protobuf:"bytes,2,opt,name=indication_message_format2,json=indicationMessageFormat2,proto3,oneof" aper:"choiceIdx:2,valueExt"`
}

type RicIndicationMessageFormats_IndicationMessageFormat3 struct {
	// @inject_tag: aper:"choiceIdx:3,valueExt"
	IndicationMessageFormat3 *E2SmRcIndicationMessageFormat3 `protobuf:"bytes,3,opt,name=indication_message_format3,json=indicationMessageFormat3,proto3,oneof" aper:"choiceIdx:3,valueExt"`
}

type RicIndicationMessageFormats_IndicationMessageFormat4 struct {
	// @inject_tag: aper:"choiceIdx:4,valueExt"
	IndicationMessageFormat4 *E2SmRcIndicationMessageFormat4 `protobuf:"bytes,4,opt,name=indication_message_format4,json=indicationMessageFormat4,proto3,oneof" aper:"choiceIdx:4,valueExt"`
}

type RicIndicationMessageFormats_IndicationMessageFormat5 struct {
	// @inject_tag: aper:"choiceIdx:5,valueExt"
	IndicationMessageFormat5 *E2SmRcIndicationMessageFormat5 `protobuf:"bytes,5,opt,name=indication_message_format5,json=indicationMessageFormat5,proto3,oneof" aper:"choiceIdx:5,valueExt"`
}

func (*RicIndicationMessageFormats_IndicationMessageFormat1) isRicIndicationMessageFormats_RicIndicationMessageFormats() {
}

func (*RicIndicationMessageFormats_IndicationMessageFormat2) isRicIndicationMessageFormats_RicIndicationMessageFormats() {
}

func (*RicIndicationMessageFormats_IndicationMessageFormat3) isRicIndicationMessageFormats_RicIndicationMessageFormats() {
}

func (*RicIndicationMessageFormats_IndicationMessageFormat4) isRicIndicationMessageFormats_RicIndicationMessageFormats() {
}

func (*RicIndicationMessageFormats_IndicationMessageFormat5) isRicIndicationMessageFormats_RicIndicationMessageFormats() {
}

// sequence from e2sm_rc.asn1:620
// {E2SM-RC-IndicationMessage-Format1}
type E2SmRcIndicationMessageFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	RanPReportedList []*E2SmRcIndicationMessageFormat1Item `protobuf:"bytes,1,rep,name=ran_p_reported_list,json=ranP-Reported-List,proto3" json:"ran_p_reported_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *E2SmRcIndicationMessageFormat1) Reset() {
	*x = E2SmRcIndicationMessageFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat1) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{114}
}

func (x *E2SmRcIndicationMessageFormat1) GetRanPReportedList() []*E2SmRcIndicationMessageFormat1Item {
	if x != nil {
		return x.RanPReportedList
	}
	return nil
}

// sequence from e2sm_rc.asn1:625
// {E2SM-RC-IndicationMessage-Format1-Item}
type E2SmRcIndicationMessageFormat1Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId *RanparameterId `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	RanParameterValueType *RanparameterValueType `protobuf:"bytes,2,opt,name=ran_parameter_value_type,json=ranParameter-valueType,proto3" json:"ran_parameter_value_type,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcIndicationMessageFormat1Item) Reset() {
	*x = E2SmRcIndicationMessageFormat1Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat1Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat1Item) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat1Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat1Item.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat1Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{115}
}

func (x *E2SmRcIndicationMessageFormat1Item) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat1Item) GetRanParameterValueType() *RanparameterValueType {
	if x != nil {
		return x.RanParameterValueType
	}
	return nil
}

// sequence from e2sm_rc.asn1:632
// {E2SM-RC-IndicationMessage-Format2}
type E2SmRcIndicationMessageFormat2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	UeParameterList []*E2SmRcIndicationMessageFormat2Item `protobuf:"bytes,1,rep,name=ue_parameter_list,json=ueParameter-List,proto3" json:"ue_parameter_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *E2SmRcIndicationMessageFormat2) Reset() {
	*x = E2SmRcIndicationMessageFormat2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat2) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat2) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat2.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat2) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{116}
}

func (x *E2SmRcIndicationMessageFormat2) GetUeParameterList() []*E2SmRcIndicationMessageFormat2Item {
	if x != nil {
		return x.UeParameterList
	}
	return nil
}

// sequence from e2sm_rc.asn1:637
// {E2SM-RC-IndicationMessage-Format2-Item}
type E2SmRcIndicationMessageFormat2Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	UeId *e2sm_common_ies.Ueid `protobuf:"bytes,1,opt,name=ue_id,json=ueID,proto3" json:"ue_id,omitempty" aper:"choiceExt"`
	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	RanPList []*E2SmRcIndicationMessageFormat2RanparameterItem `protobuf:"bytes,2,rep,name=ran_p_list,json=ranP-List,proto3" json:"ran_p_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *E2SmRcIndicationMessageFormat2Item) Reset() {
	*x = E2SmRcIndicationMessageFormat2Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat2Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat2Item) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat2Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat2Item.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat2Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{117}
}

func (x *E2SmRcIndicationMessageFormat2Item) GetUeId() *e2sm_common_ies.Ueid {
	if x != nil {
		return x.UeId
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat2Item) GetRanPList() []*E2SmRcIndicationMessageFormat2RanparameterItem {
	if x != nil {
		return x.RanPList
	}
	return nil
}

// sequence from e2sm_rc.asn1:644
// {E2SM-RC-IndicationMessage-Format2-RANParameter-Item}
type E2SmRcIndicationMessageFormat2RanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId *RanparameterId `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	RanParameterValueType *RanparameterValueType `protobuf:"bytes,2,opt,name=ran_parameter_value_type,json=ranParameter-valueType,proto3" json:"ran_parameter_value_type,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcIndicationMessageFormat2RanparameterItem) Reset() {
	*x = E2SmRcIndicationMessageFormat2RanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat2RanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat2RanparameterItem) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat2RanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat2RanparameterItem.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat2RanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{118}
}

func (x *E2SmRcIndicationMessageFormat2RanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat2RanparameterItem) GetRanParameterValueType() *RanparameterValueType {
	if x != nil {
		return x.RanParameterValueType
	}
	return nil
}

// sequence from e2sm_rc.asn1:651
// {E2SM-RC-IndicationMessage-Format3}
type E2SmRcIndicationMessageFormat3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	CellInfoList []*E2SmRcIndicationMessageFormat3Item `protobuf:"bytes,1,rep,name=cell_info_list,json=cellInfo-List,proto3" json:"cell_info_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *E2SmRcIndicationMessageFormat3) Reset() {
	*x = E2SmRcIndicationMessageFormat3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat3) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat3) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat3.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat3) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{119}
}

func (x *E2SmRcIndicationMessageFormat3) GetCellInfoList() []*E2SmRcIndicationMessageFormat3Item {
	if x != nil {
		return x.CellInfoList
	}
	return nil
}

// sequence from e2sm_rc.asn1:656
// {E2SM-RC-IndicationMessage-Format3-Item}
type E2SmRcIndicationMessageFormat3Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceIdx:1,valueExt"
	CellGlobalId *e2sm_common_ies.Cgi `protobuf:"bytes,1,opt,name=cell_global_id,json=cellGlobal-ID,proto3" json:"cell_global_id,omitempty" aper:"choiceIdx:1,valueExt"`
	// @inject_tag: aper:"optional"
	CellContextInfo []byte `protobuf:"bytes,2,opt,name=cell_context_info,json=cellContextInfo,proto3,oneof" json:"cell_context_info,omitempty" aper:"optional"`
	// @inject_tag: aper:"optional"
	CellDeleted *bool `protobuf:"varint,3,opt,name=cell_deleted,json=cellDeleted,proto3,oneof" json:"cell_deleted,omitempty" aper:"optional"`
	// @inject_tag: aper:"optional,valueExt"
	NeighborRelationTable *NeighborRelationInfo `protobuf:"bytes,4,opt,name=neighbor_relation_table,json=neighborRelation-Table,proto3,oneof" json:"neighbor_relation_table,omitempty" aper:"optional,valueExt"`
}

func (x *E2SmRcIndicationMessageFormat3Item) Reset() {
	*x = E2SmRcIndicationMessageFormat3Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat3Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat3Item) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat3Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat3Item.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat3Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{120}
}

func (x *E2SmRcIndicationMessageFormat3Item) GetCellGlobalId() *e2sm_common_ies.Cgi {
	if x != nil {
		return x.CellGlobalId
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat3Item) GetCellContextInfo() []byte {
	if x != nil {
		return x.CellContextInfo
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat3Item) GetCellDeleted() bool {
	if x != nil && x.CellDeleted != nil {
		return *x.CellDeleted
	}
	return false
}

func (x *E2SmRcIndicationMessageFormat3Item) GetNeighborRelationTable() *NeighborRelationInfo {
	if x != nil {
		return x.NeighborRelationTable
	}
	return nil
}

// sequence from e2sm_rc.asn1:664
// {E2SM-RC-IndicationMessage-Format4}
type E2SmRcIndicationMessageFormat4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:0,sizeUB:65535,valueExt"
	UeInfoList []*E2SmRcIndicationMessageFormat4ItemUe `protobuf:"bytes,1,rep,name=ue_info_list,json=ueInfo-List,proto3" json:"ue_info_list,omitempty" aper:"sizeLB:0,sizeUB:65535,valueExt"`
	// @inject_tag: aper:"sizeLB:0,sizeUB:65535,valueExt"
	CellInfoList []*E2SmRcIndicationMessageFormat4ItemCell `protobuf:"bytes,2,rep,name=cell_info_list,json=cellInfo-List,proto3" json:"cell_info_list,omitempty" aper:"sizeLB:0,sizeUB:65535,valueExt"`
}

func (x *E2SmRcIndicationMessageFormat4) Reset() {
	*x = E2SmRcIndicationMessageFormat4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat4) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat4) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat4.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat4) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{121}
}

func (x *E2SmRcIndicationMessageFormat4) GetUeInfoList() []*E2SmRcIndicationMessageFormat4ItemUe {
	if x != nil {
		return x.UeInfoList
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat4) GetCellInfoList() []*E2SmRcIndicationMessageFormat4ItemCell {
	if x != nil {
		return x.CellInfoList
	}
	return nil
}

// sequence from e2sm_rc.asn1:671
// {E2SM-RC-IndicationMessage-Format4-ItemUE}
type E2SmRcIndicationMessageFormat4ItemUe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	UeId *e2sm_common_ies.Ueid `protobuf:"bytes,1,opt,name=ue_id,json=ueID,proto3" json:"ue_id,omitempty" aper:"choiceExt"`
	// @inject_tag: aper:"optional"
	UeContextInfo []byte `protobuf:"bytes,2,opt,name=ue_context_info,json=ueContextInfo,proto3,oneof" json:"ue_context_info,omitempty" aper:"optional"`
	// @inject_tag: aper:"choiceExt"
	CellGlobalId *e2sm_common_ies.Cgi `protobuf:"bytes,3,opt,name=cell_global_id,json=cellGlobal-ID,proto3" json:"cell_global_id,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcIndicationMessageFormat4ItemUe) Reset() {
	*x = E2SmRcIndicationMessageFormat4ItemUe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat4ItemUe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat4ItemUe) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat4ItemUe) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat4ItemUe.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat4ItemUe) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{122}
}

func (x *E2SmRcIndicationMessageFormat4ItemUe) GetUeId() *e2sm_common_ies.Ueid {
	if x != nil {
		return x.UeId
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat4ItemUe) GetUeContextInfo() []byte {
	if x != nil {
		return x.UeContextInfo
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat4ItemUe) GetCellGlobalId() *e2sm_common_ies.Cgi {
	if x != nil {
		return x.CellGlobalId
	}
	return nil
}

// sequence from e2sm_rc.asn1:679
// {E2SM-RC-IndicationMessage-Format4-ItemCell}
type E2SmRcIndicationMessageFormat4ItemCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	CellGlobalId *e2sm_common_ies.Cgi `protobuf:"bytes,1,opt,name=cell_global_id,json=cellGlobal-ID,proto3" json:"cell_global_id,omitempty" aper:"choiceExt"`
	// @inject_tag: aper:"optional"
	CellContextInfo []byte `protobuf:"bytes,2,opt,name=cell_context_info,json=cellContextInfo,proto3,oneof" json:"cell_context_info,omitempty" aper:"optional"`
	// @inject_tag: aper:"optional,valueExt"
	NeighborRelationTable *NeighborRelationInfo `protobuf:"bytes,3,opt,name=neighbor_relation_table,json=neighborRelation-Table,proto3,oneof" json:"neighbor_relation_table,omitempty" aper:"optional,valueExt"`
}

func (x *E2SmRcIndicationMessageFormat4ItemCell) Reset() {
	*x = E2SmRcIndicationMessageFormat4ItemCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat4ItemCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat4ItemCell) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat4ItemCell) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat4ItemCell.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat4ItemCell) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{123}
}

func (x *E2SmRcIndicationMessageFormat4ItemCell) GetCellGlobalId() *e2sm_common_ies.Cgi {
	if x != nil {
		return x.CellGlobalId
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat4ItemCell) GetCellContextInfo() []byte {
	if x != nil {
		return x.CellContextInfo
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat4ItemCell) GetNeighborRelationTable() *NeighborRelationInfo {
	if x != nil {
		return x.NeighborRelationTable
	}
	return nil
}

// sequence from e2sm_rc.asn1:686
// {E2SM-RC-IndicationMessage-Format5}
type E2SmRcIndicationMessageFormat5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:0,sizeUB:65535,valueExt"
	RanPRequestedList []*E2SmRcIndicationMessageFormat5Item `protobuf:"bytes,1,rep,name=ran_p_requested_list,json=ranP-Requested-List,proto3" json:"ran_p_requested_list,omitempty" aper:"sizeLB:0,sizeUB:65535,valueExt"`
}

func (x *E2SmRcIndicationMessageFormat5) Reset() {
	*x = E2SmRcIndicationMessageFormat5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat5) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat5) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat5.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat5) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{124}
}

func (x *E2SmRcIndicationMessageFormat5) GetRanPRequestedList() []*E2SmRcIndicationMessageFormat5Item {
	if x != nil {
		return x.RanPRequestedList
	}
	return nil
}

// sequence from e2sm_rc.asn1:692
// {E2SM-RC-IndicationMessage-Format5-Item}
type E2SmRcIndicationMessageFormat5Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId *RanparameterId `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	RanParameterValueType *RanparameterValueType `protobuf:"bytes,2,opt,name=ran_parameter_value_type,json=ranParameter-valueType,proto3" json:"ran_parameter_value_type,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcIndicationMessageFormat5Item) Reset() {
	*x = E2SmRcIndicationMessageFormat5Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcIndicationMessageFormat5Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcIndicationMessageFormat5Item) ProtoMessage() {}

func (x *E2SmRcIndicationMessageFormat5Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcIndicationMessageFormat5Item.ProtoReflect.Descriptor instead.
func (*E2SmRcIndicationMessageFormat5Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{125}
}

func (x *E2SmRcIndicationMessageFormat5Item) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *E2SmRcIndicationMessageFormat5Item) GetRanParameterValueType() *RanparameterValueType {
	if x != nil {
		return x.RanParameterValueType
	}
	return nil
}

// sequence from e2sm_rc.asn1:706
// {E2SM-RC-CallProcessID}
// @inject_tag: aper:"valueExt"
type E2SmRcCallProcessId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RicCallProcessIdFormats *RicCallProcessIdFormats `protobuf:"bytes,1,opt,name=ric_call_process_id_formats,json=ric-callProcessID-formats,proto3" json:"ric_call_process_id_formats,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcCallProcessId) Reset() {
	*x = E2SmRcCallProcessId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcCallProcessId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcCallProcessId) ProtoMessage() {}

func (x *E2SmRcCallProcessId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcCallProcessId.ProtoReflect.Descriptor instead.
func (*E2SmRcCallProcessId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{126}
}

func (x *E2SmRcCallProcessId) GetRicCallProcessIdFormats() *RicCallProcessIdFormats {
	if x != nil {
		return x.RicCallProcessIdFormats
	}
	return nil
}

type RicCallProcessIdFormats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RicCallProcessIdFormats:
	//	*RicCallProcessIdFormats_CallProcessIdFormat1
	RicCallProcessIdFormats isRicCallProcessIdFormats_RicCallProcessIdFormats `protobuf_oneof:"ric_call_process_id_formats"`
}

func (x *RicCallProcessIdFormats) Reset() {
	*x = RicCallProcessIdFormats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicCallProcessIdFormats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicCallProcessIdFormats) ProtoMessage() {}

func (x *RicCallProcessIdFormats) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicCallProcessIdFormats.ProtoReflect.Descriptor instead.
func (*RicCallProcessIdFormats) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{127}
}

func (m *RicCallProcessIdFormats) GetRicCallProcessIdFormats() isRicCallProcessIdFormats_RicCallProcessIdFormats {
	if m != nil {
		return m.RicCallProcessIdFormats
	}
	return nil
}

func (x *RicCallProcessIdFormats) GetCallProcessIdFormat1() *E2SmRcCallProcessIdFormat1 {
	if x, ok := x.GetRicCallProcessIdFormats().(*RicCallProcessIdFormats_CallProcessIdFormat1); ok {
		return x.CallProcessIdFormat1
	}
	return nil
}

type isRicCallProcessIdFormats_RicCallProcessIdFormats interface {
	isRicCallProcessIdFormats_RicCallProcessIdFormats()
}

type RicCallProcessIdFormats_CallProcessIdFormat1 struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	CallProcessIdFormat1 *E2SmRcCallProcessIdFormat1 `protobuf:"bytes,1,opt,name=call_process_id_format1,json=callProcessIdFormat1,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

func (*RicCallProcessIdFormats_CallProcessIdFormat1) isRicCallProcessIdFormats_RicCallProcessIdFormats() {
}

// sequence from e2sm_rc.asn1:711
// {E2SM-RC-CallProcessID-Format1}
type E2SmRcCallProcessIdFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicCallProcessId *RanCallProcessId `protobuf:"bytes,1,opt,name=ric_call_process_id,json=ric-callProcess-ID,proto3" json:"ric_call_process_id,omitempty"`
}

func (x *E2SmRcCallProcessIdFormat1) Reset() {
	*x = E2SmRcCallProcessIdFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcCallProcessIdFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcCallProcessIdFormat1) ProtoMessage() {}

func (x *E2SmRcCallProcessIdFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcCallProcessIdFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcCallProcessIdFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{128}
}

func (x *E2SmRcCallProcessIdFormat1) GetRicCallProcessId() *RanCallProcessId {
	if x != nil {
		return x.RicCallProcessId
	}
	return nil
}

// sequence from e2sm_rc.asn1:724
// {E2SM-RC-ControlHeader}
// @inject_tag: aper:"valueExt"
type E2SmRcControlHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RicControlHeaderFormats *RicControlHeaderFormats `protobuf:"bytes,1,opt,name=ric_control_header_formats,json=ric-controlHeader-formats,proto3" json:"ric_control_header_formats,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcControlHeader) Reset() {
	*x = E2SmRcControlHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcControlHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcControlHeader) ProtoMessage() {}

func (x *E2SmRcControlHeader) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcControlHeader.ProtoReflect.Descriptor instead.
func (*E2SmRcControlHeader) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{129}
}

func (x *E2SmRcControlHeader) GetRicControlHeaderFormats() *RicControlHeaderFormats {
	if x != nil {
		return x.RicControlHeaderFormats
	}
	return nil
}

type RicControlHeaderFormats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RicControlHeaderFormats:
	//	*RicControlHeaderFormats_ControlHeaderFormat1
	RicControlHeaderFormats isRicControlHeaderFormats_RicControlHeaderFormats `protobuf_oneof:"ric_control_header_formats"`
}

func (x *RicControlHeaderFormats) Reset() {
	*x = RicControlHeaderFormats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicControlHeaderFormats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicControlHeaderFormats) ProtoMessage() {}

func (x *RicControlHeaderFormats) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicControlHeaderFormats.ProtoReflect.Descriptor instead.
func (*RicControlHeaderFormats) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{130}
}

func (m *RicControlHeaderFormats) GetRicControlHeaderFormats() isRicControlHeaderFormats_RicControlHeaderFormats {
	if m != nil {
		return m.RicControlHeaderFormats
	}
	return nil
}

func (x *RicControlHeaderFormats) GetControlHeaderFormat1() *E2SmRcControlHeaderFormat1 {
	if x, ok := x.GetRicControlHeaderFormats().(*RicControlHeaderFormats_ControlHeaderFormat1); ok {
		return x.ControlHeaderFormat1
	}
	return nil
}

type isRicControlHeaderFormats_RicControlHeaderFormats interface {
	isRicControlHeaderFormats_RicControlHeaderFormats()
}

type RicControlHeaderFormats_ControlHeaderFormat1 struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	ControlHeaderFormat1 *E2SmRcControlHeaderFormat1 `protobuf:"bytes,1,opt,name=control_header_format1,json=controlHeaderFormat1,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

func (*RicControlHeaderFormats_ControlHeaderFormat1) isRicControlHeaderFormats_RicControlHeaderFormats() {
}

// sequence from e2sm_rc.asn1:729
// {E2SM-RC-ControlHeader-Format1}
type E2SmRcControlHeaderFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	UeId               *e2sm_common_ies.Ueid         `protobuf:"bytes,1,opt,name=ue_id,json=ueID,proto3" json:"ue_id,omitempty" aper:"choiceExt"`
	RicStyleType       *e2sm_common_ies.RicStyleType `protobuf:"bytes,2,opt,name=ric_style_type,json=ric-Style-Type,proto3" json:"ric_style_type,omitempty"`
	RicControlActionId *RicControlActionId           `protobuf:"bytes,3,opt,name=ric_control_action_id,json=ric-ControlAction-ID,proto3" json:"ric_control_action_id,omitempty"`
	// @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
	RicControlDecision *RicControlDecision `protobuf:"varint,4,opt,name=ric_control_decision,json=ric-ControlDecision,proto3,enum=e2sm_rc.v1.RicControlDecision,oneof" json:"ric_control_decision,omitempty" aper:"optional,valueLB:0,valueUB:1,valueExt"`
}

func (x *E2SmRcControlHeaderFormat1) Reset() {
	*x = E2SmRcControlHeaderFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcControlHeaderFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcControlHeaderFormat1) ProtoMessage() {}

func (x *E2SmRcControlHeaderFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcControlHeaderFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcControlHeaderFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{131}
}

func (x *E2SmRcControlHeaderFormat1) GetUeId() *e2sm_common_ies.Ueid {
	if x != nil {
		return x.UeId
	}
	return nil
}

func (x *E2SmRcControlHeaderFormat1) GetRicStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicStyleType
	}
	return nil
}

func (x *E2SmRcControlHeaderFormat1) GetRicControlActionId() *RicControlActionId {
	if x != nil {
		return x.RicControlActionId
	}
	return nil
}

func (x *E2SmRcControlHeaderFormat1) GetRicControlDecision() RicControlDecision {
	if x != nil && x.RicControlDecision != nil {
		return *x.RicControlDecision
	}
	return RicControlDecision_RIC_CONTROL_DECISION_ACCEPT
}

// sequence from e2sm_rc.asn1:745
// {E2SM-RC-ControlMessage}
// @inject_tag: aper:"valueExt"
type E2SmRcControlMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RicControlMessageFormats *RicControlMessageFormats `protobuf:"bytes,1,opt,name=ric_control_message_formats,json=ric-controlMessage-formats,proto3" json:"ric_control_message_formats,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcControlMessage) Reset() {
	*x = E2SmRcControlMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcControlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcControlMessage) ProtoMessage() {}

func (x *E2SmRcControlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcControlMessage.ProtoReflect.Descriptor instead.
func (*E2SmRcControlMessage) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{132}
}

func (x *E2SmRcControlMessage) GetRicControlMessageFormats() *RicControlMessageFormats {
	if x != nil {
		return x.RicControlMessageFormats
	}
	return nil
}

type RicControlMessageFormats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RicControlMessageFormats:
	//	*RicControlMessageFormats_ControlMessageFormat1
	RicControlMessageFormats isRicControlMessageFormats_RicControlMessageFormats `protobuf_oneof:"ric_control_message_formats"`
}

func (x *RicControlMessageFormats) Reset() {
	*x = RicControlMessageFormats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicControlMessageFormats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicControlMessageFormats) ProtoMessage() {}

func (x *RicControlMessageFormats) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicControlMessageFormats.ProtoReflect.Descriptor instead.
func (*RicControlMessageFormats) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{133}
}

func (m *RicControlMessageFormats) GetRicControlMessageFormats() isRicControlMessageFormats_RicControlMessageFormats {
	if m != nil {
		return m.RicControlMessageFormats
	}
	return nil
}

func (x *RicControlMessageFormats) GetControlMessageFormat1() *E2SmRcControlMessageFormat1 {
	if x, ok := x.GetRicControlMessageFormats().(*RicControlMessageFormats_ControlMessageFormat1); ok {
		return x.ControlMessageFormat1
	}
	return nil
}

type isRicControlMessageFormats_RicControlMessageFormats interface {
	isRicControlMessageFormats_RicControlMessageFormats()
}

type RicControlMessageFormats_ControlMessageFormat1 struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	ControlMessageFormat1 *E2SmRcControlMessageFormat1 `protobuf:"bytes,1,opt,name=control_message_format1,json=controlMessageFormat1,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

func (*RicControlMessageFormats_ControlMessageFormat1) isRicControlMessageFormats_RicControlMessageFormats() {
}

// sequence from e2sm_rc.asn1:750
// {E2SM-RC-ControlMessage-Format1}
type E2SmRcControlMessageFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:0,sizeUB:65535,valueExt"
	RanPList []*E2SmRcControlMessageFormat1Item `protobuf:"bytes,1,rep,name=ran_p_list,json=ranP-List,proto3" json:"ran_p_list,omitempty" aper:"sizeLB:0,sizeUB:65535,valueExt"`
}

func (x *E2SmRcControlMessageFormat1) Reset() {
	*x = E2SmRcControlMessageFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcControlMessageFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcControlMessageFormat1) ProtoMessage() {}

func (x *E2SmRcControlMessageFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcControlMessageFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcControlMessageFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{134}
}

func (x *E2SmRcControlMessageFormat1) GetRanPList() []*E2SmRcControlMessageFormat1Item {
	if x != nil {
		return x.RanPList
	}
	return nil
}

// sequence from e2sm_rc.asn1:756
// {E2SM-RC-ControlMessage-Format1-Item}
type E2SmRcControlMessageFormat1Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId *RanparameterId `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	RanParameterValueType *RanparameterValueType `protobuf:"bytes,2,opt,name=ran_parameter_value_type,json=ranParameter-valueType,proto3" json:"ran_parameter_value_type,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcControlMessageFormat1Item) Reset() {
	*x = E2SmRcControlMessageFormat1Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcControlMessageFormat1Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcControlMessageFormat1Item) ProtoMessage() {}

func (x *E2SmRcControlMessageFormat1Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcControlMessageFormat1Item.ProtoReflect.Descriptor instead.
func (*E2SmRcControlMessageFormat1Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{135}
}

func (x *E2SmRcControlMessageFormat1Item) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *E2SmRcControlMessageFormat1Item) GetRanParameterValueType() *RanparameterValueType {
	if x != nil {
		return x.RanParameterValueType
	}
	return nil
}

// sequence from e2sm_rc.asn1:770
// {E2SM-RC-ControlOutcome}
// @inject_tag: aper:"valueExt"
type E2SmRcControlOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"choiceExt"
	RicControlOutcomeFormats *RicControlOutcomeFormats `protobuf:"bytes,1,opt,name=ric_control_outcome_formats,json=ric-controlOutcome-formats,proto3" json:"ric_control_outcome_formats,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcControlOutcome) Reset() {
	*x = E2SmRcControlOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcControlOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcControlOutcome) ProtoMessage() {}

func (x *E2SmRcControlOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcControlOutcome.ProtoReflect.Descriptor instead.
func (*E2SmRcControlOutcome) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{136}
}

func (x *E2SmRcControlOutcome) GetRicControlOutcomeFormats() *RicControlOutcomeFormats {
	if x != nil {
		return x.RicControlOutcomeFormats
	}
	return nil
}

type RicControlOutcomeFormats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RicControlOutcomeFormats:
	//	*RicControlOutcomeFormats_ControlOutcomeFormat1
	RicControlOutcomeFormats isRicControlOutcomeFormats_RicControlOutcomeFormats `protobuf_oneof:"ric_control_outcome_formats"`
}

func (x *RicControlOutcomeFormats) Reset() {
	*x = RicControlOutcomeFormats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicControlOutcomeFormats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicControlOutcomeFormats) ProtoMessage() {}

func (x *RicControlOutcomeFormats) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicControlOutcomeFormats.ProtoReflect.Descriptor instead.
func (*RicControlOutcomeFormats) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{137}
}

func (m *RicControlOutcomeFormats) GetRicControlOutcomeFormats() isRicControlOutcomeFormats_RicControlOutcomeFormats {
	if m != nil {
		return m.RicControlOutcomeFormats
	}
	return nil
}

func (x *RicControlOutcomeFormats) GetControlOutcomeFormat1() *E2SmRcControlOutcomeFormat1 {
	if x, ok := x.GetRicControlOutcomeFormats().(*RicControlOutcomeFormats_ControlOutcomeFormat1); ok {
		return x.ControlOutcomeFormat1
	}
	return nil
}

type isRicControlOutcomeFormats_RicControlOutcomeFormats interface {
	isRicControlOutcomeFormats_RicControlOutcomeFormats()
}

type RicControlOutcomeFormats_ControlOutcomeFormat1 struct {
	// @inject_tag: aper:"choiceIdx:1,valueExt"
	ControlOutcomeFormat1 *E2SmRcControlOutcomeFormat1 `protobuf:"bytes,1,opt,name=control_outcome_format1,json=controlOutcomeFormat1,proto3,oneof" aper:"choiceIdx:1,valueExt"`
}

func (*RicControlOutcomeFormats_ControlOutcomeFormat1) isRicControlOutcomeFormats_RicControlOutcomeFormats() {
}

// sequence from e2sm_rc.asn1:775
// {E2SM-RC-ControlOutcome-Format1}
type E2SmRcControlOutcomeFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:0,sizeUB:255,valueExt"
	RanPList []*E2SmRcControlOutcomeFormat1Item `protobuf:"bytes,1,rep,name=ran_p_list,json=ranP-List,proto3" json:"ran_p_list,omitempty" aper:"sizeLB:0,sizeUB:255,valueExt"`
}

func (x *E2SmRcControlOutcomeFormat1) Reset() {
	*x = E2SmRcControlOutcomeFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcControlOutcomeFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcControlOutcomeFormat1) ProtoMessage() {}

func (x *E2SmRcControlOutcomeFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcControlOutcomeFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcControlOutcomeFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{138}
}

func (x *E2SmRcControlOutcomeFormat1) GetRanPList() []*E2SmRcControlOutcomeFormat1Item {
	if x != nil {
		return x.RanPList
	}
	return nil
}

// sequence from e2sm_rc.asn1:781
// {E2SM-RC-ControlOutcome-Format1-Item}
type E2SmRcControlOutcomeFormat1Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId *RanparameterId `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	// @inject_tag: aper:"choiceExt"
	RanParameterValue *RanparameterValue `protobuf:"bytes,2,opt,name=ran_parameter_value,json=ranParameter-value,proto3" json:"ran_parameter_value,omitempty" aper:"choiceExt"`
}

func (x *E2SmRcControlOutcomeFormat1Item) Reset() {
	*x = E2SmRcControlOutcomeFormat1Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcControlOutcomeFormat1Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcControlOutcomeFormat1Item) ProtoMessage() {}

func (x *E2SmRcControlOutcomeFormat1Item) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcControlOutcomeFormat1Item.ProtoReflect.Descriptor instead.
func (*E2SmRcControlOutcomeFormat1Item) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{139}
}

func (x *E2SmRcControlOutcomeFormat1Item) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *E2SmRcControlOutcomeFormat1Item) GetRanParameterValue() *RanparameterValue {
	if x != nil {
		return x.RanParameterValue
	}
	return nil
}

// sequence from e2sm_rc.asn1:794
// {E2SM-RC-RANFunctionDefinition}
// @inject_tag: aper:"valueExt"
type E2SmRcRanfunctionDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"valueExt"
	RanFunctionName *e2sm_common_ies.RanfunctionName `protobuf:"bytes,1,opt,name=ran_function_name,json=ranFunction-Name,proto3" json:"ran_function_name,omitempty" aper:"valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	RanFunctionDefinitionEventTrigger *RanfunctionDefinitionEventTrigger `protobuf:"bytes,2,opt,name=ran_function_definition_event_trigger,json=ranFunctionDefinition-EventTrigger,proto3,oneof" json:"ran_function_definition_event_trigger,omitempty" aper:"optional,valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	RanFunctionDefinitionReport *RanfunctionDefinitionReport `protobuf:"bytes,3,opt,name=ran_function_definition_report,json=ranFunctionDefinition-Report,proto3,oneof" json:"ran_function_definition_report,omitempty" aper:"optional,valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	RanFunctionDefinitionInsert *RanfunctionDefinitionInsert `protobuf:"bytes,4,opt,name=ran_function_definition_insert,json=ranFunctionDefinition-Insert,proto3,oneof" json:"ran_function_definition_insert,omitempty" aper:"optional,valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	RanFunctionDefinitionControl *RanfunctionDefinitionControl `protobuf:"bytes,5,opt,name=ran_function_definition_control,json=ranFunctionDefinition-Control,proto3,oneof" json:"ran_function_definition_control,omitempty" aper:"optional,valueExt"`
	// @inject_tag: aper:"optional,valueExt"
	RanFunctionDefinitionPolicy *RanfunctionDefinitionPolicy `protobuf:"bytes,6,opt,name=ran_function_definition_policy,json=ranFunctionDefinition-Policy,proto3,oneof" json:"ran_function_definition_policy,omitempty" aper:"optional,valueExt"`
}

func (x *E2SmRcRanfunctionDefinition) Reset() {
	*x = E2SmRcRanfunctionDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcRanfunctionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcRanfunctionDefinition) ProtoMessage() {}

func (x *E2SmRcRanfunctionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcRanfunctionDefinition.ProtoReflect.Descriptor instead.
func (*E2SmRcRanfunctionDefinition) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{140}
}

func (x *E2SmRcRanfunctionDefinition) GetRanFunctionName() *e2sm_common_ies.RanfunctionName {
	if x != nil {
		return x.RanFunctionName
	}
	return nil
}

func (x *E2SmRcRanfunctionDefinition) GetRanFunctionDefinitionEventTrigger() *RanfunctionDefinitionEventTrigger {
	if x != nil {
		return x.RanFunctionDefinitionEventTrigger
	}
	return nil
}

func (x *E2SmRcRanfunctionDefinition) GetRanFunctionDefinitionReport() *RanfunctionDefinitionReport {
	if x != nil {
		return x.RanFunctionDefinitionReport
	}
	return nil
}

func (x *E2SmRcRanfunctionDefinition) GetRanFunctionDefinitionInsert() *RanfunctionDefinitionInsert {
	if x != nil {
		return x.RanFunctionDefinitionInsert
	}
	return nil
}

func (x *E2SmRcRanfunctionDefinition) GetRanFunctionDefinitionControl() *RanfunctionDefinitionControl {
	if x != nil {
		return x.RanFunctionDefinitionControl
	}
	return nil
}

func (x *E2SmRcRanfunctionDefinition) GetRanFunctionDefinitionPolicy() *RanfunctionDefinitionPolicy {
	if x != nil {
		return x.RanFunctionDefinitionPolicy
	}
	return nil
}

// sequence from e2sm_rc.asn1:809
// {RANFunctionDefinition-EventTrigger}
type RanfunctionDefinitionEventTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeB:1,sizeUB:63"
	RicEventTriggerStyleList []*RanfunctionDefinitionEventTriggerStyleItem `protobuf:"bytes,1,rep,name=ric_event_trigger_style_list,json=ric-EventTriggerStyle-List,proto3" json:"ric_event_trigger_style_list,omitempty" aper:"sizeB:1,sizeUB:63"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RanL2ParametersList []*L2ParametersRanparameterItem `protobuf:"bytes,2,rep,name=ran_l2_parameters_list,json=ran-L2Parameters-List,proto3" json:"ran_l2_parameters_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RanCallProcessTypesList []*RanfunctionDefinitionEventTriggerCallProcessItem `protobuf:"bytes,3,rep,name=ran_call_process_types_list,json=ran-CallProcessTypes-List,proto3" json:"ran_call_process_types_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RanUeidentificationParametersList []*UeidentificationRanparameterItem `protobuf:"bytes,4,rep,name=ran_ueidentification_parameters_list,json=ran-UEIdentificationParameters-List,proto3" json:"ran_ueidentification_parameters_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RanCellIdentificationParametersList []*CellIdentificationRanparameterItem `protobuf:"bytes,5,rep,name=ran_cell_identification_parameters_list,json=ran-CellIdentificationParameters-List,proto3" json:"ran_cell_identification_parameters_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanfunctionDefinitionEventTrigger) Reset() {
	*x = RanfunctionDefinitionEventTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionEventTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionEventTrigger) ProtoMessage() {}

func (x *RanfunctionDefinitionEventTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionEventTrigger.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionEventTrigger) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{141}
}

func (x *RanfunctionDefinitionEventTrigger) GetRicEventTriggerStyleList() []*RanfunctionDefinitionEventTriggerStyleItem {
	if x != nil {
		return x.RicEventTriggerStyleList
	}
	return nil
}

func (x *RanfunctionDefinitionEventTrigger) GetRanL2ParametersList() []*L2ParametersRanparameterItem {
	if x != nil {
		return x.RanL2ParametersList
	}
	return nil
}

func (x *RanfunctionDefinitionEventTrigger) GetRanCallProcessTypesList() []*RanfunctionDefinitionEventTriggerCallProcessItem {
	if x != nil {
		return x.RanCallProcessTypesList
	}
	return nil
}

func (x *RanfunctionDefinitionEventTrigger) GetRanUeidentificationParametersList() []*UeidentificationRanparameterItem {
	if x != nil {
		return x.RanUeidentificationParametersList
	}
	return nil
}

func (x *RanfunctionDefinitionEventTrigger) GetRanCellIdentificationParametersList() []*CellIdentificationRanparameterItem {
	if x != nil {
		return x.RanCellIdentificationParametersList
	}
	return nil
}

// sequence from e2sm_rc.asn1:818
// {RANFunctionDefinition-EventTrigger-Style-Item}
type RanfunctionDefinitionEventTriggerStyleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicEventTriggerStyleType  *e2sm_common_ies.RicStyleType  `protobuf:"bytes,1,opt,name=ric_event_trigger_style_type,json=ric-EventTriggerStyle-Type,proto3" json:"ric_event_trigger_style_type,omitempty"`
	RicEventTriggerStyleName  *e2sm_common_ies.RicStyleName  `protobuf:"bytes,2,opt,name=ric_event_trigger_style_name,json=ric-EventTriggerStyle-Name,proto3" json:"ric_event_trigger_style_name,omitempty"`
	RicEventTriggerFormatType *e2sm_common_ies.RicFormatType `protobuf:"bytes,3,opt,name=ric_event_trigger_format_type,json=ric-EventTriggerFormat-Type,proto3" json:"ric_event_trigger_format_type,omitempty"`
}

func (x *RanfunctionDefinitionEventTriggerStyleItem) Reset() {
	*x = RanfunctionDefinitionEventTriggerStyleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionEventTriggerStyleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionEventTriggerStyleItem) ProtoMessage() {}

func (x *RanfunctionDefinitionEventTriggerStyleItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionEventTriggerStyleItem.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionEventTriggerStyleItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{142}
}

func (x *RanfunctionDefinitionEventTriggerStyleItem) GetRicEventTriggerStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicEventTriggerStyleType
	}
	return nil
}

func (x *RanfunctionDefinitionEventTriggerStyleItem) GetRicEventTriggerStyleName() *e2sm_common_ies.RicStyleName {
	if x != nil {
		return x.RicEventTriggerStyleName
	}
	return nil
}

func (x *RanfunctionDefinitionEventTriggerStyleItem) GetRicEventTriggerFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicEventTriggerFormatType
	}
	return nil
}

// sequence from e2sm_rc.asn1:826
// {L2Parameters-RANParameter-Item}
type L2ParametersRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-Name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt,fromValueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt,fromValueExt"`
}

func (x *L2ParametersRanparameterItem) Reset() {
	*x = L2ParametersRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2ParametersRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2ParametersRanparameterItem) ProtoMessage() {}

func (x *L2ParametersRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2ParametersRanparameterItem.ProtoReflect.Descriptor instead.
func (*L2ParametersRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{143}
}

func (x *L2ParametersRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *L2ParametersRanparameterItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *L2ParametersRanparameterItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:834
// {UEIdentification-RANParameter-Item}
type UeidentificationRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt,fromValueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt,fromValueExt"`
}

func (x *UeidentificationRanparameterItem) Reset() {
	*x = UeidentificationRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeidentificationRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeidentificationRanparameterItem) ProtoMessage() {}

func (x *UeidentificationRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeidentificationRanparameterItem.ProtoReflect.Descriptor instead.
func (*UeidentificationRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{144}
}

func (x *UeidentificationRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *UeidentificationRanparameterItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *UeidentificationRanparameterItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:842
// {CellIdentification-RANParameter-Item}
type CellIdentificationRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt,fromValueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt,fromValueExt"`
}

func (x *CellIdentificationRanparameterItem) Reset() {
	*x = CellIdentificationRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellIdentificationRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellIdentificationRanparameterItem) ProtoMessage() {}

func (x *CellIdentificationRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellIdentificationRanparameterItem.ProtoReflect.Descriptor instead.
func (*CellIdentificationRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{145}
}

func (x *CellIdentificationRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *CellIdentificationRanparameterItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *CellIdentificationRanparameterItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:849
// {RANFunctionDefinition-EventTrigger-CallProcess-Item}
type RanfunctionDefinitionEventTriggerCallProcessItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallProcessTypeId   *RicCallProcessTypeId   `protobuf:"bytes,1,opt,name=call_process_type_id,json=callProcessType-ID,proto3" json:"call_process_type_id,omitempty"`
	CallProcessTypeName *RicCallProcessTypeName `protobuf:"bytes,2,opt,name=call_process_type_name,json=callProcessType-Name,proto3" json:"call_process_type_name,omitempty"`
	// @inject_tag: aper:"sizeLB:1,sizeUB:65535,valueExt"
	CallProcessBreakpointsList []*RanfunctionDefinitionEventTriggerBreakpointItem `protobuf:"bytes,3,rep,name=call_process_breakpoints_list,json=callProcessBreakpoints-List,proto3" json:"call_process_breakpoints_list,omitempty" aper:"sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanfunctionDefinitionEventTriggerCallProcessItem) Reset() {
	*x = RanfunctionDefinitionEventTriggerCallProcessItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionEventTriggerCallProcessItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionEventTriggerCallProcessItem) ProtoMessage() {}

func (x *RanfunctionDefinitionEventTriggerCallProcessItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionEventTriggerCallProcessItem.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionEventTriggerCallProcessItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{146}
}

func (x *RanfunctionDefinitionEventTriggerCallProcessItem) GetCallProcessTypeId() *RicCallProcessTypeId {
	if x != nil {
		return x.CallProcessTypeId
	}
	return nil
}

func (x *RanfunctionDefinitionEventTriggerCallProcessItem) GetCallProcessTypeName() *RicCallProcessTypeName {
	if x != nil {
		return x.CallProcessTypeName
	}
	return nil
}

func (x *RanfunctionDefinitionEventTriggerCallProcessItem) GetCallProcessBreakpointsList() []*RanfunctionDefinitionEventTriggerBreakpointItem {
	if x != nil {
		return x.CallProcessBreakpointsList
	}
	return nil
}

// sequence from e2sm_rc.asn1:857
// {RANFunctionDefinition-EventTrigger-Breakpoint-Item}
type RanfunctionDefinitionEventTriggerBreakpointItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallProcessBreakpointId   *RicCallProcessBreakpointId   `protobuf:"bytes,1,opt,name=call_process_breakpoint_id,json=callProcessBreakpoint-ID,proto3" json:"call_process_breakpoint_id,omitempty"`
	CallProcessBreakpointName *RicCallProcessBreakpointName `protobuf:"bytes,2,opt,name=call_process_breakpoint_name,json=callProcessBreakpoint-Name,proto3" json:"call_process_breakpoint_name,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RanCallProcessBreakpointParametersList []*CallProcessBreakpointRanparameterItem `protobuf:"bytes,3,rep,name=ran_call_process_breakpoint_parameters_list,json=ran-CallProcessBreakpointParameters-List,proto3" json:"ran_call_process_breakpoint_parameters_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanfunctionDefinitionEventTriggerBreakpointItem) Reset() {
	*x = RanfunctionDefinitionEventTriggerBreakpointItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionEventTriggerBreakpointItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionEventTriggerBreakpointItem) ProtoMessage() {}

func (x *RanfunctionDefinitionEventTriggerBreakpointItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionEventTriggerBreakpointItem.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionEventTriggerBreakpointItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{147}
}

func (x *RanfunctionDefinitionEventTriggerBreakpointItem) GetCallProcessBreakpointId() *RicCallProcessBreakpointId {
	if x != nil {
		return x.CallProcessBreakpointId
	}
	return nil
}

func (x *RanfunctionDefinitionEventTriggerBreakpointItem) GetCallProcessBreakpointName() *RicCallProcessBreakpointName {
	if x != nil {
		return x.CallProcessBreakpointName
	}
	return nil
}

func (x *RanfunctionDefinitionEventTriggerBreakpointItem) GetRanCallProcessBreakpointParametersList() []*CallProcessBreakpointRanparameterItem {
	if x != nil {
		return x.RanCallProcessBreakpointParametersList
	}
	return nil
}

// sequence from e2sm_rc.asn1:865
// {CallProcessBreakpoint-RANParameter-Item}
type CallProcessBreakpointRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt,fromValueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt,fromValueExt"`
}

func (x *CallProcessBreakpointRanparameterItem) Reset() {
	*x = CallProcessBreakpointRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallProcessBreakpointRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallProcessBreakpointRanparameterItem) ProtoMessage() {}

func (x *CallProcessBreakpointRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallProcessBreakpointRanparameterItem.ProtoReflect.Descriptor instead.
func (*CallProcessBreakpointRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{148}
}

func (x *CallProcessBreakpointRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *CallProcessBreakpointRanparameterItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *CallProcessBreakpointRanparameterItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:878
// {RANFunctionDefinition-Report}
type RanfunctionDefinitionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:63,valueExt"
	RicReportStyleList []*RanfunctionDefinitionReportItem `protobuf:"bytes,1,rep,name=ric_report_style_list,json=ric-ReportStyle-List,proto3" json:"ric_report_style_list,omitempty" aper:"sizeLB:1,sizeUB:63,valueExt"`
}

func (x *RanfunctionDefinitionReport) Reset() {
	*x = RanfunctionDefinitionReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionReport) ProtoMessage() {}

func (x *RanfunctionDefinitionReport) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionReport.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionReport) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{149}
}

func (x *RanfunctionDefinitionReport) GetRicReportStyleList() []*RanfunctionDefinitionReportItem {
	if x != nil {
		return x.RicReportStyleList
	}
	return nil
}

// sequence from e2sm_rc.asn1:884
// {RANFunctionDefinition-Report-Item}
type RanfunctionDefinitionReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicReportStyleType                *e2sm_common_ies.RicStyleType  `protobuf:"bytes,1,opt,name=ric_report_style_type,json=ric-ReportStyle-Type,proto3" json:"ric_report_style_type,omitempty"`
	RicReportStyleName                *e2sm_common_ies.RicStyleName  `protobuf:"bytes,2,opt,name=ric_report_style_name,json=ric-ReportStyle-Name,proto3" json:"ric_report_style_name,omitempty"`
	RicSupportedEventTriggerStyleType *e2sm_common_ies.RicStyleType  `protobuf:"bytes,3,opt,name=ric_supported_event_trigger_style_type,json=ric-SupportedEventTriggerStyle-Type,proto3" json:"ric_supported_event_trigger_style_type,omitempty"`
	RicReportActionFormatType         *e2sm_common_ies.RicFormatType `protobuf:"bytes,4,opt,name=ric_report_action_format_type,json=ric-ReportActionFormat-Type,proto3" json:"ric_report_action_format_type,omitempty"`
	RicIndicationHeaderFormatType     *e2sm_common_ies.RicFormatType `protobuf:"bytes,5,opt,name=ric_indication_header_format_type,json=ric-IndicationHeaderFormat-Type,proto3" json:"ric_indication_header_format_type,omitempty"`
	RicIndicationMessageFormatType    *e2sm_common_ies.RicFormatType `protobuf:"bytes,6,opt,name=ric_indication_message_format_type,json=ric-IndicationMessageFormat-Type,proto3" json:"ric_indication_message_format_type,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RanReportParametersList []*ReportRanparameterItem `protobuf:"bytes,7,rep,name=ran_report_parameters_list,json=ran-ReportParameters-List,proto3" json:"ran_report_parameters_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanfunctionDefinitionReportItem) Reset() {
	*x = RanfunctionDefinitionReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionReportItem) ProtoMessage() {}

func (x *RanfunctionDefinitionReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionReportItem.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionReportItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{150}
}

func (x *RanfunctionDefinitionReportItem) GetRicReportStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicReportStyleType
	}
	return nil
}

func (x *RanfunctionDefinitionReportItem) GetRicReportStyleName() *e2sm_common_ies.RicStyleName {
	if x != nil {
		return x.RicReportStyleName
	}
	return nil
}

func (x *RanfunctionDefinitionReportItem) GetRicSupportedEventTriggerStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicSupportedEventTriggerStyleType
	}
	return nil
}

func (x *RanfunctionDefinitionReportItem) GetRicReportActionFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicReportActionFormatType
	}
	return nil
}

func (x *RanfunctionDefinitionReportItem) GetRicIndicationHeaderFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicIndicationHeaderFormatType
	}
	return nil
}

func (x *RanfunctionDefinitionReportItem) GetRicIndicationMessageFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicIndicationMessageFormatType
	}
	return nil
}

func (x *RanfunctionDefinitionReportItem) GetRanReportParametersList() []*ReportRanparameterItem {
	if x != nil {
		return x.RanReportParametersList
	}
	return nil
}

// sequence from e2sm_rc.asn1:896
// {Report-RANParameter-Item}
type ReportRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt,fromValueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt,fromValueExt"`
}

func (x *ReportRanparameterItem) Reset() {
	*x = ReportRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRanparameterItem) ProtoMessage() {}

func (x *ReportRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRanparameterItem.ProtoReflect.Descriptor instead.
func (*ReportRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{151}
}

func (x *ReportRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *ReportRanparameterItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *ReportRanparameterItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:909
// {RANFunctionDefinition-Insert}
type RanfunctionDefinitionInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:,sizeUB:63,valueExt"
	RicInsertStyleList []*RanfunctionDefinitionInsertItem `protobuf:"bytes,1,rep,name=ric_insert_style_list,json=ric-InsertStyle-List,proto3" json:"ric_insert_style_list,omitempty" aper:"sizeLB:,sizeUB:63,valueExt"`
}

func (x *RanfunctionDefinitionInsert) Reset() {
	*x = RanfunctionDefinitionInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionInsert) ProtoMessage() {}

func (x *RanfunctionDefinitionInsert) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionInsert.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionInsert) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{152}
}

func (x *RanfunctionDefinitionInsert) GetRicInsertStyleList() []*RanfunctionDefinitionInsertItem {
	if x != nil {
		return x.RicInsertStyleList
	}
	return nil
}

// sequence from e2sm_rc.asn1:914
// {RANFunctionDefinition-Insert-Item}
type RanfunctionDefinitionInsertItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicInsertStyleType                *e2sm_common_ies.RicStyleType  `protobuf:"bytes,1,opt,name=ric_insert_style_type,json=ric-InsertStyle-Type,proto3" json:"ric_insert_style_type,omitempty"`
	RicInsertStyleName                *e2sm_common_ies.RicStyleName  `protobuf:"bytes,2,opt,name=ric_insert_style_name,json=ric-InsertStyle-Name,proto3" json:"ric_insert_style_name,omitempty"`
	RicSupportedEventTriggerStyleType *e2sm_common_ies.RicStyleType  `protobuf:"bytes,3,opt,name=ric_supported_event_trigger_style_type,json=ric-SupportedEventTriggerStyle-Type,proto3" json:"ric_supported_event_trigger_style_type,omitempty"`
	RicActionDefinitionFormatType     *e2sm_common_ies.RicFormatType `protobuf:"bytes,4,opt,name=ric_action_definition_format_type,json=ric-ActionDefinitionFormat-Type,proto3" json:"ric_action_definition_format_type,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RicInsertIndicationList        []*RanfunctionDefinitionInsertIndicationItem `protobuf:"bytes,5,rep,name=ric_insert_indication_list,json=ric-InsertIndication-List,proto3" json:"ric_insert_indication_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
	RicIndicationHeaderFormatType  *e2sm_common_ies.RicFormatType               `protobuf:"bytes,6,opt,name=ric_indication_header_format_type,json=ric-IndicationHeaderFormat-Type,proto3" json:"ric_indication_header_format_type,omitempty"`
	RicIndicationMessageFormatType *e2sm_common_ies.RicFormatType               `protobuf:"bytes,7,opt,name=ric_indication_message_format_type,json=ric-IndicationMessageFormat-Type,proto3" json:"ric_indication_message_format_type,omitempty"`
	RicCallProcessIdformatType     *e2sm_common_ies.RicFormatType               `protobuf:"bytes,8,opt,name=ric_call_process_idformat_type,json=ric-CallProcessIDFormat-Type,proto3" json:"ric_call_process_idformat_type,omitempty"`
}

func (x *RanfunctionDefinitionInsertItem) Reset() {
	*x = RanfunctionDefinitionInsertItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionInsertItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionInsertItem) ProtoMessage() {}

func (x *RanfunctionDefinitionInsertItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionInsertItem.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionInsertItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{153}
}

func (x *RanfunctionDefinitionInsertItem) GetRicInsertStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicInsertStyleType
	}
	return nil
}

func (x *RanfunctionDefinitionInsertItem) GetRicInsertStyleName() *e2sm_common_ies.RicStyleName {
	if x != nil {
		return x.RicInsertStyleName
	}
	return nil
}

func (x *RanfunctionDefinitionInsertItem) GetRicSupportedEventTriggerStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicSupportedEventTriggerStyleType
	}
	return nil
}

func (x *RanfunctionDefinitionInsertItem) GetRicActionDefinitionFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicActionDefinitionFormatType
	}
	return nil
}

func (x *RanfunctionDefinitionInsertItem) GetRicInsertIndicationList() []*RanfunctionDefinitionInsertIndicationItem {
	if x != nil {
		return x.RicInsertIndicationList
	}
	return nil
}

func (x *RanfunctionDefinitionInsertItem) GetRicIndicationHeaderFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicIndicationHeaderFormatType
	}
	return nil
}

func (x *RanfunctionDefinitionInsertItem) GetRicIndicationMessageFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicIndicationMessageFormatType
	}
	return nil
}

func (x *RanfunctionDefinitionInsertItem) GetRicCallProcessIdformatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicCallProcessIdformatType
	}
	return nil
}

// sequence from e2sm_rc.asn1:927
// {RANFunctionDefinition-Insert-Indication-Item}
type RanfunctionDefinitionInsertIndicationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicInsertIndicationId   *RicInsertIndicationId   `protobuf:"bytes,1,opt,name=ric_insert_indication_id,json=ric-InsertIndication-ID,proto3" json:"ric_insert_indication_id,omitempty"`
	RicInsertIndicationName *RicInsertIndicationName `protobuf:"bytes,2,opt,name=ric_insert_indication_name,json=ric-InsertIndication-Name,proto3" json:"ric_insert_indication_name,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RanInsertIndicationParametersList []*InsertIndicationRanparameterItem `protobuf:"bytes,3,rep,name=ran_insert_indication_parameters_list,json=ran-InsertIndicationParameters-List,proto3" json:"ran_insert_indication_parameters_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanfunctionDefinitionInsertIndicationItem) Reset() {
	*x = RanfunctionDefinitionInsertIndicationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionInsertIndicationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionInsertIndicationItem) ProtoMessage() {}

func (x *RanfunctionDefinitionInsertIndicationItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionInsertIndicationItem.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionInsertIndicationItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{154}
}

func (x *RanfunctionDefinitionInsertIndicationItem) GetRicInsertIndicationId() *RicInsertIndicationId {
	if x != nil {
		return x.RicInsertIndicationId
	}
	return nil
}

func (x *RanfunctionDefinitionInsertIndicationItem) GetRicInsertIndicationName() *RicInsertIndicationName {
	if x != nil {
		return x.RicInsertIndicationName
	}
	return nil
}

func (x *RanfunctionDefinitionInsertIndicationItem) GetRanInsertIndicationParametersList() []*InsertIndicationRanparameterItem {
	if x != nil {
		return x.RanInsertIndicationParametersList
	}
	return nil
}

// sequence from e2sm_rc.asn1:935
// {InsertIndication-RANParameter-Item}
type InsertIndicationRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt,fromValueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt,fromValueExt"`
}

func (x *InsertIndicationRanparameterItem) Reset() {
	*x = InsertIndicationRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertIndicationRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertIndicationRanparameterItem) ProtoMessage() {}

func (x *InsertIndicationRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertIndicationRanparameterItem.ProtoReflect.Descriptor instead.
func (*InsertIndicationRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{155}
}

func (x *InsertIndicationRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *InsertIndicationRanparameterItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *InsertIndicationRanparameterItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:947
// {RANFunctionDefinition-Control}
type RanfunctionDefinitionControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:63,valueExt"
	RicControlStyleList []*RanfunctionDefinitionControlItem `protobuf:"bytes,1,rep,name=ric_control_style_list,json=ric-ControlStyle-List,proto3" json:"ric_control_style_list,omitempty" aper:"sizeLB:1,sizeUB:63,valueExt"`
}

func (x *RanfunctionDefinitionControl) Reset() {
	*x = RanfunctionDefinitionControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionControl) ProtoMessage() {}

func (x *RanfunctionDefinitionControl) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionControl.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionControl) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{156}
}

func (x *RanfunctionDefinitionControl) GetRicControlStyleList() []*RanfunctionDefinitionControlItem {
	if x != nil {
		return x.RicControlStyleList
	}
	return nil
}

// sequence from e2sm_rc.asn1:953
// {RANFunctionDefinition-Control-Item}
type RanfunctionDefinitionControlItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicControlStyleType *e2sm_common_ies.RicStyleType `protobuf:"bytes,1,opt,name=ric_control_style_type,json=ric-ControlStyle-Type,proto3" json:"ric_control_style_type,omitempty"`
	RicControlStyleName *e2sm_common_ies.RicStyleName `protobuf:"bytes,2,opt,name=ric_control_style_name,json=ric-ControlStyle-Name,proto3" json:"ric_control_style_name,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RicControlActionList        []*RanfunctionDefinitionControlActionItem `protobuf:"bytes,3,rep,name=ric_control_action_list,json=ric-ControlAction-List,proto3" json:"ric_control_action_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
	RicControlHeaderFormatType  *e2sm_common_ies.RicFormatType            `protobuf:"bytes,4,opt,name=ric_control_header_format_type,json=ric-ControlHeaderFormat-Type,proto3" json:"ric_control_header_format_type,omitempty"`
	RicControlMessageFormatType *e2sm_common_ies.RicFormatType            `protobuf:"bytes,5,opt,name=ric_control_message_format_type,json=ric-ControlMessageFormat-Type,proto3" json:"ric_control_message_format_type,omitempty"`
	// @inject_tag: aper:"optional"
	RicCallProcessIdformatType  *e2sm_common_ies.RicFormatType `protobuf:"bytes,6,opt,name=ric_call_process_idformat_type,json=ric-CallProcessIDFormat-Type,proto3,oneof" json:"ric_call_process_idformat_type,omitempty" aper:"optional"`
	RicControlOutcomeFormatType *e2sm_common_ies.RicFormatType `protobuf:"bytes,7,opt,name=ric_control_outcome_format_type,json=ric-ControlOutcomeFormat-Type,proto3" json:"ric_control_outcome_format_type,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:255,valueExt"
	RanControlOutcomeParametersList []*ControlOutcomeRanparameterItem `protobuf:"bytes,8,rep,name=ran_control_outcome_parameters_list,json=ran-ControlOutcomeParameters-List,proto3" json:"ran_control_outcome_parameters_list,omitempty" aper:"optional,sizeLB:1,sizeUB:255,valueExt"`
}

func (x *RanfunctionDefinitionControlItem) Reset() {
	*x = RanfunctionDefinitionControlItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionControlItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionControlItem) ProtoMessage() {}

func (x *RanfunctionDefinitionControlItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionControlItem.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionControlItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{157}
}

func (x *RanfunctionDefinitionControlItem) GetRicControlStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicControlStyleType
	}
	return nil
}

func (x *RanfunctionDefinitionControlItem) GetRicControlStyleName() *e2sm_common_ies.RicStyleName {
	if x != nil {
		return x.RicControlStyleName
	}
	return nil
}

func (x *RanfunctionDefinitionControlItem) GetRicControlActionList() []*RanfunctionDefinitionControlActionItem {
	if x != nil {
		return x.RicControlActionList
	}
	return nil
}

func (x *RanfunctionDefinitionControlItem) GetRicControlHeaderFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicControlHeaderFormatType
	}
	return nil
}

func (x *RanfunctionDefinitionControlItem) GetRicControlMessageFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicControlMessageFormatType
	}
	return nil
}

func (x *RanfunctionDefinitionControlItem) GetRicCallProcessIdformatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicCallProcessIdformatType
	}
	return nil
}

func (x *RanfunctionDefinitionControlItem) GetRicControlOutcomeFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicControlOutcomeFormatType
	}
	return nil
}

func (x *RanfunctionDefinitionControlItem) GetRanControlOutcomeParametersList() []*ControlOutcomeRanparameterItem {
	if x != nil {
		return x.RanControlOutcomeParametersList
	}
	return nil
}

// sequence from e2sm_rc.asn1:965
// {ControlOutcome-RANParameter-Item}
type ControlOutcomeRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt,fromValueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt,fromValueExt"`
}

func (x *ControlOutcomeRanparameterItem) Reset() {
	*x = ControlOutcomeRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlOutcomeRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlOutcomeRanparameterItem) ProtoMessage() {}

func (x *ControlOutcomeRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlOutcomeRanparameterItem.ProtoReflect.Descriptor instead.
func (*ControlOutcomeRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{158}
}

func (x *ControlOutcomeRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *ControlOutcomeRanparameterItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *ControlOutcomeRanparameterItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:973
// {RANFunctionDefinition-Control-Action-Item}
type RanfunctionDefinitionControlActionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicControlActionId   *RicControlActionId   `protobuf:"bytes,1,opt,name=ric_control_action_id,json=ric-ControlAction-ID,proto3" json:"ric_control_action_id,omitempty"`
	RicControlActionName *RicControlActionName `protobuf:"bytes,2,opt,name=ric_control_action_name,json=ric-ControlAction-Name,proto3" json:"ric_control_action_name,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RanControlActionParametersList []*ControlActionRanparameterItem `protobuf:"bytes,3,rep,name=ran_control_action_parameters_list,json=ran-ControlActionParameters-List,proto3" json:"ran_control_action_parameters_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanfunctionDefinitionControlActionItem) Reset() {
	*x = RanfunctionDefinitionControlActionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionControlActionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionControlActionItem) ProtoMessage() {}

func (x *RanfunctionDefinitionControlActionItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionControlActionItem.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionControlActionItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{159}
}

func (x *RanfunctionDefinitionControlActionItem) GetRicControlActionId() *RicControlActionId {
	if x != nil {
		return x.RicControlActionId
	}
	return nil
}

func (x *RanfunctionDefinitionControlActionItem) GetRicControlActionName() *RicControlActionName {
	if x != nil {
		return x.RicControlActionName
	}
	return nil
}

func (x *RanfunctionDefinitionControlActionItem) GetRanControlActionParametersList() []*ControlActionRanparameterItem {
	if x != nil {
		return x.RanControlActionParametersList
	}
	return nil
}

// sequence from e2sm_rc.asn1:980
// {ControlAction-RANParameter-Item}
type ControlActionRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt,fromValueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt,fromValueExt"`
}

func (x *ControlActionRanparameterItem) Reset() {
	*x = ControlActionRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlActionRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlActionRanparameterItem) ProtoMessage() {}

func (x *ControlActionRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlActionRanparameterItem.ProtoReflect.Descriptor instead.
func (*ControlActionRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{160}
}

func (x *ControlActionRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *ControlActionRanparameterItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *ControlActionRanparameterItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:993
// {RANFunctionDefinition-Policy}
type RanfunctionDefinitionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: aper:"sizeLB:1,sizeUB:63,valueExt"
	RicPolicyStyleList []*RanfunctionDefinitionPolicyItem `protobuf:"bytes,1,rep,name=ric_policy_style_list,json=ric-PolicyStyle-List,proto3" json:"ric_policy_style_list,omitempty" aper:"sizeLB:1,sizeUB:63,valueExt"`
}

func (x *RanfunctionDefinitionPolicy) Reset() {
	*x = RanfunctionDefinitionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionPolicy) ProtoMessage() {}

func (x *RanfunctionDefinitionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionPolicy.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionPolicy) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{161}
}

func (x *RanfunctionDefinitionPolicy) GetRicPolicyStyleList() []*RanfunctionDefinitionPolicyItem {
	if x != nil {
		return x.RicPolicyStyleList
	}
	return nil
}

// sequence from e2sm_rc.asn1:998
// {RANFunctionDefinition-Policy-Item}
type RanfunctionDefinitionPolicyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicPolicyStyleType                *e2sm_common_ies.RicStyleType `protobuf:"bytes,1,opt,name=ric_policy_style_type,json=ric-PolicyStyle-Type,proto3" json:"ric_policy_style_type,omitempty"`
	RicPolicyStyleName                *e2sm_common_ies.RicStyleName `protobuf:"bytes,2,opt,name=ric_policy_style_name,json=ric-PolicyStyle-Name,proto3" json:"ric_policy_style_name,omitempty"`
	RicSupportedEventTriggerStyleType *e2sm_common_ies.RicStyleType `protobuf:"bytes,3,opt,name=ric_supported_event_trigger_style_type,json=ric-SupportedEventTriggerStyle-Type,proto3" json:"ric_supported_event_trigger_style_type,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RicPolicyActionList []*RanfunctionDefinitionPolicyActionItem `protobuf:"bytes,4,rep,name=ric_policy_action_list,json=ric-PolicyAction-List,proto3" json:"ric_policy_action_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanfunctionDefinitionPolicyItem) Reset() {
	*x = RanfunctionDefinitionPolicyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionPolicyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionPolicyItem) ProtoMessage() {}

func (x *RanfunctionDefinitionPolicyItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionPolicyItem.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionPolicyItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{162}
}

func (x *RanfunctionDefinitionPolicyItem) GetRicPolicyStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicPolicyStyleType
	}
	return nil
}

func (x *RanfunctionDefinitionPolicyItem) GetRicPolicyStyleName() *e2sm_common_ies.RicStyleName {
	if x != nil {
		return x.RicPolicyStyleName
	}
	return nil
}

func (x *RanfunctionDefinitionPolicyItem) GetRicSupportedEventTriggerStyleType() *e2sm_common_ies.RicStyleType {
	if x != nil {
		return x.RicSupportedEventTriggerStyleType
	}
	return nil
}

func (x *RanfunctionDefinitionPolicyItem) GetRicPolicyActionList() []*RanfunctionDefinitionPolicyActionItem {
	if x != nil {
		return x.RicPolicyActionList
	}
	return nil
}

// sequence from e2sm_rc.asn1:1007
// {RANFunctionDefinition-Policy-Action-Item}
type RanfunctionDefinitionPolicyActionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicPolicyActionId             *RicControlActionId            `protobuf:"bytes,1,opt,name=ric_policy_action_id,json=ric-PolicyAction-ID,proto3" json:"ric_policy_action_id,omitempty"`
	RicPolicyActionName           *RicControlActionName          `protobuf:"bytes,2,opt,name=ric_policy_action_name,json=ric-PolicyAction-Name,proto3" json:"ric_policy_action_name,omitempty"`
	RicActionDefinitionFormatType *e2sm_common_ies.RicFormatType `protobuf:"bytes,3,opt,name=ric_action_definition_format_type,json=ric-ActionDefinitionFormat-Type,proto3" json:"ric_action_definition_format_type,omitempty"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RanPolicyActionParametersList []*PolicyActionRanparameterItem `protobuf:"bytes,4,rep,name=ran_policy_action_parameters_list,json=ran-PolicyActionParameters-List,proto3" json:"ran_policy_action_parameters_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
	// @inject_tag: aper:"optional,sizeLB:1,sizeUB:65535,valueExt"
	RanPolicyConditionParametersList []*PolicyConditionRanparameterItem `protobuf:"bytes,5,rep,name=ran_policy_condition_parameters_list,json=ran-PolicyConditionParameters-List,proto3" json:"ran_policy_condition_parameters_list,omitempty" aper:"optional,sizeLB:1,sizeUB:65535,valueExt"`
}

func (x *RanfunctionDefinitionPolicyActionItem) Reset() {
	*x = RanfunctionDefinitionPolicyActionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionDefinitionPolicyActionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionDefinitionPolicyActionItem) ProtoMessage() {}

func (x *RanfunctionDefinitionPolicyActionItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionDefinitionPolicyActionItem.ProtoReflect.Descriptor instead.
func (*RanfunctionDefinitionPolicyActionItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{163}
}

func (x *RanfunctionDefinitionPolicyActionItem) GetRicPolicyActionId() *RicControlActionId {
	if x != nil {
		return x.RicPolicyActionId
	}
	return nil
}

func (x *RanfunctionDefinitionPolicyActionItem) GetRicPolicyActionName() *RicControlActionName {
	if x != nil {
		return x.RicPolicyActionName
	}
	return nil
}

func (x *RanfunctionDefinitionPolicyActionItem) GetRicActionDefinitionFormatType() *e2sm_common_ies.RicFormatType {
	if x != nil {
		return x.RicActionDefinitionFormatType
	}
	return nil
}

func (x *RanfunctionDefinitionPolicyActionItem) GetRanPolicyActionParametersList() []*PolicyActionRanparameterItem {
	if x != nil {
		return x.RanPolicyActionParametersList
	}
	return nil
}

func (x *RanfunctionDefinitionPolicyActionItem) GetRanPolicyConditionParametersList() []*PolicyConditionRanparameterItem {
	if x != nil {
		return x.RanPolicyConditionParametersList
	}
	return nil
}

// sequence from e2sm_rc.asn1:1017
// {PolicyAction-RANParameter-Item}
type PolicyActionRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt,fromValueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt,fromValueExt"`
}

func (x *PolicyActionRanparameterItem) Reset() {
	*x = PolicyActionRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyActionRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyActionRanparameterItem) ProtoMessage() {}

func (x *PolicyActionRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyActionRanparameterItem.ProtoReflect.Descriptor instead.
func (*PolicyActionRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{164}
}

func (x *PolicyActionRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *PolicyActionRanparameterItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *PolicyActionRanparameterItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

// sequence from e2sm_rc.asn1:1025
// {PolicyCondition-RANParameter-Item}
type PolicyConditionRanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=ranParameter-ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=ranParameter-name,proto3" json:"ran_parameter_name,omitempty"`
	// @inject_tag: aper:"optional,valueExt,fromValueExt"
	RanParameterDefinition *RanparameterDefinition `protobuf:"bytes,3,opt,name=ran_parameter_definition,json=ranParameter-Definition,proto3,oneof" json:"ran_parameter_definition,omitempty" aper:"optional,valueExt,fromValueExt"`
}

func (x *PolicyConditionRanparameterItem) Reset() {
	*x = PolicyConditionRanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionRanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionRanparameterItem) ProtoMessage() {}

func (x *PolicyConditionRanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionRanparameterItem.ProtoReflect.Descriptor instead.
func (*PolicyConditionRanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP(), []int{165}
}

func (x *PolicyConditionRanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *PolicyConditionRanparameterItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *PolicyConditionRanparameterItem) GetRanParameterDefinition() *RanparameterDefinition {
	if x != nil {
		return x.RanParameterDefinition
	}
	return nil
}

var File_e2sm_rc_v1_e2sm_rc_proto protoreflect.FileDescriptor

var file_e2sm_rc_v1_e2sm_rc_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x73, 0x6e, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73,
	0x6e, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x6e,
	0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a,
	0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x14,
	0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x45, 0x32, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66,
	0x55, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30,
	0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x52, 0x72, 0x63, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x08, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x3c, 0x0a, 0x19, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a,
	0x0a, 0x17, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08,
	0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x1e, 0x4d, 0x61,
	0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a,
	0x0b, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x55, 0x65, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a,
	0x0d, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x3d, 0x0a, 0x1b, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x52, 0x61, 0x6e, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x1a, 0x03, 0x08, 0xff, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f,
	0x0a, 0x1c, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x35, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f,
	0x66, 0x55, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x6e,
	0x6f, 0x6f, 0x66, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a,
	0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x12,
	0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x55, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x1a, 0x03,
	0x08, 0xff, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x14, 0x4d, 0x61,
	0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x43, 0x65,
	0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x52, 0x69,
	0x63, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x08, 0x3f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f,
	0x66, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x40, 0x0a, 0x1d, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x37, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x6e, 0x6f, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff,
	0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x13, 0x4d, 0x61, 0x78,
	0x6e, 0x6f, 0x6f, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x46, 0x0a, 0x10, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x65, 0x6c,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x10, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x55,
	0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x43, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x72,
	0x48, 0x00, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2d, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2d, 0x4e, 0x52, 0x12, 0x5e, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x55, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52,
	0x14, 0x72, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d,
	0x45, 0x55, 0x54, 0x52, 0x41, 0x42, 0x14, 0x0a, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xcb, 0x03, 0x0a, 0x18,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x6e, 0x5f, 0x72, 0x5f,
	0x63, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x43, 0x67, 0x69, 0x52, 0x06, 0x6e, 0x52,
	0x2d, 0x43, 0x47, 0x49, 0x12, 0x2a, 0x0a, 0x07, 0x6e, 0x5f, 0x72, 0x5f, 0x70, 0x63, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x72, 0x50, 0x63, 0x69, 0x52, 0x06, 0x6e, 0x52, 0x2d, 0x50, 0x43, 0x49,
	0x12, 0x36, 0x0a, 0x0b, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x73, 0x5f, 0x74, 0x61, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x76, 0x65, 0x47, 0x73, 0x54, 0x61, 0x63, 0x52, 0x0a, 0x66, 0x69,
	0x76, 0x65, 0x47, 0x53, 0x2d, 0x54, 0x41, 0x43, 0x12, 0x3b, 0x0a, 0x0d, 0x6e, 0x5f, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x52, 0x4d,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6e, 0x52, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x5f, 0x72, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6e, 0x52, 0x2d, 0x46, 0x72,
	0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x11, 0x78, 0x32, 0x5f, 0x78, 0x6e, 0x5f,
	0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x58,
	0x32, 0x58, 0x4e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x11,
	0x78, 0x32, 0x2d, 0x58, 0x6e, 0x2d, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x68, 0x5f, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x4f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x0c, 0x68, 0x4f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x03, 0x0a, 0x1b, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x45, 0x55, 0x74, 0x72, 0x61, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x5f, 0x75,
	0x74, 0x72, 0x61, 0x5f, 0x63, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x75, 0x74, 0x72, 0x61,
	0x43, 0x67, 0x69, 0x52, 0x09, 0x65, 0x55, 0x54, 0x52, 0x41, 0x2d, 0x43, 0x47, 0x49, 0x12, 0x33,
	0x0a, 0x0a, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x63, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x55, 0x74, 0x72, 0x61, 0x50, 0x63, 0x69, 0x52, 0x09, 0x65, 0x55, 0x54, 0x52, 0x41, 0x2d,
	0x50, 0x43, 0x49, 0x12, 0x39, 0x0a, 0x0c, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x72,
	0x66, 0x63, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x55, 0x74, 0x72, 0x61, 0x41, 0x72, 0x66, 0x63,
	0x6e, 0x52, 0x0b, 0x65, 0x55, 0x54, 0x52, 0x41, 0x2d, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x12, 0x33,
	0x0a, 0x0a, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x55, 0x74, 0x72, 0x61, 0x54, 0x61, 0x63, 0x52, 0x09, 0x65, 0x55, 0x54, 0x52, 0x41, 0x2d,
	0x54, 0x41, 0x43, 0x12, 0x49, 0x0a, 0x11, 0x78, 0x32, 0x5f, 0x78, 0x6e, 0x5f, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x32, 0x58, 0x4e,
	0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x11, 0x78, 0x32, 0x2d,
	0x58, 0x6e, 0x2d, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x0d, 0x68, 0x5f, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x4f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0c,
	0x68, 0x4f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x44, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x70, 0x63, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65,
	0x6c, 0x6c, 0x50, 0x63, 0x69, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65,
	0x6c, 0x6c, 0x50, 0x43, 0x49, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x72, 0x66, 0x63, 0x6e, 0x52,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x52, 0x46, 0x43,
	0x4e, 0x12, 0x4b, 0x0a, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x71,
	0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff,
	0xff, 0x03, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xed, 0x01, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x54,
	0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63,
	0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x52, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f,
	0x72, 0x22, 0xf6, 0x01, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x75,
	0x0a, 0x1b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x63, 0x65, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x12, 0x66, 0x0a, 0x16, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x13, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0b, 0x0a,
	0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x28, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67, 0x69, 0x52,
	0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x44, 0x22, 0x7a, 0x0a,
	0x23, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x53, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x69, 0x0a, 0x12, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x53, 0x0a, 0x0c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01,
	0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x0b, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x4d, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x75, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49, 0x64, 0x52, 0x10, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x45, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x07, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4f, 0x52, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x22, 0xe6, 0x01, 0x0a, 0x06, 0x55, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x6f, 0x0a, 0x19, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x12, 0x60, 0x0a, 0x14, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00,
	0x52, 0x11, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa4,
	0x01, 0x0a, 0x26, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x69, 0x64, 0x52, 0x04, 0x75, 0x65, 0x49, 0x44,
	0x12, 0x53, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x13, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x78, 0x0a, 0x21, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x53, 0x0a, 0x15, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0x75, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55,
	0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x0d, 0x75, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92,
	0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x0c, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x44, 0x0a, 0x0b, 0x75, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x09, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4f, 0x52, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x22, 0x35, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x22, 0x08, 0x18, 0x80,
	0x80, 0x80, 0x80, 0x10, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a,
	0x10, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x52, 0x61, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x1f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x1e, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x2d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x1c, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x5e, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x42, 0x20, 0x0a, 0x1e, 0x72, 0x61, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x20, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6d,
	0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42,
	0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbb, 0x02,
	0x0a, 0x24, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a,
	0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x17, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x2d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x25,
	0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x7c, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa,
	0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x16, 0x72, 0x61, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54,
	0x55, 0x52, 0x45, 0x22, 0xc0, 0x02, 0x0a, 0x29, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x72,
	0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x11, 0x52, 0x61, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x69, 0x74,
	0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x6e, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x74, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6f, 0x63, 0x74, 0x5f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x63, 0x74, 0x53, 0x12, 0x36, 0x0a, 0x16, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x14, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0, 0x03, 0x0a, 0x15, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x17, 0x72, 0x61,
	0x6e, 0x50, 0x2d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x75, 0x65, 0x12, 0x73, 0x0a, 0x1a, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x18, 0x72, 0x61, 0x6e, 0x50, 0x2d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x15,
	0x72, 0x61, 0x6e, 0x50, 0x2d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x72, 0x61, 0x6e, 0x50, 0x2d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x19, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x26,
	0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x27, 0x52, 0x61, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x12, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x82, 0x01, 0x0a, 0x24, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x16, 0x72, 0x61,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x6e, 0x0a, 0x1f, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x72,
	0x0a, 0x1a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01,
	0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x19, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x2d, 0x6f, 0x66, 0x2d, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x19, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x72, 0x61,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92,
	0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6f,
	0x66, 0x2d, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x50,
	0x0a, 0x13, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xf4, 0x01, 0x0a, 0x1c, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5b, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x6e, 0x50, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x72, 0x61, 0x6e, 0x50, 0x2d, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x55,
	0x0a, 0x15, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x50, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x72, 0x61, 0x6e, 0x50, 0x2d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x52, 0x61, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x03, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x11,
	0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x50, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x16, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x13,
	0x72, 0x61, 0x6e, 0x50, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x15,
	0x72, 0x61, 0x6e, 0x50, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x75, 0x65, 0x12, 0x73, 0x0a, 0x1a, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x16, 0x72, 0x61, 0x6e, 0x50, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x77, 0x0a, 0x21, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x26, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x61, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x16, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0x7a, 0x0a, 0x28, 0x52, 0x61, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x29, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x73,
	0x65, 0x12, 0x6a, 0x0a, 0x1c, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1a, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x13, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x12, 0x72, 0x61, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x48, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x52, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x6f, 0x72, 0x22, 0x54, 0x0a, 0x17, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x1c, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18,
	0xe8, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x14, 0x52,
	0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x52, 0x69, 0x63, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x1a, 0x52, 0x69, 0x63, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x1c, 0x52, 0x69, 0x63, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a,
	0x12, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x1a, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x13, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08,
	0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x3d, 0x0a, 0x18, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x55, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a,
	0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a,
	0x0a, 0x15, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff,
	0x03, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x15, 0x52, 0x69,
	0x63, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x52, 0x69, 0x63, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x0f, 0x52, 0x69, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x14, 0x72,
	0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x13, 0x72, 0x69, 0x63, 0x2d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x6a,
	0x0a, 0x13, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06,
	0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x12, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x1f, 0x52,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45,
	0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x72, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x75, 0x0a, 0x12, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x19, 0x72, 0x69, 0x63, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52,
	0x18, 0x72, 0x69, 0x63, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0x86, 0x04, 0x0a, 0x16, 0x52, 0x69,
	0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x48, 0x00, 0x52, 0x13, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x31, 0x12, 0x5b, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x48, 0x00, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x12, 0x5b,
	0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52,
	0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x33, 0x48, 0x00, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x12, 0x5b, 0x0a, 0x15, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x34, 0x48, 0x00, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x34, 0x12, 0x5b, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x35, 0x48, 0x00,
	0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x35, 0x42, 0x1b, 0x0a, 0x19, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x19, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31,
	0x12, 0x5b, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a,
	0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x16, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd7, 0x04, 0x0a, 0x1d, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6c, 0x0a, 0x1e, 0x72,
	0x69, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x1c, 0x72, 0x69, 0x63,
	0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x11, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x55, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x55, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a,
	0x12, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x55, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02,
	0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x55, 0x45, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f,
	0x72, 0x48, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x52, 0x88, 0x01,
	0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x6f, 0x72, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x69, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2d, 0x4e, 0x49, 0x12, 0x5b, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x72, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x72, 0x63, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x2d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x52, 0x52, 0x43,
	0x42, 0x15, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x69, 0x12,
	0x34, 0x0a, 0x08, 0x6e, 0x5f, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x49,
	0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x6e, 0x5f, 0x69, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0d, 0x6e, 0x49, 0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x6e, 0x5f, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x48, 0x01, 0x52, 0x0a, 0x6e, 0x49, 0x2d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x69,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6e, 0x5f, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x53, 0x0a, 0x14, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x72, 0x63, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x5f, 0x72, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x52, 0x0b, 0x72, 0x52, 0x43, 0x2d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xc6, 0x03, 0x0a, 0x19, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x12, 0x5a,
	0x0a, 0x18, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x52, 0x16, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2d, 0x49, 0x44, 0x12, 0x6c, 0x0a, 0x1e, 0x72, 0x69,
	0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x1c, 0x72, 0x69, 0x63, 0x2d,
	0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x17, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x32, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x14, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x32, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x01, 0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x55, 0x45,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x32, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x12, 0x70, 0x0a, 0x18, 0x65, 0x32, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff,
	0xff, 0x03, 0x52, 0x15, 0x65, 0x32, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xfe, 0x02, 0x0a, 0x1d, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6c, 0x0a, 0x1e, 0x72,
	0x69, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x1c, 0x72, 0x69, 0x63,
	0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x32, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x32, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x49, 0x44, 0x12, 0x57,
	0x0a, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x12, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x72, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x52, 0x88,
	0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x45,
	0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x34, 0x12, 0x67, 0x0a, 0x13, 0x75, 0x5f, 0x65, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x34, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x11,
	0x75, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x81, 0x03, 0x0a, 0x1d, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x34, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x6c, 0x0a, 0x1e, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x1c, 0x72, 0x69, 0x63, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49,
	0x44, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x55, 0x45, 0x49, 0x6e,
	0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72,
	0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x52, 0x88, 0x01, 0x01,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x22, 0xdf, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x1c, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x72, 0x63, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x72, 0x63, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x52,
	0x52, 0x43, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x18, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x75,
	0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x65, 0x69, 0x64, 0x48, 0x00, 0x52, 0x17,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2d, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2d, 0x55, 0x45, 0x49, 0x44, 0x12, 0x67, 0x0a, 0x1b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x32, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x32, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x2d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x4c, 0x32, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x79, 0x0a, 0x19, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x72, 0x63, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x72, 0x72, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x72, 0x63, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x08, 0x52, 0x0d, 0x72, 0x72, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x72, 0x63, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x72, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x54, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x48,
	0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x52, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x22, 0x3e,
	0x0a, 0x15, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x55, 0x65, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x75, 0x65, 0x49, 0x44, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x49, 0x44, 0x22, 0x72,
	0x0a, 0x18, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x32, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x32, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x32, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x19, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x35,
	0x12, 0x31, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x6f, 0x6e, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x55, 0x45, 0x49, 0x6e,
	0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x12, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x65,
	0x69, 0x6e, 0x66, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc7, 0x01,
	0x0a, 0x16, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x69, 0x63, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x69, 0x63, 0x2d,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x1d, 0x72, 0x69,
	0x63, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x1c, 0x72, 0x69, 0x63, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x1a, 0x52, 0x69, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x31, 0x48, 0x00, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12,
	0x67, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x48, 0x00, 0x52,
	0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x12, 0x67, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x48, 0x00, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x33, 0x42, 0x1f, 0x0a, 0x1d, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x31, 0x12, 0x76, 0x0a, 0x19, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x31, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01,
	0x10, 0xff, 0xff, 0x03, 0x52, 0x16, 0x72, 0x61, 0x6e, 0x50, 0x2d, 0x54, 0x6f, 0x42, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x21,
	0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x22, 0x9b, 0x01, 0x0a, 0x1d, 0x45, 0x32, 0x53,
	0x6d, 0x52, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x12, 0x7a, 0x0a, 0x1a, 0x72, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d,
	0x52, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa,
	0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x19, 0x72, 0x69, 0x63,
	0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x21, 0x45, 0x32, 0x53, 0x6d, 0x52,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x48, 0x0a, 0x11,
	0x72, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x69, 0x63, 0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x1f, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x1d, 0x72, 0x69, 0x63, 0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x02, 0x0a, 0x1d, 0x45, 0x32, 0x53,
	0x6d, 0x52, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x12, 0x5c, 0x0a, 0x18, 0x72, 0x69,
	0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x17, 0x72, 0x69, 0x63, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x7d, 0x0a, 0x1c, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d,
	0x52, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa,
	0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x1a, 0x72, 0x61, 0x6e,
	0x50, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x75, 0x65, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x6a, 0x0a,
	0x21, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x1d, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x52, 0x1c, 0x72, 0x69, 0x63, 0x2d, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x22, 0x8f, 0x02, 0x0a, 0x1a, 0x52, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x12, 0x67, 0x0a, 0x19, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x48, 0x00,
	0x52, 0x17, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x67, 0x0a, 0x19, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x32, 0x42, 0x1f, 0x0a, 0x1d, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x1d, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x71, 0x0a, 0x1e, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x69, 0x63, 0x2d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x72, 0x69, 0x63,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x1d,
	0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x12, 0x25, 0x0a,
	0x05, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x69, 0x64, 0x52, 0x04,
	0x75, 0x65, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x72,
	0x69, 0x63, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x18, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x17, 0x72, 0x69, 0x63, 0x2d, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49,
	0x44, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a,
	0x1e, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x1d,
	0x72, 0x69, 0x63, 0x2d, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0xdb, 0x04,
	0x0a, 0x1b, 0x52, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x6a, 0x0a,
	0x1a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x48, 0x00, 0x52,
	0x18, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x6a, 0x0a, 0x1a, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52,
	0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x48, 0x00, 0x52, 0x18, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x32, 0x12, 0x6a, 0x0a, 0x1a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x33, 0x48, 0x00, 0x52, 0x18, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x33, 0x12, 0x6a, 0x0a, 0x1a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x34, 0x48, 0x00, 0x52, 0x18, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x34, 0x12, 0x6a, 0x0a,
	0x1a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x35, 0x48, 0x00, 0x52,
	0x18, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x35, 0x42, 0x20, 0x0a, 0x1e, 0x72, 0x69, 0x63,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1e,
	0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x6d,
	0x0a, 0x13, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09,
	0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x12, 0x72, 0x61, 0x6e, 0x50, 0x2d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01,
	0x0a, 0x22, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x18, 0x72,
	0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x16, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x45, 0x32, 0x53,
	0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x12, 0x69, 0x0a, 0x11, 0x75,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01,
	0x10, 0xff, 0xff, 0x03, 0x52, 0x10, 0x75, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x22, 0x45, 0x32, 0x53, 0x6d, 0x52,
	0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a,
	0x05, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x69, 0x64, 0x52, 0x04,
	0x75, 0x65, 0x49, 0x44, 0x12, 0x67, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x32, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff,
	0xff, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x50, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x01,
	0x0a, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32,
	0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x72, 0x61,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x12, 0x63, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53,
	0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03, 0x52, 0x0d, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd8, 0x02, 0x0a,
	0x22, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x33, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67, 0x69, 0x52, 0x0d, 0x63, 0x65,
	0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x11, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x17, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x16, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x1e, 0x45, 0x32, 0x53, 0x6d,
	0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x34, 0x12, 0x61, 0x0a, 0x0c, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x34, 0x49, 0x74, 0x65, 0x6d,
	0x55, 0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03,
	0x52, 0x0b, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x67, 0x0a,
	0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x34, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01,
	0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x24, 0x45, 0x32, 0x53, 0x6d, 0x52,
	0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x34, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x65, 0x12,
	0x25, 0x0a, 0x05, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x69, 0x64,
	0x52, 0x04, 0x75, 0x65, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0f, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0d, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67, 0x69, 0x52, 0x0d, 0x63, 0x65,
	0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x49, 0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0xa3, 0x02, 0x0a, 0x26, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x34, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x0e, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x67, 0x69, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d,
	0x49, 0x44, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x17, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x16, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x35, 0x12, 0x6f, 0x0a, 0x14, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x35, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x00,
	0x10, 0xff, 0xff, 0x03, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x50, 0x2d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x22, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x35, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x72, 0x61,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x13, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x1b, 0x72,
	0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x19, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x22, 0x99, 0x01, 0x0a, 0x17, 0x52, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x17,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52,
	0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x31, 0x48, 0x00, 0x52, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x42, 0x1d, 0x0a,
	0x1b, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0x6b, 0x0a, 0x1a,
	0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x4d, 0x0a, 0x13, 0x72, 0x69,
	0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x52, 0x12, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x13, 0x45, 0x32, 0x53,
	0x6d, 0x52, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x62, 0x0a, 0x1a, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x19, 0x72, 0x69, 0x63, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31,
	0x42, 0x1c, 0x0a, 0x1a, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0xcb,
	0x02, 0x0a, 0x1a, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x25, 0x0a,
	0x05, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65, 0x69, 0x64, 0x52, 0x04,
	0x75, 0x65, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x69, 0x63, 0x2d, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x14, 0x72, 0x69, 0x63, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x14, 0x72,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x72, 0x69, 0x63,
	0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x14,
	0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x1b, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52,
	0x1a, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x18,
	0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x31, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x42, 0x1d, 0x0a, 0x1b, 0x72,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x1b, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x58, 0x0a, 0x0a, 0x72, 0x61, 0x6e,
	0x5f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92,
	0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x50, 0x2d, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x1f, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x31, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72,
	0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x5b,
	0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x16, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7d, 0x0a, 0x14, 0x45,
	0x32, 0x53, 0x6d, 0x52, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x1b, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x1a,
	0x72, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x52,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x31, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x42, 0x1d, 0x0a, 0x1b, 0x72, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0x76, 0x0a, 0x1b, 0x45, 0x32, 0x53,
	0x6d, 0x52, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x57, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x31, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01,
	0x05, 0x08, 0x00, 0x10, 0xff, 0x01, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x50, 0x2d, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xb8, 0x01, 0x0a, 0x1f, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x31, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x13,
	0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf9, 0x06, 0x0a,
	0x1b, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11,
	0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x25, 0x72, 0x61, 0x6e, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x22, 0x72, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x72,
	0x0a, 0x1e, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48,
	0x01, 0x52, 0x1c, 0x72, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x72, 0x0a, 0x1e, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x48, 0x02, 0x52, 0x1c, 0x72, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x1f, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x03, 0x52, 0x1d, 0x72, 0x61, 0x6e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x72, 0x0a,
	0x1e, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x04,
	0x52, 0x1c, 0x72, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x28, 0x0a, 0x26, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x21, 0x0a, 0x1f, 0x5f,
	0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x21,
	0x0a, 0x1f, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xcd, 0x05, 0x0a, 0x21, 0x52, 0x61, 0x6e,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x84,
	0x01, 0x0a, 0x1c, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x3f, 0x52, 0x1a, 0x72, 0x69, 0x63, 0x2d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x16, 0x72, 0x61, 0x6e, 0x5f, 0x6c, 0x32, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x15, 0x72,
	0x61, 0x6e, 0x2d, 0x4c, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x1b, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06,
	0x08, 0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x19, 0x72, 0x61, 0x6e, 0x2d, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x8d, 0x01, 0x0a, 0x24, 0x72, 0x61, 0x6e, 0x5f, 0x75, 0x65, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x65,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c,
	0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x23, 0x72, 0x61,
	0x6e, 0x2d, 0x55, 0x45, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x94, 0x01, 0x0a, 0x27, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff,
	0x03, 0x52, 0x25, 0x72, 0x61, 0x6e, 0x2d, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x2a, 0x52, 0x61, 0x6e,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x5a, 0x0a, 0x1c, 0x72, 0x69, 0x63, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x72, 0x69, 0x63, 0x2d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x1c, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x1a, 0x72, 0x69, 0x63, 0x2d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x5d, 0x0a, 0x1d, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x1b, 0x72, 0x69, 0x63, 0x2d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb3,
	0x02, 0x0a, 0x1c, 0x4c, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x72, 0x61, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x02, 0x0a, 0x20, 0x55, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44,
	0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a,
	0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x2d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9,
	0x02, 0x0a, 0x22, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x12,
	0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x61, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x17, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x02, 0x0a, 0x30, 0x52,
	0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x52, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x52,
	0x12, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x2d, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8d, 0x01,
	0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03,
	0x52, 0x1b, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x03,
	0x0a, 0x2f, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x64, 0x0a, 0x1a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x18, 0x63,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x49, 0x44, 0x12, 0x6a, 0x0a, 0x1c, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x1a, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x2b, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42,
	0x09, 0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x28, 0x72, 0x61, 0x6e, 0x2d,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x25, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45,
	0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x72, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x6c, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x3f, 0x52, 0x14, 0x72, 0x69, 0x63,
	0x2d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xce, 0x05, 0x0a, 0x1f, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4d, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14,
	0x72, 0x69, 0x63, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x14, 0x72,
	0x69, 0x63, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x26, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x23, 0x72,
	0x69, 0x63, 0x2d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x5d, 0x0a, 0x1d, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x1b, 0x72, 0x69, 0x63, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x65, 0x0a, 0x21, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1f, 0x72, 0x69, 0x63, 0x2d, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x22, 0x72, 0x69, 0x63, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x20, 0x72, 0x69, 0x63, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x6f, 0x0a, 0x1a, 0x72, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01,
	0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x19, 0x72, 0x61, 0x6e, 0x2d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2d, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a,
	0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11,
	0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x72, 0x61, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x6c, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x3f, 0x52, 0x14, 0x72, 0x69, 0x63, 0x2d,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xcb, 0x06, 0x0a, 0x1f, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x4d, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x72,
	0x69, 0x63, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x14, 0x72, 0x69,
	0x63, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x26, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x23, 0x72, 0x69,
	0x63, 0x2d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x65, 0x0a, 0x21, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1f, 0x72, 0x69, 0x63, 0x2d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1a, 0x72, 0x69, 0x63,
	0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff,
	0xff, 0x03, 0x52, 0x19, 0x72, 0x69, 0x63, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a,
	0x21, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x1f, 0x72, 0x69, 0x63, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x22, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x20, 0x72, 0x69, 0x63,
	0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a,
	0x1e, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x1c, 0x72, 0x69, 0x63, 0x2d, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfe,
	0x02, 0x0a, 0x29, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x5c, 0x0a, 0x18,
	0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x17, 0x72, 0x69, 0x63, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x62, 0x0a, 0x1a, 0x72, 0x69,
	0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x19, 0x72, 0x69, 0x63, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8e,
	0x01, 0x0a, 0x25, 0x72, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42,
	0x09, 0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x23, 0x72, 0x61, 0x6e, 0x2d,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xb7, 0x02, 0x0a, 0x20, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x12, 0x72,
	0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x17, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x1c, 0x52, 0x61,
	0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x6f, 0x0a, 0x16, 0x72, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x3f, 0x52, 0x15, 0x72, 0x69, 0x63, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf9, 0x06, 0x0a, 0x20,
	0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x4f, 0x0a, 0x16, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x72, 0x69, 0x63, 0x2d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4f, 0x0a, 0x16, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x15, 0x72, 0x69, 0x63,
	0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x79, 0x0a, 0x17, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08,
	0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x16, 0x72, 0x69, 0x63, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a,
	0x1e, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x1c, 0x72, 0x69, 0x63, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61,
	0x0a, 0x1f, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x1d, 0x72, 0x69, 0x63, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x64, 0x0a, 0x1e, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x69, 0x63, 0x2d, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x1f, 0x72, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1d, 0x72, 0x69, 0x63,
	0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x23, 0x72,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x00, 0x10, 0xff,
	0x01, 0x52, 0x21, 0x72, 0x61, 0x6e, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49,
	0x44, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62,
	0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xe0, 0x02, 0x0a, 0x26, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x53, 0x0a, 0x15, 0x72, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x14, 0x72, 0x69, 0x63, 0x2d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x44, 0x12,
	0x59, 0x0a, 0x17, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x16, 0x72, 0x69, 0x63, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x22, 0x72,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03,
	0x52, 0x20, 0x72, 0x61, 0x6e, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2d, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xb4, 0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x12, 0x72,
	0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x17, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x52, 0x61,
	0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x6c, 0x0a, 0x15, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x3f, 0x52, 0x14, 0x72, 0x69, 0x63, 0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa6, 0x03, 0x0a, 0x1f, 0x52, 0x61, 0x6e, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4d, 0x0a, 0x15, 0x72,
	0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x72, 0x69, 0x63, 0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x72, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x14, 0x72, 0x69, 0x63, 0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x26, 0x72, 0x69, 0x63,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x23, 0x72, 0x69, 0x63, 0x2d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x76, 0x0a, 0x16, 0x72, 0x69, 0x63, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09,
	0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x15, 0x72, 0x69, 0x63, 0x2d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xcd, 0x04, 0x0a, 0x25, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x51, 0x0a, 0x14, 0x72, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x13, 0x72, 0x69, 0x63, 0x2d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x49, 0x44, 0x12, 0x57, 0x0a,
	0x16, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x15, 0x72, 0x69, 0x63, 0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x21, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1f, 0x72, 0x69,
	0x63, 0x2d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x21, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff,
	0x03, 0x52, 0x1f, 0x72, 0x61, 0x6e, 0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x24, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c,
	0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x00, 0x10, 0xff, 0xff, 0x03, 0x52, 0x22, 0x72, 0x61,
	0x6e, 0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2d, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xb3, 0x02, 0x0a, 0x1c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x72,
	0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x02, 0x0a, 0x1f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x0f, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x49,
	0x44, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62,
	0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0x36, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x5f,
	0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x01, 0x2a, 0x6e, 0x0a, 0x08, 0x52, 0x72, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x52, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x52, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x52, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x52,
	0x43, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x52, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x52, 0x43, 0x5f, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x52, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x2a, 0x38, 0x0a, 0x0a, 0x4e, 0x52, 0x4d, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x44, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e,
	0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x44, 0x44, 0x10,
	0x01, 0x2a, 0x48, 0x0a, 0x0f, 0x58, 0x32, 0x58, 0x4e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x58, 0x32, 0x58, 0x4e, 0x5f, 0x45, 0x53, 0x54,
	0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x58, 0x32, 0x58, 0x4e, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x01, 0x2a, 0x3c, 0x0a, 0x0b, 0x48,
	0x4f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x4f,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x01, 0x2a, 0xff, 0x01, 0x0a, 0x14, 0x52, 0x61,
	0x6e, 0x50, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x41, 0x4e, 0x5f, 0x50, 0x5f, 0x43, 0x48, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x41, 0x4e, 0x5f, 0x50, 0x5f, 0x43,
	0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e,
	0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x41, 0x4e, 0x5f, 0x50, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x54, 0x48, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x41, 0x4e, 0x5f, 0x50, 0x5f,
	0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f,
	0x4e, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x52, 0x41, 0x4e, 0x5f, 0x50, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53,
	0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x41, 0x4e, 0x5f, 0x50, 0x5f, 0x43, 0x48, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x05, 0x2a, 0xa4, 0x01, 0x0a, 0x12,
	0x52, 0x61, 0x6e, 0x50, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x41, 0x4e, 0x5f, 0x50, 0x5f, 0x43, 0x48, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x41, 0x4e, 0x5f, 0x50, 0x5f, 0x43,
	0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x41, 0x4e, 0x5f, 0x50, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x52, 0x41, 0x4e, 0x5f, 0x50, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5a, 0x45, 0x52, 0x4f,
	0x10, 0x03, 0x2a, 0x52, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x4f,
	0x4d, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x47,
	0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x1e, 0x0a, 0x08, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x56, 0x0a, 0x12, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x44, 0x45, 0x43, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x44, 0x45, 0x43,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x42, 0x48,
	0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6e, 0x6f,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x6e, 0x6f, 0x73, 0x2d, 0x65, 0x32,
	0x2d, 0x73, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x32, 0x73,
	0x6d, 0x2d, 0x72, 0x63, 0x2d, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_e2sm_rc_v1_e2sm_rc_proto_rawDescOnce sync.Once
	file_e2sm_rc_v1_e2sm_rc_proto_rawDescData = file_e2sm_rc_v1_e2sm_rc_proto_rawDesc
)

func file_e2sm_rc_v1_e2sm_rc_proto_rawDescGZIP() []byte {
	file_e2sm_rc_v1_e2sm_rc_proto_rawDescOnce.Do(func() {
		file_e2sm_rc_v1_e2sm_rc_proto_rawDescData = protoimpl.X.CompressGZIP(file_e2sm_rc_v1_e2sm_rc_proto_rawDescData)
	})
	return file_e2sm_rc_v1_e2sm_rc_proto_rawDescData
}

var file_e2sm_rc_v1_e2sm_rc_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_e2sm_rc_v1_e2sm_rc_proto_msgTypes = make([]protoimpl.MessageInfo, 166)
var file_e2sm_rc_v1_e2sm_rc_proto_goTypes = []interface{}{
	(LogicalOr)(0),                                           // 0: e2sm_rc.v1.LogicalOr
	(RrcState)(0),                                            // 1: e2sm_rc.v1.RrcState
	(NRModeInfo)(0),                                          // 2: e2sm_rc.v1.NRModeInfo
	(X2XNEstablished)(0),                                     // 3: e2sm_rc.v1.X2XNEstablished
	(HOValidated)(0),                                         // 4: e2sm_rc.v1.HOValidated
	(RanPChoiceComparison)(0),                                // 5: e2sm_rc.v1.RanPChoiceComparison
	(RanPChoicePresence)(0),                                  // 6: e2sm_rc.v1.RanPChoicePresence
	(MessageDirection)(0),                                    // 7: e2sm_rc.v1.MessageDirection
	(OnDemand)(0),                                            // 8: e2sm_rc.v1.OnDemand
	(RicControlDecision)(0),                                  // 9: e2sm_rc.v1.RicControlDecision
	(*MaxnoofMessages)(nil),                                  // 10: e2sm_rc.v1.MaxnoofMessages
	(*MaxnoofE2InfoChanges)(nil),                             // 11: e2sm_rc.v1.MaxnoofE2InfoChanges
	(*MaxnoofUeinfoChanges)(nil),                             // 12: e2sm_rc.v1.MaxnoofUeinfoChanges
	(*MaxnoofRrcstate)(nil),                                  // 13: e2sm_rc.v1.MaxnoofRrcstate
	(*MaxnoofParametersToReport)(nil),                        // 14: e2sm_rc.v1.MaxnoofParametersToReport
	(*MaxnoofPolicyConditions)(nil),                          // 15: e2sm_rc.v1.MaxnoofPolicyConditions
	(*MaxnoofAssociatedRanparameters)(nil),                   // 16: e2sm_rc.v1.MaxnoofAssociatedRanparameters
	(*MaxnoofUeid)(nil),                                      // 17: e2sm_rc.v1.MaxnoofUeid
	(*MaxnoofCellId)(nil),                                    // 18: e2sm_rc.v1.MaxnoofCellId
	(*MaxnoofRanoutcomeParameters)(nil),                      // 19: e2sm_rc.v1.MaxnoofRanoutcomeParameters
	(*MaxnoofParametersinStructure)(nil),                     // 20: e2sm_rc.v1.MaxnoofParametersinStructure
	(*MaxnoofItemsinList)(nil),                               // 21: e2sm_rc.v1.MaxnoofItemsinList
	(*MaxnoofUeinfo)(nil),                                    // 22: e2sm_rc.v1.MaxnoofUeinfo
	(*MaxnoofCellInfo)(nil),                                  // 23: e2sm_rc.v1.MaxnoofCellInfo
	(*MaxnoofUeeventInfo)(nil),                               // 24: e2sm_rc.v1.MaxnoofUeeventInfo
	(*MaxnoofRanparamTest)(nil),                              // 25: e2sm_rc.v1.MaxnoofRanparamTest
	(*MaxnoofNeighbourCell)(nil),                             // 26: e2sm_rc.v1.MaxnoofNeighbourCell
	(*MaxnoofRicstyles)(nil),                                 // 27: e2sm_rc.v1.MaxnoofRicstyles
	(*MaxnoofCallProcessTypes)(nil),                          // 28: e2sm_rc.v1.MaxnoofCallProcessTypes
	(*MaxnoofCallProcessBreakpoints)(nil),                    // 29: e2sm_rc.v1.MaxnoofCallProcessBreakpoints
	(*MaxnoofInsertIndication)(nil),                          // 30: e2sm_rc.v1.MaxnoofInsertIndication
	(*MaxnoofControlAction)(nil),                             // 31: e2sm_rc.v1.MaxnoofControlAction
	(*MaxnoofPolicyAction)(nil),                              // 32: e2sm_rc.v1.MaxnoofPolicyAction
	(*NeighborCellList)(nil),                                 // 33: e2sm_rc.v1.NeighborCellList
	(*NeighborCellItem)(nil),                                 // 34: e2sm_rc.v1.NeighborCellItem
	(*NeighborCellItemChoiceNr)(nil),                         // 35: e2sm_rc.v1.NeighborCellItemChoiceNr
	(*NeighborCellItemChoiceEUtra)(nil),                      // 36: e2sm_rc.v1.NeighborCellItemChoiceEUtra
	(*NeighborRelationInfo)(nil),                             // 37: e2sm_rc.v1.NeighborRelationInfo
	(*EventTriggerCellInfo)(nil),                             // 38: e2sm_rc.v1.EventTriggerCellInfo
	(*EventTriggerCellInfoItem)(nil),                         // 39: e2sm_rc.v1.EventTriggerCellInfoItem
	(*CellType)(nil),                                         // 40: e2sm_rc.v1.CellType
	(*EventTriggerCellInfoItemChoiceIndividual)(nil),         // 41: e2sm_rc.v1.EventTriggerCellInfoItemChoiceIndividual
	(*EventTriggerCellInfoItemChoiceGroup)(nil),              // 42: e2sm_rc.v1.EventTriggerCellInfoItemChoiceGroup
	(*EventTriggerUeInfo)(nil),                               // 43: e2sm_rc.v1.EventTriggerUeInfo
	(*EventTriggerUeInfoItem)(nil),                           // 44: e2sm_rc.v1.EventTriggerUeInfoItem
	(*UeType)(nil),                                           // 45: e2sm_rc.v1.UeType
	(*EventTriggerUeInfoItemChoiceIndividual)(nil),           // 46: e2sm_rc.v1.EventTriggerUeInfoItemChoiceIndividual
	(*EventTriggerUeInfoItemChoiceGroup)(nil),                // 47: e2sm_rc.v1.EventTriggerUeInfoItemChoiceGroup
	(*EventTriggerUeeventInfo)(nil),                          // 48: e2sm_rc.v1.EventTriggerUeeventInfo
	(*EventTriggerUeeventInfoItem)(nil),                      // 49: e2sm_rc.v1.EventTriggerUeeventInfoItem
	(*RanparameterId)(nil),                                   // 50: e2sm_rc.v1.RanparameterId
	(*RanparameterName)(nil),                                 // 51: e2sm_rc.v1.RanparameterName
	(*RanparameterDefinition)(nil),                           // 52: e2sm_rc.v1.RanparameterDefinition
	(*RanparameterDefinitionChoice)(nil),                     // 53: e2sm_rc.v1.RanparameterDefinitionChoice
	(*RanparameterDefinitionChoiceList)(nil),                 // 54: e2sm_rc.v1.RanparameterDefinitionChoiceList
	(*RanparameterDefinitionChoiceListItem)(nil),             // 55: e2sm_rc.v1.RanparameterDefinitionChoiceListItem
	(*RanparameterDefinitionChoiceStructure)(nil),            // 56: e2sm_rc.v1.RanparameterDefinitionChoiceStructure
	(*RanparameterDefinitionChoiceStructureItem)(nil),        // 57: e2sm_rc.v1.RanparameterDefinitionChoiceStructureItem
	(*RanparameterValue)(nil),                                // 58: e2sm_rc.v1.RanparameterValue
	(*RanparameterValueType)(nil),                            // 59: e2sm_rc.v1.RanparameterValueType
	(*RanparameterValueTypeChoiceElementTrue)(nil),           // 60: e2sm_rc.v1.RanparameterValueTypeChoiceElementTrue
	(*RanparameterValueTypeChoiceElementFalse)(nil),          // 61: e2sm_rc.v1.RanparameterValueTypeChoiceElementFalse
	(*RanparameterValueTypeChoiceStructure)(nil),             // 62: e2sm_rc.v1.RanparameterValueTypeChoiceStructure
	(*RanparameterValueTypeChoiceList)(nil),                  // 63: e2sm_rc.v1.RanparameterValueTypeChoiceList
	(*RanparameterStructure)(nil),                            // 64: e2sm_rc.v1.RanparameterStructure
	(*RanparameterStructureItem)(nil),                        // 65: e2sm_rc.v1.RanparameterStructureItem
	(*RanparameterList)(nil),                                 // 66: e2sm_rc.v1.RanparameterList
	(*RanparameterTesting)(nil),                              // 67: e2sm_rc.v1.RanparameterTesting
	(*RanparameterTestingCondition)(nil),                     // 68: e2sm_rc.v1.RanparameterTestingCondition
	(*RanparameterTestingItem)(nil),                          // 69: e2sm_rc.v1.RanparameterTestingItem
	(*RanParameterType)(nil),                                 // 70: e2sm_rc.v1.RanParameterType
	(*RanparameterTestingItemChoiceList)(nil),                // 71: e2sm_rc.v1.RanparameterTestingItemChoiceList
	(*RanparameterTestingItemChoiceStructure)(nil),           // 72: e2sm_rc.v1.RanparameterTestingItemChoiceStructure
	(*RanparameterTestingItemChoiceElementTrue)(nil),         // 73: e2sm_rc.v1.RanparameterTestingItemChoiceElementTrue
	(*RanparameterTestingItemChoiceElementFalse)(nil),        // 74: e2sm_rc.v1.RanparameterTestingItemChoiceElementFalse
	(*RanparameterTestingList)(nil),                          // 75: e2sm_rc.v1.RanparameterTestingList
	(*RanparameterTestingStructure)(nil),                     // 76: e2sm_rc.v1.RanparameterTestingStructure
	(*RanCallProcessId)(nil),                                 // 77: e2sm_rc.v1.RanCallProcessId
	(*RicCallProcessTypeId)(nil),                             // 78: e2sm_rc.v1.RicCallProcessTypeId
	(*RicCallProcessTypeName)(nil),                           // 79: e2sm_rc.v1.RicCallProcessTypeName
	(*RicCallProcessBreakpointId)(nil),                       // 80: e2sm_rc.v1.RicCallProcessBreakpointId
	(*RicCallProcessBreakpointName)(nil),                     // 81: e2sm_rc.v1.RicCallProcessBreakpointName
	(*RicControlActionId)(nil),                               // 82: e2sm_rc.v1.RicControlActionId
	(*RicControlActionName)(nil),                             // 83: e2sm_rc.v1.RicControlActionName
	(*RicEventTriggerConditionId)(nil),                       // 84: e2sm_rc.v1.RicEventTriggerConditionId
	(*RicEventTriggerUeId)(nil),                              // 85: e2sm_rc.v1.RicEventTriggerUeId
	(*RicEventTriggerUeeventId)(nil),                         // 86: e2sm_rc.v1.RicEventTriggerUeeventId
	(*RicEventTriggerCellId)(nil),                            // 87: e2sm_rc.v1.RicEventTriggerCellId
	(*RicInsertIndicationId)(nil),                            // 88: e2sm_rc.v1.RicInsertIndicationId
	(*RicInsertIndicationName)(nil),                          // 89: e2sm_rc.v1.RicInsertIndicationName
	(*RicPolicyAction)(nil),                                  // 90: e2sm_rc.v1.RicPolicyAction
	(*RicPolicyActionRanparameterItem)(nil),                  // 91: e2sm_rc.v1.RicPolicyActionRanparameterItem
	(*E2SmRcEventTrigger)(nil),                               // 92: e2sm_rc.v1.E2SmRcEventTrigger
	(*RicEventTriggerFormats)(nil),                           // 93: e2sm_rc.v1.RicEventTriggerFormats
	(*E2SmRcEventTriggerFormat1)(nil),                        // 94: e2sm_rc.v1.E2SmRcEventTriggerFormat1
	(*E2SmRcEventTriggerFormat1Item)(nil),                    // 95: e2sm_rc.v1.E2SmRcEventTriggerFormat1Item
	(*MessageTypeChoice)(nil),                                // 96: e2sm_rc.v1.MessageTypeChoice
	(*MessageTypeChoiceNi)(nil),                              // 97: e2sm_rc.v1.MessageTypeChoiceNi
	(*MessageTypeChoiceRrc)(nil),                             // 98: e2sm_rc.v1.MessageTypeChoiceRrc
	(*E2SmRcEventTriggerFormat2)(nil),                        // 99: e2sm_rc.v1.E2SmRcEventTriggerFormat2
	(*E2SmRcEventTriggerFormat3)(nil),                        // 100: e2sm_rc.v1.E2SmRcEventTriggerFormat3
	(*E2SmRcEventTriggerFormat3Item)(nil),                    // 101: e2sm_rc.v1.E2SmRcEventTriggerFormat3Item
	(*E2SmRcEventTriggerFormat4)(nil),                        // 102: e2sm_rc.v1.E2SmRcEventTriggerFormat4
	(*E2SmRcEventTriggerFormat4Item)(nil),                    // 103: e2sm_rc.v1.E2SmRcEventTriggerFormat4Item
	(*TriggerTypeChoice)(nil),                                // 104: e2sm_rc.v1.TriggerTypeChoice
	(*TriggerTypeChoiceRrcstate)(nil),                        // 105: e2sm_rc.v1.TriggerTypeChoiceRrcstate
	(*TriggerTypeChoiceRrcstateItem)(nil),                    // 106: e2sm_rc.v1.TriggerTypeChoiceRrcstateItem
	(*TriggerTypeChoiceUeid)(nil),                            // 107: e2sm_rc.v1.TriggerTypeChoiceUeid
	(*TriggerTypeChoiceL2State)(nil),                         // 108: e2sm_rc.v1.TriggerTypeChoiceL2state
	(*E2SmRcEventTriggerFormat5)(nil),                        // 109: e2sm_rc.v1.E2SmRcEventTriggerFormat5
	(*E2SmRcActionDefinition)(nil),                           // 110: e2sm_rc.v1.E2SmRcActionDefinition
	(*RicActionDefinitionFormats)(nil),                       // 111: e2sm_rc.v1.RicActionDefinitionFormats
	(*E2SmRcActionDefinitionFormat1)(nil),                    // 112: e2sm_rc.v1.E2SmRcActionDefinitionFormat1
	(*E2SmRcActionDefinitionFormat1Item)(nil),                // 113: e2sm_rc.v1.E2SmRcActionDefinitionFormat1Item
	(*E2SmRcActionDefinitionFormat2)(nil),                    // 114: e2sm_rc.v1.E2SmRcActionDefinitionFormat2
	(*E2SmRcActionDefinitionFormat2Item)(nil),                // 115: e2sm_rc.v1.E2SmRcActionDefinitionFormat2Item
	(*E2SmRcActionDefinitionFormat3)(nil),                    // 116: e2sm_rc.v1.E2SmRcActionDefinitionFormat3
	(*E2SmRcActionDefinitionFormat3Item)(nil),                // 117: e2sm_rc.v1.E2SmRcActionDefinitionFormat3Item
	(*E2SmRcIndicationHeader)(nil),                           // 118: e2sm_rc.v1.E2SmRcIndicationHeader
	(*RicIndicationHeaderFormats)(nil),                       // 119: e2sm_rc.v1.RicIndicationHeaderFormats
	(*E2SmRcIndicationHeaderFormat1)(nil),                    // 120: e2sm_rc.v1.E2SmRcIndicationHeaderFormat1
	(*E2SmRcIndicationHeaderFormat2)(nil),                    // 121: e2sm_rc.v1.E2SmRcIndicationHeaderFormat2
	(*E2SmRcIndicationMessage)(nil),                          // 122: e2sm_rc.v1.E2SmRcIndicationMessage
	(*RicIndicationMessageFormats)(nil),                      // 123: e2sm_rc.v1.RicIndicationMessageFormats
	(*E2SmRcIndicationMessageFormat1)(nil),                   // 124: e2sm_rc.v1.E2SmRcIndicationMessageFormat1
	(*E2SmRcIndicationMessageFormat1Item)(nil),               // 125: e2sm_rc.v1.E2SmRcIndicationMessageFormat1Item
	(*E2SmRcIndicationMessageFormat2)(nil),                   // 126: e2sm_rc.v1.E2SmRcIndicationMessageFormat2
	(*E2SmRcIndicationMessageFormat2Item)(nil),               // 127: e2sm_rc.v1.E2SmRcIndicationMessageFormat2Item
	(*E2SmRcIndicationMessageFormat2RanparameterItem)(nil),   // 128: e2sm_rc.v1.E2SmRcIndicationMessageFormat2RanparameterItem
	(*E2SmRcIndicationMessageFormat3)(nil),                   // 129: e2sm_rc.v1.E2SmRcIndicationMessageFormat3
	(*E2SmRcIndicationMessageFormat3Item)(nil),               // 130: e2sm_rc.v1.E2SmRcIndicationMessageFormat3Item
	(*E2SmRcIndicationMessageFormat4)(nil),                   // 131: e2sm_rc.v1.E2SmRcIndicationMessageFormat4
	(*E2SmRcIndicationMessageFormat4ItemUe)(nil),             // 132: e2sm_rc.v1.E2SmRcIndicationMessageFormat4ItemUe
	(*E2SmRcIndicationMessageFormat4ItemCell)(nil),           // 133: e2sm_rc.v1.E2SmRcIndicationMessageFormat4ItemCell
	(*E2SmRcIndicationMessageFormat5)(nil),                   // 134: e2sm_rc.v1.E2SmRcIndicationMessageFormat5
	(*E2SmRcIndicationMessageFormat5Item)(nil),               // 135: e2sm_rc.v1.E2SmRcIndicationMessageFormat5Item
	(*E2SmRcCallProcessId)(nil),                              // 136: e2sm_rc.v1.E2SmRcCallProcessId
	(*RicCallProcessIdFormats)(nil),                          // 137: e2sm_rc.v1.RicCallProcessIdFormats
	(*E2SmRcCallProcessIdFormat1)(nil),                       // 138: e2sm_rc.v1.E2SmRcCallProcessIdFormat1
	(*E2SmRcControlHeader)(nil),                              // 139: e2sm_rc.v1.E2SmRcControlHeader
	(*RicControlHeaderFormats)(nil),                          // 140: e2sm_rc.v1.RicControlHeaderFormats
	(*E2SmRcControlHeaderFormat1)(nil),                       // 141: e2sm_rc.v1.E2SmRcControlHeaderFormat1
	(*E2SmRcControlMessage)(nil),                             // 142: e2sm_rc.v1.E2SmRcControlMessage
	(*RicControlMessageFormats)(nil),                         // 143: e2sm_rc.v1.RicControlMessageFormats
	(*E2SmRcControlMessageFormat1)(nil),                      // 144: e2sm_rc.v1.E2SmRcControlMessageFormat1
	(*E2SmRcControlMessageFormat1Item)(nil),                  // 145: e2sm_rc.v1.E2SmRcControlMessageFormat1Item
	(*E2SmRcControlOutcome)(nil),                             // 146: e2sm_rc.v1.E2SmRcControlOutcome
	(*RicControlOutcomeFormats)(nil),                         // 147: e2sm_rc.v1.RicControlOutcomeFormats
	(*E2SmRcControlOutcomeFormat1)(nil),                      // 148: e2sm_rc.v1.E2SmRcControlOutcomeFormat1
	(*E2SmRcControlOutcomeFormat1Item)(nil),                  // 149: e2sm_rc.v1.E2SmRcControlOutcomeFormat1Item
	(*E2SmRcRanfunctionDefinition)(nil),                      // 150: e2sm_rc.v1.E2SmRcRanfunctionDefinition
	(*RanfunctionDefinitionEventTrigger)(nil),                // 151: e2sm_rc.v1.RanfunctionDefinitionEventTrigger
	(*RanfunctionDefinitionEventTriggerStyleItem)(nil),       // 152: e2sm_rc.v1.RanfunctionDefinitionEventTriggerStyleItem
	(*L2ParametersRanparameterItem)(nil),                     // 153: e2sm_rc.v1.L2ParametersRanparameterItem
	(*UeidentificationRanparameterItem)(nil),                 // 154: e2sm_rc.v1.UeidentificationRanparameterItem
	(*CellIdentificationRanparameterItem)(nil),               // 155: e2sm_rc.v1.CellIdentificationRanparameterItem
	(*RanfunctionDefinitionEventTriggerCallProcessItem)(nil), // 156: e2sm_rc.v1.RanfunctionDefinitionEventTriggerCallProcessItem
	(*RanfunctionDefinitionEventTriggerBreakpointItem)(nil),  // 157: e2sm_rc.v1.RanfunctionDefinitionEventTriggerBreakpointItem
	(*CallProcessBreakpointRanparameterItem)(nil),            // 158: e2sm_rc.v1.CallProcessBreakpointRanparameterItem
	(*RanfunctionDefinitionReport)(nil),                      // 159: e2sm_rc.v1.RanfunctionDefinitionReport
	(*RanfunctionDefinitionReportItem)(nil),                  // 160: e2sm_rc.v1.RanfunctionDefinitionReportItem
	(*ReportRanparameterItem)(nil),                           // 161: e2sm_rc.v1.ReportRanparameterItem
	(*RanfunctionDefinitionInsert)(nil),                      // 162: e2sm_rc.v1.RanfunctionDefinitionInsert
	(*RanfunctionDefinitionInsertItem)(nil),                  // 163: e2sm_rc.v1.RanfunctionDefinitionInsertItem
	(*RanfunctionDefinitionInsertIndicationItem)(nil),        // 164: e2sm_rc.v1.RanfunctionDefinitionInsertIndicationItem
	(*InsertIndicationRanparameterItem)(nil),                 // 165: e2sm_rc.v1.InsertIndicationRanparameterItem
	(*RanfunctionDefinitionControl)(nil),                     // 166: e2sm_rc.v1.RanfunctionDefinitionControl
	(*RanfunctionDefinitionControlItem)(nil),                 // 167: e2sm_rc.v1.RanfunctionDefinitionControlItem
	(*ControlOutcomeRanparameterItem)(nil),                   // 168: e2sm_rc.v1.ControlOutcomeRanparameterItem
	(*RanfunctionDefinitionControlActionItem)(nil),           // 169: e2sm_rc.v1.RanfunctionDefinitionControlActionItem
	(*ControlActionRanparameterItem)(nil),                    // 170: e2sm_rc.v1.ControlActionRanparameterItem
	(*RanfunctionDefinitionPolicy)(nil),                      // 171: e2sm_rc.v1.RanfunctionDefinitionPolicy
	(*RanfunctionDefinitionPolicyItem)(nil),                  // 172: e2sm_rc.v1.RanfunctionDefinitionPolicyItem
	(*RanfunctionDefinitionPolicyActionItem)(nil),            // 173: e2sm_rc.v1.RanfunctionDefinitionPolicyActionItem
	(*PolicyActionRanparameterItem)(nil),                     // 174: e2sm_rc.v1.PolicyActionRanparameterItem
	(*PolicyConditionRanparameterItem)(nil),                  // 175: e2sm_rc.v1.PolicyConditionRanparameterItem
	(*e2sm_common_ies.NrCgi)(nil),                            // 176: e2sm_rc.v1.NrCgi
	(*e2sm_common_ies.NrPci)(nil),                            // 177: e2sm_rc.v1.NrPci
	(*e2sm_common_ies.FiveGsTac)(nil),                        // 178: e2sm_rc.v1.FiveGsTac
	(*e2sm_common_ies.NrfrequencyInfo)(nil),                  // 179: e2sm_rc.v1.NrfrequencyInfo
	(*e2sm_common_ies.EutraCgi)(nil),                         // 180: e2sm_rc.v1.EutraCgi
	(*e2sm_common_ies.EUtraPci)(nil),                         // 181: e2sm_rc.v1.EUtraPci
	(*e2sm_common_ies.EUtraArfcn)(nil),                       // 182: e2sm_rc.v1.EUtraArfcn
	(*e2sm_common_ies.EUtraTac)(nil),                         // 183: e2sm_rc.v1.EUtraTac
	(*e2sm_common_ies.ServingCellPci)(nil),                   // 184: e2sm_rc.v1.ServingCellPci
	(*e2sm_common_ies.ServingCellArfcn)(nil),                 // 185: e2sm_rc.v1.ServingCellArfcn
	(*e2sm_common_ies.Cgi)(nil),                              // 186: e2sm_rc.v1.Cgi
	(*e2sm_common_ies.Ueid)(nil),                             // 187: e2sm_rc.v1.Ueid
	(*asn1.BitString)(nil),                                   // 188: asn1.v1.BitString
	(e2sm_common_ies.InterfaceType)(0),                       // 189: e2sm_rc.v1.InterfaceType
	(*e2sm_common_ies.InterfaceIdentifier)(nil),              // 190: e2sm_rc.v1.InterfaceIdentifier
	(*e2sm_common_ies.InterfaceMessageId)(nil),               // 191: e2sm_rc.v1.InterfaceMessageId
	(*e2sm_common_ies.RrcMessageId)(nil),                     // 192: e2sm_rc.v1.RrcMessageId
	(*e2sm_common_ies.RicStyleType)(nil),                     // 193: e2sm_rc.v1.RicStyleType
	(*e2sm_common_ies.RanfunctionName)(nil),                  // 194: e2sm_rc.v1.RanfunctionName
	(*e2sm_common_ies.RicStyleName)(nil),                     // 195: e2sm_rc.v1.RicStyleName
	(*e2sm_common_ies.RicFormatType)(nil),                    // 196: e2sm_rc.v1.RicFormatType
}
var file_e2sm_rc_v1_e2sm_rc_proto_depIdxs = []int32{
	34,  // 0: e2sm_rc.v1.NeighborCellList.value:type_name -> e2sm_rc.v1.NeighborCellItem
	35,  // 1: e2sm_rc.v1.NeighborCellItem.ran_type_choice_nr:type_name -> e2sm_rc.v1.NeighborCellItemChoiceNr
	36,  // 2: e2sm_rc.v1.NeighborCellItem.ran_type_choice_eutra:type_name -> e2sm_rc.v1.NeighborCellItemChoiceEUtra
	176, // 3: e2sm_rc.v1.NeighborCellItemChoiceNr.n_r_cgi:type_name -> e2sm_rc.v1.NrCgi
	177, // 4: e2sm_rc.v1.NeighborCellItemChoiceNr.n_r_pci:type_name -> e2sm_rc.v1.NrPci
	178, // 5: e2sm_rc.v1.NeighborCellItemChoiceNr.five_gs_tac:type_name -> e2sm_rc.v1.FiveGsTac
	2,   // 6: e2sm_rc.v1.NeighborCellItemChoiceNr.n_r_mode_info:type_name -> e2sm_rc.v1.NRModeInfo
	179, // 7: e2sm_rc.v1.NeighborCellItemChoiceNr.n_r_freq_info:type_name -> e2sm_rc.v1.NrfrequencyInfo
	3,   // 8: e2sm_rc.v1.NeighborCellItemChoiceNr.x2_xn_established:type_name -> e2sm_rc.v1.X2XNEstablished
	4,   // 9: e2sm_rc.v1.NeighborCellItemChoiceNr.h_o_validated:type_name -> e2sm_rc.v1.HOValidated
	180, // 10: e2sm_rc.v1.NeighborCellItemChoiceEUtra.e_utra_cgi:type_name -> e2sm_rc.v1.EutraCgi
	181, // 11: e2sm_rc.v1.NeighborCellItemChoiceEUtra.e_utra_pci:type_name -> e2sm_rc.v1.EUtraPci
	182, // 12: e2sm_rc.v1.NeighborCellItemChoiceEUtra.e_utra_arfcn:type_name -> e2sm_rc.v1.EUtraArfcn
	183, // 13: e2sm_rc.v1.NeighborCellItemChoiceEUtra.e_utra_tac:type_name -> e2sm_rc.v1.EUtraTac
	3,   // 14: e2sm_rc.v1.NeighborCellItemChoiceEUtra.x2_xn_established:type_name -> e2sm_rc.v1.X2XNEstablished
	4,   // 15: e2sm_rc.v1.NeighborCellItemChoiceEUtra.h_o_validated:type_name -> e2sm_rc.v1.HOValidated
	184, // 16: e2sm_rc.v1.NeighborRelationInfo.serving_cell_pci:type_name -> e2sm_rc.v1.ServingCellPci
	185, // 17: e2sm_rc.v1.NeighborRelationInfo.serving_cell_arfcn:type_name -> e2sm_rc.v1.ServingCellArfcn
	33,  // 18: e2sm_rc.v1.NeighborRelationInfo.neighbor_cell_list:type_name -> e2sm_rc.v1.NeighborCellList
	39,  // 19: e2sm_rc.v1.EventTriggerCellInfo.cell_info_list:type_name -> e2sm_rc.v1.EventTriggerCellInfoItem
	87,  // 20: e2sm_rc.v1.EventTriggerCellInfoItem.event_trigger_cell_id:type_name -> e2sm_rc.v1.RicEventTriggerCellId
	40,  // 21: e2sm_rc.v1.EventTriggerCellInfoItem.cell_type:type_name -> e2sm_rc.v1.CellType
	0,   // 22: e2sm_rc.v1.EventTriggerCellInfoItem.logical_or:type_name -> e2sm_rc.v1.LogicalOr
	41,  // 23: e2sm_rc.v1.CellType.cell_type_choice_individual:type_name -> e2sm_rc.v1.EventTriggerCellInfoItemChoiceIndividual
	42,  // 24: e2sm_rc.v1.CellType.cell_type_choice_group:type_name -> e2sm_rc.v1.EventTriggerCellInfoItemChoiceGroup
	186, // 25: e2sm_rc.v1.EventTriggerCellInfoItemChoiceIndividual.cell_global_id:type_name -> e2sm_rc.v1.Cgi
	67,  // 26: e2sm_rc.v1.EventTriggerCellInfoItemChoiceGroup.ran_parameter_testing:type_name -> e2sm_rc.v1.RanparameterTesting
	44,  // 27: e2sm_rc.v1.EventTriggerUeInfo.ue_info_list:type_name -> e2sm_rc.v1.EventTriggerUeInfoItem
	85,  // 28: e2sm_rc.v1.EventTriggerUeInfoItem.event_trigger_ueid:type_name -> e2sm_rc.v1.RicEventTriggerUeId
	45,  // 29: e2sm_rc.v1.EventTriggerUeInfoItem.ue_type:type_name -> e2sm_rc.v1.UeType
	0,   // 30: e2sm_rc.v1.EventTriggerUeInfoItem.logical_or:type_name -> e2sm_rc.v1.LogicalOr
	46,  // 31: e2sm_rc.v1.UeType.ue_type_choice_individual:type_name -> e2sm_rc.v1.EventTriggerUeInfoItemChoiceIndividual
	47,  // 32: e2sm_rc.v1.UeType.ue_type_choice_group:type_name -> e2sm_rc.v1.EventTriggerUeInfoItemChoiceGroup
	187, // 33: e2sm_rc.v1.EventTriggerUeInfoItemChoiceIndividual.ue_id:type_name -> e2sm_rc.v1.Ueid
	67,  // 34: e2sm_rc.v1.EventTriggerUeInfoItemChoiceIndividual.ran_parameter_testing:type_name -> e2sm_rc.v1.RanparameterTesting
	67,  // 35: e2sm_rc.v1.EventTriggerUeInfoItemChoiceGroup.ran_parameter_testing:type_name -> e2sm_rc.v1.RanparameterTesting
	49,  // 36: e2sm_rc.v1.EventTriggerUeeventInfo.ue_event_list:type_name -> e2sm_rc.v1.EventTriggerUeeventInfoItem
	86,  // 37: e2sm_rc.v1.EventTriggerUeeventInfoItem.ue_event_id:type_name -> e2sm_rc.v1.RicEventTriggerUeeventId
	0,   // 38: e2sm_rc.v1.EventTriggerUeeventInfoItem.logical_or:type_name -> e2sm_rc.v1.LogicalOr
	53,  // 39: e2sm_rc.v1.RanparameterDefinition.ran_parameter_definition_choice:type_name -> e2sm_rc.v1.RanparameterDefinitionChoice
	54,  // 40: e2sm_rc.v1.RanparameterDefinitionChoice.choice_list:type_name -> e2sm_rc.v1.RanparameterDefinitionChoiceList
	56,  // 41: e2sm_rc.v1.RanparameterDefinitionChoice.choice_structure:type_name -> e2sm_rc.v1.RanparameterDefinitionChoiceStructure
	55,  // 42: e2sm_rc.v1.RanparameterDefinitionChoiceList.ran_parameter_list:type_name -> e2sm_rc.v1.RanparameterDefinitionChoiceListItem
	50,  // 43: e2sm_rc.v1.RanparameterDefinitionChoiceListItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 44: e2sm_rc.v1.RanparameterDefinitionChoiceListItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 45: e2sm_rc.v1.RanparameterDefinitionChoiceListItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	57,  // 46: e2sm_rc.v1.RanparameterDefinitionChoiceStructure.ran_parameter_structure:type_name -> e2sm_rc.v1.RanparameterDefinitionChoiceStructureItem
	50,  // 47: e2sm_rc.v1.RanparameterDefinitionChoiceStructureItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 48: e2sm_rc.v1.RanparameterDefinitionChoiceStructureItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 49: e2sm_rc.v1.RanparameterDefinitionChoiceStructureItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	188, // 50: e2sm_rc.v1.RanparameterValue.value_bit_s:type_name -> asn1.v1.BitString
	60,  // 51: e2sm_rc.v1.RanparameterValueType.ran_p_choice_element_true:type_name -> e2sm_rc.v1.RanparameterValueTypeChoiceElementTrue
	61,  // 52: e2sm_rc.v1.RanparameterValueType.ran_p_choice_element_false:type_name -> e2sm_rc.v1.RanparameterValueTypeChoiceElementFalse
	62,  // 53: e2sm_rc.v1.RanparameterValueType.ran_p_choice_structure:type_name -> e2sm_rc.v1.RanparameterValueTypeChoiceStructure
	63,  // 54: e2sm_rc.v1.RanparameterValueType.ran_p_choice_list:type_name -> e2sm_rc.v1.RanparameterValueTypeChoiceList
	58,  // 55: e2sm_rc.v1.RanparameterValueTypeChoiceElementTrue.ran_parameter_value:type_name -> e2sm_rc.v1.RanparameterValue
	58,  // 56: e2sm_rc.v1.RanparameterValueTypeChoiceElementFalse.ran_parameter_value:type_name -> e2sm_rc.v1.RanparameterValue
	64,  // 57: e2sm_rc.v1.RanparameterValueTypeChoiceStructure.ran_parameter_structure:type_name -> e2sm_rc.v1.RanparameterStructure
	66,  // 58: e2sm_rc.v1.RanparameterValueTypeChoiceList.ran_parameter_list:type_name -> e2sm_rc.v1.RanparameterList
	65,  // 59: e2sm_rc.v1.RanparameterStructure.sequence_of_ran_parameters:type_name -> e2sm_rc.v1.RanparameterStructureItem
	50,  // 60: e2sm_rc.v1.RanparameterStructureItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	59,  // 61: e2sm_rc.v1.RanparameterStructureItem.ran_parameter_value_type:type_name -> e2sm_rc.v1.RanparameterValueType
	64,  // 62: e2sm_rc.v1.RanparameterList.list_of_ran_parameter:type_name -> e2sm_rc.v1.RanparameterStructure
	69,  // 63: e2sm_rc.v1.RanparameterTesting.value:type_name -> e2sm_rc.v1.RanparameterTestingItem
	5,   // 64: e2sm_rc.v1.RanparameterTestingCondition.ran_p_choice_comparison:type_name -> e2sm_rc.v1.RanPChoiceComparison
	6,   // 65: e2sm_rc.v1.RanparameterTestingCondition.ran_p_choice_presence:type_name -> e2sm_rc.v1.RanPChoicePresence
	50,  // 66: e2sm_rc.v1.RanparameterTestingItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	70,  // 67: e2sm_rc.v1.RanparameterTestingItem.ran_parameter_type:type_name -> e2sm_rc.v1.RanParameterType
	71,  // 68: e2sm_rc.v1.RanParameterType.ran_p_choice_list:type_name -> e2sm_rc.v1.RanparameterTestingItemChoiceList
	72,  // 69: e2sm_rc.v1.RanParameterType.ran_p_choice_structure:type_name -> e2sm_rc.v1.RanparameterTestingItemChoiceStructure
	73,  // 70: e2sm_rc.v1.RanParameterType.ran_p_choice_element_true:type_name -> e2sm_rc.v1.RanparameterTestingItemChoiceElementTrue
	74,  // 71: e2sm_rc.v1.RanParameterType.ran_p_choice_element_false:type_name -> e2sm_rc.v1.RanparameterTestingItemChoiceElementFalse
	75,  // 72: e2sm_rc.v1.RanparameterTestingItemChoiceList.ran_parameter_list:type_name -> e2sm_rc.v1.RanparameterTestingList
	76,  // 73: e2sm_rc.v1.RanparameterTestingItemChoiceStructure.ran_parameter_structure:type_name -> e2sm_rc.v1.RanparameterTestingStructure
	58,  // 74: e2sm_rc.v1.RanparameterTestingItemChoiceElementTrue.ran_parameter_value:type_name -> e2sm_rc.v1.RanparameterValue
	68,  // 75: e2sm_rc.v1.RanparameterTestingItemChoiceElementFalse.ran_parameter_test_condition:type_name -> e2sm_rc.v1.RanparameterTestingCondition
	58,  // 76: e2sm_rc.v1.RanparameterTestingItemChoiceElementFalse.ran_parameter_value:type_name -> e2sm_rc.v1.RanparameterValue
	0,   // 77: e2sm_rc.v1.RanparameterTestingItemChoiceElementFalse.logical_or:type_name -> e2sm_rc.v1.LogicalOr
	69,  // 78: e2sm_rc.v1.RanparameterTestingList.value:type_name -> e2sm_rc.v1.RanparameterTestingItem
	69,  // 79: e2sm_rc.v1.RanparameterTestingStructure.value:type_name -> e2sm_rc.v1.RanparameterTestingItem
	82,  // 80: e2sm_rc.v1.RicPolicyAction.ric_policy_action_id:type_name -> e2sm_rc.v1.RicControlActionId
	91,  // 81: e2sm_rc.v1.RicPolicyAction.ran_parameters_list:type_name -> e2sm_rc.v1.RicPolicyActionRanparameterItem
	50,  // 82: e2sm_rc.v1.RicPolicyActionRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	59,  // 83: e2sm_rc.v1.RicPolicyActionRanparameterItem.ran_parameter_value_type:type_name -> e2sm_rc.v1.RanparameterValueType
	93,  // 84: e2sm_rc.v1.E2SmRcEventTrigger.ric_event_trigger_formats:type_name -> e2sm_rc.v1.RicEventTriggerFormats
	94,  // 85: e2sm_rc.v1.RicEventTriggerFormats.event_trigger_format1:type_name -> e2sm_rc.v1.E2SmRcEventTriggerFormat1
	99,  // 86: e2sm_rc.v1.RicEventTriggerFormats.event_trigger_format2:type_name -> e2sm_rc.v1.E2SmRcEventTriggerFormat2
	100, // 87: e2sm_rc.v1.RicEventTriggerFormats.event_trigger_format3:type_name -> e2sm_rc.v1.E2SmRcEventTriggerFormat3
	102, // 88: e2sm_rc.v1.RicEventTriggerFormats.event_trigger_format4:type_name -> e2sm_rc.v1.E2SmRcEventTriggerFormat4
	109, // 89: e2sm_rc.v1.RicEventTriggerFormats.event_trigger_format5:type_name -> e2sm_rc.v1.E2SmRcEventTriggerFormat5
	95,  // 90: e2sm_rc.v1.E2SmRcEventTriggerFormat1.message_list:type_name -> e2sm_rc.v1.E2SmRcEventTriggerFormat1Item
	43,  // 91: e2sm_rc.v1.E2SmRcEventTriggerFormat1.global_associated_ueinfo:type_name -> e2sm_rc.v1.EventTriggerUeInfo
	84,  // 92: e2sm_rc.v1.E2SmRcEventTriggerFormat1Item.ric_event_trigger_condition_id:type_name -> e2sm_rc.v1.RicEventTriggerConditionId
	96,  // 93: e2sm_rc.v1.E2SmRcEventTriggerFormat1Item.message_type:type_name -> e2sm_rc.v1.MessageTypeChoice
	7,   // 94: e2sm_rc.v1.E2SmRcEventTriggerFormat1Item.message_direction:type_name -> e2sm_rc.v1.MessageDirection
	43,  // 95: e2sm_rc.v1.E2SmRcEventTriggerFormat1Item.associated_ueinfo:type_name -> e2sm_rc.v1.EventTriggerUeInfo
	48,  // 96: e2sm_rc.v1.E2SmRcEventTriggerFormat1Item.associated_ueevent:type_name -> e2sm_rc.v1.EventTriggerUeeventInfo
	0,   // 97: e2sm_rc.v1.E2SmRcEventTriggerFormat1Item.logical_or:type_name -> e2sm_rc.v1.LogicalOr
	97,  // 98: e2sm_rc.v1.MessageTypeChoice.message_type_choice_ni:type_name -> e2sm_rc.v1.MessageTypeChoiceNi
	98,  // 99: e2sm_rc.v1.MessageTypeChoice.message_type_choice_rrc:type_name -> e2sm_rc.v1.MessageTypeChoiceRrc
	189, // 100: e2sm_rc.v1.MessageTypeChoiceNi.n_i_type:type_name -> e2sm_rc.v1.InterfaceType
	190, // 101: e2sm_rc.v1.MessageTypeChoiceNi.n_i_identifier:type_name -> e2sm_rc.v1.InterfaceIdentifier
	191, // 102: e2sm_rc.v1.MessageTypeChoiceNi.n_i_message:type_name -> e2sm_rc.v1.InterfaceMessageId
	192, // 103: e2sm_rc.v1.MessageTypeChoiceRrc.r_rc_message:type_name -> e2sm_rc.v1.RrcMessageId
	78,  // 104: e2sm_rc.v1.E2SmRcEventTriggerFormat2.ric_call_process_type_id:type_name -> e2sm_rc.v1.RicCallProcessTypeId
	80,  // 105: e2sm_rc.v1.E2SmRcEventTriggerFormat2.ric_call_process_breakpoint_id:type_name -> e2sm_rc.v1.RicCallProcessBreakpointId
	67,  // 106: e2sm_rc.v1.E2SmRcEventTriggerFormat2.associated_e2_node_info:type_name -> e2sm_rc.v1.RanparameterTesting
	43,  // 107: e2sm_rc.v1.E2SmRcEventTriggerFormat2.associated_ueinfo:type_name -> e2sm_rc.v1.EventTriggerUeInfo
	101, // 108: e2sm_rc.v1.E2SmRcEventTriggerFormat3.e2_node_info_change_list:type_name -> e2sm_rc.v1.E2SmRcEventTriggerFormat3Item
	84,  // 109: e2sm_rc.v1.E2SmRcEventTriggerFormat3Item.ric_event_trigger_condition_id:type_name -> e2sm_rc.v1.RicEventTriggerConditionId
	38,  // 110: e2sm_rc.v1.E2SmRcEventTriggerFormat3Item.associated_cell_info:type_name -> e2sm_rc.v1.EventTriggerCellInfo
	0,   // 111: e2sm_rc.v1.E2SmRcEventTriggerFormat3Item.logical_or:type_name -> e2sm_rc.v1.LogicalOr
	103, // 112: e2sm_rc.v1.E2SmRcEventTriggerFormat4.u_einfo_change_list:type_name -> e2sm_rc.v1.E2SmRcEventTriggerFormat4Item
	84,  // 113: e2sm_rc.v1.E2SmRcEventTriggerFormat4Item.ric_event_trigger_condition_id:type_name -> e2sm_rc.v1.RicEventTriggerConditionId
	104, // 114: e2sm_rc.v1.E2SmRcEventTriggerFormat4Item.trigger_type:type_name -> e2sm_rc.v1.TriggerTypeChoice
	43,  // 115: e2sm_rc.v1.E2SmRcEventTriggerFormat4Item.associated_ueinfo:type_name -> e2sm_rc.v1.EventTriggerUeInfo
	0,   // 116: e2sm_rc.v1.E2SmRcEventTriggerFormat4Item.logical_or:type_name -> e2sm_rc.v1.LogicalOr
	105, // 117: e2sm_rc.v1.TriggerTypeChoice.trigger_type_choice_rrcstate:type_name -> e2sm_rc.v1.TriggerTypeChoiceRrcstate
	107, // 118: e2sm_rc.v1.TriggerTypeChoice.trigger_type_choice_ueid:type_name -> e2sm_rc.v1.TriggerTypeChoiceUeid
	108, // 119: e2sm_rc.v1.TriggerTypeChoice.trigger_type_choice_l2state:type_name -> e2sm_rc.v1.TriggerTypeChoiceL2state
	106, // 120: e2sm_rc.v1.TriggerTypeChoiceRrcstate.rrc_state_list:type_name -> e2sm_rc.v1.TriggerTypeChoiceRrcstateItem
	1,   // 121: e2sm_rc.v1.TriggerTypeChoiceRrcstateItem.state_changed_to:type_name -> e2sm_rc.v1.RrcState
	0,   // 122: e2sm_rc.v1.TriggerTypeChoiceRrcstateItem.logical_or:type_name -> e2sm_rc.v1.LogicalOr
	67,  // 123: e2sm_rc.v1.TriggerTypeChoiceL2state.associated_l2variables:type_name -> e2sm_rc.v1.RanparameterTesting
	8,   // 124: e2sm_rc.v1.E2SmRcEventTriggerFormat5.on_demand:type_name -> e2sm_rc.v1.OnDemand
	43,  // 125: e2sm_rc.v1.E2SmRcEventTriggerFormat5.associated_ueinfo:type_name -> e2sm_rc.v1.EventTriggerUeInfo
	38,  // 126: e2sm_rc.v1.E2SmRcEventTriggerFormat5.associated_cell_info:type_name -> e2sm_rc.v1.EventTriggerCellInfo
	193, // 127: e2sm_rc.v1.E2SmRcActionDefinition.ric_style_type:type_name -> e2sm_rc.v1.RicStyleType
	111, // 128: e2sm_rc.v1.E2SmRcActionDefinition.ric_action_definition_formats:type_name -> e2sm_rc.v1.RicActionDefinitionFormats
	112, // 129: e2sm_rc.v1.RicActionDefinitionFormats.action_definition_format1:type_name -> e2sm_rc.v1.E2SmRcActionDefinitionFormat1
	114, // 130: e2sm_rc.v1.RicActionDefinitionFormats.action_definition_format2:type_name -> e2sm_rc.v1.E2SmRcActionDefinitionFormat2
	116, // 131: e2sm_rc.v1.RicActionDefinitionFormats.action_definition_format3:type_name -> e2sm_rc.v1.E2SmRcActionDefinitionFormat3
	113, // 132: e2sm_rc.v1.E2SmRcActionDefinitionFormat1.ran_p_to_be_reported_list:type_name -> e2sm_rc.v1.E2SmRcActionDefinitionFormat1Item
	50,  // 133: e2sm_rc.v1.E2SmRcActionDefinitionFormat1Item.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	115, // 134: e2sm_rc.v1.E2SmRcActionDefinitionFormat2.ric_policy_conditions_list:type_name -> e2sm_rc.v1.E2SmRcActionDefinitionFormat2Item
	90,  // 135: e2sm_rc.v1.E2SmRcActionDefinitionFormat2Item.ric_policy_action:type_name -> e2sm_rc.v1.RicPolicyAction
	67,  // 136: e2sm_rc.v1.E2SmRcActionDefinitionFormat2Item.ric_policy_condition_definition:type_name -> e2sm_rc.v1.RanparameterTesting
	88,  // 137: e2sm_rc.v1.E2SmRcActionDefinitionFormat3.ric_insert_indication_id:type_name -> e2sm_rc.v1.RicInsertIndicationId
	117, // 138: e2sm_rc.v1.E2SmRcActionDefinitionFormat3.ran_p_insert_indication_list:type_name -> e2sm_rc.v1.E2SmRcActionDefinitionFormat3Item
	187, // 139: e2sm_rc.v1.E2SmRcActionDefinitionFormat3.ue_id:type_name -> e2sm_rc.v1.Ueid
	50,  // 140: e2sm_rc.v1.E2SmRcActionDefinitionFormat3Item.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	119, // 141: e2sm_rc.v1.E2SmRcIndicationHeader.ric_indication_header_formats:type_name -> e2sm_rc.v1.RicIndicationHeaderFormats
	120, // 142: e2sm_rc.v1.RicIndicationHeaderFormats.indication_header_format1:type_name -> e2sm_rc.v1.E2SmRcIndicationHeaderFormat1
	121, // 143: e2sm_rc.v1.RicIndicationHeaderFormats.indication_header_format2:type_name -> e2sm_rc.v1.E2SmRcIndicationHeaderFormat2
	84,  // 144: e2sm_rc.v1.E2SmRcIndicationHeaderFormat1.ric_event_trigger_condition_id:type_name -> e2sm_rc.v1.RicEventTriggerConditionId
	187, // 145: e2sm_rc.v1.E2SmRcIndicationHeaderFormat2.ue_id:type_name -> e2sm_rc.v1.Ueid
	193, // 146: e2sm_rc.v1.E2SmRcIndicationHeaderFormat2.ric_insert_style_type:type_name -> e2sm_rc.v1.RicStyleType
	88,  // 147: e2sm_rc.v1.E2SmRcIndicationHeaderFormat2.ric_insert_indication_id:type_name -> e2sm_rc.v1.RicInsertIndicationId
	123, // 148: e2sm_rc.v1.E2SmRcIndicationMessage.ric_indication_message_formats:type_name -> e2sm_rc.v1.RicIndicationMessageFormats
	124, // 149: e2sm_rc.v1.RicIndicationMessageFormats.indication_message_format1:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat1
	126, // 150: e2sm_rc.v1.RicIndicationMessageFormats.indication_message_format2:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat2
	129, // 151: e2sm_rc.v1.RicIndicationMessageFormats.indication_message_format3:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat3
	131, // 152: e2sm_rc.v1.RicIndicationMessageFormats.indication_message_format4:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat4
	134, // 153: e2sm_rc.v1.RicIndicationMessageFormats.indication_message_format5:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat5
	125, // 154: e2sm_rc.v1.E2SmRcIndicationMessageFormat1.ran_p_reported_list:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat1Item
	50,  // 155: e2sm_rc.v1.E2SmRcIndicationMessageFormat1Item.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	59,  // 156: e2sm_rc.v1.E2SmRcIndicationMessageFormat1Item.ran_parameter_value_type:type_name -> e2sm_rc.v1.RanparameterValueType
	127, // 157: e2sm_rc.v1.E2SmRcIndicationMessageFormat2.ue_parameter_list:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat2Item
	187, // 158: e2sm_rc.v1.E2SmRcIndicationMessageFormat2Item.ue_id:type_name -> e2sm_rc.v1.Ueid
	128, // 159: e2sm_rc.v1.E2SmRcIndicationMessageFormat2Item.ran_p_list:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat2RanparameterItem
	50,  // 160: e2sm_rc.v1.E2SmRcIndicationMessageFormat2RanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	59,  // 161: e2sm_rc.v1.E2SmRcIndicationMessageFormat2RanparameterItem.ran_parameter_value_type:type_name -> e2sm_rc.v1.RanparameterValueType
	130, // 162: e2sm_rc.v1.E2SmRcIndicationMessageFormat3.cell_info_list:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat3Item
	186, // 163: e2sm_rc.v1.E2SmRcIndicationMessageFormat3Item.cell_global_id:type_name -> e2sm_rc.v1.Cgi
	37,  // 164: e2sm_rc.v1.E2SmRcIndicationMessageFormat3Item.neighbor_relation_table:type_name -> e2sm_rc.v1.NeighborRelationInfo
	132, // 165: e2sm_rc.v1.E2SmRcIndicationMessageFormat4.ue_info_list:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat4ItemUe
	133, // 166: e2sm_rc.v1.E2SmRcIndicationMessageFormat4.cell_info_list:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat4ItemCell
	187, // 167: e2sm_rc.v1.E2SmRcIndicationMessageFormat4ItemUe.ue_id:type_name -> e2sm_rc.v1.Ueid
	186, // 168: e2sm_rc.v1.E2SmRcIndicationMessageFormat4ItemUe.cell_global_id:type_name -> e2sm_rc.v1.Cgi
	186, // 169: e2sm_rc.v1.E2SmRcIndicationMessageFormat4ItemCell.cell_global_id:type_name -> e2sm_rc.v1.Cgi
	37,  // 170: e2sm_rc.v1.E2SmRcIndicationMessageFormat4ItemCell.neighbor_relation_table:type_name -> e2sm_rc.v1.NeighborRelationInfo
	135, // 171: e2sm_rc.v1.E2SmRcIndicationMessageFormat5.ran_p_requested_list:type_name -> e2sm_rc.v1.E2SmRcIndicationMessageFormat5Item
	50,  // 172: e2sm_rc.v1.E2SmRcIndicationMessageFormat5Item.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	59,  // 173: e2sm_rc.v1.E2SmRcIndicationMessageFormat5Item.ran_parameter_value_type:type_name -> e2sm_rc.v1.RanparameterValueType
	137, // 174: e2sm_rc.v1.E2SmRcCallProcessId.ric_call_process_id_formats:type_name -> e2sm_rc.v1.RicCallProcessIdFormats
	138, // 175: e2sm_rc.v1.RicCallProcessIdFormats.call_process_id_format1:type_name -> e2sm_rc.v1.E2SmRcCallProcessIdFormat1
	77,  // 176: e2sm_rc.v1.E2SmRcCallProcessIdFormat1.ric_call_process_id:type_name -> e2sm_rc.v1.RanCallProcessId
	140, // 177: e2sm_rc.v1.E2SmRcControlHeader.ric_control_header_formats:type_name -> e2sm_rc.v1.RicControlHeaderFormats
	141, // 178: e2sm_rc.v1.RicControlHeaderFormats.control_header_format1:type_name -> e2sm_rc.v1.E2SmRcControlHeaderFormat1
	187, // 179: e2sm_rc.v1.E2SmRcControlHeaderFormat1.ue_id:type_name -> e2sm_rc.v1.Ueid
	193, // 180: e2sm_rc.v1.E2SmRcControlHeaderFormat1.ric_style_type:type_name -> e2sm_rc.v1.RicStyleType
	82,  // 181: e2sm_rc.v1.E2SmRcControlHeaderFormat1.ric_control_action_id:type_name -> e2sm_rc.v1.RicControlActionId
	9,   // 182: e2sm_rc.v1.E2SmRcControlHeaderFormat1.ric_control_decision:type_name -> e2sm_rc.v1.RicControlDecision
	143, // 183: e2sm_rc.v1.E2SmRcControlMessage.ric_control_message_formats:type_name -> e2sm_rc.v1.RicControlMessageFormats
	144, // 184: e2sm_rc.v1.RicControlMessageFormats.control_message_format1:type_name -> e2sm_rc.v1.E2SmRcControlMessageFormat1
	145, // 185: e2sm_rc.v1.E2SmRcControlMessageFormat1.ran_p_list:type_name -> e2sm_rc.v1.E2SmRcControlMessageFormat1Item
	50,  // 186: e2sm_rc.v1.E2SmRcControlMessageFormat1Item.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	59,  // 187: e2sm_rc.v1.E2SmRcControlMessageFormat1Item.ran_parameter_value_type:type_name -> e2sm_rc.v1.RanparameterValueType
	147, // 188: e2sm_rc.v1.E2SmRcControlOutcome.ric_control_outcome_formats:type_name -> e2sm_rc.v1.RicControlOutcomeFormats
	148, // 189: e2sm_rc.v1.RicControlOutcomeFormats.control_outcome_format1:type_name -> e2sm_rc.v1.E2SmRcControlOutcomeFormat1
	149, // 190: e2sm_rc.v1.E2SmRcControlOutcomeFormat1.ran_p_list:type_name -> e2sm_rc.v1.E2SmRcControlOutcomeFormat1Item
	50,  // 191: e2sm_rc.v1.E2SmRcControlOutcomeFormat1Item.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	58,  // 192: e2sm_rc.v1.E2SmRcControlOutcomeFormat1Item.ran_parameter_value:type_name -> e2sm_rc.v1.RanparameterValue
	194, // 193: e2sm_rc.v1.E2SmRcRanfunctionDefinition.ran_function_name:type_name -> e2sm_rc.v1.RanfunctionName
	151, // 194: e2sm_rc.v1.E2SmRcRanfunctionDefinition.ran_function_definition_event_trigger:type_name -> e2sm_rc.v1.RanfunctionDefinitionEventTrigger
	159, // 195: e2sm_rc.v1.E2SmRcRanfunctionDefinition.ran_function_definition_report:type_name -> e2sm_rc.v1.RanfunctionDefinitionReport
	162, // 196: e2sm_rc.v1.E2SmRcRanfunctionDefinition.ran_function_definition_insert:type_name -> e2sm_rc.v1.RanfunctionDefinitionInsert
	166, // 197: e2sm_rc.v1.E2SmRcRanfunctionDefinition.ran_function_definition_control:type_name -> e2sm_rc.v1.RanfunctionDefinitionControl
	171, // 198: e2sm_rc.v1.E2SmRcRanfunctionDefinition.ran_function_definition_policy:type_name -> e2sm_rc.v1.RanfunctionDefinitionPolicy
	152, // 199: e2sm_rc.v1.RanfunctionDefinitionEventTrigger.ric_event_trigger_style_list:type_name -> e2sm_rc.v1.RanfunctionDefinitionEventTriggerStyleItem
	153, // 200: e2sm_rc.v1.RanfunctionDefinitionEventTrigger.ran_l2_parameters_list:type_name -> e2sm_rc.v1.L2ParametersRanparameterItem
	156, // 201: e2sm_rc.v1.RanfunctionDefinitionEventTrigger.ran_call_process_types_list:type_name -> e2sm_rc.v1.RanfunctionDefinitionEventTriggerCallProcessItem
	154, // 202: e2sm_rc.v1.RanfunctionDefinitionEventTrigger.ran_ueidentification_parameters_list:type_name -> e2sm_rc.v1.UeidentificationRanparameterItem
	155, // 203: e2sm_rc.v1.RanfunctionDefinitionEventTrigger.ran_cell_identification_parameters_list:type_name -> e2sm_rc.v1.CellIdentificationRanparameterItem
	193, // 204: e2sm_rc.v1.RanfunctionDefinitionEventTriggerStyleItem.ric_event_trigger_style_type:type_name -> e2sm_rc.v1.RicStyleType
	195, // 205: e2sm_rc.v1.RanfunctionDefinitionEventTriggerStyleItem.ric_event_trigger_style_name:type_name -> e2sm_rc.v1.RicStyleName
	196, // 206: e2sm_rc.v1.RanfunctionDefinitionEventTriggerStyleItem.ric_event_trigger_format_type:type_name -> e2sm_rc.v1.RicFormatType
	50,  // 207: e2sm_rc.v1.L2ParametersRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 208: e2sm_rc.v1.L2ParametersRanparameterItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 209: e2sm_rc.v1.L2ParametersRanparameterItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	50,  // 210: e2sm_rc.v1.UeidentificationRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 211: e2sm_rc.v1.UeidentificationRanparameterItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 212: e2sm_rc.v1.UeidentificationRanparameterItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	50,  // 213: e2sm_rc.v1.CellIdentificationRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 214: e2sm_rc.v1.CellIdentificationRanparameterItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 215: e2sm_rc.v1.CellIdentificationRanparameterItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	78,  // 216: e2sm_rc.v1.RanfunctionDefinitionEventTriggerCallProcessItem.call_process_type_id:type_name -> e2sm_rc.v1.RicCallProcessTypeId
	79,  // 217: e2sm_rc.v1.RanfunctionDefinitionEventTriggerCallProcessItem.call_process_type_name:type_name -> e2sm_rc.v1.RicCallProcessTypeName
	157, // 218: e2sm_rc.v1.RanfunctionDefinitionEventTriggerCallProcessItem.call_process_breakpoints_list:type_name -> e2sm_rc.v1.RanfunctionDefinitionEventTriggerBreakpointItem
	80,  // 219: e2sm_rc.v1.RanfunctionDefinitionEventTriggerBreakpointItem.call_process_breakpoint_id:type_name -> e2sm_rc.v1.RicCallProcessBreakpointId
	81,  // 220: e2sm_rc.v1.RanfunctionDefinitionEventTriggerBreakpointItem.call_process_breakpoint_name:type_name -> e2sm_rc.v1.RicCallProcessBreakpointName
	158, // 221: e2sm_rc.v1.RanfunctionDefinitionEventTriggerBreakpointItem.ran_call_process_breakpoint_parameters_list:type_name -> e2sm_rc.v1.CallProcessBreakpointRanparameterItem
	50,  // 222: e2sm_rc.v1.CallProcessBreakpointRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 223: e2sm_rc.v1.CallProcessBreakpointRanparameterItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 224: e2sm_rc.v1.CallProcessBreakpointRanparameterItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	160, // 225: e2sm_rc.v1.RanfunctionDefinitionReport.ric_report_style_list:type_name -> e2sm_rc.v1.RanfunctionDefinitionReportItem
	193, // 226: e2sm_rc.v1.RanfunctionDefinitionReportItem.ric_report_style_type:type_name -> e2sm_rc.v1.RicStyleType
	195, // 227: e2sm_rc.v1.RanfunctionDefinitionReportItem.ric_report_style_name:type_name -> e2sm_rc.v1.RicStyleName
	193, // 228: e2sm_rc.v1.RanfunctionDefinitionReportItem.ric_supported_event_trigger_style_type:type_name -> e2sm_rc.v1.RicStyleType
	196, // 229: e2sm_rc.v1.RanfunctionDefinitionReportItem.ric_report_action_format_type:type_name -> e2sm_rc.v1.RicFormatType
	196, // 230: e2sm_rc.v1.RanfunctionDefinitionReportItem.ric_indication_header_format_type:type_name -> e2sm_rc.v1.RicFormatType
	196, // 231: e2sm_rc.v1.RanfunctionDefinitionReportItem.ric_indication_message_format_type:type_name -> e2sm_rc.v1.RicFormatType
	161, // 232: e2sm_rc.v1.RanfunctionDefinitionReportItem.ran_report_parameters_list:type_name -> e2sm_rc.v1.ReportRanparameterItem
	50,  // 233: e2sm_rc.v1.ReportRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 234: e2sm_rc.v1.ReportRanparameterItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 235: e2sm_rc.v1.ReportRanparameterItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	163, // 236: e2sm_rc.v1.RanfunctionDefinitionInsert.ric_insert_style_list:type_name -> e2sm_rc.v1.RanfunctionDefinitionInsertItem
	193, // 237: e2sm_rc.v1.RanfunctionDefinitionInsertItem.ric_insert_style_type:type_name -> e2sm_rc.v1.RicStyleType
	195, // 238: e2sm_rc.v1.RanfunctionDefinitionInsertItem.ric_insert_style_name:type_name -> e2sm_rc.v1.RicStyleName
	193, // 239: e2sm_rc.v1.RanfunctionDefinitionInsertItem.ric_supported_event_trigger_style_type:type_name -> e2sm_rc.v1.RicStyleType
	196, // 240: e2sm_rc.v1.RanfunctionDefinitionInsertItem.ric_action_definition_format_type:type_name -> e2sm_rc.v1.RicFormatType
	164, // 241: e2sm_rc.v1.RanfunctionDefinitionInsertItem.ric_insert_indication_list:type_name -> e2sm_rc.v1.RanfunctionDefinitionInsertIndicationItem
	196, // 242: e2sm_rc.v1.RanfunctionDefinitionInsertItem.ric_indication_header_format_type:type_name -> e2sm_rc.v1.RicFormatType
	196, // 243: e2sm_rc.v1.RanfunctionDefinitionInsertItem.ric_indication_message_format_type:type_name -> e2sm_rc.v1.RicFormatType
	196, // 244: e2sm_rc.v1.RanfunctionDefinitionInsertItem.ric_call_process_idformat_type:type_name -> e2sm_rc.v1.RicFormatType
	88,  // 245: e2sm_rc.v1.RanfunctionDefinitionInsertIndicationItem.ric_insert_indication_id:type_name -> e2sm_rc.v1.RicInsertIndicationId
	89,  // 246: e2sm_rc.v1.RanfunctionDefinitionInsertIndicationItem.ric_insert_indication_name:type_name -> e2sm_rc.v1.RicInsertIndicationName
	165, // 247: e2sm_rc.v1.RanfunctionDefinitionInsertIndicationItem.ran_insert_indication_parameters_list:type_name -> e2sm_rc.v1.InsertIndicationRanparameterItem
	50,  // 248: e2sm_rc.v1.InsertIndicationRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 249: e2sm_rc.v1.InsertIndicationRanparameterItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 250: e2sm_rc.v1.InsertIndicationRanparameterItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	167, // 251: e2sm_rc.v1.RanfunctionDefinitionControl.ric_control_style_list:type_name -> e2sm_rc.v1.RanfunctionDefinitionControlItem
	193, // 252: e2sm_rc.v1.RanfunctionDefinitionControlItem.ric_control_style_type:type_name -> e2sm_rc.v1.RicStyleType
	195, // 253: e2sm_rc.v1.RanfunctionDefinitionControlItem.ric_control_style_name:type_name -> e2sm_rc.v1.RicStyleName
	169, // 254: e2sm_rc.v1.RanfunctionDefinitionControlItem.ric_control_action_list:type_name -> e2sm_rc.v1.RanfunctionDefinitionControlActionItem
	196, // 255: e2sm_rc.v1.RanfunctionDefinitionControlItem.ric_control_header_format_type:type_name -> e2sm_rc.v1.RicFormatType
	196, // 256: e2sm_rc.v1.RanfunctionDefinitionControlItem.ric_control_message_format_type:type_name -> e2sm_rc.v1.RicFormatType
	196, // 257: e2sm_rc.v1.RanfunctionDefinitionControlItem.ric_call_process_idformat_type:type_name -> e2sm_rc.v1.RicFormatType
	196, // 258: e2sm_rc.v1.RanfunctionDefinitionControlItem.ric_control_outcome_format_type:type_name -> e2sm_rc.v1.RicFormatType
	168, // 259: e2sm_rc.v1.RanfunctionDefinitionControlItem.ran_control_outcome_parameters_list:type_name -> e2sm_rc.v1.ControlOutcomeRanparameterItem
	50,  // 260: e2sm_rc.v1.ControlOutcomeRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 261: e2sm_rc.v1.ControlOutcomeRanparameterItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 262: e2sm_rc.v1.ControlOutcomeRanparameterItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	82,  // 263: e2sm_rc.v1.RanfunctionDefinitionControlActionItem.ric_control_action_id:type_name -> e2sm_rc.v1.RicControlActionId
	83,  // 264: e2sm_rc.v1.RanfunctionDefinitionControlActionItem.ric_control_action_name:type_name -> e2sm_rc.v1.RicControlActionName
	170, // 265: e2sm_rc.v1.RanfunctionDefinitionControlActionItem.ran_control_action_parameters_list:type_name -> e2sm_rc.v1.ControlActionRanparameterItem
	50,  // 266: e2sm_rc.v1.ControlActionRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 267: e2sm_rc.v1.ControlActionRanparameterItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 268: e2sm_rc.v1.ControlActionRanparameterItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	172, // 269: e2sm_rc.v1.RanfunctionDefinitionPolicy.ric_policy_style_list:type_name -> e2sm_rc.v1.RanfunctionDefinitionPolicyItem
	193, // 270: e2sm_rc.v1.RanfunctionDefinitionPolicyItem.ric_policy_style_type:type_name -> e2sm_rc.v1.RicStyleType
	195, // 271: e2sm_rc.v1.RanfunctionDefinitionPolicyItem.ric_policy_style_name:type_name -> e2sm_rc.v1.RicStyleName
	193, // 272: e2sm_rc.v1.RanfunctionDefinitionPolicyItem.ric_supported_event_trigger_style_type:type_name -> e2sm_rc.v1.RicStyleType
	173, // 273: e2sm_rc.v1.RanfunctionDefinitionPolicyItem.ric_policy_action_list:type_name -> e2sm_rc.v1.RanfunctionDefinitionPolicyActionItem
	82,  // 274: e2sm_rc.v1.RanfunctionDefinitionPolicyActionItem.ric_policy_action_id:type_name -> e2sm_rc.v1.RicControlActionId
	83,  // 275: e2sm_rc.v1.RanfunctionDefinitionPolicyActionItem.ric_policy_action_name:type_name -> e2sm_rc.v1.RicControlActionName
	196, // 276: e2sm_rc.v1.RanfunctionDefinitionPolicyActionItem.ric_action_definition_format_type:type_name -> e2sm_rc.v1.RicFormatType
	174, // 277: e2sm_rc.v1.RanfunctionDefinitionPolicyActionItem.ran_policy_action_parameters_list:type_name -> e2sm_rc.v1.PolicyActionRanparameterItem
	175, // 278: e2sm_rc.v1.RanfunctionDefinitionPolicyActionItem.ran_policy_condition_parameters_list:type_name -> e2sm_rc.v1.PolicyConditionRanparameterItem
	50,  // 279: e2sm_rc.v1.PolicyActionRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 280: e2sm_rc.v1.PolicyActionRanparameterItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 281: e2sm_rc.v1.PolicyActionRanparameterItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	50,  // 282: e2sm_rc.v1.PolicyConditionRanparameterItem.ran_parameter_id:type_name -> e2sm_rc.v1.RanparameterId
	51,  // 283: e2sm_rc.v1.PolicyConditionRanparameterItem.ran_parameter_name:type_name -> e2sm_rc.v1.RanparameterName
	52,  // 284: e2sm_rc.v1.PolicyConditionRanparameterItem.ran_parameter_definition:type_name -> e2sm_rc.v1.RanparameterDefinition
	285, // [285:285] is the sub-list for method output_type
	285, // [285:285] is the sub-list for method input_type
	285, // [285:285] is the sub-list for extension type_name
	285, // [285:285] is the sub-list for extension extendee
	0,   // [0:285] is the sub-list for field type_name
}

func init() { file_e2sm_rc_v1_e2sm_rc_proto_init() }
func file_e2sm_rc_v1_e2sm_rc_proto_init() {
	if File_e2sm_rc_v1_e2sm_rc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofE2InfoChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofUeinfoChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofRrcstate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofParametersToReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofPolicyConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofAssociatedRanparameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofUeid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofCellId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofRanoutcomeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofParametersinStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofItemsinList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofUeinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofCellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofUeeventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofRanparamTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofNeighbourCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofRicstyles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofCallProcessTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofCallProcessBreakpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofInsertIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofControlAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxnoofPolicyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighborCellList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighborCellItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighborCellItemChoiceNr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighborCellItemChoiceEUtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighborRelationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerCellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerCellInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerCellInfoItemChoiceIndividual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerCellInfoItemChoiceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerUeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerUeInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerUeInfoItemChoiceIndividual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerUeInfoItemChoiceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerUeeventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerUeeventInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterDefinitionChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterDefinitionChoiceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterDefinitionChoiceListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterDefinitionChoiceStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterDefinitionChoiceStructureItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterValueType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterValueTypeChoiceElementTrue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterValueTypeChoiceElementFalse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterValueTypeChoiceStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterValueTypeChoiceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterStructureItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterTesting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterTestingCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterTestingItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanParameterType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterTestingItemChoiceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterTestingItemChoiceStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterTestingItemChoiceElementTrue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterTestingItemChoiceElementFalse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterTestingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterTestingStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanCallProcessId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicCallProcessTypeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicCallProcessTypeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicCallProcessBreakpointId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicCallProcessBreakpointName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicControlActionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicControlActionName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicEventTriggerConditionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicEventTriggerUeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicEventTriggerUeeventId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicEventTriggerCellId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicInsertIndicationId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicInsertIndicationName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicPolicyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicPolicyActionRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcEventTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicEventTriggerFormats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcEventTriggerFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcEventTriggerFormat1Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTypeChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTypeChoiceNi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTypeChoiceRrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcEventTriggerFormat2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcEventTriggerFormat3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcEventTriggerFormat3Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcEventTriggerFormat4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcEventTriggerFormat4Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerTypeChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerTypeChoiceRrcstate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerTypeChoiceRrcstateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerTypeChoiceUeid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerTypeChoiceL2State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcEventTriggerFormat5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcActionDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicActionDefinitionFormats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcActionDefinitionFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcActionDefinitionFormat1Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcActionDefinitionFormat2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcActionDefinitionFormat2Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcActionDefinitionFormat3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcActionDefinitionFormat3Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicIndicationHeaderFormats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationHeaderFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationHeaderFormat2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicIndicationMessageFormats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat1Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat2Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat2RanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat3Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat4ItemUe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat4ItemCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcIndicationMessageFormat5Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcCallProcessId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicCallProcessIdFormats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcCallProcessIdFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcControlHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicControlHeaderFormats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcControlHeaderFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcControlMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicControlMessageFormats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcControlMessageFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcControlMessageFormat1Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcControlOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicControlOutcomeFormats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcControlOutcomeFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcControlOutcomeFormat1Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcRanfunctionDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionEventTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionEventTriggerStyleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2ParametersRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeidentificationRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellIdentificationRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionEventTriggerCallProcessItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionEventTriggerBreakpointItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallProcessBreakpointRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionInsertItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionInsertIndicationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertIndicationRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionControlItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlOutcomeRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionControlActionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlActionRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionPolicyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionDefinitionPolicyActionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyActionRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyConditionRanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*NeighborCellItem_RanTypeChoiceNr)(nil),
		(*NeighborCellItem_RanTypeChoiceEutra)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*CellType_CellTypeChoiceIndividual)(nil),
		(*CellType_CellTypeChoiceGroup)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*UeType_UeTypeChoiceIndividual)(nil),
		(*UeType_UeTypeChoiceGroup)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*RanparameterDefinitionChoice_ChoiceList)(nil),
		(*RanparameterDefinitionChoice_ChoiceStructure)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*RanparameterValue_ValueBoolean)(nil),
		(*RanparameterValue_ValueInt)(nil),
		(*RanparameterValue_ValueReal)(nil),
		(*RanparameterValue_ValueBitS)(nil),
		(*RanparameterValue_ValueOctS)(nil),
		(*RanparameterValue_ValuePrintableString)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*RanparameterValueType_RanPChoiceElementTrue)(nil),
		(*RanparameterValueType_RanPChoiceElementFalse)(nil),
		(*RanparameterValueType_RanPChoiceStructure)(nil),
		(*RanparameterValueType_RanPChoiceList)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*RanparameterTestingCondition_RanPChoiceComparison)(nil),
		(*RanparameterTestingCondition_RanPChoicePresence)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*RanParameterType_RanPChoiceList)(nil),
		(*RanParameterType_RanPChoiceStructure)(nil),
		(*RanParameterType_RanPChoiceElementTrue)(nil),
		(*RanParameterType_RanPChoiceElementFalse)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[83].OneofWrappers = []interface{}{
		(*RicEventTriggerFormats_EventTriggerFormat1)(nil),
		(*RicEventTriggerFormats_EventTriggerFormat2)(nil),
		(*RicEventTriggerFormats_EventTriggerFormat3)(nil),
		(*RicEventTriggerFormats_EventTriggerFormat4)(nil),
		(*RicEventTriggerFormats_EventTriggerFormat5)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[86].OneofWrappers = []interface{}{
		(*MessageTypeChoice_MessageTypeChoiceNi)(nil),
		(*MessageTypeChoice_MessageTypeChoiceRrc)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[89].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[91].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[93].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[94].OneofWrappers = []interface{}{
		(*TriggerTypeChoice_TriggerTypeChoiceRrcstate)(nil),
		(*TriggerTypeChoice_TriggerTypeChoiceUeid)(nil),
		(*TriggerTypeChoice_TriggerTypeChoiceL2State)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[96].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[99].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[101].OneofWrappers = []interface{}{
		(*RicActionDefinitionFormats_ActionDefinitionFormat1)(nil),
		(*RicActionDefinitionFormats_ActionDefinitionFormat2)(nil),
		(*RicActionDefinitionFormats_ActionDefinitionFormat3)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[105].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[106].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[109].OneofWrappers = []interface{}{
		(*RicIndicationHeaderFormats_IndicationHeaderFormat1)(nil),
		(*RicIndicationHeaderFormats_IndicationHeaderFormat2)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[110].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[113].OneofWrappers = []interface{}{
		(*RicIndicationMessageFormats_IndicationMessageFormat1)(nil),
		(*RicIndicationMessageFormats_IndicationMessageFormat2)(nil),
		(*RicIndicationMessageFormats_IndicationMessageFormat3)(nil),
		(*RicIndicationMessageFormats_IndicationMessageFormat4)(nil),
		(*RicIndicationMessageFormats_IndicationMessageFormat5)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[120].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[122].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[123].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[127].OneofWrappers = []interface{}{
		(*RicCallProcessIdFormats_CallProcessIdFormat1)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[130].OneofWrappers = []interface{}{
		(*RicControlHeaderFormats_ControlHeaderFormat1)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[131].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[133].OneofWrappers = []interface{}{
		(*RicControlMessageFormats_ControlMessageFormat1)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[137].OneofWrappers = []interface{}{
		(*RicControlOutcomeFormats_ControlOutcomeFormat1)(nil),
	}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[140].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[143].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[144].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[145].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[148].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[151].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[155].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[157].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[158].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[160].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[164].OneofWrappers = []interface{}{}
	file_e2sm_rc_v1_e2sm_rc_proto_msgTypes[165].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_e2sm_rc_v1_e2sm_rc_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   166,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_e2sm_rc_v1_e2sm_rc_proto_goTypes,
		DependencyIndexes: file_e2sm_rc_v1_e2sm_rc_proto_depIdxs,
		EnumInfos:         file_e2sm_rc_v1_e2sm_rc_proto_enumTypes,
		MessageInfos:      file_e2sm_rc_v1_e2sm_rc_proto_msgTypes,
	}.Build()
	File_e2sm_rc_v1_e2sm_rc_proto = out.File
	file_e2sm_rc_v1_e2sm_rc_proto_rawDesc = nil
	file_e2sm_rc_v1_e2sm_rc_proto_goTypes = nil
	file_e2sm_rc_v1_e2sm_rc_proto_depIdxs = nil
}
