// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_rc/v1/e2sm_common_ies.proto

package e2smcommonies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MaxE1Apid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxE1Apid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxE1Apid with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxE1ApidMultiError, or nil
// if none found.
func (m *MaxE1Apid) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxE1Apid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxE1ApidValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxE1ApidMultiError(errors)
	}

	return nil
}

// MaxE1ApidMultiError is an error wrapping multiple validation errors returned
// by MaxE1Apid.ValidateAll() if the designated constraints aren't met.
type MaxE1ApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxE1ApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxE1ApidMultiError) AllErrors() []error { return m }

// MaxE1ApidValidationError is the validation error returned by
// MaxE1Apid.Validate if the designated constraints aren't met.
type MaxE1ApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxE1ApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxE1ApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxE1ApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxE1ApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxE1ApidValidationError) ErrorName() string { return "MaxE1ApidValidationError" }

// Error satisfies the builtin error interface
func (e MaxE1ApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxE1Apid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxE1ApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxE1ApidValidationError{}

// Validate checks the field values on MaxF1Apid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxF1Apid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxF1Apid with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxF1ApidMultiError, or nil
// if none found.
func (m *MaxF1Apid) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxF1Apid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := MaxF1ApidValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxF1ApidMultiError(errors)
	}

	return nil
}

// MaxF1ApidMultiError is an error wrapping multiple validation errors returned
// by MaxF1Apid.ValidateAll() if the designated constraints aren't met.
type MaxF1ApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxF1ApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxF1ApidMultiError) AllErrors() []error { return m }

// MaxF1ApidValidationError is the validation error returned by
// MaxF1Apid.Validate if the designated constraints aren't met.
type MaxF1ApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxF1ApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxF1ApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxF1ApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxF1ApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxF1ApidValidationError) ErrorName() string { return "MaxF1ApidValidationError" }

// Error satisfies the builtin error interface
func (e MaxF1ApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxF1Apid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxF1ApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxF1ApidValidationError{}

// Validate checks the field values on MaxEarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxEarfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxEarfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxEarfcnMultiError, or nil
// if none found.
func (m *MaxEarfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxEarfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxEarfcnValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxEarfcnMultiError(errors)
	}

	return nil
}

// MaxEarfcnMultiError is an error wrapping multiple validation errors returned
// by MaxEarfcn.ValidateAll() if the designated constraints aren't met.
type MaxEarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxEarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxEarfcnMultiError) AllErrors() []error { return m }

// MaxEarfcnValidationError is the validation error returned by
// MaxEarfcn.Validate if the designated constraints aren't met.
type MaxEarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxEarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxEarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxEarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxEarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxEarfcnValidationError) ErrorName() string { return "MaxEarfcnValidationError" }

// Error satisfies the builtin error interface
func (e MaxEarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxEarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxEarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxEarfcnValidationError{}

// Validate checks the field values on MaxNrarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxNrarfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxNrarfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxNrarfcnMultiError, or
// nil if none found.
func (m *MaxNrarfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxNrarfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3279165 {
		err := MaxNrarfcnValidationError{
			field:  "Value",
			reason: "value must equal 3279165",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxNrarfcnMultiError(errors)
	}

	return nil
}

// MaxNrarfcnMultiError is an error wrapping multiple validation errors
// returned by MaxNrarfcn.ValidateAll() if the designated constraints aren't met.
type MaxNrarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxNrarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxNrarfcnMultiError) AllErrors() []error { return m }

// MaxNrarfcnValidationError is the validation error returned by
// MaxNrarfcn.Validate if the designated constraints aren't met.
type MaxNrarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrarfcnValidationError) ErrorName() string { return "MaxNrarfcnValidationError" }

// Error satisfies the builtin error interface
func (e MaxNrarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNrarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrarfcnValidationError{}

// Validate checks the field values on MaxnoofNrCellBands with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNrCellBands) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNrCellBands with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofNrCellBandsMultiError, or nil if none found.
func (m *MaxnoofNrCellBands) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNrCellBands) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofNrCellBandsValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNrCellBandsMultiError(errors)
	}

	return nil
}

// MaxnoofNrCellBandsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofNrCellBands.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofNrCellBandsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNrCellBandsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNrCellBandsMultiError) AllErrors() []error { return m }

// MaxnoofNrCellBandsValidationError is the validation error returned by
// MaxnoofNrCellBands.Validate if the designated constraints aren't met.
type MaxnoofNrCellBandsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNrCellBandsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNrCellBandsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNrCellBandsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNrCellBandsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNrCellBandsValidationError) ErrorName() string {
	return "MaxnoofNrCellBandsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNrCellBandsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNrCellBands.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNrCellBandsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNrCellBandsValidationError{}

// Validate checks the field values on Cgi with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Cgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cgi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CgiMultiError, or nil if none found.
func (m *Cgi) ValidateAll() error {
	return m.validate(true)
}

func (m *Cgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Cgi.(type) {

	case *Cgi_NRCgi:

		if all {
			switch v := interface{}(m.GetNRCgi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CgiValidationError{
						field:  "NRCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CgiValidationError{
						field:  "NRCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNRCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CgiValidationError{
					field:  "NRCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Cgi_EUtraCgi:

		if all {
			switch v := interface{}(m.GetEUtraCgi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CgiValidationError{
						field:  "EUtraCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CgiValidationError{
						field:  "EUtraCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEUtraCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CgiValidationError{
					field:  "EUtraCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CgiMultiError(errors)
	}

	return nil
}

// CgiMultiError is an error wrapping multiple validation errors returned by
// Cgi.ValidateAll() if the designated constraints aren't met.
type CgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CgiMultiError) AllErrors() []error { return m }

// CgiValidationError is the validation error returned by Cgi.Validate if the
// designated constraints aren't met.
type CgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CgiValidationError) ErrorName() string { return "CgiValidationError" }

// Error satisfies the builtin error interface
func (e CgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CgiValidationError{}

// Validate checks the field values on CoreCpid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CoreCpid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreCpid with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoreCpidMultiError, or nil
// if none found.
func (m *CoreCpid) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreCpid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.CoreCpid.(type) {

	case *CoreCpid_FiveGc:

		if all {
			switch v := interface{}(m.GetFiveGc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoreCpidValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoreCpidValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFiveGc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoreCpidValidationError{
					field:  "FiveGc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CoreCpid_EPc:

		if all {
			switch v := interface{}(m.GetEPc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoreCpidValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoreCpidValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEPc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoreCpidValidationError{
					field:  "EPc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CoreCpidMultiError(errors)
	}

	return nil
}

// CoreCpidMultiError is an error wrapping multiple validation errors returned
// by CoreCpid.ValidateAll() if the designated constraints aren't met.
type CoreCpidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreCpidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreCpidMultiError) AllErrors() []error { return m }

// CoreCpidValidationError is the validation error returned by
// CoreCpid.Validate if the designated constraints aren't met.
type CoreCpidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreCpidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreCpidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreCpidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreCpidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreCpidValidationError) ErrorName() string { return "CoreCpidValidationError" }

// Error satisfies the builtin error interface
func (e CoreCpidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreCpid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreCpidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreCpidValidationError{}

// Validate checks the field values on InterfaceIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InterfaceIdentifierMultiError, or nil if none found.
func (m *InterfaceIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.InterfaceIdentifier.(type) {

	case *InterfaceIdentifier_NG:

		if all {
			switch v := interface{}(m.GetNG()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "NG",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "NG",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNG()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "NG",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_XN:

		if all {
			switch v := interface{}(m.GetXN()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "XN",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "XN",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetXN()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "XN",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_F1:

		if all {
			switch v := interface{}(m.GetF1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "F1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "F1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetF1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "F1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_E1:

		if all {
			switch v := interface{}(m.GetE1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "E1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "E1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "E1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_S1:

		if all {
			switch v := interface{}(m.GetS1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "S1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "S1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "S1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_X2:

		if all {
			switch v := interface{}(m.GetX2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "X2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "X2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetX2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "X2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_W1:

		if all {
			switch v := interface{}(m.GetW1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "W1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "W1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetW1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "W1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InterfaceIdentifierMultiError(errors)
	}

	return nil
}

// InterfaceIdentifierMultiError is an error wrapping multiple validation
// errors returned by InterfaceIdentifier.ValidateAll() if the designated
// constraints aren't met.
type InterfaceIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdentifierMultiError) AllErrors() []error { return m }

// InterfaceIdentifierValidationError is the validation error returned by
// InterfaceIdentifier.Validate if the designated constraints aren't met.
type InterfaceIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdentifierValidationError) ErrorName() string {
	return "InterfaceIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e InterfaceIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdentifierValidationError{}

// Validate checks the field values on InterfaceIdNg with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdNg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdNg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdNgMultiError, or
// nil if none found.
func (m *InterfaceIdNg) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdNg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGuami()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdNgValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdNgValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGuami()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdNgValidationError{
				field:  "Guami",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdNgMultiError(errors)
	}

	return nil
}

// InterfaceIdNgMultiError is an error wrapping multiple validation errors
// returned by InterfaceIdNg.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdNgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdNgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdNgMultiError) AllErrors() []error { return m }

// InterfaceIdNgValidationError is the validation error returned by
// InterfaceIdNg.Validate if the designated constraints aren't met.
type InterfaceIdNgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdNgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdNgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdNgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdNgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdNgValidationError) ErrorName() string { return "InterfaceIdNgValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdNgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdNg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdNgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdNgValidationError{}

// Validate checks the field values on InterfaceIdXn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdXn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdXn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdXnMultiError, or
// nil if none found.
func (m *InterfaceIdXn) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdXn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalNgRanId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdXnValidationError{
					field:  "GlobalNgRanId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdXnValidationError{
					field:  "GlobalNgRanId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalNgRanId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdXnValidationError{
				field:  "GlobalNgRanId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdXnMultiError(errors)
	}

	return nil
}

// InterfaceIdXnMultiError is an error wrapping multiple validation errors
// returned by InterfaceIdXn.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdXnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdXnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdXnMultiError) AllErrors() []error { return m }

// InterfaceIdXnValidationError is the validation error returned by
// InterfaceIdXn.Validate if the designated constraints aren't met.
type InterfaceIdXnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdXnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdXnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdXnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdXnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdXnValidationError) ErrorName() string { return "InterfaceIdXnValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdXnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdXn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdXnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdXnValidationError{}

// Validate checks the field values on InterfaceIdF1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdF1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdF1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdF1MultiError, or
// nil if none found.
func (m *InterfaceIdF1) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdF1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalGnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdF1ValidationError{
					field:  "GlobalGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdF1ValidationError{
					field:  "GlobalGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdF1ValidationError{
				field:  "GlobalGnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbDuId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdF1ValidationError{
					field:  "GNbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdF1ValidationError{
					field:  "GNbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdF1ValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdF1MultiError(errors)
	}

	return nil
}

// InterfaceIdF1MultiError is an error wrapping multiple validation errors
// returned by InterfaceIdF1.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdF1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdF1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdF1MultiError) AllErrors() []error { return m }

// InterfaceIdF1ValidationError is the validation error returned by
// InterfaceIdF1.Validate if the designated constraints aren't met.
type InterfaceIdF1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdF1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdF1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdF1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdF1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdF1ValidationError) ErrorName() string { return "InterfaceIdF1ValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdF1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdF1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdF1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdF1ValidationError{}

// Validate checks the field values on InterfaceIdE1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdE1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdE1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdE1MultiError, or
// nil if none found.
func (m *InterfaceIdE1) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdE1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalGnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdE1ValidationError{
					field:  "GlobalGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdE1ValidationError{
					field:  "GlobalGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdE1ValidationError{
				field:  "GlobalGnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbCuUpId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdE1ValidationError{
					field:  "GNbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdE1ValidationError{
					field:  "GNbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdE1ValidationError{
				field:  "GNbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdE1MultiError(errors)
	}

	return nil
}

// InterfaceIdE1MultiError is an error wrapping multiple validation errors
// returned by InterfaceIdE1.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdE1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdE1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdE1MultiError) AllErrors() []error { return m }

// InterfaceIdE1ValidationError is the validation error returned by
// InterfaceIdE1.Validate if the designated constraints aren't met.
type InterfaceIdE1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdE1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdE1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdE1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdE1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdE1ValidationError) ErrorName() string { return "InterfaceIdE1ValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdE1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdE1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdE1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdE1ValidationError{}

// Validate checks the field values on InterfaceIdS1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdS1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdS1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdS1MultiError, or
// nil if none found.
func (m *InterfaceIdS1) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdS1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGUmmei()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdS1ValidationError{
					field:  "GUmmei",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdS1ValidationError{
					field:  "GUmmei",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGUmmei()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdS1ValidationError{
				field:  "GUmmei",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdS1MultiError(errors)
	}

	return nil
}

// InterfaceIdS1MultiError is an error wrapping multiple validation errors
// returned by InterfaceIdS1.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdS1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdS1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdS1MultiError) AllErrors() []error { return m }

// InterfaceIdS1ValidationError is the validation error returned by
// InterfaceIdS1.Validate if the designated constraints aren't met.
type InterfaceIdS1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdS1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdS1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdS1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdS1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdS1ValidationError) ErrorName() string { return "InterfaceIdS1ValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdS1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdS1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdS1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdS1ValidationError{}

// Validate checks the field values on InterfaceIdX2 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdX2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdX2 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdX2MultiError, or
// nil if none found.
func (m *InterfaceIdX2) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdX2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNodeType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdX2ValidationError{
					field:  "NodeType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdX2ValidationError{
					field:  "NodeType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNodeType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdX2ValidationError{
				field:  "NodeType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdX2MultiError(errors)
	}

	return nil
}

// InterfaceIdX2MultiError is an error wrapping multiple validation errors
// returned by InterfaceIdX2.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdX2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdX2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdX2MultiError) AllErrors() []error { return m }

// InterfaceIdX2ValidationError is the validation error returned by
// InterfaceIdX2.Validate if the designated constraints aren't met.
type InterfaceIdX2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdX2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdX2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdX2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdX2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdX2ValidationError) ErrorName() string { return "InterfaceIdX2ValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdX2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdX2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdX2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdX2ValidationError{}

// Validate checks the field values on NodeType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeTypeMultiError, or nil
// if none found.
func (m *NodeType) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.NodeType.(type) {

	case *NodeType_GlobalEnbId:

		if all {
			switch v := interface{}(m.GetGlobalEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeTypeValidationError{
						field:  "GlobalEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeTypeValidationError{
						field:  "GlobalEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeTypeValidationError{
					field:  "GlobalEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NodeType_GlobalEnGnbId:

		if all {
			switch v := interface{}(m.GetGlobalEnGnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeTypeValidationError{
						field:  "GlobalEnGnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeTypeValidationError{
						field:  "GlobalEnGnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalEnGnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeTypeValidationError{
					field:  "GlobalEnGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NodeTypeMultiError(errors)
	}

	return nil
}

// NodeTypeMultiError is an error wrapping multiple validation errors returned
// by NodeType.ValidateAll() if the designated constraints aren't met.
type NodeTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeTypeMultiError) AllErrors() []error { return m }

// NodeTypeValidationError is the validation error returned by
// NodeType.Validate if the designated constraints aren't met.
type NodeTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeTypeValidationError) ErrorName() string { return "NodeTypeValidationError" }

// Error satisfies the builtin error interface
func (e NodeTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeTypeValidationError{}

// Validate checks the field values on InterfaceIdW1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdW1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdW1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdW1MultiError, or
// nil if none found.
func (m *InterfaceIdW1) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdW1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalNgENbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdW1ValidationError{
					field:  "GlobalNgENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdW1ValidationError{
					field:  "GlobalNgENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalNgENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdW1ValidationError{
				field:  "GlobalNgENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNgENbDuId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdW1ValidationError{
					field:  "NgENbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdW1ValidationError{
					field:  "NgENbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNgENbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdW1ValidationError{
				field:  "NgENbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdW1MultiError(errors)
	}

	return nil
}

// InterfaceIdW1MultiError is an error wrapping multiple validation errors
// returned by InterfaceIdW1.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdW1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdW1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdW1MultiError) AllErrors() []error { return m }

// InterfaceIdW1ValidationError is the validation error returned by
// InterfaceIdW1.Validate if the designated constraints aren't met.
type InterfaceIdW1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdW1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdW1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdW1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdW1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdW1ValidationError) ErrorName() string { return "InterfaceIdW1ValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdW1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdW1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdW1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdW1ValidationError{}

// Validate checks the field values on InterfaceMessageId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InterfaceMessageId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceMessageId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InterfaceMessageIdMultiError, or nil if none found.
func (m *InterfaceMessageId) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceMessageId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InterfaceProcedureId

	// no validation rules for MessageType

	if len(errors) > 0 {
		return InterfaceMessageIdMultiError(errors)
	}

	return nil
}

// InterfaceMessageIdMultiError is an error wrapping multiple validation errors
// returned by InterfaceMessageId.ValidateAll() if the designated constraints
// aren't met.
type InterfaceMessageIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceMessageIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceMessageIdMultiError) AllErrors() []error { return m }

// InterfaceMessageIdValidationError is the validation error returned by
// InterfaceMessageId.Validate if the designated constraints aren't met.
type InterfaceMessageIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceMessageIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceMessageIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceMessageIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceMessageIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceMessageIdValidationError) ErrorName() string {
	return "InterfaceMessageIdValidationError"
}

// Error satisfies the builtin error interface
func (e InterfaceMessageIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceMessageId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceMessageIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceMessageIdValidationError{}

// Validate checks the field values on GroupId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GroupIdMultiError, or nil if none found.
func (m *GroupId) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.GroupId.(type) {

	case *GroupId_FiveGc:

		if all {
			switch v := interface{}(m.GetFiveGc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupIdValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupIdValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFiveGc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupIdValidationError{
					field:  "FiveGc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GroupId_EPc:

		if all {
			switch v := interface{}(m.GetEPc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupIdValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupIdValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEPc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupIdValidationError{
					field:  "EPc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupIdMultiError(errors)
	}

	return nil
}

// GroupIdMultiError is an error wrapping multiple validation errors returned
// by GroupId.ValidateAll() if the designated constraints aren't met.
type GroupIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupIdMultiError) AllErrors() []error { return m }

// GroupIdValidationError is the validation error returned by GroupId.Validate
// if the designated constraints aren't met.
type GroupIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupIdValidationError) ErrorName() string { return "GroupIdValidationError" }

// Error satisfies the builtin error interface
func (e GroupIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupIdValidationError{}

// Validate checks the field values on QoSid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QoSid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QoSid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QoSidMultiError, or nil if none found.
func (m *QoSid) ValidateAll() error {
	return m.validate(true)
}

func (m *QoSid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.QoSid.(type) {

	case *QoSid_FiveGc:

		if all {
			switch v := interface{}(m.GetFiveGc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QoSidValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QoSidValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFiveGc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QoSidValidationError{
					field:  "FiveGc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *QoSid_EPc:

		if all {
			switch v := interface{}(m.GetEPc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QoSidValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QoSidValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEPc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QoSidValidationError{
					field:  "EPc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QoSidMultiError(errors)
	}

	return nil
}

// QoSidMultiError is an error wrapping multiple validation errors returned by
// QoSid.ValidateAll() if the designated constraints aren't met.
type QoSidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QoSidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QoSidMultiError) AllErrors() []error { return m }

// QoSidValidationError is the validation error returned by QoSid.Validate if
// the designated constraints aren't met.
type QoSidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QoSidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QoSidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QoSidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QoSidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QoSidValidationError) ErrorName() string { return "QoSidValidationError" }

// Error satisfies the builtin error interface
func (e QoSidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQoSid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QoSidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QoSidValidationError{}

// Validate checks the field values on RanfunctionName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionNameMultiError, or nil if none found.
func (m *RanfunctionName) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRanFunctionShortName()); l < 1 || l > 150 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionShortName",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionE2SmOid()); l < 1 || l > 1000 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionE2SmOid",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionDescription()); l < 1 || l > 150 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionDescription",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.RanFunctionInstance != nil {
		// no validation rules for RanFunctionInstance
	}

	if len(errors) > 0 {
		return RanfunctionNameMultiError(errors)
	}

	return nil
}

// RanfunctionNameMultiError is an error wrapping multiple validation errors
// returned by RanfunctionName.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionNameMultiError) AllErrors() []error { return m }

// RanfunctionNameValidationError is the validation error returned by
// RanfunctionName.Validate if the designated constraints aren't met.
type RanfunctionNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionNameValidationError) ErrorName() string { return "RanfunctionNameValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionNameValidationError{}

// Validate checks the field values on RicFormatType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicFormatType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicFormatType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicFormatTypeMultiError, or
// nil if none found.
func (m *RicFormatType) ValidateAll() error {
	return m.validate(true)
}

func (m *RicFormatType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicFormatTypeMultiError(errors)
	}

	return nil
}

// RicFormatTypeMultiError is an error wrapping multiple validation errors
// returned by RicFormatType.ValidateAll() if the designated constraints
// aren't met.
type RicFormatTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicFormatTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicFormatTypeMultiError) AllErrors() []error { return m }

// RicFormatTypeValidationError is the validation error returned by
// RicFormatType.Validate if the designated constraints aren't met.
type RicFormatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicFormatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicFormatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicFormatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicFormatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicFormatTypeValidationError) ErrorName() string { return "RicFormatTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicFormatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicFormatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicFormatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicFormatTypeValidationError{}

// Validate checks the field values on RicStyleType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicStyleType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicStyleType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicStyleTypeMultiError, or
// nil if none found.
func (m *RicStyleType) ValidateAll() error {
	return m.validate(true)
}

func (m *RicStyleType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicStyleTypeMultiError(errors)
	}

	return nil
}

// RicStyleTypeMultiError is an error wrapping multiple validation errors
// returned by RicStyleType.ValidateAll() if the designated constraints aren't met.
type RicStyleTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicStyleTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicStyleTypeMultiError) AllErrors() []error { return m }

// RicStyleTypeValidationError is the validation error returned by
// RicStyleType.Validate if the designated constraints aren't met.
type RicStyleTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleTypeValidationError) ErrorName() string { return "RicStyleTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleTypeValidationError{}

// Validate checks the field values on RicStyleName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicStyleName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicStyleName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicStyleNameMultiError, or
// nil if none found.
func (m *RicStyleName) ValidateAll() error {
	return m.validate(true)
}

func (m *RicStyleName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicStyleNameMultiError(errors)
	}

	return nil
}

// RicStyleNameMultiError is an error wrapping multiple validation errors
// returned by RicStyleName.ValidateAll() if the designated constraints aren't met.
type RicStyleNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicStyleNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicStyleNameMultiError) AllErrors() []error { return m }

// RicStyleNameValidationError is the validation error returned by
// RicStyleName.Validate if the designated constraints aren't met.
type RicStyleNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleNameValidationError) ErrorName() string { return "RicStyleNameValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleNameValidationError{}

// Validate checks the field values on RrcMessageId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RrcMessageId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RrcMessageId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RrcMessageIdMultiError, or
// nil if none found.
func (m *RrcMessageId) ValidateAll() error {
	return m.validate(true)
}

func (m *RrcMessageId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRrcType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RrcMessageIdValidationError{
					field:  "RrcType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RrcMessageIdValidationError{
					field:  "RrcType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRrcType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RrcMessageIdValidationError{
				field:  "RrcType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MessageId

	if len(errors) > 0 {
		return RrcMessageIdMultiError(errors)
	}

	return nil
}

// RrcMessageIdMultiError is an error wrapping multiple validation errors
// returned by RrcMessageId.ValidateAll() if the designated constraints aren't met.
type RrcMessageIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RrcMessageIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RrcMessageIdMultiError) AllErrors() []error { return m }

// RrcMessageIdValidationError is the validation error returned by
// RrcMessageId.Validate if the designated constraints aren't met.
type RrcMessageIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RrcMessageIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RrcMessageIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RrcMessageIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RrcMessageIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RrcMessageIdValidationError) ErrorName() string { return "RrcMessageIdValidationError" }

// Error satisfies the builtin error interface
func (e RrcMessageIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRrcMessageId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RrcMessageIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RrcMessageIdValidationError{}

// Validate checks the field values on RrcType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RrcType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RrcType with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RrcTypeMultiError, or nil if none found.
func (m *RrcType) ValidateAll() error {
	return m.validate(true)
}

func (m *RrcType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RrcType.(type) {

	case *RrcType_Lte:
		// no validation rules for Lte

	case *RrcType_Nr:
		// no validation rules for Nr

	}

	if len(errors) > 0 {
		return RrcTypeMultiError(errors)
	}

	return nil
}

// RrcTypeMultiError is an error wrapping multiple validation errors returned
// by RrcType.ValidateAll() if the designated constraints aren't met.
type RrcTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RrcTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RrcTypeMultiError) AllErrors() []error { return m }

// RrcTypeValidationError is the validation error returned by RrcType.Validate
// if the designated constraints aren't met.
type RrcTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RrcTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RrcTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RrcTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RrcTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RrcTypeValidationError) ErrorName() string { return "RrcTypeValidationError" }

// Error satisfies the builtin error interface
func (e RrcTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRrcType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RrcTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RrcTypeValidationError{}

// Validate checks the field values on ServingCellArfcn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServingCellArfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServingCellArfcn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServingCellArfcnMultiError, or nil if none found.
func (m *ServingCellArfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *ServingCellArfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.ServingCellArfcn.(type) {

	case *ServingCellArfcn_NR:

		if all {
			switch v := interface{}(m.GetNR()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServingCellArfcnValidationError{
						field:  "NR",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServingCellArfcnValidationError{
						field:  "NR",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNR()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServingCellArfcnValidationError{
					field:  "NR",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServingCellArfcn_EUtra:

		if all {
			switch v := interface{}(m.GetEUtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServingCellArfcnValidationError{
						field:  "EUtra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServingCellArfcnValidationError{
						field:  "EUtra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEUtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServingCellArfcnValidationError{
					field:  "EUtra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServingCellArfcnMultiError(errors)
	}

	return nil
}

// ServingCellArfcnMultiError is an error wrapping multiple validation errors
// returned by ServingCellArfcn.ValidateAll() if the designated constraints
// aren't met.
type ServingCellArfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServingCellArfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServingCellArfcnMultiError) AllErrors() []error { return m }

// ServingCellArfcnValidationError is the validation error returned by
// ServingCellArfcn.Validate if the designated constraints aren't met.
type ServingCellArfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServingCellArfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServingCellArfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServingCellArfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServingCellArfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServingCellArfcnValidationError) ErrorName() string { return "ServingCellArfcnValidationError" }

// Error satisfies the builtin error interface
func (e ServingCellArfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServingCellArfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServingCellArfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServingCellArfcnValidationError{}

// Validate checks the field values on ServingCellPci with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServingCellPci) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServingCellPci with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServingCellPciMultiError,
// or nil if none found.
func (m *ServingCellPci) ValidateAll() error {
	return m.validate(true)
}

func (m *ServingCellPci) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.ServingCellPci.(type) {

	case *ServingCellPci_NR:

		if all {
			switch v := interface{}(m.GetNR()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServingCellPciValidationError{
						field:  "NR",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServingCellPciValidationError{
						field:  "NR",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNR()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServingCellPciValidationError{
					field:  "NR",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServingCellPci_EUtra:

		if all {
			switch v := interface{}(m.GetEUtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServingCellPciValidationError{
						field:  "EUtra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServingCellPciValidationError{
						field:  "EUtra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEUtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServingCellPciValidationError{
					field:  "EUtra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServingCellPciMultiError(errors)
	}

	return nil
}

// ServingCellPciMultiError is an error wrapping multiple validation errors
// returned by ServingCellPci.ValidateAll() if the designated constraints
// aren't met.
type ServingCellPciMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServingCellPciMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServingCellPciMultiError) AllErrors() []error { return m }

// ServingCellPciValidationError is the validation error returned by
// ServingCellPci.Validate if the designated constraints aren't met.
type ServingCellPciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServingCellPciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServingCellPciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServingCellPciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServingCellPciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServingCellPciValidationError) ErrorName() string { return "ServingCellPciValidationError" }

// Error satisfies the builtin error interface
func (e ServingCellPciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServingCellPci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServingCellPciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServingCellPciValidationError{}

// Validate checks the field values on Ueid with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ueid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ueid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UeidMultiError, or nil if none found.
func (m *Ueid) ValidateAll() error {
	return m.validate(true)
}

func (m *Ueid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Ueid.(type) {

	case *Ueid_GNbUeid:

		if all {
			switch v := interface{}(m.GetGNbUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "GNbUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_GNbDuUeid:

		if all {
			switch v := interface{}(m.GetGNbDuUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbDuUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbDuUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbDuUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "GNbDuUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_GNbCuUpUeid:

		if all {
			switch v := interface{}(m.GetGNbCuUpUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbCuUpUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbCuUpUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbCuUpUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "GNbCuUpUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_NgENbUeid:

		if all {
			switch v := interface{}(m.GetNgENbUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "NgENbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "NgENbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNgENbUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "NgENbUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_NgENbDuUeid:

		if all {
			switch v := interface{}(m.GetNgENbDuUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "NgENbDuUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "NgENbDuUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNgENbDuUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "NgENbDuUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_EnGNbUeid:

		if all {
			switch v := interface{}(m.GetEnGNbUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "EnGNbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "EnGNbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnGNbUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "EnGNbUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_ENbUeid:

		if all {
			switch v := interface{}(m.GetENbUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "ENbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "ENbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetENbUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "ENbUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidMultiError(errors)
	}

	return nil
}

// UeidMultiError is an error wrapping multiple validation errors returned by
// Ueid.ValidateAll() if the designated constraints aren't met.
type UeidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidMultiError) AllErrors() []error { return m }

// UeidValidationError is the validation error returned by Ueid.Validate if the
// designated constraints aren't met.
type UeidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidValidationError) ErrorName() string { return "UeidValidationError" }

// Error satisfies the builtin error interface
func (e UeidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidValidationError{}

// Validate checks the field values on UeidGnb with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidGnb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGnb with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UeidGnbMultiError, or nil if none found.
func (m *UeidGnb) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGnb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAmfUeNgapId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGnbValidationError{
					field:  "AmfUeNgapId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGnbValidationError{
					field:  "AmfUeNgapId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmfUeNgapId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGnbValidationError{
				field:  "AmfUeNgapId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGuami()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGnbValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGnbValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGuami()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGnbValidationError{
				field:  "Guami",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GNbCuUeF1ApIdList != nil {

		if all {
			switch v := interface{}(m.GetGNbCuUeF1ApIdList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "GNbCuUeF1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "GNbCuUeF1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbCuUeF1ApIdList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGnbValidationError{
					field:  "GNbCuUeF1ApIdList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GNbCuCpUeE1ApIdList != nil {

		if all {
			switch v := interface{}(m.GetGNbCuCpUeE1ApIdList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "GNbCuCpUeE1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "GNbCuCpUeE1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbCuCpUeE1ApIdList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGnbValidationError{
					field:  "GNbCuCpUeE1ApIdList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RanUeid != nil {

		if all {
			switch v := interface{}(m.GetRanUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGnbValidationError{
					field:  "RanUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MNgRanUeXnApId != nil {

		if all {
			switch v := interface{}(m.GetMNgRanUeXnApId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "MNgRanUeXnApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "MNgRanUeXnApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMNgRanUeXnApId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGnbValidationError{
					field:  "MNgRanUeXnApId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalGnbId != nil {

		if all {
			switch v := interface{}(m.GetGlobalGnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "GlobalGnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "GlobalGnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalGnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGnbValidationError{
					field:  "GlobalGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalNgRannodeId != nil {

		if all {
			switch v := interface{}(m.GetGlobalNgRannodeId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "GlobalNgRannodeId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGnbValidationError{
						field:  "GlobalNgRannodeId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalNgRannodeId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGnbValidationError{
					field:  "GlobalNgRannodeId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidGnbMultiError(errors)
	}

	return nil
}

// UeidGnbMultiError is an error wrapping multiple validation errors returned
// by UeidGnb.ValidateAll() if the designated constraints aren't met.
type UeidGnbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGnbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGnbMultiError) AllErrors() []error { return m }

// UeidGnbValidationError is the validation error returned by UeidGnb.Validate
// if the designated constraints aren't met.
type UeidGnbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGnbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGnbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGnbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGnbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGnbValidationError) ErrorName() string { return "UeidGnbValidationError" }

// Error satisfies the builtin error interface
func (e UeidGnbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGnb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGnbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGnbValidationError{}

// Validate checks the field values on UeidGnbCuCpE1ApIdList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UeidGnbCuCpE1ApIdList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGnbCuCpE1ApIdList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UeidGnbCuCpE1ApIdListMultiError, or nil if none found.
func (m *UeidGnbCuCpE1ApIdList) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGnbCuCpE1ApIdList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGnbCuCpE1ApIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGnbCuCpE1ApIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGnbCuCpE1ApIdListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidGnbCuCpE1ApIdListMultiError(errors)
	}

	return nil
}

// UeidGnbCuCpE1ApIdListMultiError is an error wrapping multiple validation
// errors returned by UeidGnbCuCpE1ApIdList.ValidateAll() if the designated
// constraints aren't met.
type UeidGnbCuCpE1ApIdListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGnbCuCpE1ApIdListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGnbCuCpE1ApIdListMultiError) AllErrors() []error { return m }

// UeidGnbCuCpE1ApIdListValidationError is the validation error returned by
// UeidGnbCuCpE1ApIdList.Validate if the designated constraints aren't met.
type UeidGnbCuCpE1ApIdListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGnbCuCpE1ApIdListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGnbCuCpE1ApIdListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGnbCuCpE1ApIdListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGnbCuCpE1ApIdListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGnbCuCpE1ApIdListValidationError) ErrorName() string {
	return "UeidGnbCuCpE1ApIdListValidationError"
}

// Error satisfies the builtin error interface
func (e UeidGnbCuCpE1ApIdListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGnbCuCpE1ApIdList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGnbCuCpE1ApIdListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGnbCuCpE1ApIdListValidationError{}

// Validate checks the field values on UeidGnbCuCpE1ApIdItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UeidGnbCuCpE1ApIdItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGnbCuCpE1ApIdItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UeidGnbCuCpE1ApIdItemMultiError, or nil if none found.
func (m *UeidGnbCuCpE1ApIdItem) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGnbCuCpE1ApIdItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGNbCuCpUeE1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGnbCuCpE1ApIdItemValidationError{
					field:  "GNbCuCpUeE1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGnbCuCpE1ApIdItemValidationError{
					field:  "GNbCuCpUeE1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuCpUeE1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGnbCuCpE1ApIdItemValidationError{
				field:  "GNbCuCpUeE1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UeidGnbCuCpE1ApIdItemMultiError(errors)
	}

	return nil
}

// UeidGnbCuCpE1ApIdItemMultiError is an error wrapping multiple validation
// errors returned by UeidGnbCuCpE1ApIdItem.ValidateAll() if the designated
// constraints aren't met.
type UeidGnbCuCpE1ApIdItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGnbCuCpE1ApIdItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGnbCuCpE1ApIdItemMultiError) AllErrors() []error { return m }

// UeidGnbCuCpE1ApIdItemValidationError is the validation error returned by
// UeidGnbCuCpE1ApIdItem.Validate if the designated constraints aren't met.
type UeidGnbCuCpE1ApIdItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGnbCuCpE1ApIdItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGnbCuCpE1ApIdItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGnbCuCpE1ApIdItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGnbCuCpE1ApIdItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGnbCuCpE1ApIdItemValidationError) ErrorName() string {
	return "UeidGnbCuCpE1ApIdItemValidationError"
}

// Error satisfies the builtin error interface
func (e UeidGnbCuCpE1ApIdItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGnbCuCpE1ApIdItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGnbCuCpE1ApIdItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGnbCuCpE1ApIdItemValidationError{}

// Validate checks the field values on UeidGnbCuF1ApIdList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UeidGnbCuF1ApIdList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGnbCuF1ApIdList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UeidGnbCuF1ApIdListMultiError, or nil if none found.
func (m *UeidGnbCuF1ApIdList) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGnbCuF1ApIdList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGnbCuF1ApIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGnbCuF1ApIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGnbCuF1ApIdListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidGnbCuF1ApIdListMultiError(errors)
	}

	return nil
}

// UeidGnbCuF1ApIdListMultiError is an error wrapping multiple validation
// errors returned by UeidGnbCuF1ApIdList.ValidateAll() if the designated
// constraints aren't met.
type UeidGnbCuF1ApIdListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGnbCuF1ApIdListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGnbCuF1ApIdListMultiError) AllErrors() []error { return m }

// UeidGnbCuF1ApIdListValidationError is the validation error returned by
// UeidGnbCuF1ApIdList.Validate if the designated constraints aren't met.
type UeidGnbCuF1ApIdListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGnbCuF1ApIdListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGnbCuF1ApIdListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGnbCuF1ApIdListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGnbCuF1ApIdListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGnbCuF1ApIdListValidationError) ErrorName() string {
	return "UeidGnbCuF1ApIdListValidationError"
}

// Error satisfies the builtin error interface
func (e UeidGnbCuF1ApIdListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGnbCuF1ApIdList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGnbCuF1ApIdListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGnbCuF1ApIdListValidationError{}

// Validate checks the field values on UeidGnbCuCpF1ApIdItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UeidGnbCuCpF1ApIdItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGnbCuCpF1ApIdItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UeidGnbCuCpF1ApIdItemMultiError, or nil if none found.
func (m *UeidGnbCuCpF1ApIdItem) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGnbCuCpF1ApIdItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGNbCuUeF1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGnbCuCpF1ApIdItemValidationError{
					field:  "GNbCuUeF1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGnbCuCpF1ApIdItemValidationError{
					field:  "GNbCuUeF1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuUeF1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGnbCuCpF1ApIdItemValidationError{
				field:  "GNbCuUeF1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UeidGnbCuCpF1ApIdItemMultiError(errors)
	}

	return nil
}

// UeidGnbCuCpF1ApIdItemMultiError is an error wrapping multiple validation
// errors returned by UeidGnbCuCpF1ApIdItem.ValidateAll() if the designated
// constraints aren't met.
type UeidGnbCuCpF1ApIdItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGnbCuCpF1ApIdItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGnbCuCpF1ApIdItemMultiError) AllErrors() []error { return m }

// UeidGnbCuCpF1ApIdItemValidationError is the validation error returned by
// UeidGnbCuCpF1ApIdItem.Validate if the designated constraints aren't met.
type UeidGnbCuCpF1ApIdItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGnbCuCpF1ApIdItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGnbCuCpF1ApIdItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGnbCuCpF1ApIdItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGnbCuCpF1ApIdItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGnbCuCpF1ApIdItemValidationError) ErrorName() string {
	return "UeidGnbCuCpF1ApIdItemValidationError"
}

// Error satisfies the builtin error interface
func (e UeidGnbCuCpF1ApIdItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGnbCuCpF1ApIdItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGnbCuCpF1ApIdItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGnbCuCpF1ApIdItemValidationError{}

// Validate checks the field values on UeidGnbDu with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidGnbDu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGnbDu with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UeidGnbDuMultiError, or nil
// if none found.
func (m *UeidGnbDu) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGnbDu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGNbCuUeF1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGnbDuValidationError{
					field:  "GNbCuUeF1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGnbDuValidationError{
					field:  "GNbCuUeF1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuUeF1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGnbDuValidationError{
				field:  "GNbCuUeF1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanUeid != nil {

		if all {
			switch v := interface{}(m.GetRanUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGnbDuValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGnbDuValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGnbDuValidationError{
					field:  "RanUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidGnbDuMultiError(errors)
	}

	return nil
}

// UeidGnbDuMultiError is an error wrapping multiple validation errors returned
// by UeidGnbDu.ValidateAll() if the designated constraints aren't met.
type UeidGnbDuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGnbDuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGnbDuMultiError) AllErrors() []error { return m }

// UeidGnbDuValidationError is the validation error returned by
// UeidGnbDu.Validate if the designated constraints aren't met.
type UeidGnbDuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGnbDuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGnbDuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGnbDuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGnbDuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGnbDuValidationError) ErrorName() string { return "UeidGnbDuValidationError" }

// Error satisfies the builtin error interface
func (e UeidGnbDuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGnbDu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGnbDuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGnbDuValidationError{}

// Validate checks the field values on UeidGnbCuUp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidGnbCuUp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGnbCuUp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UeidGnbCuUpMultiError, or
// nil if none found.
func (m *UeidGnbCuUp) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGnbCuUp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGNbCuCpUeE1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGnbCuUpValidationError{
					field:  "GNbCuCpUeE1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGnbCuUpValidationError{
					field:  "GNbCuCpUeE1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuCpUeE1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGnbCuUpValidationError{
				field:  "GNbCuCpUeE1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanUeid != nil {

		if all {
			switch v := interface{}(m.GetRanUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGnbCuUpValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGnbCuUpValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGnbCuUpValidationError{
					field:  "RanUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidGnbCuUpMultiError(errors)
	}

	return nil
}

// UeidGnbCuUpMultiError is an error wrapping multiple validation errors
// returned by UeidGnbCuUp.ValidateAll() if the designated constraints aren't met.
type UeidGnbCuUpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGnbCuUpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGnbCuUpMultiError) AllErrors() []error { return m }

// UeidGnbCuUpValidationError is the validation error returned by
// UeidGnbCuUp.Validate if the designated constraints aren't met.
type UeidGnbCuUpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGnbCuUpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGnbCuUpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGnbCuUpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGnbCuUpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGnbCuUpValidationError) ErrorName() string { return "UeidGnbCuUpValidationError" }

// Error satisfies the builtin error interface
func (e UeidGnbCuUpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGnbCuUp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGnbCuUpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGnbCuUpValidationError{}

// Validate checks the field values on UeidNgEnb with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidNgEnb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidNgEnb with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UeidNgEnbMultiError, or nil
// if none found.
func (m *UeidNgEnb) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidNgEnb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAmfUeNgapId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidNgEnbValidationError{
					field:  "AmfUeNgapId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidNgEnbValidationError{
					field:  "AmfUeNgapId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmfUeNgapId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidNgEnbValidationError{
				field:  "AmfUeNgapId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGuami()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidNgEnbValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidNgEnbValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGuami()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidNgEnbValidationError{
				field:  "Guami",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.NgENbCuUeW1ApId != nil {

		if all {
			switch v := interface{}(m.GetNgENbCuUeW1ApId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidNgEnbValidationError{
						field:  "NgENbCuUeW1ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidNgEnbValidationError{
						field:  "NgENbCuUeW1ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNgENbCuUeW1ApId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidNgEnbValidationError{
					field:  "NgENbCuUeW1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MNgRanUeXnApId != nil {

		if all {
			switch v := interface{}(m.GetMNgRanUeXnApId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidNgEnbValidationError{
						field:  "MNgRanUeXnApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidNgEnbValidationError{
						field:  "MNgRanUeXnApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMNgRanUeXnApId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidNgEnbValidationError{
					field:  "MNgRanUeXnApId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalNgEnbId != nil {

		if all {
			switch v := interface{}(m.GetGlobalNgEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidNgEnbValidationError{
						field:  "GlobalNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidNgEnbValidationError{
						field:  "GlobalNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalNgEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidNgEnbValidationError{
					field:  "GlobalNgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalNgRannodeId != nil {

		if all {
			switch v := interface{}(m.GetGlobalNgRannodeId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidNgEnbValidationError{
						field:  "GlobalNgRannodeId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidNgEnbValidationError{
						field:  "GlobalNgRannodeId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalNgRannodeId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidNgEnbValidationError{
					field:  "GlobalNgRannodeId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidNgEnbMultiError(errors)
	}

	return nil
}

// UeidNgEnbMultiError is an error wrapping multiple validation errors returned
// by UeidNgEnb.ValidateAll() if the designated constraints aren't met.
type UeidNgEnbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidNgEnbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidNgEnbMultiError) AllErrors() []error { return m }

// UeidNgEnbValidationError is the validation error returned by
// UeidNgEnb.Validate if the designated constraints aren't met.
type UeidNgEnbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidNgEnbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidNgEnbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidNgEnbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidNgEnbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidNgEnbValidationError) ErrorName() string { return "UeidNgEnbValidationError" }

// Error satisfies the builtin error interface
func (e UeidNgEnbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidNgEnb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidNgEnbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidNgEnbValidationError{}

// Validate checks the field values on UeidNgEnbDu with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidNgEnbDu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidNgEnbDu with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UeidNgEnbDuMultiError, or
// nil if none found.
func (m *UeidNgEnbDu) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidNgEnbDu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNgENbCuUeW1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidNgEnbDuValidationError{
					field:  "NgENbCuUeW1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidNgEnbDuValidationError{
					field:  "NgENbCuUeW1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNgENbCuUeW1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidNgEnbDuValidationError{
				field:  "NgENbCuUeW1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UeidNgEnbDuMultiError(errors)
	}

	return nil
}

// UeidNgEnbDuMultiError is an error wrapping multiple validation errors
// returned by UeidNgEnbDu.ValidateAll() if the designated constraints aren't met.
type UeidNgEnbDuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidNgEnbDuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidNgEnbDuMultiError) AllErrors() []error { return m }

// UeidNgEnbDuValidationError is the validation error returned by
// UeidNgEnbDu.Validate if the designated constraints aren't met.
type UeidNgEnbDuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidNgEnbDuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidNgEnbDuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidNgEnbDuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidNgEnbDuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidNgEnbDuValidationError) ErrorName() string { return "UeidNgEnbDuValidationError" }

// Error satisfies the builtin error interface
func (e UeidNgEnbDuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidNgEnbDu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidNgEnbDuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidNgEnbDuValidationError{}

// Validate checks the field values on UeidEnGnb with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidEnGnb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidEnGnb with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UeidEnGnbMultiError, or nil
// if none found.
func (m *UeidEnGnb) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidEnGnb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMENbUeX2ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidEnGnbValidationError{
					field:  "MENbUeX2ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidEnGnbValidationError{
					field:  "MENbUeX2ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMENbUeX2ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidEnGnbValidationError{
				field:  "MENbUeX2ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGlobalEnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidEnGnbValidationError{
					field:  "GlobalEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidEnGnbValidationError{
					field:  "GlobalEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalEnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidEnGnbValidationError{
				field:  "GlobalEnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.MENbUeX2ApIdExtension != nil {

		if all {
			switch v := interface{}(m.GetMENbUeX2ApIdExtension()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidEnGnbValidationError{
						field:  "MENbUeX2ApIdExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidEnGnbValidationError{
						field:  "MENbUeX2ApIdExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMENbUeX2ApIdExtension()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidEnGnbValidationError{
					field:  "MENbUeX2ApIdExtension",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GNbCuUeF1ApId != nil {

		if all {
			switch v := interface{}(m.GetGNbCuUeF1ApId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidEnGnbValidationError{
						field:  "GNbCuUeF1ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidEnGnbValidationError{
						field:  "GNbCuUeF1ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbCuUeF1ApId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidEnGnbValidationError{
					field:  "GNbCuUeF1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GNbCuCpUeE1ApIdList != nil {

		if all {
			switch v := interface{}(m.GetGNbCuCpUeE1ApIdList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidEnGnbValidationError{
						field:  "GNbCuCpUeE1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidEnGnbValidationError{
						field:  "GNbCuCpUeE1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbCuCpUeE1ApIdList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidEnGnbValidationError{
					field:  "GNbCuCpUeE1ApIdList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RanUeid != nil {

		if all {
			switch v := interface{}(m.GetRanUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidEnGnbValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidEnGnbValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidEnGnbValidationError{
					field:  "RanUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidEnGnbMultiError(errors)
	}

	return nil
}

// UeidEnGnbMultiError is an error wrapping multiple validation errors returned
// by UeidEnGnb.ValidateAll() if the designated constraints aren't met.
type UeidEnGnbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidEnGnbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidEnGnbMultiError) AllErrors() []error { return m }

// UeidEnGnbValidationError is the validation error returned by
// UeidEnGnb.Validate if the designated constraints aren't met.
type UeidEnGnbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidEnGnbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidEnGnbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidEnGnbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidEnGnbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidEnGnbValidationError) ErrorName() string { return "UeidEnGnbValidationError" }

// Error satisfies the builtin error interface
func (e UeidEnGnbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidEnGnb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidEnGnbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidEnGnbValidationError{}

// Validate checks the field values on UeidEnb with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidEnb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidEnb with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UeidEnbMultiError, or nil if none found.
func (m *UeidEnb) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidEnb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMMeUeS1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidEnbValidationError{
					field:  "MMeUeS1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidEnbValidationError{
					field:  "MMeUeS1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMMeUeS1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidEnbValidationError{
				field:  "MMeUeS1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGUmmei()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidEnbValidationError{
					field:  "GUmmei",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidEnbValidationError{
					field:  "GUmmei",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGUmmei()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidEnbValidationError{
				field:  "GUmmei",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.MENbUeX2ApId != nil {

		if all {
			switch v := interface{}(m.GetMENbUeX2ApId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidEnbValidationError{
						field:  "MENbUeX2ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidEnbValidationError{
						field:  "MENbUeX2ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMENbUeX2ApId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidEnbValidationError{
					field:  "MENbUeX2ApId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MENbUeX2ApIdExtension != nil {

		if all {
			switch v := interface{}(m.GetMENbUeX2ApIdExtension()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidEnbValidationError{
						field:  "MENbUeX2ApIdExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidEnbValidationError{
						field:  "MENbUeX2ApIdExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMENbUeX2ApIdExtension()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidEnbValidationError{
					field:  "MENbUeX2ApIdExtension",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalEnbId != nil {

		if all {
			switch v := interface{}(m.GetGlobalEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidEnbValidationError{
						field:  "GlobalEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidEnbValidationError{
						field:  "GlobalEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidEnbValidationError{
					field:  "GlobalEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidEnbMultiError(errors)
	}

	return nil
}

// UeidEnbMultiError is an error wrapping multiple validation errors returned
// by UeidEnb.ValidateAll() if the designated constraints aren't met.
type UeidEnbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidEnbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidEnbMultiError) AllErrors() []error { return m }

// UeidEnbValidationError is the validation error returned by UeidEnb.Validate
// if the designated constraints aren't met.
type UeidEnbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidEnbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidEnbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidEnbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidEnbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidEnbValidationError) ErrorName() string { return "UeidEnbValidationError" }

// Error satisfies the builtin error interface
func (e UeidEnbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidEnb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidEnbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidEnbValidationError{}

// Validate checks the field values on EnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EnbIdMultiError, or nil if none found.
func (m *EnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *EnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EnbId.(type) {

	case *EnbId_MacroENbId:

		if all {
			switch v := interface{}(m.GetMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "MacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "MacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "MacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_HomeENbId:

		if all {
			switch v := interface{}(m.GetHomeENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "HomeENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "HomeENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHomeENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "HomeENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_ShortMacroENbId:

		if all {
			switch v := interface{}(m.GetShortMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "ShortMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "ShortMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShortMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "ShortMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_LongMacroENbId:

		if all {
			switch v := interface{}(m.GetLongMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "LongMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "LongMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLongMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "LongMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnbIdMultiError(errors)
	}

	return nil
}

// EnbIdMultiError is an error wrapping multiple validation errors returned by
// EnbId.ValidateAll() if the designated constraints aren't met.
type EnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnbIdMultiError) AllErrors() []error { return m }

// EnbIdValidationError is the validation error returned by EnbId.Validate if
// the designated constraints aren't met.
type EnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdValidationError) ErrorName() string { return "EnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdValidationError{}

// Validate checks the field values on GlobalEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalEnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalEnbIdMultiError, or
// nil if none found.
func (m *GlobalEnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalEnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetENbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "ENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "ENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "ENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalEnbIdMultiError(errors)
	}

	return nil
}

// GlobalEnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalEnbId.ValidateAll() if the designated constraints aren't met.
type GlobalEnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalEnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalEnbIdMultiError) AllErrors() []error { return m }

// GlobalEnbIdValidationError is the validation error returned by
// GlobalEnbId.Validate if the designated constraints aren't met.
type GlobalEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalEnbIdValidationError) ErrorName() string { return "GlobalEnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalEnbIdValidationError{}

// Validate checks the field values on Gummei with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Gummei) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Gummei with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GummeiMultiError, or nil if none found.
func (m *Gummei) ValidateAll() error {
	return m.validate(true)
}

func (m *Gummei) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GummeiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMMeGroupId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "MMeGroupId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "MMeGroupId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMMeGroupId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GummeiValidationError{
				field:  "MMeGroupId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMMeCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "MMeCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "MMeCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMMeCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GummeiValidationError{
				field:  "MMeCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GummeiMultiError(errors)
	}

	return nil
}

// GummeiMultiError is an error wrapping multiple validation errors returned by
// Gummei.ValidateAll() if the designated constraints aren't met.
type GummeiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GummeiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GummeiMultiError) AllErrors() []error { return m }

// GummeiValidationError is the validation error returned by Gummei.Validate if
// the designated constraints aren't met.
type GummeiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GummeiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GummeiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GummeiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GummeiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GummeiValidationError) ErrorName() string { return "GummeiValidationError" }

// Error satisfies the builtin error interface
func (e GummeiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGummei.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GummeiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GummeiValidationError{}

// Validate checks the field values on MmeUeS1ApId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MmeUeS1ApId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MmeUeS1ApId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MmeUeS1ApIdMultiError, or
// nil if none found.
func (m *MmeUeS1ApId) ValidateAll() error {
	return m.validate(true)
}

func (m *MmeUeS1ApId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := MmeUeS1ApIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MmeUeS1ApIdMultiError(errors)
	}

	return nil
}

// MmeUeS1ApIdMultiError is an error wrapping multiple validation errors
// returned by MmeUeS1ApId.ValidateAll() if the designated constraints aren't met.
type MmeUeS1ApIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MmeUeS1ApIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MmeUeS1ApIdMultiError) AllErrors() []error { return m }

// MmeUeS1ApIdValidationError is the validation error returned by
// MmeUeS1ApId.Validate if the designated constraints aren't met.
type MmeUeS1ApIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MmeUeS1ApIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MmeUeS1ApIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MmeUeS1ApIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MmeUeS1ApIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MmeUeS1ApIdValidationError) ErrorName() string { return "MmeUeS1ApIdValidationError" }

// Error satisfies the builtin error interface
func (e MmeUeS1ApIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMmeUeS1ApId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MmeUeS1ApIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MmeUeS1ApIdValidationError{}

// Validate checks the field values on Qci with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Qci) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Qci with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QciMultiError, or nil if none found.
func (m *Qci) ValidateAll() error {
	return m.validate(true)
}

func (m *Qci) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 255 {
		err := QciValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QciMultiError(errors)
	}

	return nil
}

// QciMultiError is an error wrapping multiple validation errors returned by
// Qci.ValidateAll() if the designated constraints aren't met.
type QciMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QciMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QciMultiError) AllErrors() []error { return m }

// QciValidationError is the validation error returned by Qci.Validate if the
// designated constraints aren't met.
type QciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QciValidationError) ErrorName() string { return "QciValidationError" }

// Error satisfies the builtin error interface
func (e QciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QciValidationError{}

// Validate checks the field values on SubscriberProfileIdforRfp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscriberProfileIdforRfp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscriberProfileIdforRfp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscriberProfileIdforRfpMultiError, or nil if none found.
func (m *SubscriberProfileIdforRfp) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscriberProfileIdforRfp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 256 {
		err := SubscriberProfileIdforRfpValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SubscriberProfileIdforRfpMultiError(errors)
	}

	return nil
}

// SubscriberProfileIdforRfpMultiError is an error wrapping multiple validation
// errors returned by SubscriberProfileIdforRfp.ValidateAll() if the
// designated constraints aren't met.
type SubscriberProfileIdforRfpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriberProfileIdforRfpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriberProfileIdforRfpMultiError) AllErrors() []error { return m }

// SubscriberProfileIdforRfpValidationError is the validation error returned by
// SubscriberProfileIdforRfp.Validate if the designated constraints aren't met.
type SubscriberProfileIdforRfpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriberProfileIdforRfpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriberProfileIdforRfpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriberProfileIdforRfpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriberProfileIdforRfpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriberProfileIdforRfpValidationError) ErrorName() string {
	return "SubscriberProfileIdforRfpValidationError"
}

// Error satisfies the builtin error interface
func (e SubscriberProfileIdforRfpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriberProfileIdforRfp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriberProfileIdforRfpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriberProfileIdforRfpValidationError{}

// Validate checks the field values on EnGnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnGnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnGnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EnGnbIdMultiError, or nil if none found.
func (m *EnGnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *EnGnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EnGnbId.(type) {

	case *EnGnbId_EnGNbId:

		if all {
			switch v := interface{}(m.GetEnGNbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnGnbIdValidationError{
						field:  "EnGNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnGnbIdValidationError{
						field:  "EnGNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnGnbIdValidationError{
					field:  "EnGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnGnbIdMultiError(errors)
	}

	return nil
}

// EnGnbIdMultiError is an error wrapping multiple validation errors returned
// by EnGnbId.ValidateAll() if the designated constraints aren't met.
type EnGnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnGnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnGnbIdMultiError) AllErrors() []error { return m }

// EnGnbIdValidationError is the validation error returned by EnGnbId.Validate
// if the designated constraints aren't met.
type EnGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnGnbIdValidationError) ErrorName() string { return "EnGnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EnGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnGnbIdValidationError{}

// Validate checks the field values on EnbUeX2ApId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnbUeX2ApId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnbUeX2ApId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnbUeX2ApIdMultiError, or
// nil if none found.
func (m *EnbUeX2ApId) ValidateAll() error {
	return m.validate(true)
}

func (m *EnbUeX2ApId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4095 {
		err := EnbUeX2ApIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4095]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnbUeX2ApIdMultiError(errors)
	}

	return nil
}

// EnbUeX2ApIdMultiError is an error wrapping multiple validation errors
// returned by EnbUeX2ApId.ValidateAll() if the designated constraints aren't met.
type EnbUeX2ApIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnbUeX2ApIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnbUeX2ApIdMultiError) AllErrors() []error { return m }

// EnbUeX2ApIdValidationError is the validation error returned by
// EnbUeX2ApId.Validate if the designated constraints aren't met.
type EnbUeX2ApIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbUeX2ApIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbUeX2ApIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbUeX2ApIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbUeX2ApIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbUeX2ApIdValidationError) ErrorName() string { return "EnbUeX2ApIdValidationError" }

// Error satisfies the builtin error interface
func (e EnbUeX2ApIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbUeX2ApId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbUeX2ApIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbUeX2ApIdValidationError{}

// Validate checks the field values on EnbUeX2ApIdExtension with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnbUeX2ApIdExtension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnbUeX2ApIdExtension with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnbUeX2ApIdExtensionMultiError, or nil if none found.
func (m *EnbUeX2ApIdExtension) ValidateAll() error {
	return m.validate(true)
}

func (m *EnbUeX2ApIdExtension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4095 {
		err := EnbUeX2ApIdExtensionValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4095]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnbUeX2ApIdExtensionMultiError(errors)
	}

	return nil
}

// EnbUeX2ApIdExtensionMultiError is an error wrapping multiple validation
// errors returned by EnbUeX2ApIdExtension.ValidateAll() if the designated
// constraints aren't met.
type EnbUeX2ApIdExtensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnbUeX2ApIdExtensionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnbUeX2ApIdExtensionMultiError) AllErrors() []error { return m }

// EnbUeX2ApIdExtensionValidationError is the validation error returned by
// EnbUeX2ApIdExtension.Validate if the designated constraints aren't met.
type EnbUeX2ApIdExtensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbUeX2ApIdExtensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbUeX2ApIdExtensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbUeX2ApIdExtensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbUeX2ApIdExtensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbUeX2ApIdExtensionValidationError) ErrorName() string {
	return "EnbUeX2ApIdExtensionValidationError"
}

// Error satisfies the builtin error interface
func (e EnbUeX2ApIdExtensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbUeX2ApIdExtension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbUeX2ApIdExtensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbUeX2ApIdExtensionValidationError{}

// Validate checks the field values on EUtraArfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EUtraArfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EUtraArfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EUtraArfcnMultiError, or
// nil if none found.
func (m *EUtraArfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *EUtraArfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 65535 {
		err := EUtraArfcnValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EUtraArfcnMultiError(errors)
	}

	return nil
}

// EUtraArfcnMultiError is an error wrapping multiple validation errors
// returned by EUtraArfcn.ValidateAll() if the designated constraints aren't met.
type EUtraArfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EUtraArfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EUtraArfcnMultiError) AllErrors() []error { return m }

// EUtraArfcnValidationError is the validation error returned by
// EUtraArfcn.Validate if the designated constraints aren't met.
type EUtraArfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EUtraArfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EUtraArfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EUtraArfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EUtraArfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EUtraArfcnValidationError) ErrorName() string { return "EUtraArfcnValidationError" }

// Error satisfies the builtin error interface
func (e EUtraArfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEUtraArfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EUtraArfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EUtraArfcnValidationError{}

// Validate checks the field values on EUtraPci with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EUtraPci) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EUtraPci with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EUtraPciMultiError, or nil
// if none found.
func (m *EUtraPci) ValidateAll() error {
	return m.validate(true)
}

func (m *EUtraPci) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 503 {
		err := EUtraPciValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 503]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EUtraPciMultiError(errors)
	}

	return nil
}

// EUtraPciMultiError is an error wrapping multiple validation errors returned
// by EUtraPci.ValidateAll() if the designated constraints aren't met.
type EUtraPciMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EUtraPciMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EUtraPciMultiError) AllErrors() []error { return m }

// EUtraPciValidationError is the validation error returned by
// EUtraPci.Validate if the designated constraints aren't met.
type EUtraPciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EUtraPciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EUtraPciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EUtraPciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EUtraPciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EUtraPciValidationError) ErrorName() string { return "EUtraPciValidationError" }

// Error satisfies the builtin error interface
func (e EUtraPciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEUtraPci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EUtraPciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EUtraPciValidationError{}

// Validate checks the field values on EUtraTac with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EUtraTac) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EUtraTac with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EUtraTacMultiError, or nil
// if none found.
func (m *EUtraTac) ValidateAll() error {
	return m.validate(true)
}

func (m *EUtraTac) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return EUtraTacMultiError(errors)
	}

	return nil
}

// EUtraTacMultiError is an error wrapping multiple validation errors returned
// by EUtraTac.ValidateAll() if the designated constraints aren't met.
type EUtraTacMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EUtraTacMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EUtraTacMultiError) AllErrors() []error { return m }

// EUtraTacValidationError is the validation error returned by
// EUtraTac.Validate if the designated constraints aren't met.
type EUtraTacValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EUtraTacValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EUtraTacValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EUtraTacValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EUtraTacValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EUtraTacValidationError) ErrorName() string { return "EUtraTacValidationError" }

// Error satisfies the builtin error interface
func (e EUtraTacValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEUtraTac.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EUtraTacValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EUtraTacValidationError{}

// Validate checks the field values on GlobalenGnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalenGnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalenGnbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalenGnbIdMultiError, or
// nil if none found.
func (m *GlobalenGnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalenGnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnGNbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "EnGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "EnGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "EnGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalenGnbIdMultiError(errors)
	}

	return nil
}

// GlobalenGnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalenGnbId.ValidateAll() if the designated constraints
// aren't met.
type GlobalenGnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalenGnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalenGnbIdMultiError) AllErrors() []error { return m }

// GlobalenGnbIdValidationError is the validation error returned by
// GlobalenGnbId.Validate if the designated constraints aren't met.
type GlobalenGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalenGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalenGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalenGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalenGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalenGnbIdValidationError) ErrorName() string { return "GlobalenGnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalenGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalenGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalenGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalenGnbIdValidationError{}

// Validate checks the field values on NgenbCuUeW1ApId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NgenbCuUeW1ApId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NgenbCuUeW1ApId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NgenbCuUeW1ApIdMultiError, or nil if none found.
func (m *NgenbCuUeW1ApId) ValidateAll() error {
	return m.validate(true)
}

func (m *NgenbCuUeW1ApId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := NgenbCuUeW1ApIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NgenbCuUeW1ApIdMultiError(errors)
	}

	return nil
}

// NgenbCuUeW1ApIdMultiError is an error wrapping multiple validation errors
// returned by NgenbCuUeW1ApId.ValidateAll() if the designated constraints
// aren't met.
type NgenbCuUeW1ApIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NgenbCuUeW1ApIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NgenbCuUeW1ApIdMultiError) AllErrors() []error { return m }

// NgenbCuUeW1ApIdValidationError is the validation error returned by
// NgenbCuUeW1ApId.Validate if the designated constraints aren't met.
type NgenbCuUeW1ApIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NgenbCuUeW1ApIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NgenbCuUeW1ApIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NgenbCuUeW1ApIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NgenbCuUeW1ApIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NgenbCuUeW1ApIdValidationError) ErrorName() string { return "NgenbCuUeW1ApIdValidationError" }

// Error satisfies the builtin error interface
func (e NgenbCuUeW1ApIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNgenbCuUeW1ApId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NgenbCuUeW1ApIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NgenbCuUeW1ApIdValidationError{}

// Validate checks the field values on NgenbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NgenbDuId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NgenbDuId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NgenbDuIdMultiError, or nil
// if none found.
func (m *NgenbDuId) ValidateAll() error {
	return m.validate(true)
}

func (m *NgenbDuId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := NgenbDuIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NgenbDuIdMultiError(errors)
	}

	return nil
}

// NgenbDuIdMultiError is an error wrapping multiple validation errors returned
// by NgenbDuId.ValidateAll() if the designated constraints aren't met.
type NgenbDuIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NgenbDuIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NgenbDuIdMultiError) AllErrors() []error { return m }

// NgenbDuIdValidationError is the validation error returned by
// NgenbDuId.Validate if the designated constraints aren't met.
type NgenbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NgenbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NgenbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NgenbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NgenbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NgenbDuIdValidationError) ErrorName() string { return "NgenbDuIdValidationError" }

// Error satisfies the builtin error interface
func (e NgenbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNgenbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NgenbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NgenbDuIdValidationError{}

// Validate checks the field values on Amfpointer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Amfpointer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Amfpointer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AmfpointerMultiError, or
// nil if none found.
func (m *Amfpointer) ValidateAll() error {
	return m.validate(true)
}

func (m *Amfpointer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AmfpointerValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AmfpointerValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AmfpointerValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AmfpointerMultiError(errors)
	}

	return nil
}

// AmfpointerMultiError is an error wrapping multiple validation errors
// returned by Amfpointer.ValidateAll() if the designated constraints aren't met.
type AmfpointerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AmfpointerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AmfpointerMultiError) AllErrors() []error { return m }

// AmfpointerValidationError is the validation error returned by
// Amfpointer.Validate if the designated constraints aren't met.
type AmfpointerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AmfpointerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AmfpointerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AmfpointerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AmfpointerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AmfpointerValidationError) ErrorName() string { return "AmfpointerValidationError" }

// Error satisfies the builtin error interface
func (e AmfpointerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAmfpointer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AmfpointerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AmfpointerValidationError{}

// Validate checks the field values on AmfregionId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AmfregionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AmfregionId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AmfregionIdMultiError, or
// nil if none found.
func (m *AmfregionId) ValidateAll() error {
	return m.validate(true)
}

func (m *AmfregionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AmfregionIdValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AmfregionIdValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AmfregionIdValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AmfregionIdMultiError(errors)
	}

	return nil
}

// AmfregionIdMultiError is an error wrapping multiple validation errors
// returned by AmfregionId.ValidateAll() if the designated constraints aren't met.
type AmfregionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AmfregionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AmfregionIdMultiError) AllErrors() []error { return m }

// AmfregionIdValidationError is the validation error returned by
// AmfregionId.Validate if the designated constraints aren't met.
type AmfregionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AmfregionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AmfregionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AmfregionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AmfregionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AmfregionIdValidationError) ErrorName() string { return "AmfregionIdValidationError" }

// Error satisfies the builtin error interface
func (e AmfregionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAmfregionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AmfregionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AmfregionIdValidationError{}

// Validate checks the field values on AmfsetId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AmfsetId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AmfsetId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AmfsetIdMultiError, or nil
// if none found.
func (m *AmfsetId) ValidateAll() error {
	return m.validate(true)
}

func (m *AmfsetId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AmfsetIdValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AmfsetIdValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AmfsetIdValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AmfsetIdMultiError(errors)
	}

	return nil
}

// AmfsetIdMultiError is an error wrapping multiple validation errors returned
// by AmfsetId.ValidateAll() if the designated constraints aren't met.
type AmfsetIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AmfsetIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AmfsetIdMultiError) AllErrors() []error { return m }

// AmfsetIdValidationError is the validation error returned by
// AmfsetId.Validate if the designated constraints aren't met.
type AmfsetIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AmfsetIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AmfsetIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AmfsetIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AmfsetIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AmfsetIdValidationError) ErrorName() string { return "AmfsetIdValidationError" }

// Error satisfies the builtin error interface
func (e AmfsetIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAmfsetId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AmfsetIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AmfsetIdValidationError{}

// Validate checks the field values on AmfUeNgapId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AmfUeNgapId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AmfUeNgapId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AmfUeNgapIdMultiError, or
// nil if none found.
func (m *AmfUeNgapId) ValidateAll() error {
	return m.validate(true)
}

func (m *AmfUeNgapId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 1099511627775 {
		err := AmfUeNgapIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 1099511627775]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AmfUeNgapIdMultiError(errors)
	}

	return nil
}

// AmfUeNgapIdMultiError is an error wrapping multiple validation errors
// returned by AmfUeNgapId.ValidateAll() if the designated constraints aren't met.
type AmfUeNgapIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AmfUeNgapIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AmfUeNgapIdMultiError) AllErrors() []error { return m }

// AmfUeNgapIdValidationError is the validation error returned by
// AmfUeNgapId.Validate if the designated constraints aren't met.
type AmfUeNgapIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AmfUeNgapIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AmfUeNgapIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AmfUeNgapIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AmfUeNgapIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AmfUeNgapIdValidationError) ErrorName() string { return "AmfUeNgapIdValidationError" }

// Error satisfies the builtin error interface
func (e AmfUeNgapIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAmfUeNgapId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AmfUeNgapIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AmfUeNgapIdValidationError{}

// Validate checks the field values on EutracellIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EutracellIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EutracellIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EutracellIdentityMultiError, or nil if none found.
func (m *EutracellIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *EutracellIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EutracellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EutracellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EutracellIdentityMultiError(errors)
	}

	return nil
}

// EutracellIdentityMultiError is an error wrapping multiple validation errors
// returned by EutracellIdentity.ValidateAll() if the designated constraints
// aren't met.
type EutracellIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EutracellIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EutracellIdentityMultiError) AllErrors() []error { return m }

// EutracellIdentityValidationError is the validation error returned by
// EutracellIdentity.Validate if the designated constraints aren't met.
type EutracellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutracellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutracellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutracellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutracellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutracellIdentityValidationError) ErrorName() string {
	return "EutracellIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e EutracellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutracellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutracellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutracellIdentityValidationError{}

// Validate checks the field values on EutraCgi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EutraCgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EutraCgi with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EutraCgiMultiError, or nil
// if none found.
func (m *EutraCgi) ValidateAll() error {
	return m.validate(true)
}

func (m *EutraCgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EutraCgiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EutraCgiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutraCgiValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEUtracellIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EutraCgiValidationError{
					field:  "EUtracellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EutraCgiValidationError{
					field:  "EUtracellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEUtracellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutraCgiValidationError{
				field:  "EUtracellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EutraCgiMultiError(errors)
	}

	return nil
}

// EutraCgiMultiError is an error wrapping multiple validation errors returned
// by EutraCgi.ValidateAll() if the designated constraints aren't met.
type EutraCgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EutraCgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EutraCgiMultiError) AllErrors() []error { return m }

// EutraCgiValidationError is the validation error returned by
// EutraCgi.Validate if the designated constraints aren't met.
type EutraCgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutraCgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutraCgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutraCgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutraCgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutraCgiValidationError) ErrorName() string { return "EutraCgiValidationError" }

// Error satisfies the builtin error interface
func (e EutraCgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutraCgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutraCgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutraCgiValidationError{}

// Validate checks the field values on FiveQi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FiveQi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FiveQi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FiveQiMultiError, or nil if none found.
func (m *FiveQi) ValidateAll() error {
	return m.validate(true)
}

func (m *FiveQi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 255 {
		err := FiveQiValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FiveQiMultiError(errors)
	}

	return nil
}

// FiveQiMultiError is an error wrapping multiple validation errors returned by
// FiveQi.ValidateAll() if the designated constraints aren't met.
type FiveQiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FiveQiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FiveQiMultiError) AllErrors() []error { return m }

// FiveQiValidationError is the validation error returned by FiveQi.Validate if
// the designated constraints aren't met.
type FiveQiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FiveQiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FiveQiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FiveQiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FiveQiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FiveQiValidationError) ErrorName() string { return "FiveQiValidationError" }

// Error satisfies the builtin error interface
func (e FiveQiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFiveQi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FiveQiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FiveQiValidationError{}

// Validate checks the field values on GlobalGnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalGnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalGnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalGnbIdMultiError, or
// nil if none found.
func (m *GlobalGnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalGnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalGnbIdValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalGnbIdValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalGnbIdValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalGnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalGnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalGnbIdValidationError{
				field:  "GNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalGnbIdMultiError(errors)
	}

	return nil
}

// GlobalGnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalGnbId.ValidateAll() if the designated constraints aren't met.
type GlobalGnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalGnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalGnbIdMultiError) AllErrors() []error { return m }

// GlobalGnbIdValidationError is the validation error returned by
// GlobalGnbId.Validate if the designated constraints aren't met.
type GlobalGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalGnbIdValidationError) ErrorName() string { return "GlobalGnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalGnbIdValidationError{}

// Validate checks the field values on GlobalNgEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalNgEnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalNgEnbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalNgEnbIdMultiError, or
// nil if none found.
func (m *GlobalNgEnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalNgEnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalNgEnbIdValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalNgEnbIdValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalNgEnbIdValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNgEnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalNgEnbIdValidationError{
					field:  "NgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalNgEnbIdValidationError{
					field:  "NgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNgEnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalNgEnbIdValidationError{
				field:  "NgEnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalNgEnbIdMultiError(errors)
	}

	return nil
}

// GlobalNgEnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalNgEnbId.ValidateAll() if the designated constraints
// aren't met.
type GlobalNgEnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalNgEnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalNgEnbIdMultiError) AllErrors() []error { return m }

// GlobalNgEnbIdValidationError is the validation error returned by
// GlobalNgEnbId.Validate if the designated constraints aren't met.
type GlobalNgEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalNgEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalNgEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalNgEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalNgEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalNgEnbIdValidationError) ErrorName() string { return "GlobalNgEnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalNgEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalNgEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalNgEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalNgEnbIdValidationError{}

// Validate checks the field values on GnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GnbIdMultiError, or nil if none found.
func (m *GnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.GnbId.(type) {

	case *GnbId_GNbId:

		if all {
			switch v := interface{}(m.GetGNbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GnbIdValidationError{
						field:  "GNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GnbIdValidationError{
						field:  "GNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GnbIdMultiError(errors)
	}

	return nil
}

// GnbIdMultiError is an error wrapping multiple validation errors returned by
// GnbId.ValidateAll() if the designated constraints aren't met.
type GnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbIdMultiError) AllErrors() []error { return m }

// GnbIdValidationError is the validation error returned by GnbId.Validate if
// the designated constraints aren't met.
type GnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbIdValidationError) ErrorName() string { return "GnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbIdValidationError{}

// Validate checks the field values on Guami with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Guami) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Guami with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GuamiMultiError, or nil if none found.
func (m *Guami) ValidateAll() error {
	return m.validate(true)
}

func (m *Guami) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuamiValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAMfregionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfregionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfregionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAMfregionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuamiValidationError{
				field:  "AMfregionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAMfsetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfsetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfsetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAMfsetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuamiValidationError{
				field:  "AMfsetId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAMfpointer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfpointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfpointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAMfpointer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuamiValidationError{
				field:  "AMfpointer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GuamiMultiError(errors)
	}

	return nil
}

// GuamiMultiError is an error wrapping multiple validation errors returned by
// Guami.ValidateAll() if the designated constraints aren't met.
type GuamiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GuamiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GuamiMultiError) AllErrors() []error { return m }

// GuamiValidationError is the validation error returned by Guami.Validate if
// the designated constraints aren't met.
type GuamiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuamiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuamiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuamiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuamiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuamiValidationError) ErrorName() string { return "GuamiValidationError" }

// Error satisfies the builtin error interface
func (e GuamiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuami.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuamiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuamiValidationError{}

// Validate checks the field values on IndexToRfsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexToRfsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexToRfsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexToRfspMultiError, or
// nil if none found.
func (m *IndexToRfsp) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexToRfsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 256 {
		err := IndexToRfspValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IndexToRfspMultiError(errors)
	}

	return nil
}

// IndexToRfspMultiError is an error wrapping multiple validation errors
// returned by IndexToRfsp.ValidateAll() if the designated constraints aren't met.
type IndexToRfspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexToRfspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexToRfspMultiError) AllErrors() []error { return m }

// IndexToRfspValidationError is the validation error returned by
// IndexToRfsp.Validate if the designated constraints aren't met.
type IndexToRfspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexToRfspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexToRfspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexToRfspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexToRfspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexToRfspValidationError) ErrorName() string { return "IndexToRfspValidationError" }

// Error satisfies the builtin error interface
func (e IndexToRfspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexToRfsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexToRfspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexToRfspValidationError{}

// Validate checks the field values on NgEnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NgEnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NgEnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NgEnbIdMultiError, or nil if none found.
func (m *NgEnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *NgEnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.NgEnbId.(type) {

	case *NgEnbId_MacroNgEnbId:

		if all {
			switch v := interface{}(m.GetMacroNgEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NgEnbIdValidationError{
						field:  "MacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NgEnbIdValidationError{
						field:  "MacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMacroNgEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NgEnbIdValidationError{
					field:  "MacroNgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NgEnbId_ShortMacroNgEnbId:

		if all {
			switch v := interface{}(m.GetShortMacroNgEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NgEnbIdValidationError{
						field:  "ShortMacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NgEnbIdValidationError{
						field:  "ShortMacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShortMacroNgEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NgEnbIdValidationError{
					field:  "ShortMacroNgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NgEnbId_LongMacroNgEnbId:

		if all {
			switch v := interface{}(m.GetLongMacroNgEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NgEnbIdValidationError{
						field:  "LongMacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NgEnbIdValidationError{
						field:  "LongMacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLongMacroNgEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NgEnbIdValidationError{
					field:  "LongMacroNgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NgEnbIdMultiError(errors)
	}

	return nil
}

// NgEnbIdMultiError is an error wrapping multiple validation errors returned
// by NgEnbId.ValidateAll() if the designated constraints aren't met.
type NgEnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NgEnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NgEnbIdMultiError) AllErrors() []error { return m }

// NgEnbIdValidationError is the validation error returned by NgEnbId.Validate
// if the designated constraints aren't met.
type NgEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NgEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NgEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NgEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NgEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NgEnbIdValidationError) ErrorName() string { return "NgEnbIdValidationError" }

// Error satisfies the builtin error interface
func (e NgEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNgEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NgEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NgEnbIdValidationError{}

// Validate checks the field values on NrcellIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrcellIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrcellIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NrcellIdentityMultiError,
// or nil if none found.
func (m *NrcellIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *NrcellIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrcellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrcellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrcellIdentityMultiError(errors)
	}

	return nil
}

// NrcellIdentityMultiError is an error wrapping multiple validation errors
// returned by NrcellIdentity.ValidateAll() if the designated constraints
// aren't met.
type NrcellIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrcellIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrcellIdentityMultiError) AllErrors() []error { return m }

// NrcellIdentityValidationError is the validation error returned by
// NrcellIdentity.Validate if the designated constraints aren't met.
type NrcellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcellIdentityValidationError) ErrorName() string { return "NrcellIdentityValidationError" }

// Error satisfies the builtin error interface
func (e NrcellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcellIdentityValidationError{}

// Validate checks the field values on NrCgi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrCgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrCgi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrCgiMultiError, or nil if none found.
func (m *NrCgi) ValidateAll() error {
	return m.validate(true)
}

func (m *NrCgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrCgiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrCgiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrCgiValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNRcellIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrCgiValidationError{
					field:  "NRcellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrCgiValidationError{
					field:  "NRcellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNRcellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrCgiValidationError{
				field:  "NRcellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrCgiMultiError(errors)
	}

	return nil
}

// NrCgiMultiError is an error wrapping multiple validation errors returned by
// NrCgi.ValidateAll() if the designated constraints aren't met.
type NrCgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrCgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrCgiMultiError) AllErrors() []error { return m }

// NrCgiValidationError is the validation error returned by NrCgi.Validate if
// the designated constraints aren't met.
type NrCgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrCgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrCgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrCgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrCgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrCgiValidationError) ErrorName() string { return "NrCgiValidationError" }

// Error satisfies the builtin error interface
func (e NrCgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrCgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrCgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrCgiValidationError{}

// Validate checks the field values on QosFlowIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QosFlowIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QosFlowIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QosFlowIdentifierMultiError, or nil if none found.
func (m *QosFlowIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *QosFlowIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 63 {
		err := QosFlowIdentifierValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 63]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QosFlowIdentifierMultiError(errors)
	}

	return nil
}

// QosFlowIdentifierMultiError is an error wrapping multiple validation errors
// returned by QosFlowIdentifier.ValidateAll() if the designated constraints
// aren't met.
type QosFlowIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QosFlowIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QosFlowIdentifierMultiError) AllErrors() []error { return m }

// QosFlowIdentifierValidationError is the validation error returned by
// QosFlowIdentifier.Validate if the designated constraints aren't met.
type QosFlowIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QosFlowIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QosFlowIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QosFlowIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QosFlowIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QosFlowIdentifierValidationError) ErrorName() string {
	return "QosFlowIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e QosFlowIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQosFlowIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QosFlowIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QosFlowIdentifierValidationError{}

// Validate checks the field values on Sd with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sd with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SdMultiError, or nil if none found.
func (m *Sd) ValidateAll() error {
	return m.validate(true)
}

func (m *Sd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SdMultiError(errors)
	}

	return nil
}

// SdMultiError is an error wrapping multiple validation errors returned by
// Sd.ValidateAll() if the designated constraints aren't met.
type SdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SdMultiError) AllErrors() []error { return m }

// SdValidationError is the validation error returned by Sd.Validate if the
// designated constraints aren't met.
type SdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SdValidationError) ErrorName() string { return "SdValidationError" }

// Error satisfies the builtin error interface
func (e SdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SdValidationError{}

// Validate checks the field values on SNssai with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SNssai) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SNssai with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SNssaiMultiError, or nil if none found.
func (m *SNssai) ValidateAll() error {
	return m.validate(true)
}

func (m *SNssai) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSSt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SNssaiValidationError{
					field:  "SSt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SNssaiValidationError{
					field:  "SSt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSSt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SNssaiValidationError{
				field:  "SSt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.SD != nil {

		if all {
			switch v := interface{}(m.GetSD()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SNssaiValidationError{
						field:  "SD",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SNssaiValidationError{
						field:  "SD",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSD()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SNssaiValidationError{
					field:  "SD",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SNssaiMultiError(errors)
	}

	return nil
}

// SNssaiMultiError is an error wrapping multiple validation errors returned by
// SNssai.ValidateAll() if the designated constraints aren't met.
type SNssaiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SNssaiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SNssaiMultiError) AllErrors() []error { return m }

// SNssaiValidationError is the validation error returned by SNssai.Validate if
// the designated constraints aren't met.
type SNssaiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SNssaiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SNssaiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SNssaiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SNssaiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SNssaiValidationError) ErrorName() string { return "SNssaiValidationError" }

// Error satisfies the builtin error interface
func (e SNssaiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSNssai.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SNssaiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SNssaiValidationError{}

// Validate checks the field values on Sst with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sst with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SstMultiError, or nil if none found.
func (m *Sst) ValidateAll() error {
	return m.validate(true)
}

func (m *Sst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SstMultiError(errors)
	}

	return nil
}

// SstMultiError is an error wrapping multiple validation errors returned by
// Sst.ValidateAll() if the designated constraints aren't met.
type SstMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SstMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SstMultiError) AllErrors() []error { return m }

// SstValidationError is the validation error returned by Sst.Validate if the
// designated constraints aren't met.
type SstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SstValidationError) ErrorName() string { return "SstValidationError" }

// Error satisfies the builtin error interface
func (e SstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SstValidationError{}

// Validate checks the field values on NgRannodeUexnApid with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NgRannodeUexnApid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NgRannodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NgRannodeUexnApidMultiError, or nil if none found.
func (m *NgRannodeUexnApid) ValidateAll() error {
	return m.validate(true)
}

func (m *NgRannodeUexnApid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := NgRannodeUexnApidValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NgRannodeUexnApidMultiError(errors)
	}

	return nil
}

// NgRannodeUexnApidMultiError is an error wrapping multiple validation errors
// returned by NgRannodeUexnApid.ValidateAll() if the designated constraints
// aren't met.
type NgRannodeUexnApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NgRannodeUexnApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NgRannodeUexnApidMultiError) AllErrors() []error { return m }

// NgRannodeUexnApidValidationError is the validation error returned by
// NgRannodeUexnApid.Validate if the designated constraints aren't met.
type NgRannodeUexnApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NgRannodeUexnApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NgRannodeUexnApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NgRannodeUexnApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NgRannodeUexnApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NgRannodeUexnApidValidationError) ErrorName() string {
	return "NgRannodeUexnApidValidationError"
}

// Error satisfies the builtin error interface
func (e NgRannodeUexnApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNgRannodeUexnApid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NgRannodeUexnApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NgRannodeUexnApidValidationError{}

// Validate checks the field values on GlobalNgrannodeId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GlobalNgrannodeId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalNgrannodeId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalNgrannodeIdMultiError, or nil if none found.
func (m *GlobalNgrannodeId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalNgrannodeId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.GlobalNgrannodeId.(type) {

	case *GlobalNgrannodeId_GNb:

		if all {
			switch v := interface{}(m.GetGNb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalNgrannodeIdValidationError{
						field:  "GNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalNgrannodeIdValidationError{
						field:  "GNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalNgrannodeIdValidationError{
					field:  "GNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalNgrannodeId_NgENb:

		if all {
			switch v := interface{}(m.GetNgENb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalNgrannodeIdValidationError{
						field:  "NgENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalNgrannodeIdValidationError{
						field:  "NgENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNgENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalNgrannodeIdValidationError{
					field:  "NgENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GlobalNgrannodeIdMultiError(errors)
	}

	return nil
}

// GlobalNgrannodeIdMultiError is an error wrapping multiple validation errors
// returned by GlobalNgrannodeId.ValidateAll() if the designated constraints
// aren't met.
type GlobalNgrannodeIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalNgrannodeIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalNgrannodeIdMultiError) AllErrors() []error { return m }

// GlobalNgrannodeIdValidationError is the validation error returned by
// GlobalNgrannodeId.Validate if the designated constraints aren't met.
type GlobalNgrannodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalNgrannodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalNgrannodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalNgrannodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalNgrannodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalNgrannodeIdValidationError) ErrorName() string {
	return "GlobalNgrannodeIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalNgrannodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalNgrannodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalNgrannodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalNgrannodeIdValidationError{}

// Validate checks the field values on GnbCuCpUeE1ApId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GnbCuCpUeE1ApId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCuCpUeE1ApId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GnbCuCpUeE1ApIdMultiError, or nil if none found.
func (m *GnbCuCpUeE1ApId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCuCpUeE1ApId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := GnbCuCpUeE1ApIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCuCpUeE1ApIdMultiError(errors)
	}

	return nil
}

// GnbCuCpUeE1ApIdMultiError is an error wrapping multiple validation errors
// returned by GnbCuCpUeE1ApId.ValidateAll() if the designated constraints
// aren't met.
type GnbCuCpUeE1ApIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCuCpUeE1ApIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCuCpUeE1ApIdMultiError) AllErrors() []error { return m }

// GnbCuCpUeE1ApIdValidationError is the validation error returned by
// GnbCuCpUeE1ApId.Validate if the designated constraints aren't met.
type GnbCuCpUeE1ApIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuCpUeE1ApIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuCpUeE1ApIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuCpUeE1ApIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuCpUeE1ApIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuCpUeE1ApIdValidationError) ErrorName() string { return "GnbCuCpUeE1ApIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuCpUeE1ApIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuCpUeE1ApId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuCpUeE1ApIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuCpUeE1ApIdValidationError{}

// Validate checks the field values on GnbCuUpId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbCuUpId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCuUpId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbCuUpIdMultiError, or nil
// if none found.
func (m *GnbCuUpId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCuUpId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := GnbCuUpIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCuUpIdMultiError(errors)
	}

	return nil
}

// GnbCuUpIdMultiError is an error wrapping multiple validation errors returned
// by GnbCuUpId.ValidateAll() if the designated constraints aren't met.
type GnbCuUpIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCuUpIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCuUpIdMultiError) AllErrors() []error { return m }

// GnbCuUpIdValidationError is the validation error returned by
// GnbCuUpId.Validate if the designated constraints aren't met.
type GnbCuUpIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUpIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUpIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUpIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUpIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUpIdValidationError) ErrorName() string { return "GnbCuUpIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUpIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUpId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUpIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUpIdValidationError{}

// Validate checks the field values on FiveGsTac with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FiveGsTac) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FiveGsTac with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FiveGsTacMultiError, or nil
// if none found.
func (m *FiveGsTac) ValidateAll() error {
	return m.validate(true)
}

func (m *FiveGsTac) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return FiveGsTacMultiError(errors)
	}

	return nil
}

// FiveGsTacMultiError is an error wrapping multiple validation errors returned
// by FiveGsTac.ValidateAll() if the designated constraints aren't met.
type FiveGsTacMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FiveGsTacMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FiveGsTacMultiError) AllErrors() []error { return m }

// FiveGsTacValidationError is the validation error returned by
// FiveGsTac.Validate if the designated constraints aren't met.
type FiveGsTacValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FiveGsTacValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FiveGsTacValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FiveGsTacValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FiveGsTacValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FiveGsTacValidationError) ErrorName() string { return "FiveGsTacValidationError" }

// Error satisfies the builtin error interface
func (e FiveGsTacValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFiveGsTac.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FiveGsTacValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FiveGsTacValidationError{}

// Validate checks the field values on FreqBandNrItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FreqBandNrItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreqBandNrItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FreqBandNrItemMultiError,
// or nil if none found.
func (m *FreqBandNrItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FreqBandNrItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreqBandIndicatorNr

	if len(errors) > 0 {
		return FreqBandNrItemMultiError(errors)
	}

	return nil
}

// FreqBandNrItemMultiError is an error wrapping multiple validation errors
// returned by FreqBandNrItem.ValidateAll() if the designated constraints
// aren't met.
type FreqBandNrItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreqBandNrItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreqBandNrItemMultiError) AllErrors() []error { return m }

// FreqBandNrItemValidationError is the validation error returned by
// FreqBandNrItem.Validate if the designated constraints aren't met.
type FreqBandNrItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreqBandNrItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreqBandNrItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreqBandNrItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreqBandNrItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreqBandNrItemValidationError) ErrorName() string { return "FreqBandNrItemValidationError" }

// Error satisfies the builtin error interface
func (e FreqBandNrItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreqBandNrItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreqBandNrItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreqBandNrItemValidationError{}

// Validate checks the field values on GnbCuUeF1ApId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbCuUeF1ApId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCuUeF1ApId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbCuUeF1ApIdMultiError, or
// nil if none found.
func (m *GnbCuUeF1ApId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCuUeF1ApId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := GnbCuUeF1ApIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCuUeF1ApIdMultiError(errors)
	}

	return nil
}

// GnbCuUeF1ApIdMultiError is an error wrapping multiple validation errors
// returned by GnbCuUeF1ApId.ValidateAll() if the designated constraints
// aren't met.
type GnbCuUeF1ApIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCuUeF1ApIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCuUeF1ApIdMultiError) AllErrors() []error { return m }

// GnbCuUeF1ApIdValidationError is the validation error returned by
// GnbCuUeF1ApId.Validate if the designated constraints aren't met.
type GnbCuUeF1ApIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUeF1ApIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUeF1ApIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUeF1ApIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUeF1ApIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUeF1ApIdValidationError) ErrorName() string { return "GnbCuUeF1ApIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUeF1ApIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUeF1ApId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUeF1ApIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUeF1ApIdValidationError{}

// Validate checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbDuId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GnbDuIdMultiError, or nil if none found.
func (m *GnbDuId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbDuId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := GnbDuIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbDuIdMultiError(errors)
	}

	return nil
}

// GnbDuIdMultiError is an error wrapping multiple validation errors returned
// by GnbDuId.ValidateAll() if the designated constraints aren't met.
type GnbDuIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbDuIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbDuIdMultiError) AllErrors() []error { return m }

// GnbDuIdValidationError is the validation error returned by GnbDuId.Validate
// if the designated constraints aren't met.
type GnbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDuIdValidationError) ErrorName() string { return "GnbDuIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDuIdValidationError{}

// Validate checks the field values on NrPci with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrPci) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrPci with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrPciMultiError, or nil if none found.
func (m *NrPci) ValidateAll() error {
	return m.validate(true)
}

func (m *NrPci) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 1007 {
		err := NrPciValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 1007]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NrPciMultiError(errors)
	}

	return nil
}

// NrPciMultiError is an error wrapping multiple validation errors returned by
// NrPci.ValidateAll() if the designated constraints aren't met.
type NrPciMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrPciMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrPciMultiError) AllErrors() []error { return m }

// NrPciValidationError is the validation error returned by NrPci.Validate if
// the designated constraints aren't met.
type NrPciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrPciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrPciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrPciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrPciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrPciValidationError) ErrorName() string { return "NrPciValidationError" }

// Error satisfies the builtin error interface
func (e NrPciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrPci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrPciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrPciValidationError{}

// Validate checks the field values on NrArfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrArfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrArfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrArfcnMultiError, or nil if none found.
func (m *NrArfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *NrArfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NRarfcn

	if len(errors) > 0 {
		return NrArfcnMultiError(errors)
	}

	return nil
}

// NrArfcnMultiError is an error wrapping multiple validation errors returned
// by NrArfcn.ValidateAll() if the designated constraints aren't met.
type NrArfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrArfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrArfcnMultiError) AllErrors() []error { return m }

// NrArfcnValidationError is the validation error returned by NrArfcn.Validate
// if the designated constraints aren't met.
type NrArfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrArfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrArfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrArfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrArfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrArfcnValidationError) ErrorName() string { return "NrArfcnValidationError" }

// Error satisfies the builtin error interface
func (e NrArfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrArfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrArfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrArfcnValidationError{}

// Validate checks the field values on NrfrequencyBandList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NrfrequencyBandList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrfrequencyBandList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NrfrequencyBandListMultiError, or nil if none found.
func (m *NrfrequencyBandList) ValidateAll() error {
	return m.validate(true)
}

func (m *NrfrequencyBandList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NrfrequencyBandListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NrfrequencyBandListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NrfrequencyBandListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NrfrequencyBandListMultiError(errors)
	}

	return nil
}

// NrfrequencyBandListMultiError is an error wrapping multiple validation
// errors returned by NrfrequencyBandList.ValidateAll() if the designated
// constraints aren't met.
type NrfrequencyBandListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrfrequencyBandListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrfrequencyBandListMultiError) AllErrors() []error { return m }

// NrfrequencyBandListValidationError is the validation error returned by
// NrfrequencyBandList.Validate if the designated constraints aren't met.
type NrfrequencyBandListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrfrequencyBandListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrfrequencyBandListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrfrequencyBandListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrfrequencyBandListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrfrequencyBandListValidationError) ErrorName() string {
	return "NrfrequencyBandListValidationError"
}

// Error satisfies the builtin error interface
func (e NrfrequencyBandListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrfrequencyBandList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrfrequencyBandListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrfrequencyBandListValidationError{}

// Validate checks the field values on NrfrequencyBandItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NrfrequencyBandItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrfrequencyBandItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NrfrequencyBandItemMultiError, or nil if none found.
func (m *NrfrequencyBandItem) ValidateAll() error {
	return m.validate(true)
}

func (m *NrfrequencyBandItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreqBandIndicatorNr

	if all {
		switch v := interface{}(m.GetSupportedSulbandList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrfrequencyBandItemValidationError{
					field:  "SupportedSulbandList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrfrequencyBandItemValidationError{
					field:  "SupportedSulbandList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupportedSulbandList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrfrequencyBandItemValidationError{
				field:  "SupportedSulbandList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrfrequencyBandItemMultiError(errors)
	}

	return nil
}

// NrfrequencyBandItemMultiError is an error wrapping multiple validation
// errors returned by NrfrequencyBandItem.ValidateAll() if the designated
// constraints aren't met.
type NrfrequencyBandItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrfrequencyBandItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrfrequencyBandItemMultiError) AllErrors() []error { return m }

// NrfrequencyBandItemValidationError is the validation error returned by
// NrfrequencyBandItem.Validate if the designated constraints aren't met.
type NrfrequencyBandItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrfrequencyBandItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrfrequencyBandItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrfrequencyBandItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrfrequencyBandItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrfrequencyBandItemValidationError) ErrorName() string {
	return "NrfrequencyBandItemValidationError"
}

// Error satisfies the builtin error interface
func (e NrfrequencyBandItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrfrequencyBandItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrfrequencyBandItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrfrequencyBandItemValidationError{}

// Validate checks the field values on NrfrequencyInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NrfrequencyInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrfrequencyInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NrfrequencyInfoMultiError, or nil if none found.
func (m *NrfrequencyInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NrfrequencyInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNrArfcn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrfrequencyInfoValidationError{
					field:  "NrArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrfrequencyInfoValidationError{
					field:  "NrArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNrArfcn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrfrequencyInfoValidationError{
				field:  "NrArfcn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFrequencyBandList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrfrequencyInfoValidationError{
					field:  "FrequencyBandList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrfrequencyInfoValidationError{
					field:  "FrequencyBandList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrequencyBandList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrfrequencyInfoValidationError{
				field:  "FrequencyBandList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.FrequencyShift7P5Khz != nil {
		// no validation rules for FrequencyShift7P5Khz
	}

	if len(errors) > 0 {
		return NrfrequencyInfoMultiError(errors)
	}

	return nil
}

// NrfrequencyInfoMultiError is an error wrapping multiple validation errors
// returned by NrfrequencyInfo.ValidateAll() if the designated constraints
// aren't met.
type NrfrequencyInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrfrequencyInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrfrequencyInfoMultiError) AllErrors() []error { return m }

// NrfrequencyInfoValidationError is the validation error returned by
// NrfrequencyInfo.Validate if the designated constraints aren't met.
type NrfrequencyInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrfrequencyInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrfrequencyInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrfrequencyInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrfrequencyInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrfrequencyInfoValidationError) ErrorName() string { return "NrfrequencyInfoValidationError" }

// Error satisfies the builtin error interface
func (e NrfrequencyInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrfrequencyInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrfrequencyInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrfrequencyInfoValidationError{}

// Validate checks the field values on SupportedSulbandList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SupportedSulbandList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SupportedSulbandList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SupportedSulbandListMultiError, or nil if none found.
func (m *SupportedSulbandList) ValidateAll() error {
	return m.validate(true)
}

func (m *SupportedSulbandList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SupportedSulbandListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SupportedSulbandListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SupportedSulbandListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SupportedSulbandListMultiError(errors)
	}

	return nil
}

// SupportedSulbandListMultiError is an error wrapping multiple validation
// errors returned by SupportedSulbandList.ValidateAll() if the designated
// constraints aren't met.
type SupportedSulbandListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupportedSulbandListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupportedSulbandListMultiError) AllErrors() []error { return m }

// SupportedSulbandListValidationError is the validation error returned by
// SupportedSulbandList.Validate if the designated constraints aren't met.
type SupportedSulbandListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupportedSulbandListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupportedSulbandListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupportedSulbandListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupportedSulbandListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupportedSulbandListValidationError) ErrorName() string {
	return "SupportedSulbandListValidationError"
}

// Error satisfies the builtin error interface
func (e SupportedSulbandListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupportedSulbandList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupportedSulbandListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupportedSulbandListValidationError{}

// Validate checks the field values on SupportedSulfreqBandItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SupportedSulfreqBandItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SupportedSulfreqBandItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SupportedSulfreqBandItemMultiError, or nil if none found.
func (m *SupportedSulfreqBandItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SupportedSulfreqBandItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreqBandIndicatorNr

	if len(errors) > 0 {
		return SupportedSulfreqBandItemMultiError(errors)
	}

	return nil
}

// SupportedSulfreqBandItemMultiError is an error wrapping multiple validation
// errors returned by SupportedSulfreqBandItem.ValidateAll() if the designated
// constraints aren't met.
type SupportedSulfreqBandItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupportedSulfreqBandItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupportedSulfreqBandItemMultiError) AllErrors() []error { return m }

// SupportedSulfreqBandItemValidationError is the validation error returned by
// SupportedSulfreqBandItem.Validate if the designated constraints aren't met.
type SupportedSulfreqBandItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupportedSulfreqBandItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupportedSulfreqBandItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupportedSulfreqBandItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupportedSulfreqBandItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupportedSulfreqBandItemValidationError) ErrorName() string {
	return "SupportedSulfreqBandItemValidationError"
}

// Error satisfies the builtin error interface
func (e SupportedSulfreqBandItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupportedSulfreqBandItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupportedSulfreqBandItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupportedSulfreqBandItemValidationError{}

// Validate checks the field values on Ranueid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ranueid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ranueid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RanueidMultiError, or nil if none found.
func (m *Ranueid) ValidateAll() error {
	return m.validate(true)
}

func (m *Ranueid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RanueidMultiError(errors)
	}

	return nil
}

// RanueidMultiError is an error wrapping multiple validation errors returned
// by Ranueid.ValidateAll() if the designated constraints aren't met.
type RanueidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanueidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanueidMultiError) AllErrors() []error { return m }

// RanueidValidationError is the validation error returned by Ranueid.Validate
// if the designated constraints aren't met.
type RanueidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanueidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanueidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanueidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanueidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanueidValidationError) ErrorName() string { return "RanueidValidationError" }

// Error satisfies the builtin error interface
func (e RanueidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanueid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanueidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanueidValidationError{}

// Validate checks the field values on Plmnidentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plmnidentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plmnidentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlmnidentityMultiError, or
// nil if none found.
func (m *Plmnidentity) ValidateAll() error {
	return m.validate(true)
}

func (m *Plmnidentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return PlmnidentityMultiError(errors)
	}

	return nil
}

// PlmnidentityMultiError is an error wrapping multiple validation errors
// returned by Plmnidentity.ValidateAll() if the designated constraints aren't met.
type PlmnidentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlmnidentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlmnidentityMultiError) AllErrors() []error { return m }

// PlmnidentityValidationError is the validation error returned by
// Plmnidentity.Validate if the designated constraints aren't met.
type PlmnidentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnidentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnidentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnidentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnidentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnidentityValidationError) ErrorName() string { return "PlmnidentityValidationError" }

// Error satisfies the builtin error interface
func (e PlmnidentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnidentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnidentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnidentityValidationError{}

// Validate checks the field values on MmeGroupId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MmeGroupId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MmeGroupId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MmeGroupIdMultiError, or
// nil if none found.
func (m *MmeGroupId) ValidateAll() error {
	return m.validate(true)
}

func (m *MmeGroupId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return MmeGroupIdMultiError(errors)
	}

	return nil
}

// MmeGroupIdMultiError is an error wrapping multiple validation errors
// returned by MmeGroupId.ValidateAll() if the designated constraints aren't met.
type MmeGroupIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MmeGroupIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MmeGroupIdMultiError) AllErrors() []error { return m }

// MmeGroupIdValidationError is the validation error returned by
// MmeGroupId.Validate if the designated constraints aren't met.
type MmeGroupIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MmeGroupIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MmeGroupIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MmeGroupIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MmeGroupIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MmeGroupIdValidationError) ErrorName() string { return "MmeGroupIdValidationError" }

// Error satisfies the builtin error interface
func (e MmeGroupIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMmeGroupId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MmeGroupIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MmeGroupIdValidationError{}

// Validate checks the field values on MmeCode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MmeCode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MmeCode with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MmeCodeMultiError, or nil if none found.
func (m *MmeCode) ValidateAll() error {
	return m.validate(true)
}

func (m *MmeCode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return MmeCodeMultiError(errors)
	}

	return nil
}

// MmeCodeMultiError is an error wrapping multiple validation errors returned
// by MmeCode.ValidateAll() if the designated constraints aren't met.
type MmeCodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MmeCodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MmeCodeMultiError) AllErrors() []error { return m }

// MmeCodeValidationError is the validation error returned by MmeCode.Validate
// if the designated constraints aren't met.
type MmeCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MmeCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MmeCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MmeCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MmeCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MmeCodeValidationError) ErrorName() string { return "MmeCodeValidationError" }

// Error satisfies the builtin error interface
func (e MmeCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMmeCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MmeCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MmeCodeValidationError{}
