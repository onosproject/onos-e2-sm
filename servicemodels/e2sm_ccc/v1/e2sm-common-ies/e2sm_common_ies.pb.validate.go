// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_ccc/v1/e2sm_common_ies.proto

package e2sm_common_ies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MaxE1Apid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxE1Apid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxE1Apid with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxE1ApidMultiError, or nil
// if none found.
func (m *MaxE1Apid) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxE1Apid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxE1ApidValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxE1ApidMultiError(errors)
	}

	return nil
}

// MaxE1ApidMultiError is an error wrapping multiple validation errors returned
// by MaxE1Apid.ValidateAll() if the designated constraints aren't met.
type MaxE1ApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxE1ApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxE1ApidMultiError) AllErrors() []error { return m }

// MaxE1ApidValidationError is the validation error returned by
// MaxE1Apid.Validate if the designated constraints aren't met.
type MaxE1ApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxE1ApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxE1ApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxE1ApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxE1ApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxE1ApidValidationError) ErrorName() string { return "MaxE1ApidValidationError" }

// Error satisfies the builtin error interface
func (e MaxE1ApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxE1Apid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxE1ApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxE1ApidValidationError{}

// Validate checks the field values on MaxF1Apid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxF1Apid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxF1Apid with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxF1ApidMultiError, or nil
// if none found.
func (m *MaxF1Apid) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxF1Apid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 4 {
		err := MaxF1ApidValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxF1ApidMultiError(errors)
	}

	return nil
}

// MaxF1ApidMultiError is an error wrapping multiple validation errors returned
// by MaxF1Apid.ValidateAll() if the designated constraints aren't met.
type MaxF1ApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxF1ApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxF1ApidMultiError) AllErrors() []error { return m }

// MaxF1ApidValidationError is the validation error returned by
// MaxF1Apid.Validate if the designated constraints aren't met.
type MaxF1ApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxF1ApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxF1ApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxF1ApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxF1ApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxF1ApidValidationError) ErrorName() string { return "MaxF1ApidValidationError" }

// Error satisfies the builtin error interface
func (e MaxF1ApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxF1Apid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxF1ApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxF1ApidValidationError{}

// Validate checks the field values on MaxEarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxEarfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxEarfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxEarfcnMultiError, or nil
// if none found.
func (m *MaxEarfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxEarfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxEarfcnValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxEarfcnMultiError(errors)
	}

	return nil
}

// MaxEarfcnMultiError is an error wrapping multiple validation errors returned
// by MaxEarfcn.ValidateAll() if the designated constraints aren't met.
type MaxEarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxEarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxEarfcnMultiError) AllErrors() []error { return m }

// MaxEarfcnValidationError is the validation error returned by
// MaxEarfcn.Validate if the designated constraints aren't met.
type MaxEarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxEarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxEarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxEarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxEarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxEarfcnValidationError) ErrorName() string { return "MaxEarfcnValidationError" }

// Error satisfies the builtin error interface
func (e MaxEarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxEarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxEarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxEarfcnValidationError{}

// Validate checks the field values on MaxNrarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxNrarfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxNrarfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxNrarfcnMultiError, or
// nil if none found.
func (m *MaxNrarfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxNrarfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3279165 {
		err := MaxNrarfcnValidationError{
			field:  "Value",
			reason: "value must equal 3279165",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxNrarfcnMultiError(errors)
	}

	return nil
}

// MaxNrarfcnMultiError is an error wrapping multiple validation errors
// returned by MaxNrarfcn.ValidateAll() if the designated constraints aren't met.
type MaxNrarfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxNrarfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxNrarfcnMultiError) AllErrors() []error { return m }

// MaxNrarfcnValidationError is the validation error returned by
// MaxNrarfcn.Validate if the designated constraints aren't met.
type MaxNrarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrarfcnValidationError) ErrorName() string { return "MaxNrarfcnValidationError" }

// Error satisfies the builtin error interface
func (e MaxNrarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNrarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrarfcnValidationError{}

// Validate checks the field values on MaxnoofNrCellBands with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofNrCellBands) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNrCellBands with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofNrCellBandsMultiError, or nil if none found.
func (m *MaxnoofNrCellBands) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNrCellBands) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 32 {
		err := MaxnoofNrCellBandsValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNrCellBandsMultiError(errors)
	}

	return nil
}

// MaxnoofNrCellBandsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofNrCellBands.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofNrCellBandsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNrCellBandsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNrCellBandsMultiError) AllErrors() []error { return m }

// MaxnoofNrCellBandsValidationError is the validation error returned by
// MaxnoofNrCellBands.Validate if the designated constraints aren't met.
type MaxnoofNrCellBandsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNrCellBandsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNrCellBandsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNrCellBandsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNrCellBandsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNrCellBandsValidationError) ErrorName() string {
	return "MaxnoofNrCellBandsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNrCellBandsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNrCellBands.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNrCellBandsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNrCellBandsValidationError{}

// Validate checks the field values on Cgi with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Cgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cgi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CgiMultiError, or nil if none found.
func (m *Cgi) ValidateAll() error {
	return m.validate(true)
}

func (m *Cgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Cgi.(type) {

	case *Cgi_NRCgi:

		if all {
			switch v := interface{}(m.GetNRCgi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CgiValidationError{
						field:  "NRCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CgiValidationError{
						field:  "NRCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNRCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CgiValidationError{
					field:  "NRCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Cgi_EUtraCgi:

		if all {
			switch v := interface{}(m.GetEUtraCgi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CgiValidationError{
						field:  "EUtraCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CgiValidationError{
						field:  "EUtraCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEUtraCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CgiValidationError{
					field:  "EUtraCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CgiMultiError(errors)
	}

	return nil
}

// CgiMultiError is an error wrapping multiple validation errors returned by
// Cgi.ValidateAll() if the designated constraints aren't met.
type CgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CgiMultiError) AllErrors() []error { return m }

// CgiValidationError is the validation error returned by Cgi.Validate if the
// designated constraints aren't met.
type CgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CgiValidationError) ErrorName() string { return "CgiValidationError" }

// Error satisfies the builtin error interface
func (e CgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CgiValidationError{}

// Validate checks the field values on CoreCpid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CoreCpid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoreCpid with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoreCpidMultiError, or nil
// if none found.
func (m *CoreCpid) ValidateAll() error {
	return m.validate(true)
}

func (m *CoreCpid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.CoreCpid.(type) {

	case *CoreCpid_FiveGc:

		if all {
			switch v := interface{}(m.GetFiveGc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoreCpidValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoreCpidValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFiveGc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoreCpidValidationError{
					field:  "FiveGc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CoreCpid_EPc:

		if all {
			switch v := interface{}(m.GetEPc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoreCpidValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoreCpidValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEPc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoreCpidValidationError{
					field:  "EPc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CoreCpidMultiError(errors)
	}

	return nil
}

// CoreCpidMultiError is an error wrapping multiple validation errors returned
// by CoreCpid.ValidateAll() if the designated constraints aren't met.
type CoreCpidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoreCpidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoreCpidMultiError) AllErrors() []error { return m }

// CoreCpidValidationError is the validation error returned by
// CoreCpid.Validate if the designated constraints aren't met.
type CoreCpidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreCpidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreCpidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreCpidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreCpidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreCpidValidationError) ErrorName() string { return "CoreCpidValidationError" }

// Error satisfies the builtin error interface
func (e CoreCpidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreCpid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreCpidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreCpidValidationError{}

// Validate checks the field values on InterfaceIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InterfaceIdentifierMultiError, or nil if none found.
func (m *InterfaceIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.InterfaceIdentifier.(type) {

	case *InterfaceIdentifier_NG:

		if all {
			switch v := interface{}(m.GetNG()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "NG",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "NG",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNG()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "NG",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_XN:

		if all {
			switch v := interface{}(m.GetXN()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "XN",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "XN",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetXN()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "XN",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_F1:

		if all {
			switch v := interface{}(m.GetF1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "F1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "F1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetF1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "F1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_E1:

		if all {
			switch v := interface{}(m.GetE1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "E1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "E1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "E1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_S1:

		if all {
			switch v := interface{}(m.GetS1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "S1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "S1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "S1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_X2:

		if all {
			switch v := interface{}(m.GetX2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "X2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "X2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetX2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "X2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InterfaceIdentifier_W1:

		if all {
			switch v := interface{}(m.GetW1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "W1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceIdentifierValidationError{
						field:  "W1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetW1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceIdentifierValidationError{
					field:  "W1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InterfaceIdentifierMultiError(errors)
	}

	return nil
}

// InterfaceIdentifierMultiError is an error wrapping multiple validation
// errors returned by InterfaceIdentifier.ValidateAll() if the designated
// constraints aren't met.
type InterfaceIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdentifierMultiError) AllErrors() []error { return m }

// InterfaceIdentifierValidationError is the validation error returned by
// InterfaceIdentifier.Validate if the designated constraints aren't met.
type InterfaceIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdentifierValidationError) ErrorName() string {
	return "InterfaceIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e InterfaceIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdentifierValidationError{}

// Validate checks the field values on InterfaceIdNG with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdNG) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdNG with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdNGMultiError, or
// nil if none found.
func (m *InterfaceIdNG) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdNG) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGuami()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdNGValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdNGValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGuami()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdNGValidationError{
				field:  "Guami",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdNGMultiError(errors)
	}

	return nil
}

// InterfaceIdNGMultiError is an error wrapping multiple validation errors
// returned by InterfaceIdNG.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdNGMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdNGMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdNGMultiError) AllErrors() []error { return m }

// InterfaceIdNGValidationError is the validation error returned by
// InterfaceIdNG.Validate if the designated constraints aren't met.
type InterfaceIdNGValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdNGValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdNGValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdNGValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdNGValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdNGValidationError) ErrorName() string { return "InterfaceIdNGValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdNGValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdNG.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdNGValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdNGValidationError{}

// Validate checks the field values on InterfaceIdXn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdXn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdXn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdXnMultiError, or
// nil if none found.
func (m *InterfaceIdXn) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdXn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalNgRanId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdXnValidationError{
					field:  "GlobalNgRanId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdXnValidationError{
					field:  "GlobalNgRanId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalNgRanId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdXnValidationError{
				field:  "GlobalNgRanId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdXnMultiError(errors)
	}

	return nil
}

// InterfaceIdXnMultiError is an error wrapping multiple validation errors
// returned by InterfaceIdXn.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdXnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdXnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdXnMultiError) AllErrors() []error { return m }

// InterfaceIdXnValidationError is the validation error returned by
// InterfaceIdXn.Validate if the designated constraints aren't met.
type InterfaceIdXnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdXnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdXnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdXnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdXnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdXnValidationError) ErrorName() string { return "InterfaceIdXnValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdXnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdXn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdXnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdXnValidationError{}

// Validate checks the field values on InterfaceIdF1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdF1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdF1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdF1MultiError, or
// nil if none found.
func (m *InterfaceIdF1) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdF1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalGnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdF1ValidationError{
					field:  "GlobalGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdF1ValidationError{
					field:  "GlobalGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdF1ValidationError{
				field:  "GlobalGnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbDuId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdF1ValidationError{
					field:  "GNbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdF1ValidationError{
					field:  "GNbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdF1ValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdF1MultiError(errors)
	}

	return nil
}

// InterfaceIdF1MultiError is an error wrapping multiple validation errors
// returned by InterfaceIdF1.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdF1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdF1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdF1MultiError) AllErrors() []error { return m }

// InterfaceIdF1ValidationError is the validation error returned by
// InterfaceIdF1.Validate if the designated constraints aren't met.
type InterfaceIdF1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdF1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdF1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdF1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdF1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdF1ValidationError) ErrorName() string { return "InterfaceIdF1ValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdF1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdF1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdF1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdF1ValidationError{}

// Validate checks the field values on InterfaceIdE1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdE1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdE1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdE1MultiError, or
// nil if none found.
func (m *InterfaceIdE1) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdE1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalGnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdE1ValidationError{
					field:  "GlobalGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdE1ValidationError{
					field:  "GlobalGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdE1ValidationError{
				field:  "GlobalGnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbCuUpId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdE1ValidationError{
					field:  "GNbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdE1ValidationError{
					field:  "GNbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdE1ValidationError{
				field:  "GNbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdE1MultiError(errors)
	}

	return nil
}

// InterfaceIdE1MultiError is an error wrapping multiple validation errors
// returned by InterfaceIdE1.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdE1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdE1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdE1MultiError) AllErrors() []error { return m }

// InterfaceIdE1ValidationError is the validation error returned by
// InterfaceIdE1.Validate if the designated constraints aren't met.
type InterfaceIdE1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdE1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdE1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdE1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdE1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdE1ValidationError) ErrorName() string { return "InterfaceIdE1ValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdE1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdE1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdE1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdE1ValidationError{}

// Validate checks the field values on InterfaceIdS1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdS1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdS1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdS1MultiError, or
// nil if none found.
func (m *InterfaceIdS1) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdS1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGUmmei()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdS1ValidationError{
					field:  "GUmmei",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdS1ValidationError{
					field:  "GUmmei",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGUmmei()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdS1ValidationError{
				field:  "GUmmei",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdS1MultiError(errors)
	}

	return nil
}

// InterfaceIdS1MultiError is an error wrapping multiple validation errors
// returned by InterfaceIdS1.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdS1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdS1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdS1MultiError) AllErrors() []error { return m }

// InterfaceIdS1ValidationError is the validation error returned by
// InterfaceIdS1.Validate if the designated constraints aren't met.
type InterfaceIdS1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdS1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdS1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdS1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdS1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdS1ValidationError) ErrorName() string { return "InterfaceIdS1ValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdS1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdS1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdS1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdS1ValidationError{}

// Validate checks the field values on NodeTypeInterfaceIdX2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NodeTypeInterfaceIdX2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeTypeInterfaceIdX2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NodeTypeInterfaceIdX2MultiError, or nil if none found.
func (m *NodeTypeInterfaceIdX2) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeTypeInterfaceIdX2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.NodeTypeInterfaceIdX2.(type) {

	case *NodeTypeInterfaceIdX2_GlobalENbId:

		if all {
			switch v := interface{}(m.GetGlobalENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeTypeInterfaceIdX2ValidationError{
						field:  "GlobalENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeTypeInterfaceIdX2ValidationError{
						field:  "GlobalENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeTypeInterfaceIdX2ValidationError{
					field:  "GlobalENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NodeTypeInterfaceIdX2_GlobalEnGNbId:

		if all {
			switch v := interface{}(m.GetGlobalEnGNbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeTypeInterfaceIdX2ValidationError{
						field:  "GlobalEnGNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeTypeInterfaceIdX2ValidationError{
						field:  "GlobalEnGNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalEnGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeTypeInterfaceIdX2ValidationError{
					field:  "GlobalEnGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NodeTypeInterfaceIdX2MultiError(errors)
	}

	return nil
}

// NodeTypeInterfaceIdX2MultiError is an error wrapping multiple validation
// errors returned by NodeTypeInterfaceIdX2.ValidateAll() if the designated
// constraints aren't met.
type NodeTypeInterfaceIdX2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeTypeInterfaceIdX2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeTypeInterfaceIdX2MultiError) AllErrors() []error { return m }

// NodeTypeInterfaceIdX2ValidationError is the validation error returned by
// NodeTypeInterfaceIdX2.Validate if the designated constraints aren't met.
type NodeTypeInterfaceIdX2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeTypeInterfaceIdX2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeTypeInterfaceIdX2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeTypeInterfaceIdX2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeTypeInterfaceIdX2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeTypeInterfaceIdX2ValidationError) ErrorName() string {
	return "NodeTypeInterfaceIdX2ValidationError"
}

// Error satisfies the builtin error interface
func (e NodeTypeInterfaceIdX2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeTypeInterfaceIdX2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeTypeInterfaceIdX2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeTypeInterfaceIdX2ValidationError{}

// Validate checks the field values on InterfaceIdX2 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdX2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdX2 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdX2MultiError, or
// nil if none found.
func (m *InterfaceIdX2) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdX2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNodeType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdX2ValidationError{
					field:  "NodeType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdX2ValidationError{
					field:  "NodeType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNodeType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdX2ValidationError{
				field:  "NodeType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdX2MultiError(errors)
	}

	return nil
}

// InterfaceIdX2MultiError is an error wrapping multiple validation errors
// returned by InterfaceIdX2.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdX2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdX2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdX2MultiError) AllErrors() []error { return m }

// InterfaceIdX2ValidationError is the validation error returned by
// InterfaceIdX2.Validate if the designated constraints aren't met.
type InterfaceIdX2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdX2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdX2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdX2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdX2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdX2ValidationError) ErrorName() string { return "InterfaceIdX2ValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdX2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdX2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdX2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdX2ValidationError{}

// Validate checks the field values on InterfaceIdW1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterfaceIdW1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceIdW1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterfaceIdW1MultiError, or
// nil if none found.
func (m *InterfaceIdW1) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceIdW1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalNgENbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdW1ValidationError{
					field:  "GlobalNgENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdW1ValidationError{
					field:  "GlobalNgENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalNgENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdW1ValidationError{
				field:  "GlobalNgENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNgENbDuId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterfaceIdW1ValidationError{
					field:  "NgENbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterfaceIdW1ValidationError{
					field:  "NgENbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNgENbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterfaceIdW1ValidationError{
				field:  "NgENbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InterfaceIdW1MultiError(errors)
	}

	return nil
}

// InterfaceIdW1MultiError is an error wrapping multiple validation errors
// returned by InterfaceIdW1.ValidateAll() if the designated constraints
// aren't met.
type InterfaceIdW1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceIdW1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceIdW1MultiError) AllErrors() []error { return m }

// InterfaceIdW1ValidationError is the validation error returned by
// InterfaceIdW1.Validate if the designated constraints aren't met.
type InterfaceIdW1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceIdW1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceIdW1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceIdW1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceIdW1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceIdW1ValidationError) ErrorName() string { return "InterfaceIdW1ValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceIdW1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceIdW1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceIdW1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceIdW1ValidationError{}

// Validate checks the field values on InterfaceMessageId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InterfaceMessageId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceMessageId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InterfaceMessageIdMultiError, or nil if none found.
func (m *InterfaceMessageId) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceMessageId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InterfaceProcedureId

	// no validation rules for MessageType

	if len(errors) > 0 {
		return InterfaceMessageIdMultiError(errors)
	}

	return nil
}

// InterfaceMessageIdMultiError is an error wrapping multiple validation errors
// returned by InterfaceMessageId.ValidateAll() if the designated constraints
// aren't met.
type InterfaceMessageIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceMessageIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceMessageIdMultiError) AllErrors() []error { return m }

// InterfaceMessageIdValidationError is the validation error returned by
// InterfaceMessageId.Validate if the designated constraints aren't met.
type InterfaceMessageIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceMessageIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceMessageIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceMessageIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceMessageIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceMessageIdValidationError) ErrorName() string {
	return "InterfaceMessageIdValidationError"
}

// Error satisfies the builtin error interface
func (e InterfaceMessageIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceMessageId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceMessageIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceMessageIdValidationError{}

// Validate checks the field values on GroupId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GroupIdMultiError, or nil if none found.
func (m *GroupId) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.GroupId.(type) {

	case *GroupId_FiveGc:

		if all {
			switch v := interface{}(m.GetFiveGc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupIdValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupIdValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFiveGc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupIdValidationError{
					field:  "FiveGc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GroupId_EPc:

		if all {
			switch v := interface{}(m.GetEPc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupIdValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupIdValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEPc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupIdValidationError{
					field:  "EPc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupIdMultiError(errors)
	}

	return nil
}

// GroupIdMultiError is an error wrapping multiple validation errors returned
// by GroupId.ValidateAll() if the designated constraints aren't met.
type GroupIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupIdMultiError) AllErrors() []error { return m }

// GroupIdValidationError is the validation error returned by GroupId.Validate
// if the designated constraints aren't met.
type GroupIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupIdValidationError) ErrorName() string { return "GroupIdValidationError" }

// Error satisfies the builtin error interface
func (e GroupIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupIdValidationError{}

// Validate checks the field values on QoSid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QoSid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QoSid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QoSidMultiError, or nil if none found.
func (m *QoSid) ValidateAll() error {
	return m.validate(true)
}

func (m *QoSid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.QoSid.(type) {

	case *QoSid_FiveGc:

		if all {
			switch v := interface{}(m.GetFiveGc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QoSidValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QoSidValidationError{
						field:  "FiveGc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFiveGc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QoSidValidationError{
					field:  "FiveGc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *QoSid_EPc:

		if all {
			switch v := interface{}(m.GetEPc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QoSidValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QoSidValidationError{
						field:  "EPc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEPc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QoSidValidationError{
					field:  "EPc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QoSidMultiError(errors)
	}

	return nil
}

// QoSidMultiError is an error wrapping multiple validation errors returned by
// QoSid.ValidateAll() if the designated constraints aren't met.
type QoSidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QoSidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QoSidMultiError) AllErrors() []error { return m }

// QoSidValidationError is the validation error returned by QoSid.Validate if
// the designated constraints aren't met.
type QoSidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QoSidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QoSidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QoSidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QoSidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QoSidValidationError) ErrorName() string { return "QoSidValidationError" }

// Error satisfies the builtin error interface
func (e QoSidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQoSid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QoSidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QoSidValidationError{}

// Validate checks the field values on RanfunctionName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionNameMultiError, or nil if none found.
func (m *RanfunctionName) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRanFunctionShortName()); l < 1 || l > 150 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionShortName",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionE2SmOid()); l < 1 || l > 1000 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionE2SmOid",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionDescription()); l < 1 || l > 150 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionDescription",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.RanFunctionInstance != nil {
		// no validation rules for RanFunctionInstance
	}

	if len(errors) > 0 {
		return RanfunctionNameMultiError(errors)
	}

	return nil
}

// RanfunctionNameMultiError is an error wrapping multiple validation errors
// returned by RanfunctionName.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionNameMultiError) AllErrors() []error { return m }

// RanfunctionNameValidationError is the validation error returned by
// RanfunctionName.Validate if the designated constraints aren't met.
type RanfunctionNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionNameValidationError) ErrorName() string { return "RanfunctionNameValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionNameValidationError{}

// Validate checks the field values on RicFormatType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicFormatType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicFormatType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicFormatTypeMultiError, or
// nil if none found.
func (m *RicFormatType) ValidateAll() error {
	return m.validate(true)
}

func (m *RicFormatType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicFormatTypeMultiError(errors)
	}

	return nil
}

// RicFormatTypeMultiError is an error wrapping multiple validation errors
// returned by RicFormatType.ValidateAll() if the designated constraints
// aren't met.
type RicFormatTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicFormatTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicFormatTypeMultiError) AllErrors() []error { return m }

// RicFormatTypeValidationError is the validation error returned by
// RicFormatType.Validate if the designated constraints aren't met.
type RicFormatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicFormatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicFormatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicFormatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicFormatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicFormatTypeValidationError) ErrorName() string { return "RicFormatTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicFormatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicFormatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicFormatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicFormatTypeValidationError{}

// Validate checks the field values on RicStyleType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicStyleType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicStyleType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicStyleTypeMultiError, or
// nil if none found.
func (m *RicStyleType) ValidateAll() error {
	return m.validate(true)
}

func (m *RicStyleType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicStyleTypeMultiError(errors)
	}

	return nil
}

// RicStyleTypeMultiError is an error wrapping multiple validation errors
// returned by RicStyleType.ValidateAll() if the designated constraints aren't met.
type RicStyleTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicStyleTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicStyleTypeMultiError) AllErrors() []error { return m }

// RicStyleTypeValidationError is the validation error returned by
// RicStyleType.Validate if the designated constraints aren't met.
type RicStyleTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleTypeValidationError) ErrorName() string { return "RicStyleTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleTypeValidationError{}

// Validate checks the field values on RicStyleName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicStyleName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicStyleName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicStyleNameMultiError, or
// nil if none found.
func (m *RicStyleName) ValidateAll() error {
	return m.validate(true)
}

func (m *RicStyleName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		err := RicStyleNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicStyleNameMultiError(errors)
	}

	return nil
}

// RicStyleNameMultiError is an error wrapping multiple validation errors
// returned by RicStyleName.ValidateAll() if the designated constraints aren't met.
type RicStyleNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicStyleNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicStyleNameMultiError) AllErrors() []error { return m }

// RicStyleNameValidationError is the validation error returned by
// RicStyleName.Validate if the designated constraints aren't met.
type RicStyleNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleNameValidationError) ErrorName() string { return "RicStyleNameValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleNameValidationError{}

// Validate checks the field values on RrcTypeRrcMessageId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RrcTypeRrcMessageId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RrcTypeRrcMessageId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RrcTypeRrcMessageIdMultiError, or nil if none found.
func (m *RrcTypeRrcMessageId) ValidateAll() error {
	return m.validate(true)
}

func (m *RrcTypeRrcMessageId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RrcTypeRrcMessageId.(type) {

	case *RrcTypeRrcMessageId_LTe:
		// no validation rules for LTe

	case *RrcTypeRrcMessageId_NR:
		// no validation rules for NR

	}

	if len(errors) > 0 {
		return RrcTypeRrcMessageIdMultiError(errors)
	}

	return nil
}

// RrcTypeRrcMessageIdMultiError is an error wrapping multiple validation
// errors returned by RrcTypeRrcMessageId.ValidateAll() if the designated
// constraints aren't met.
type RrcTypeRrcMessageIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RrcTypeRrcMessageIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RrcTypeRrcMessageIdMultiError) AllErrors() []error { return m }

// RrcTypeRrcMessageIdValidationError is the validation error returned by
// RrcTypeRrcMessageId.Validate if the designated constraints aren't met.
type RrcTypeRrcMessageIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RrcTypeRrcMessageIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RrcTypeRrcMessageIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RrcTypeRrcMessageIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RrcTypeRrcMessageIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RrcTypeRrcMessageIdValidationError) ErrorName() string {
	return "RrcTypeRrcMessageIdValidationError"
}

// Error satisfies the builtin error interface
func (e RrcTypeRrcMessageIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRrcTypeRrcMessageId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RrcTypeRrcMessageIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RrcTypeRrcMessageIdValidationError{}

// Validate checks the field values on RrcMessageId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RrcMessageId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RrcMessageId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RrcMessageIdMultiError, or
// nil if none found.
func (m *RrcMessageId) ValidateAll() error {
	return m.validate(true)
}

func (m *RrcMessageId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRrcType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RrcMessageIdValidationError{
					field:  "RrcType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RrcMessageIdValidationError{
					field:  "RrcType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRrcType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RrcMessageIdValidationError{
				field:  "RrcType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MessageId

	if len(errors) > 0 {
		return RrcMessageIdMultiError(errors)
	}

	return nil
}

// RrcMessageIdMultiError is an error wrapping multiple validation errors
// returned by RrcMessageId.ValidateAll() if the designated constraints aren't met.
type RrcMessageIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RrcMessageIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RrcMessageIdMultiError) AllErrors() []error { return m }

// RrcMessageIdValidationError is the validation error returned by
// RrcMessageId.Validate if the designated constraints aren't met.
type RrcMessageIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RrcMessageIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RrcMessageIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RrcMessageIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RrcMessageIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RrcMessageIdValidationError) ErrorName() string { return "RrcMessageIdValidationError" }

// Error satisfies the builtin error interface
func (e RrcMessageIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRrcMessageId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RrcMessageIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RrcMessageIdValidationError{}

// Validate checks the field values on ServingCellARfcn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServingCellARfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServingCellARfcn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServingCellARfcnMultiError, or nil if none found.
func (m *ServingCellARfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *ServingCellARfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.ServingCellArfcn.(type) {

	case *ServingCellARfcn_NR:

		if all {
			switch v := interface{}(m.GetNR()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServingCellARfcnValidationError{
						field:  "NR",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServingCellARfcnValidationError{
						field:  "NR",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNR()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServingCellARfcnValidationError{
					field:  "NR",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServingCellARfcn_EUtra:

		if all {
			switch v := interface{}(m.GetEUtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServingCellARfcnValidationError{
						field:  "EUtra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServingCellARfcnValidationError{
						field:  "EUtra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEUtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServingCellARfcnValidationError{
					field:  "EUtra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServingCellARfcnMultiError(errors)
	}

	return nil
}

// ServingCellARfcnMultiError is an error wrapping multiple validation errors
// returned by ServingCellARfcn.ValidateAll() if the designated constraints
// aren't met.
type ServingCellARfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServingCellARfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServingCellARfcnMultiError) AllErrors() []error { return m }

// ServingCellARfcnValidationError is the validation error returned by
// ServingCellARfcn.Validate if the designated constraints aren't met.
type ServingCellARfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServingCellARfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServingCellARfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServingCellARfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServingCellARfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServingCellARfcnValidationError) ErrorName() string { return "ServingCellARfcnValidationError" }

// Error satisfies the builtin error interface
func (e ServingCellARfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServingCellARfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServingCellARfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServingCellARfcnValidationError{}

// Validate checks the field values on ServingCellPCi with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServingCellPCi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServingCellPCi with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServingCellPCiMultiError,
// or nil if none found.
func (m *ServingCellPCi) ValidateAll() error {
	return m.validate(true)
}

func (m *ServingCellPCi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.ServingCellPci.(type) {

	case *ServingCellPCi_NR:

		if all {
			switch v := interface{}(m.GetNR()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServingCellPCiValidationError{
						field:  "NR",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServingCellPCiValidationError{
						field:  "NR",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNR()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServingCellPCiValidationError{
					field:  "NR",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServingCellPCi_EUtra:

		if all {
			switch v := interface{}(m.GetEUtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServingCellPCiValidationError{
						field:  "EUtra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServingCellPCiValidationError{
						field:  "EUtra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEUtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServingCellPCiValidationError{
					field:  "EUtra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServingCellPCiMultiError(errors)
	}

	return nil
}

// ServingCellPCiMultiError is an error wrapping multiple validation errors
// returned by ServingCellPCi.ValidateAll() if the designated constraints
// aren't met.
type ServingCellPCiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServingCellPCiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServingCellPCiMultiError) AllErrors() []error { return m }

// ServingCellPCiValidationError is the validation error returned by
// ServingCellPCi.Validate if the designated constraints aren't met.
type ServingCellPCiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServingCellPCiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServingCellPCiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServingCellPCiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServingCellPCiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServingCellPCiValidationError) ErrorName() string { return "ServingCellPCiValidationError" }

// Error satisfies the builtin error interface
func (e ServingCellPCiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServingCellPCi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServingCellPCiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServingCellPCiValidationError{}

// Validate checks the field values on Ueid with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ueid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ueid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UeidMultiError, or nil if none found.
func (m *Ueid) ValidateAll() error {
	return m.validate(true)
}

func (m *Ueid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Ueid.(type) {

	case *Ueid_GNbUeid:

		if all {
			switch v := interface{}(m.GetGNbUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "GNbUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_GNbDuUeid:

		if all {
			switch v := interface{}(m.GetGNbDuUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbDuUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbDuUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbDuUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "GNbDuUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_GNbCuUpUeid:

		if all {
			switch v := interface{}(m.GetGNbCuUpUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbCuUpUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "GNbCuUpUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbCuUpUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "GNbCuUpUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_NgENbUeid:

		if all {
			switch v := interface{}(m.GetNgENbUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "NgENbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "NgENbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNgENbUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "NgENbUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_NgENbDuUeid:

		if all {
			switch v := interface{}(m.GetNgENbDuUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "NgENbDuUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "NgENbDuUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNgENbDuUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "NgENbDuUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_EnGNbUeid:

		if all {
			switch v := interface{}(m.GetEnGNbUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "EnGNbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "EnGNbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnGNbUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "EnGNbUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ueid_ENbUeid:

		if all {
			switch v := interface{}(m.GetENbUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "ENbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidValidationError{
						field:  "ENbUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetENbUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidValidationError{
					field:  "ENbUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidMultiError(errors)
	}

	return nil
}

// UeidMultiError is an error wrapping multiple validation errors returned by
// Ueid.ValidateAll() if the designated constraints aren't met.
type UeidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidMultiError) AllErrors() []error { return m }

// UeidValidationError is the validation error returned by Ueid.Validate if the
// designated constraints aren't met.
type UeidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidValidationError) ErrorName() string { return "UeidValidationError" }

// Error satisfies the builtin error interface
func (e UeidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidValidationError{}

// Validate checks the field values on UeidGNb with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidGNb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGNb with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UeidGNbMultiError, or nil if none found.
func (m *UeidGNb) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGNb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAmfUeNgapId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGNbValidationError{
					field:  "AmfUeNgapId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGNbValidationError{
					field:  "AmfUeNgapId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmfUeNgapId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGNbValidationError{
				field:  "AmfUeNgapId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGuami()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGNbValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGNbValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGuami()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGNbValidationError{
				field:  "Guami",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GNbCuUeF1ApIdList != nil {

		if all {
			switch v := interface{}(m.GetGNbCuUeF1ApIdList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "GNbCuUeF1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "GNbCuUeF1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbCuUeF1ApIdList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGNbValidationError{
					field:  "GNbCuUeF1ApIdList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GNbCuCpUeE1ApIdList != nil {

		if all {
			switch v := interface{}(m.GetGNbCuCpUeE1ApIdList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "GNbCuCpUeE1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "GNbCuCpUeE1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbCuCpUeE1ApIdList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGNbValidationError{
					field:  "GNbCuCpUeE1ApIdList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RanUeid != nil {

		if all {
			switch v := interface{}(m.GetRanUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGNbValidationError{
					field:  "RanUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MNgRanUeXnApId != nil {

		if all {
			switch v := interface{}(m.GetMNgRanUeXnApId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "MNgRanUeXnApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "MNgRanUeXnApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMNgRanUeXnApId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGNbValidationError{
					field:  "MNgRanUeXnApId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalGnbId != nil {

		if all {
			switch v := interface{}(m.GetGlobalGnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "GlobalGnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "GlobalGnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalGnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGNbValidationError{
					field:  "GlobalGnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalNgRannodeId != nil {

		if all {
			switch v := interface{}(m.GetGlobalNgRannodeId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "GlobalNgRannodeId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGNbValidationError{
						field:  "GlobalNgRannodeId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalNgRannodeId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGNbValidationError{
					field:  "GlobalNgRannodeId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidGNbMultiError(errors)
	}

	return nil
}

// UeidGNbMultiError is an error wrapping multiple validation errors returned
// by UeidGNb.ValidateAll() if the designated constraints aren't met.
type UeidGNbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGNbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGNbMultiError) AllErrors() []error { return m }

// UeidGNbValidationError is the validation error returned by UeidGNb.Validate
// if the designated constraints aren't met.
type UeidGNbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGNbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGNbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGNbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGNbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGNbValidationError) ErrorName() string { return "UeidGNbValidationError" }

// Error satisfies the builtin error interface
func (e UeidGNbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGNb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGNbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGNbValidationError{}

// Validate checks the field values on UeidGNbCUCPE1ApIDList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UeidGNbCUCPE1ApIDList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGNbCUCPE1ApIDList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UeidGNbCUCPE1ApIDListMultiError, or nil if none found.
func (m *UeidGNbCUCPE1ApIDList) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGNbCUCPE1ApIDList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 65535 {
		err := UeidGNbCUCPE1ApIDListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGNbCUCPE1ApIDListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGNbCUCPE1ApIDListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGNbCUCPE1ApIDListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidGNbCUCPE1ApIDListMultiError(errors)
	}

	return nil
}

// UeidGNbCUCPE1ApIDListMultiError is an error wrapping multiple validation
// errors returned by UeidGNbCUCPE1ApIDList.ValidateAll() if the designated
// constraints aren't met.
type UeidGNbCUCPE1ApIDListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGNbCUCPE1ApIDListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGNbCUCPE1ApIDListMultiError) AllErrors() []error { return m }

// UeidGNbCUCPE1ApIDListValidationError is the validation error returned by
// UeidGNbCUCPE1ApIDList.Validate if the designated constraints aren't met.
type UeidGNbCUCPE1ApIDListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGNbCUCPE1ApIDListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGNbCUCPE1ApIDListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGNbCUCPE1ApIDListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGNbCUCPE1ApIDListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGNbCUCPE1ApIDListValidationError) ErrorName() string {
	return "UeidGNbCUCPE1ApIDListValidationError"
}

// Error satisfies the builtin error interface
func (e UeidGNbCUCPE1ApIDListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGNbCUCPE1ApIDList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGNbCUCPE1ApIDListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGNbCUCPE1ApIDListValidationError{}

// Validate checks the field values on UeidGNbCUCPE1ApIDItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UeidGNbCUCPE1ApIDItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGNbCUCPE1ApIDItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UeidGNbCUCPE1ApIDItemMultiError, or nil if none found.
func (m *UeidGNbCUCPE1ApIDItem) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGNbCUCPE1ApIDItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGNbCuCpUeE1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGNbCUCPE1ApIDItemValidationError{
					field:  "GNbCuCpUeE1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGNbCUCPE1ApIDItemValidationError{
					field:  "GNbCuCpUeE1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuCpUeE1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGNbCUCPE1ApIDItemValidationError{
				field:  "GNbCuCpUeE1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UeidGNbCUCPE1ApIDItemMultiError(errors)
	}

	return nil
}

// UeidGNbCUCPE1ApIDItemMultiError is an error wrapping multiple validation
// errors returned by UeidGNbCUCPE1ApIDItem.ValidateAll() if the designated
// constraints aren't met.
type UeidGNbCUCPE1ApIDItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGNbCUCPE1ApIDItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGNbCUCPE1ApIDItemMultiError) AllErrors() []error { return m }

// UeidGNbCUCPE1ApIDItemValidationError is the validation error returned by
// UeidGNbCUCPE1ApIDItem.Validate if the designated constraints aren't met.
type UeidGNbCUCPE1ApIDItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGNbCUCPE1ApIDItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGNbCUCPE1ApIDItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGNbCUCPE1ApIDItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGNbCUCPE1ApIDItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGNbCUCPE1ApIDItemValidationError) ErrorName() string {
	return "UeidGNbCUCPE1ApIDItemValidationError"
}

// Error satisfies the builtin error interface
func (e UeidGNbCUCPE1ApIDItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGNbCUCPE1ApIDItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGNbCUCPE1ApIDItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGNbCUCPE1ApIDItemValidationError{}

// Validate checks the field values on UeidGNbCUF1ApIDList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UeidGNbCUF1ApIDList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGNbCUF1ApIDList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UeidGNbCUF1ApIDListMultiError, or nil if none found.
func (m *UeidGNbCUF1ApIDList) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGNbCUF1ApIDList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 4 {
		err := UeidGNbCUF1ApIDListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 4 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGNbCUF1ApIDListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGNbCUF1ApIDListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGNbCUF1ApIDListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidGNbCUF1ApIDListMultiError(errors)
	}

	return nil
}

// UeidGNbCUF1ApIDListMultiError is an error wrapping multiple validation
// errors returned by UeidGNbCUF1ApIDList.ValidateAll() if the designated
// constraints aren't met.
type UeidGNbCUF1ApIDListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGNbCUF1ApIDListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGNbCUF1ApIDListMultiError) AllErrors() []error { return m }

// UeidGNbCUF1ApIDListValidationError is the validation error returned by
// UeidGNbCUF1ApIDList.Validate if the designated constraints aren't met.
type UeidGNbCUF1ApIDListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGNbCUF1ApIDListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGNbCUF1ApIDListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGNbCUF1ApIDListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGNbCUF1ApIDListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGNbCUF1ApIDListValidationError) ErrorName() string {
	return "UeidGNbCUF1ApIDListValidationError"
}

// Error satisfies the builtin error interface
func (e UeidGNbCUF1ApIDListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGNbCUF1ApIDList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGNbCUF1ApIDListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGNbCUF1ApIDListValidationError{}

// Validate checks the field values on UeidGNbCUCPF1ApIDItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UeidGNbCUCPF1ApIDItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGNbCUCPF1ApIDItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UeidGNbCUCPF1ApIDItemMultiError, or nil if none found.
func (m *UeidGNbCUCPF1ApIDItem) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGNbCUCPF1ApIDItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGNbCuUeF1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGNbCUCPF1ApIDItemValidationError{
					field:  "GNbCuUeF1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGNbCUCPF1ApIDItemValidationError{
					field:  "GNbCuUeF1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuUeF1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGNbCUCPF1ApIDItemValidationError{
				field:  "GNbCuUeF1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UeidGNbCUCPF1ApIDItemMultiError(errors)
	}

	return nil
}

// UeidGNbCUCPF1ApIDItemMultiError is an error wrapping multiple validation
// errors returned by UeidGNbCUCPF1ApIDItem.ValidateAll() if the designated
// constraints aren't met.
type UeidGNbCUCPF1ApIDItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGNbCUCPF1ApIDItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGNbCUCPF1ApIDItemMultiError) AllErrors() []error { return m }

// UeidGNbCUCPF1ApIDItemValidationError is the validation error returned by
// UeidGNbCUCPF1ApIDItem.Validate if the designated constraints aren't met.
type UeidGNbCUCPF1ApIDItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGNbCUCPF1ApIDItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGNbCUCPF1ApIDItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGNbCUCPF1ApIDItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGNbCUCPF1ApIDItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGNbCUCPF1ApIDItemValidationError) ErrorName() string {
	return "UeidGNbCUCPF1ApIDItemValidationError"
}

// Error satisfies the builtin error interface
func (e UeidGNbCUCPF1ApIDItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGNbCUCPF1ApIDItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGNbCUCPF1ApIDItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGNbCUCPF1ApIDItemValidationError{}

// Validate checks the field values on UeidGNbDU with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidGNbDU) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGNbDU with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UeidGNbDUMultiError, or nil
// if none found.
func (m *UeidGNbDU) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGNbDU) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGNbCuUeF1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGNbDUValidationError{
					field:  "GNbCuUeF1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGNbDUValidationError{
					field:  "GNbCuUeF1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuUeF1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGNbDUValidationError{
				field:  "GNbCuUeF1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanUeid != nil {

		if all {
			switch v := interface{}(m.GetRanUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGNbDUValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGNbDUValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGNbDUValidationError{
					field:  "RanUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidGNbDUMultiError(errors)
	}

	return nil
}

// UeidGNbDUMultiError is an error wrapping multiple validation errors returned
// by UeidGNbDU.ValidateAll() if the designated constraints aren't met.
type UeidGNbDUMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGNbDUMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGNbDUMultiError) AllErrors() []error { return m }

// UeidGNbDUValidationError is the validation error returned by
// UeidGNbDU.Validate if the designated constraints aren't met.
type UeidGNbDUValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGNbDUValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGNbDUValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGNbDUValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGNbDUValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGNbDUValidationError) ErrorName() string { return "UeidGNbDUValidationError" }

// Error satisfies the builtin error interface
func (e UeidGNbDUValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGNbDU.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGNbDUValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGNbDUValidationError{}

// Validate checks the field values on UeidGNbCUUP with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidGNbCUUP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidGNbCUUP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UeidGNbCUUPMultiError, or
// nil if none found.
func (m *UeidGNbCUUP) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidGNbCUUP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGNbCuCpUeE1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidGNbCUUPValidationError{
					field:  "GNbCuCpUeE1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidGNbCUUPValidationError{
					field:  "GNbCuCpUeE1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuCpUeE1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidGNbCUUPValidationError{
				field:  "GNbCuCpUeE1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanUeid != nil {

		if all {
			switch v := interface{}(m.GetRanUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidGNbCUUPValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidGNbCUUPValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidGNbCUUPValidationError{
					field:  "RanUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidGNbCUUPMultiError(errors)
	}

	return nil
}

// UeidGNbCUUPMultiError is an error wrapping multiple validation errors
// returned by UeidGNbCUUP.ValidateAll() if the designated constraints aren't met.
type UeidGNbCUUPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidGNbCUUPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidGNbCUUPMultiError) AllErrors() []error { return m }

// UeidGNbCUUPValidationError is the validation error returned by
// UeidGNbCUUP.Validate if the designated constraints aren't met.
type UeidGNbCUUPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidGNbCUUPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidGNbCUUPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidGNbCUUPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidGNbCUUPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidGNbCUUPValidationError) ErrorName() string { return "UeidGNbCUUPValidationError" }

// Error satisfies the builtin error interface
func (e UeidGNbCUUPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidGNbCUUP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidGNbCUUPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidGNbCUUPValidationError{}

// Validate checks the field values on UeidNGENb with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidNGENb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidNGENb with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UeidNGENbMultiError, or nil
// if none found.
func (m *UeidNGENb) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidNGENb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAmfUeNgapId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidNGENbValidationError{
					field:  "AmfUeNgapId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidNGENbValidationError{
					field:  "AmfUeNgapId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmfUeNgapId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidNGENbValidationError{
				field:  "AmfUeNgapId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGuami()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidNGENbValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidNGENbValidationError{
					field:  "Guami",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGuami()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidNGENbValidationError{
				field:  "Guami",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.NgENbCuUeW1ApId != nil {

		if all {
			switch v := interface{}(m.GetNgENbCuUeW1ApId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidNGENbValidationError{
						field:  "NgENbCuUeW1ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidNGENbValidationError{
						field:  "NgENbCuUeW1ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNgENbCuUeW1ApId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidNGENbValidationError{
					field:  "NgENbCuUeW1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MNgRanUeXnApId != nil {

		if all {
			switch v := interface{}(m.GetMNgRanUeXnApId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidNGENbValidationError{
						field:  "MNgRanUeXnApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidNGENbValidationError{
						field:  "MNgRanUeXnApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMNgRanUeXnApId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidNGENbValidationError{
					field:  "MNgRanUeXnApId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalNgEnbId != nil {

		if all {
			switch v := interface{}(m.GetGlobalNgEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidNGENbValidationError{
						field:  "GlobalNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidNGENbValidationError{
						field:  "GlobalNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalNgEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidNGENbValidationError{
					field:  "GlobalNgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalNgRannodeId != nil {

		if all {
			switch v := interface{}(m.GetGlobalNgRannodeId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidNGENbValidationError{
						field:  "GlobalNgRannodeId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidNGENbValidationError{
						field:  "GlobalNgRannodeId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalNgRannodeId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidNGENbValidationError{
					field:  "GlobalNgRannodeId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidNGENbMultiError(errors)
	}

	return nil
}

// UeidNGENbMultiError is an error wrapping multiple validation errors returned
// by UeidNGENb.ValidateAll() if the designated constraints aren't met.
type UeidNGENbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidNGENbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidNGENbMultiError) AllErrors() []error { return m }

// UeidNGENbValidationError is the validation error returned by
// UeidNGENb.Validate if the designated constraints aren't met.
type UeidNGENbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidNGENbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidNGENbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidNGENbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidNGENbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidNGENbValidationError) ErrorName() string { return "UeidNGENbValidationError" }

// Error satisfies the builtin error interface
func (e UeidNGENbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidNGENb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidNGENbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidNGENbValidationError{}

// Validate checks the field values on UeidNGENbDU with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidNGENbDU) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidNGENbDU with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UeidNGENbDUMultiError, or
// nil if none found.
func (m *UeidNGENbDU) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidNGENbDU) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNgENbCuUeW1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidNGENbDUValidationError{
					field:  "NgENbCuUeW1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidNGENbDUValidationError{
					field:  "NgENbCuUeW1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNgENbCuUeW1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidNGENbDUValidationError{
				field:  "NgENbCuUeW1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UeidNGENbDUMultiError(errors)
	}

	return nil
}

// UeidNGENbDUMultiError is an error wrapping multiple validation errors
// returned by UeidNGENbDU.ValidateAll() if the designated constraints aren't met.
type UeidNGENbDUMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidNGENbDUMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidNGENbDUMultiError) AllErrors() []error { return m }

// UeidNGENbDUValidationError is the validation error returned by
// UeidNGENbDU.Validate if the designated constraints aren't met.
type UeidNGENbDUValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidNGENbDUValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidNGENbDUValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidNGENbDUValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidNGENbDUValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidNGENbDUValidationError) ErrorName() string { return "UeidNGENbDUValidationError" }

// Error satisfies the builtin error interface
func (e UeidNGENbDUValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidNGENbDU.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidNGENbDUValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidNGENbDUValidationError{}

// Validate checks the field values on UeidENGNb with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidENGNb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidENGNb with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UeidENGNbMultiError, or nil
// if none found.
func (m *UeidENGNb) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidENGNb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMENbUeX2ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidENGNbValidationError{
					field:  "MENbUeX2ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidENGNbValidationError{
					field:  "MENbUeX2ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMENbUeX2ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidENGNbValidationError{
				field:  "MENbUeX2ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGlobalEnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidENGNbValidationError{
					field:  "GlobalEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidENGNbValidationError{
					field:  "GlobalEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalEnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidENGNbValidationError{
				field:  "GlobalEnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.MENbUeX2ApIdExtension != nil {

		if all {
			switch v := interface{}(m.GetMENbUeX2ApIdExtension()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidENGNbValidationError{
						field:  "MENbUeX2ApIdExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidENGNbValidationError{
						field:  "MENbUeX2ApIdExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMENbUeX2ApIdExtension()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidENGNbValidationError{
					field:  "MENbUeX2ApIdExtension",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GNbCuUeF1ApId != nil {

		if all {
			switch v := interface{}(m.GetGNbCuUeF1ApId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidENGNbValidationError{
						field:  "GNbCuUeF1ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidENGNbValidationError{
						field:  "GNbCuUeF1ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbCuUeF1ApId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidENGNbValidationError{
					field:  "GNbCuUeF1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GNbCuCpUeE1ApIdList != nil {

		if all {
			switch v := interface{}(m.GetGNbCuCpUeE1ApIdList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidENGNbValidationError{
						field:  "GNbCuCpUeE1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidENGNbValidationError{
						field:  "GNbCuCpUeE1ApIdList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbCuCpUeE1ApIdList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidENGNbValidationError{
					field:  "GNbCuCpUeE1ApIdList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RanUeid != nil {

		if all {
			switch v := interface{}(m.GetRanUeid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidENGNbValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidENGNbValidationError{
						field:  "RanUeid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanUeid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidENGNbValidationError{
					field:  "RanUeid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidENGNbMultiError(errors)
	}

	return nil
}

// UeidENGNbMultiError is an error wrapping multiple validation errors returned
// by UeidENGNb.ValidateAll() if the designated constraints aren't met.
type UeidENGNbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidENGNbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidENGNbMultiError) AllErrors() []error { return m }

// UeidENGNbValidationError is the validation error returned by
// UeidENGNb.Validate if the designated constraints aren't met.
type UeidENGNbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidENGNbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidENGNbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidENGNbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidENGNbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidENGNbValidationError) ErrorName() string { return "UeidENGNbValidationError" }

// Error satisfies the builtin error interface
func (e UeidENGNbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidENGNb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidENGNbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidENGNbValidationError{}

// Validate checks the field values on UeidENb with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UeidENb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UeidENb with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UeidENbMultiError, or nil if none found.
func (m *UeidENb) ValidateAll() error {
	return m.validate(true)
}

func (m *UeidENb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMMeUeS1ApId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidENbValidationError{
					field:  "MMeUeS1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidENbValidationError{
					field:  "MMeUeS1ApId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMMeUeS1ApId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidENbValidationError{
				field:  "MMeUeS1ApId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGUmmei()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UeidENbValidationError{
					field:  "GUmmei",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UeidENbValidationError{
					field:  "GUmmei",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGUmmei()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UeidENbValidationError{
				field:  "GUmmei",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.MENbUeX2ApId != nil {

		if all {
			switch v := interface{}(m.GetMENbUeX2ApId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidENbValidationError{
						field:  "MENbUeX2ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidENbValidationError{
						field:  "MENbUeX2ApId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMENbUeX2ApId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidENbValidationError{
					field:  "MENbUeX2ApId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MENbUeX2ApIdExtension != nil {

		if all {
			switch v := interface{}(m.GetMENbUeX2ApIdExtension()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidENbValidationError{
						field:  "MENbUeX2ApIdExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidENbValidationError{
						field:  "MENbUeX2ApIdExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMENbUeX2ApIdExtension()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidENbValidationError{
					field:  "MENbUeX2ApIdExtension",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GlobalEnbId != nil {

		if all {
			switch v := interface{}(m.GetGlobalEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UeidENbValidationError{
						field:  "GlobalEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UeidENbValidationError{
						field:  "GlobalEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UeidENbValidationError{
					field:  "GlobalEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UeidENbMultiError(errors)
	}

	return nil
}

// UeidENbMultiError is an error wrapping multiple validation errors returned
// by UeidENb.ValidateAll() if the designated constraints aren't met.
type UeidENbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UeidENbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UeidENbMultiError) AllErrors() []error { return m }

// UeidENbValidationError is the validation error returned by UeidENb.Validate
// if the designated constraints aren't met.
type UeidENbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeidENbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeidENbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeidENbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeidENbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeidENbValidationError) ErrorName() string { return "UeidENbValidationError" }

// Error satisfies the builtin error interface
func (e UeidENbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeidENb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeidENbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeidENbValidationError{}

// Validate checks the field values on EnbID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnbID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnbID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EnbIDMultiError, or nil if none found.
func (m *EnbID) ValidateAll() error {
	return m.validate(true)
}

func (m *EnbID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EnbId.(type) {

	case *EnbID_MacroENbId:

		if all {
			switch v := interface{}(m.GetMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIDValidationError{
						field:  "MacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIDValidationError{
						field:  "MacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIDValidationError{
					field:  "MacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbID_HomeENbId:

		if all {
			switch v := interface{}(m.GetHomeENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIDValidationError{
						field:  "HomeENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIDValidationError{
						field:  "HomeENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHomeENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIDValidationError{
					field:  "HomeENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbID_ShortMacroENbId:

		if all {
			switch v := interface{}(m.GetShortMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIDValidationError{
						field:  "ShortMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIDValidationError{
						field:  "ShortMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShortMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIDValidationError{
					field:  "ShortMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbID_LongMacroENbId:

		if all {
			switch v := interface{}(m.GetLongMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIDValidationError{
						field:  "LongMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIDValidationError{
						field:  "LongMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLongMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIDValidationError{
					field:  "LongMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnbIDMultiError(errors)
	}

	return nil
}

// EnbIDMultiError is an error wrapping multiple validation errors returned by
// EnbID.ValidateAll() if the designated constraints aren't met.
type EnbIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnbIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnbIDMultiError) AllErrors() []error { return m }

// EnbIDValidationError is the validation error returned by EnbID.Validate if
// the designated constraints aren't met.
type EnbIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIDValidationError) ErrorName() string { return "EnbIDValidationError" }

// Error satisfies the builtin error interface
func (e EnbIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIDValidationError{}

// Validate checks the field values on GlobalEnbID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalEnbID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalEnbID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalEnbIDMultiError, or
// nil if none found.
func (m *GlobalEnbID) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalEnbID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalEnbIDValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalEnbIDValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIDValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetENbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalEnbIDValidationError{
					field:  "ENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalEnbIDValidationError{
					field:  "ENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIDValidationError{
				field:  "ENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalEnbIDMultiError(errors)
	}

	return nil
}

// GlobalEnbIDMultiError is an error wrapping multiple validation errors
// returned by GlobalEnbID.ValidateAll() if the designated constraints aren't met.
type GlobalEnbIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalEnbIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalEnbIDMultiError) AllErrors() []error { return m }

// GlobalEnbIDValidationError is the validation error returned by
// GlobalEnbID.Validate if the designated constraints aren't met.
type GlobalEnbIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalEnbIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalEnbIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalEnbIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalEnbIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalEnbIDValidationError) ErrorName() string { return "GlobalEnbIDValidationError" }

// Error satisfies the builtin error interface
func (e GlobalEnbIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalEnbID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalEnbIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalEnbIDValidationError{}

// Validate checks the field values on Gummei with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Gummei) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Gummei with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GummeiMultiError, or nil if none found.
func (m *Gummei) ValidateAll() error {
	return m.validate(true)
}

func (m *Gummei) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GummeiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMMeGroupId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "MMeGroupId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "MMeGroupId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMMeGroupId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GummeiValidationError{
				field:  "MMeGroupId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMMeCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "MMeCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GummeiValidationError{
					field:  "MMeCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMMeCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GummeiValidationError{
				field:  "MMeCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GummeiMultiError(errors)
	}

	return nil
}

// GummeiMultiError is an error wrapping multiple validation errors returned by
// Gummei.ValidateAll() if the designated constraints aren't met.
type GummeiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GummeiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GummeiMultiError) AllErrors() []error { return m }

// GummeiValidationError is the validation error returned by Gummei.Validate if
// the designated constraints aren't met.
type GummeiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GummeiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GummeiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GummeiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GummeiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GummeiValidationError) ErrorName() string { return "GummeiValidationError" }

// Error satisfies the builtin error interface
func (e GummeiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGummei.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GummeiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GummeiValidationError{}

// Validate checks the field values on MmeGroupID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MmeGroupID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MmeGroupID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MmeGroupIDMultiError, or
// nil if none found.
func (m *MmeGroupID) ValidateAll() error {
	return m.validate(true)
}

func (m *MmeGroupID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 2 {
		err := MmeGroupIDValidationError{
			field:  "Value",
			reason: "value length must be 2 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MmeGroupIDMultiError(errors)
	}

	return nil
}

// MmeGroupIDMultiError is an error wrapping multiple validation errors
// returned by MmeGroupID.ValidateAll() if the designated constraints aren't met.
type MmeGroupIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MmeGroupIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MmeGroupIDMultiError) AllErrors() []error { return m }

// MmeGroupIDValidationError is the validation error returned by
// MmeGroupID.Validate if the designated constraints aren't met.
type MmeGroupIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MmeGroupIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MmeGroupIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MmeGroupIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MmeGroupIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MmeGroupIDValidationError) ErrorName() string { return "MmeGroupIDValidationError" }

// Error satisfies the builtin error interface
func (e MmeGroupIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMmeGroupID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MmeGroupIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MmeGroupIDValidationError{}

// Validate checks the field values on MmeCode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MmeCode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MmeCode with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MmeCodeMultiError, or nil if none found.
func (m *MmeCode) ValidateAll() error {
	return m.validate(true)
}

func (m *MmeCode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 1 {
		err := MmeCodeValidationError{
			field:  "Value",
			reason: "value length must be 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MmeCodeMultiError(errors)
	}

	return nil
}

// MmeCodeMultiError is an error wrapping multiple validation errors returned
// by MmeCode.ValidateAll() if the designated constraints aren't met.
type MmeCodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MmeCodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MmeCodeMultiError) AllErrors() []error { return m }

// MmeCodeValidationError is the validation error returned by MmeCode.Validate
// if the designated constraints aren't met.
type MmeCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MmeCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MmeCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MmeCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MmeCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MmeCodeValidationError) ErrorName() string { return "MmeCodeValidationError" }

// Error satisfies the builtin error interface
func (e MmeCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMmeCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MmeCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MmeCodeValidationError{}

// Validate checks the field values on MmeUES1ApID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MmeUES1ApID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MmeUES1ApID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MmeUES1ApIDMultiError, or
// nil if none found.
func (m *MmeUES1ApID) ValidateAll() error {
	return m.validate(true)
}

func (m *MmeUES1ApID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := MmeUES1ApIDValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MmeUES1ApIDMultiError(errors)
	}

	return nil
}

// MmeUES1ApIDMultiError is an error wrapping multiple validation errors
// returned by MmeUES1ApID.ValidateAll() if the designated constraints aren't met.
type MmeUES1ApIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MmeUES1ApIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MmeUES1ApIDMultiError) AllErrors() []error { return m }

// MmeUES1ApIDValidationError is the validation error returned by
// MmeUES1ApID.Validate if the designated constraints aren't met.
type MmeUES1ApIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MmeUES1ApIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MmeUES1ApIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MmeUES1ApIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MmeUES1ApIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MmeUES1ApIDValidationError) ErrorName() string { return "MmeUES1ApIDValidationError" }

// Error satisfies the builtin error interface
func (e MmeUES1ApIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMmeUES1ApID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MmeUES1ApIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MmeUES1ApIDValidationError{}

// Validate checks the field values on Qci with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Qci) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Qci with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QciMultiError, or nil if none found.
func (m *Qci) ValidateAll() error {
	return m.validate(true)
}

func (m *Qci) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 255 {
		err := QciValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QciMultiError(errors)
	}

	return nil
}

// QciMultiError is an error wrapping multiple validation errors returned by
// Qci.ValidateAll() if the designated constraints aren't met.
type QciMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QciMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QciMultiError) AllErrors() []error { return m }

// QciValidationError is the validation error returned by Qci.Validate if the
// designated constraints aren't met.
type QciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QciValidationError) ErrorName() string { return "QciValidationError" }

// Error satisfies the builtin error interface
func (e QciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QciValidationError{}

// Validate checks the field values on SubscriberProfileIdforRfp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscriberProfileIdforRfp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscriberProfileIdforRfp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscriberProfileIdforRfpMultiError, or nil if none found.
func (m *SubscriberProfileIdforRfp) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscriberProfileIdforRfp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 256 {
		err := SubscriberProfileIdforRfpValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SubscriberProfileIdforRfpMultiError(errors)
	}

	return nil
}

// SubscriberProfileIdforRfpMultiError is an error wrapping multiple validation
// errors returned by SubscriberProfileIdforRfp.ValidateAll() if the
// designated constraints aren't met.
type SubscriberProfileIdforRfpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriberProfileIdforRfpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriberProfileIdforRfpMultiError) AllErrors() []error { return m }

// SubscriberProfileIdforRfpValidationError is the validation error returned by
// SubscriberProfileIdforRfp.Validate if the designated constraints aren't met.
type SubscriberProfileIdforRfpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriberProfileIdforRfpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriberProfileIdforRfpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriberProfileIdforRfpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriberProfileIdforRfpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriberProfileIdforRfpValidationError) ErrorName() string {
	return "SubscriberProfileIdforRfpValidationError"
}

// Error satisfies the builtin error interface
func (e SubscriberProfileIdforRfpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriberProfileIdforRfp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriberProfileIdforRfpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriberProfileIdforRfpValidationError{}

// Validate checks the field values on EnGNbID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnGNbID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnGNbID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EnGNbIDMultiError, or nil if none found.
func (m *EnGNbID) ValidateAll() error {
	return m.validate(true)
}

func (m *EnGNbID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EnGnbId.(type) {

	case *EnGNbID_EnGNbId:

		if all {
			switch v := interface{}(m.GetEnGNbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnGNbIDValidationError{
						field:  "EnGNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnGNbIDValidationError{
						field:  "EnGNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnGNbIDValidationError{
					field:  "EnGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnGNbIDMultiError(errors)
	}

	return nil
}

// EnGNbIDMultiError is an error wrapping multiple validation errors returned
// by EnGNbID.ValidateAll() if the designated constraints aren't met.
type EnGNbIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnGNbIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnGNbIDMultiError) AllErrors() []error { return m }

// EnGNbIDValidationError is the validation error returned by EnGNbID.Validate
// if the designated constraints aren't met.
type EnGNbIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnGNbIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnGNbIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnGNbIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnGNbIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnGNbIDValidationError) ErrorName() string { return "EnGNbIDValidationError" }

// Error satisfies the builtin error interface
func (e EnGNbIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnGNbID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnGNbIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnGNbIDValidationError{}

// Validate checks the field values on EnbUEX2ApID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnbUEX2ApID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnbUEX2ApID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnbUEX2ApIDMultiError, or
// nil if none found.
func (m *EnbUEX2ApID) ValidateAll() error {
	return m.validate(true)
}

func (m *EnbUEX2ApID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4095 {
		err := EnbUEX2ApIDValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4095]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnbUEX2ApIDMultiError(errors)
	}

	return nil
}

// EnbUEX2ApIDMultiError is an error wrapping multiple validation errors
// returned by EnbUEX2ApID.ValidateAll() if the designated constraints aren't met.
type EnbUEX2ApIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnbUEX2ApIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnbUEX2ApIDMultiError) AllErrors() []error { return m }

// EnbUEX2ApIDValidationError is the validation error returned by
// EnbUEX2ApID.Validate if the designated constraints aren't met.
type EnbUEX2ApIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbUEX2ApIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbUEX2ApIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbUEX2ApIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbUEX2ApIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbUEX2ApIDValidationError) ErrorName() string { return "EnbUEX2ApIDValidationError" }

// Error satisfies the builtin error interface
func (e EnbUEX2ApIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbUEX2ApID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbUEX2ApIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbUEX2ApIDValidationError{}

// Validate checks the field values on EnbUEX2ApIDExtension with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnbUEX2ApIDExtension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnbUEX2ApIDExtension with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnbUEX2ApIDExtensionMultiError, or nil if none found.
func (m *EnbUEX2ApIDExtension) ValidateAll() error {
	return m.validate(true)
}

func (m *EnbUEX2ApIDExtension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4095 {
		err := EnbUEX2ApIDExtensionValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4095]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnbUEX2ApIDExtensionMultiError(errors)
	}

	return nil
}

// EnbUEX2ApIDExtensionMultiError is an error wrapping multiple validation
// errors returned by EnbUEX2ApIDExtension.ValidateAll() if the designated
// constraints aren't met.
type EnbUEX2ApIDExtensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnbUEX2ApIDExtensionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnbUEX2ApIDExtensionMultiError) AllErrors() []error { return m }

// EnbUEX2ApIDExtensionValidationError is the validation error returned by
// EnbUEX2ApIDExtension.Validate if the designated constraints aren't met.
type EnbUEX2ApIDExtensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbUEX2ApIDExtensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbUEX2ApIDExtensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbUEX2ApIDExtensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbUEX2ApIDExtensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbUEX2ApIDExtensionValidationError) ErrorName() string {
	return "EnbUEX2ApIDExtensionValidationError"
}

// Error satisfies the builtin error interface
func (e EnbUEX2ApIDExtensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbUEX2ApIDExtension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbUEX2ApIDExtensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbUEX2ApIDExtensionValidationError{}

// Validate checks the field values on EUTraARfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EUTraARfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EUTraARfcn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EUTraARfcnMultiError, or
// nil if none found.
func (m *EUTraARfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *EUTraARfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 65535 {
		err := EUTraARfcnValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EUTraARfcnMultiError(errors)
	}

	return nil
}

// EUTraARfcnMultiError is an error wrapping multiple validation errors
// returned by EUTraARfcn.ValidateAll() if the designated constraints aren't met.
type EUTraARfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EUTraARfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EUTraARfcnMultiError) AllErrors() []error { return m }

// EUTraARfcnValidationError is the validation error returned by
// EUTraARfcn.Validate if the designated constraints aren't met.
type EUTraARfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EUTraARfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EUTraARfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EUTraARfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EUTraARfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EUTraARfcnValidationError) ErrorName() string { return "EUTraARfcnValidationError" }

// Error satisfies the builtin error interface
func (e EUTraARfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEUTraARfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EUTraARfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EUTraARfcnValidationError{}

// Validate checks the field values on EUTraPCi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EUTraPCi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EUTraPCi with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EUTraPCiMultiError, or nil
// if none found.
func (m *EUTraPCi) ValidateAll() error {
	return m.validate(true)
}

func (m *EUTraPCi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 503 {
		err := EUTraPCiValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 503]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EUTraPCiMultiError(errors)
	}

	return nil
}

// EUTraPCiMultiError is an error wrapping multiple validation errors returned
// by EUTraPCi.ValidateAll() if the designated constraints aren't met.
type EUTraPCiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EUTraPCiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EUTraPCiMultiError) AllErrors() []error { return m }

// EUTraPCiValidationError is the validation error returned by
// EUTraPCi.Validate if the designated constraints aren't met.
type EUTraPCiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EUTraPCiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EUTraPCiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EUTraPCiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EUTraPCiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EUTraPCiValidationError) ErrorName() string { return "EUTraPCiValidationError" }

// Error satisfies the builtin error interface
func (e EUTraPCiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEUTraPCi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EUTraPCiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EUTraPCiValidationError{}

// Validate checks the field values on EUTraTAc with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EUTraTAc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EUTraTAc with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EUTraTAcMultiError, or nil
// if none found.
func (m *EUTraTAc) ValidateAll() error {
	return m.validate(true)
}

func (m *EUTraTAc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 2 {
		err := EUTraTAcValidationError{
			field:  "Value",
			reason: "value length must be 2 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EUTraTAcMultiError(errors)
	}

	return nil
}

// EUTraTAcMultiError is an error wrapping multiple validation errors returned
// by EUTraTAc.ValidateAll() if the designated constraints aren't met.
type EUTraTAcMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EUTraTAcMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EUTraTAcMultiError) AllErrors() []error { return m }

// EUTraTAcValidationError is the validation error returned by
// EUTraTAc.Validate if the designated constraints aren't met.
type EUTraTAcValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EUTraTAcValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EUTraTAcValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EUTraTAcValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EUTraTAcValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EUTraTAcValidationError) ErrorName() string { return "EUTraTAcValidationError" }

// Error satisfies the builtin error interface
func (e EUTraTAcValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEUTraTAc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EUTraTAcValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EUTraTAcValidationError{}

// Validate checks the field values on GlobalenGnbID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalenGnbID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalenGnbID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalenGnbIDMultiError, or
// nil if none found.
func (m *GlobalenGnbID) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalenGnbID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalenGnbIDValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalenGnbIDValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIDValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnGNbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalenGnbIDValidationError{
					field:  "EnGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalenGnbIDValidationError{
					field:  "EnGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIDValidationError{
				field:  "EnGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalenGnbIDMultiError(errors)
	}

	return nil
}

// GlobalenGnbIDMultiError is an error wrapping multiple validation errors
// returned by GlobalenGnbID.ValidateAll() if the designated constraints
// aren't met.
type GlobalenGnbIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalenGnbIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalenGnbIDMultiError) AllErrors() []error { return m }

// GlobalenGnbIDValidationError is the validation error returned by
// GlobalenGnbID.Validate if the designated constraints aren't met.
type GlobalenGnbIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalenGnbIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalenGnbIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalenGnbIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalenGnbIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalenGnbIDValidationError) ErrorName() string { return "GlobalenGnbIDValidationError" }

// Error satisfies the builtin error interface
func (e GlobalenGnbIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalenGnbID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalenGnbIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalenGnbIDValidationError{}

// Validate checks the field values on NgenbCUUEW1ApID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NgenbCUUEW1ApID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NgenbCUUEW1ApID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NgenbCUUEW1ApIDMultiError, or nil if none found.
func (m *NgenbCUUEW1ApID) ValidateAll() error {
	return m.validate(true)
}

func (m *NgenbCUUEW1ApID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := NgenbCUUEW1ApIDValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NgenbCUUEW1ApIDMultiError(errors)
	}

	return nil
}

// NgenbCUUEW1ApIDMultiError is an error wrapping multiple validation errors
// returned by NgenbCUUEW1ApID.ValidateAll() if the designated constraints
// aren't met.
type NgenbCUUEW1ApIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NgenbCUUEW1ApIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NgenbCUUEW1ApIDMultiError) AllErrors() []error { return m }

// NgenbCUUEW1ApIDValidationError is the validation error returned by
// NgenbCUUEW1ApID.Validate if the designated constraints aren't met.
type NgenbCUUEW1ApIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NgenbCUUEW1ApIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NgenbCUUEW1ApIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NgenbCUUEW1ApIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NgenbCUUEW1ApIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NgenbCUUEW1ApIDValidationError) ErrorName() string { return "NgenbCUUEW1ApIDValidationError" }

// Error satisfies the builtin error interface
func (e NgenbCUUEW1ApIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNgenbCUUEW1ApID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NgenbCUUEW1ApIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NgenbCUUEW1ApIDValidationError{}

// Validate checks the field values on NgenbDUID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NgenbDUID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NgenbDUID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NgenbDUIDMultiError, or nil
// if none found.
func (m *NgenbDUID) ValidateAll() error {
	return m.validate(true)
}

func (m *NgenbDUID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := NgenbDUIDValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NgenbDUIDMultiError(errors)
	}

	return nil
}

// NgenbDUIDMultiError is an error wrapping multiple validation errors returned
// by NgenbDUID.ValidateAll() if the designated constraints aren't met.
type NgenbDUIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NgenbDUIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NgenbDUIDMultiError) AllErrors() []error { return m }

// NgenbDUIDValidationError is the validation error returned by
// NgenbDUID.Validate if the designated constraints aren't met.
type NgenbDUIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NgenbDUIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NgenbDUIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NgenbDUIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NgenbDUIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NgenbDUIDValidationError) ErrorName() string { return "NgenbDUIDValidationError" }

// Error satisfies the builtin error interface
func (e NgenbDUIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNgenbDUID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NgenbDUIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NgenbDUIDValidationError{}

// Validate checks the field values on Amfpointer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Amfpointer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Amfpointer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AmfpointerMultiError, or
// nil if none found.
func (m *Amfpointer) ValidateAll() error {
	return m.validate(true)
}

func (m *Amfpointer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AmfpointerValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AmfpointerValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AmfpointerValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AmfpointerMultiError(errors)
	}

	return nil
}

// AmfpointerMultiError is an error wrapping multiple validation errors
// returned by Amfpointer.ValidateAll() if the designated constraints aren't met.
type AmfpointerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AmfpointerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AmfpointerMultiError) AllErrors() []error { return m }

// AmfpointerValidationError is the validation error returned by
// Amfpointer.Validate if the designated constraints aren't met.
type AmfpointerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AmfpointerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AmfpointerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AmfpointerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AmfpointerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AmfpointerValidationError) ErrorName() string { return "AmfpointerValidationError" }

// Error satisfies the builtin error interface
func (e AmfpointerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAmfpointer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AmfpointerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AmfpointerValidationError{}

// Validate checks the field values on AmfregionId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AmfregionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AmfregionId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AmfregionIdMultiError, or
// nil if none found.
func (m *AmfregionId) ValidateAll() error {
	return m.validate(true)
}

func (m *AmfregionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AmfregionIdValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AmfregionIdValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AmfregionIdValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AmfregionIdMultiError(errors)
	}

	return nil
}

// AmfregionIdMultiError is an error wrapping multiple validation errors
// returned by AmfregionId.ValidateAll() if the designated constraints aren't met.
type AmfregionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AmfregionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AmfregionIdMultiError) AllErrors() []error { return m }

// AmfregionIdValidationError is the validation error returned by
// AmfregionId.Validate if the designated constraints aren't met.
type AmfregionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AmfregionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AmfregionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AmfregionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AmfregionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AmfregionIdValidationError) ErrorName() string { return "AmfregionIdValidationError" }

// Error satisfies the builtin error interface
func (e AmfregionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAmfregionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AmfregionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AmfregionIdValidationError{}

// Validate checks the field values on AmfsetId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AmfsetId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AmfsetId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AmfsetIdMultiError, or nil
// if none found.
func (m *AmfsetId) ValidateAll() error {
	return m.validate(true)
}

func (m *AmfsetId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AmfsetIdValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AmfsetIdValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AmfsetIdValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AmfsetIdMultiError(errors)
	}

	return nil
}

// AmfsetIdMultiError is an error wrapping multiple validation errors returned
// by AmfsetId.ValidateAll() if the designated constraints aren't met.
type AmfsetIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AmfsetIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AmfsetIdMultiError) AllErrors() []error { return m }

// AmfsetIdValidationError is the validation error returned by
// AmfsetId.Validate if the designated constraints aren't met.
type AmfsetIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AmfsetIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AmfsetIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AmfsetIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AmfsetIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AmfsetIdValidationError) ErrorName() string { return "AmfsetIdValidationError" }

// Error satisfies the builtin error interface
func (e AmfsetIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAmfsetId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AmfsetIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AmfsetIdValidationError{}

// Validate checks the field values on AmfUENGapID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AmfUENGapID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AmfUENGapID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AmfUENGapIDMultiError, or
// nil if none found.
func (m *AmfUENGapID) ValidateAll() error {
	return m.validate(true)
}

func (m *AmfUENGapID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 1099511627775 {
		err := AmfUENGapIDValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 1099511627775]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AmfUENGapIDMultiError(errors)
	}

	return nil
}

// AmfUENGapIDMultiError is an error wrapping multiple validation errors
// returned by AmfUENGapID.ValidateAll() if the designated constraints aren't met.
type AmfUENGapIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AmfUENGapIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AmfUENGapIDMultiError) AllErrors() []error { return m }

// AmfUENGapIDValidationError is the validation error returned by
// AmfUENGapID.Validate if the designated constraints aren't met.
type AmfUENGapIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AmfUENGapIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AmfUENGapIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AmfUENGapIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AmfUENGapIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AmfUENGapIDValidationError) ErrorName() string { return "AmfUENGapIDValidationError" }

// Error satisfies the builtin error interface
func (e AmfUENGapIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAmfUENGapID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AmfUENGapIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AmfUENGapIDValidationError{}

// Validate checks the field values on EutracellIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EutracellIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EutracellIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EutracellIdentityMultiError, or nil if none found.
func (m *EutracellIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *EutracellIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EutracellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EutracellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EutracellIdentityMultiError(errors)
	}

	return nil
}

// EutracellIdentityMultiError is an error wrapping multiple validation errors
// returned by EutracellIdentity.ValidateAll() if the designated constraints
// aren't met.
type EutracellIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EutracellIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EutracellIdentityMultiError) AllErrors() []error { return m }

// EutracellIdentityValidationError is the validation error returned by
// EutracellIdentity.Validate if the designated constraints aren't met.
type EutracellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutracellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutracellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutracellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutracellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutracellIdentityValidationError) ErrorName() string {
	return "EutracellIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e EutracellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutracellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutracellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutracellIdentityValidationError{}

// Validate checks the field values on EutraCGi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EutraCGi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EutraCGi with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EutraCGiMultiError, or nil
// if none found.
func (m *EutraCGi) ValidateAll() error {
	return m.validate(true)
}

func (m *EutraCGi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EutraCGiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EutraCGiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutraCGiValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEUtracellIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EutraCGiValidationError{
					field:  "EUtracellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EutraCGiValidationError{
					field:  "EUtracellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEUtracellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutraCGiValidationError{
				field:  "EUtracellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EutraCGiMultiError(errors)
	}

	return nil
}

// EutraCGiMultiError is an error wrapping multiple validation errors returned
// by EutraCGi.ValidateAll() if the designated constraints aren't met.
type EutraCGiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EutraCGiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EutraCGiMultiError) AllErrors() []error { return m }

// EutraCGiValidationError is the validation error returned by
// EutraCGi.Validate if the designated constraints aren't met.
type EutraCGiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutraCGiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutraCGiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutraCGiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutraCGiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutraCGiValidationError) ErrorName() string { return "EutraCGiValidationError" }

// Error satisfies the builtin error interface
func (e EutraCGiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutraCGi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutraCGiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutraCGiValidationError{}

// Validate checks the field values on FiveQi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FiveQi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FiveQi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FiveQiMultiError, or nil if none found.
func (m *FiveQi) ValidateAll() error {
	return m.validate(true)
}

func (m *FiveQi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 255 {
		err := FiveQiValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FiveQiMultiError(errors)
	}

	return nil
}

// FiveQiMultiError is an error wrapping multiple validation errors returned by
// FiveQi.ValidateAll() if the designated constraints aren't met.
type FiveQiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FiveQiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FiveQiMultiError) AllErrors() []error { return m }

// FiveQiValidationError is the validation error returned by FiveQi.Validate if
// the designated constraints aren't met.
type FiveQiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FiveQiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FiveQiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FiveQiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FiveQiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FiveQiValidationError) ErrorName() string { return "FiveQiValidationError" }

// Error satisfies the builtin error interface
func (e FiveQiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFiveQi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FiveQiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FiveQiValidationError{}

// Validate checks the field values on GlobalGnbID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalGnbID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalGnbID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalGnbIDMultiError, or
// nil if none found.
func (m *GlobalGnbID) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalGnbID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalGnbIDValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalGnbIDValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalGnbIDValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalGnbIDValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalGnbIDValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalGnbIDValidationError{
				field:  "GNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalGnbIDMultiError(errors)
	}

	return nil
}

// GlobalGnbIDMultiError is an error wrapping multiple validation errors
// returned by GlobalGnbID.ValidateAll() if the designated constraints aren't met.
type GlobalGnbIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalGnbIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalGnbIDMultiError) AllErrors() []error { return m }

// GlobalGnbIDValidationError is the validation error returned by
// GlobalGnbID.Validate if the designated constraints aren't met.
type GlobalGnbIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalGnbIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalGnbIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalGnbIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalGnbIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalGnbIDValidationError) ErrorName() string { return "GlobalGnbIDValidationError" }

// Error satisfies the builtin error interface
func (e GlobalGnbIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalGnbID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalGnbIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalGnbIDValidationError{}

// Validate checks the field values on GlobalNgEnbID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalNgEnbID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalNgEnbID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalNgEnbIDMultiError, or
// nil if none found.
func (m *GlobalNgEnbID) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalNgEnbID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalNgEnbIDValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalNgEnbIDValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalNgEnbIDValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNgEnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalNgEnbIDValidationError{
					field:  "NgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalNgEnbIDValidationError{
					field:  "NgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNgEnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalNgEnbIDValidationError{
				field:  "NgEnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalNgEnbIDMultiError(errors)
	}

	return nil
}

// GlobalNgEnbIDMultiError is an error wrapping multiple validation errors
// returned by GlobalNgEnbID.ValidateAll() if the designated constraints
// aren't met.
type GlobalNgEnbIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalNgEnbIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalNgEnbIDMultiError) AllErrors() []error { return m }

// GlobalNgEnbIDValidationError is the validation error returned by
// GlobalNgEnbID.Validate if the designated constraints aren't met.
type GlobalNgEnbIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalNgEnbIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalNgEnbIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalNgEnbIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalNgEnbIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalNgEnbIDValidationError) ErrorName() string { return "GlobalNgEnbIDValidationError" }

// Error satisfies the builtin error interface
func (e GlobalNgEnbIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalNgEnbID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalNgEnbIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalNgEnbIDValidationError{}

// Validate checks the field values on GnbID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GnbIDMultiError, or nil if none found.
func (m *GnbID) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.GnbId.(type) {

	case *GnbID_GNbId:

		if all {
			switch v := interface{}(m.GetGNbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GnbIDValidationError{
						field:  "GNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GnbIDValidationError{
						field:  "GNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GnbIDValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GnbIDMultiError(errors)
	}

	return nil
}

// GnbIDMultiError is an error wrapping multiple validation errors returned by
// GnbID.ValidateAll() if the designated constraints aren't met.
type GnbIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbIDMultiError) AllErrors() []error { return m }

// GnbIDValidationError is the validation error returned by GnbID.Validate if
// the designated constraints aren't met.
type GnbIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbIDValidationError) ErrorName() string { return "GnbIDValidationError" }

// Error satisfies the builtin error interface
func (e GnbIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbIDValidationError{}

// Validate checks the field values on Guami with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Guami) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Guami with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GuamiMultiError, or nil if none found.
func (m *Guami) ValidateAll() error {
	return m.validate(true)
}

func (m *Guami) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuamiValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAMfregionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfregionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfregionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAMfregionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuamiValidationError{
				field:  "AMfregionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAMfsetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfsetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfsetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAMfsetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuamiValidationError{
				field:  "AMfsetId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAMfpointer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfpointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GuamiValidationError{
					field:  "AMfpointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAMfpointer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuamiValidationError{
				field:  "AMfpointer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GuamiMultiError(errors)
	}

	return nil
}

// GuamiMultiError is an error wrapping multiple validation errors returned by
// Guami.ValidateAll() if the designated constraints aren't met.
type GuamiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GuamiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GuamiMultiError) AllErrors() []error { return m }

// GuamiValidationError is the validation error returned by Guami.Validate if
// the designated constraints aren't met.
type GuamiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuamiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuamiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuamiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuamiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuamiValidationError) ErrorName() string { return "GuamiValidationError" }

// Error satisfies the builtin error interface
func (e GuamiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuami.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuamiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuamiValidationError{}

// Validate checks the field values on IndexToRfsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexToRfsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexToRfsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexToRfspMultiError, or
// nil if none found.
func (m *IndexToRfsp) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexToRfsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 1 || val > 256 {
		err := IndexToRfspValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IndexToRfspMultiError(errors)
	}

	return nil
}

// IndexToRfspMultiError is an error wrapping multiple validation errors
// returned by IndexToRfsp.ValidateAll() if the designated constraints aren't met.
type IndexToRfspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexToRfspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexToRfspMultiError) AllErrors() []error { return m }

// IndexToRfspValidationError is the validation error returned by
// IndexToRfsp.Validate if the designated constraints aren't met.
type IndexToRfspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexToRfspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexToRfspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexToRfspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexToRfspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexToRfspValidationError) ErrorName() string { return "IndexToRfspValidationError" }

// Error satisfies the builtin error interface
func (e IndexToRfspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexToRfsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexToRfspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexToRfspValidationError{}

// Validate checks the field values on NgEnbID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NgEnbID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NgEnbID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NgEnbIDMultiError, or nil if none found.
func (m *NgEnbID) ValidateAll() error {
	return m.validate(true)
}

func (m *NgEnbID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.NgEnbId.(type) {

	case *NgEnbID_MacroNgEnbId:

		if all {
			switch v := interface{}(m.GetMacroNgEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NgEnbIDValidationError{
						field:  "MacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NgEnbIDValidationError{
						field:  "MacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMacroNgEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NgEnbIDValidationError{
					field:  "MacroNgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NgEnbID_ShortMacroNgEnbId:

		if all {
			switch v := interface{}(m.GetShortMacroNgEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NgEnbIDValidationError{
						field:  "ShortMacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NgEnbIDValidationError{
						field:  "ShortMacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShortMacroNgEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NgEnbIDValidationError{
					field:  "ShortMacroNgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NgEnbID_LongMacroNgEnbId:

		if all {
			switch v := interface{}(m.GetLongMacroNgEnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NgEnbIDValidationError{
						field:  "LongMacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NgEnbIDValidationError{
						field:  "LongMacroNgEnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLongMacroNgEnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NgEnbIDValidationError{
					field:  "LongMacroNgEnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NgEnbIDMultiError(errors)
	}

	return nil
}

// NgEnbIDMultiError is an error wrapping multiple validation errors returned
// by NgEnbID.ValidateAll() if the designated constraints aren't met.
type NgEnbIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NgEnbIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NgEnbIDMultiError) AllErrors() []error { return m }

// NgEnbIDValidationError is the validation error returned by NgEnbID.Validate
// if the designated constraints aren't met.
type NgEnbIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NgEnbIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NgEnbIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NgEnbIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NgEnbIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NgEnbIDValidationError) ErrorName() string { return "NgEnbIDValidationError" }

// Error satisfies the builtin error interface
func (e NgEnbIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNgEnbID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NgEnbIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NgEnbIDValidationError{}

// Validate checks the field values on NrcellIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrcellIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrcellIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NrcellIdentityMultiError,
// or nil if none found.
func (m *NrcellIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *NrcellIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrcellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrcellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrcellIdentityMultiError(errors)
	}

	return nil
}

// NrcellIdentityMultiError is an error wrapping multiple validation errors
// returned by NrcellIdentity.ValidateAll() if the designated constraints
// aren't met.
type NrcellIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrcellIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrcellIdentityMultiError) AllErrors() []error { return m }

// NrcellIdentityValidationError is the validation error returned by
// NrcellIdentity.Validate if the designated constraints aren't met.
type NrcellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcellIdentityValidationError) ErrorName() string { return "NrcellIdentityValidationError" }

// Error satisfies the builtin error interface
func (e NrcellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcellIdentityValidationError{}

// Validate checks the field values on NrCGi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrCGi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrCGi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrCGiMultiError, or nil if none found.
func (m *NrCGi) ValidateAll() error {
	return m.validate(true)
}

func (m *NrCGi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnidentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrCGiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrCGiValidationError{
					field:  "PLmnidentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnidentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrCGiValidationError{
				field:  "PLmnidentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNRcellIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrCGiValidationError{
					field:  "NRcellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrCGiValidationError{
					field:  "NRcellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNRcellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrCGiValidationError{
				field:  "NRcellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrCGiMultiError(errors)
	}

	return nil
}

// NrCGiMultiError is an error wrapping multiple validation errors returned by
// NrCGi.ValidateAll() if the designated constraints aren't met.
type NrCGiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrCGiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrCGiMultiError) AllErrors() []error { return m }

// NrCGiValidationError is the validation error returned by NrCGi.Validate if
// the designated constraints aren't met.
type NrCGiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrCGiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrCGiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrCGiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrCGiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrCGiValidationError) ErrorName() string { return "NrCGiValidationError" }

// Error satisfies the builtin error interface
func (e NrCGiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrCGi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrCGiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrCGiValidationError{}

// Validate checks the field values on Plmnidentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plmnidentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plmnidentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlmnidentityMultiError, or
// nil if none found.
func (m *Plmnidentity) ValidateAll() error {
	return m.validate(true)
}

func (m *Plmnidentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 3 {
		err := PlmnidentityValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PlmnidentityMultiError(errors)
	}

	return nil
}

// PlmnidentityMultiError is an error wrapping multiple validation errors
// returned by Plmnidentity.ValidateAll() if the designated constraints aren't met.
type PlmnidentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlmnidentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlmnidentityMultiError) AllErrors() []error { return m }

// PlmnidentityValidationError is the validation error returned by
// Plmnidentity.Validate if the designated constraints aren't met.
type PlmnidentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnidentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnidentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnidentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnidentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnidentityValidationError) ErrorName() string { return "PlmnidentityValidationError" }

// Error satisfies the builtin error interface
func (e PlmnidentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnidentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnidentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnidentityValidationError{}

// Validate checks the field values on QosFlowIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QosFlowIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QosFlowIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QosFlowIdentifierMultiError, or nil if none found.
func (m *QosFlowIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *QosFlowIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 63 {
		err := QosFlowIdentifierValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 63]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QosFlowIdentifierMultiError(errors)
	}

	return nil
}

// QosFlowIdentifierMultiError is an error wrapping multiple validation errors
// returned by QosFlowIdentifier.ValidateAll() if the designated constraints
// aren't met.
type QosFlowIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QosFlowIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QosFlowIdentifierMultiError) AllErrors() []error { return m }

// QosFlowIdentifierValidationError is the validation error returned by
// QosFlowIdentifier.Validate if the designated constraints aren't met.
type QosFlowIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QosFlowIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QosFlowIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QosFlowIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QosFlowIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QosFlowIdentifierValidationError) ErrorName() string {
	return "QosFlowIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e QosFlowIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQosFlowIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QosFlowIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QosFlowIdentifierValidationError{}

// Validate checks the field values on Sd with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sd with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SdMultiError, or nil if none found.
func (m *Sd) ValidateAll() error {
	return m.validate(true)
}

func (m *Sd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 3 {
		err := SdValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SdMultiError(errors)
	}

	return nil
}

// SdMultiError is an error wrapping multiple validation errors returned by
// Sd.ValidateAll() if the designated constraints aren't met.
type SdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SdMultiError) AllErrors() []error { return m }

// SdValidationError is the validation error returned by Sd.Validate if the
// designated constraints aren't met.
type SdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SdValidationError) ErrorName() string { return "SdValidationError" }

// Error satisfies the builtin error interface
func (e SdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SdValidationError{}

// Validate checks the field values on SNSsai with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SNSsai) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SNSsai with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SNSsaiMultiError, or nil if none found.
func (m *SNSsai) ValidateAll() error {
	return m.validate(true)
}

func (m *SNSsai) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSSt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SNSsaiValidationError{
					field:  "SSt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SNSsaiValidationError{
					field:  "SSt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSSt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SNSsaiValidationError{
				field:  "SSt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.SD != nil {

		if all {
			switch v := interface{}(m.GetSD()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SNSsaiValidationError{
						field:  "SD",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SNSsaiValidationError{
						field:  "SD",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSD()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SNSsaiValidationError{
					field:  "SD",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SNSsaiMultiError(errors)
	}

	return nil
}

// SNSsaiMultiError is an error wrapping multiple validation errors returned by
// SNSsai.ValidateAll() if the designated constraints aren't met.
type SNSsaiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SNSsaiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SNSsaiMultiError) AllErrors() []error { return m }

// SNSsaiValidationError is the validation error returned by SNSsai.Validate if
// the designated constraints aren't met.
type SNSsaiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SNSsaiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SNSsaiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SNSsaiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SNSsaiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SNSsaiValidationError) ErrorName() string { return "SNSsaiValidationError" }

// Error satisfies the builtin error interface
func (e SNSsaiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSNSsai.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SNSsaiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SNSsaiValidationError{}

// Validate checks the field values on Sst with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sst with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SstMultiError, or nil if none found.
func (m *Sst) ValidateAll() error {
	return m.validate(true)
}

func (m *Sst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 1 {
		err := SstValidationError{
			field:  "Value",
			reason: "value length must be 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SstMultiError(errors)
	}

	return nil
}

// SstMultiError is an error wrapping multiple validation errors returned by
// Sst.ValidateAll() if the designated constraints aren't met.
type SstMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SstMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SstMultiError) AllErrors() []error { return m }

// SstValidationError is the validation error returned by Sst.Validate if the
// designated constraints aren't met.
type SstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SstValidationError) ErrorName() string { return "SstValidationError" }

// Error satisfies the builtin error interface
func (e SstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SstValidationError{}

// Validate checks the field values on NgRAnnodeUexnApid with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NgRAnnodeUexnApid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NgRAnnodeUexnApid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NgRAnnodeUexnApidMultiError, or nil if none found.
func (m *NgRAnnodeUexnApid) ValidateAll() error {
	return m.validate(true)
}

func (m *NgRAnnodeUexnApid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := NgRAnnodeUexnApidValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NgRAnnodeUexnApidMultiError(errors)
	}

	return nil
}

// NgRAnnodeUexnApidMultiError is an error wrapping multiple validation errors
// returned by NgRAnnodeUexnApid.ValidateAll() if the designated constraints
// aren't met.
type NgRAnnodeUexnApidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NgRAnnodeUexnApidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NgRAnnodeUexnApidMultiError) AllErrors() []error { return m }

// NgRAnnodeUexnApidValidationError is the validation error returned by
// NgRAnnodeUexnApid.Validate if the designated constraints aren't met.
type NgRAnnodeUexnApidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NgRAnnodeUexnApidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NgRAnnodeUexnApidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NgRAnnodeUexnApidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NgRAnnodeUexnApidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NgRAnnodeUexnApidValidationError) ErrorName() string {
	return "NgRAnnodeUexnApidValidationError"
}

// Error satisfies the builtin error interface
func (e NgRAnnodeUexnApidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNgRAnnodeUexnApid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NgRAnnodeUexnApidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NgRAnnodeUexnApidValidationError{}

// Validate checks the field values on GlobalNgrannodeId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GlobalNgrannodeId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalNgrannodeId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalNgrannodeIdMultiError, or nil if none found.
func (m *GlobalNgrannodeId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalNgrannodeId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.GlobalNgrannodeId.(type) {

	case *GlobalNgrannodeId_GNb:

		if all {
			switch v := interface{}(m.GetGNb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalNgrannodeIdValidationError{
						field:  "GNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalNgrannodeIdValidationError{
						field:  "GNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalNgrannodeIdValidationError{
					field:  "GNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalNgrannodeId_NgENb:

		if all {
			switch v := interface{}(m.GetNgENb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalNgrannodeIdValidationError{
						field:  "NgENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalNgrannodeIdValidationError{
						field:  "NgENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNgENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalNgrannodeIdValidationError{
					field:  "NgENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GlobalNgrannodeIdMultiError(errors)
	}

	return nil
}

// GlobalNgrannodeIdMultiError is an error wrapping multiple validation errors
// returned by GlobalNgrannodeId.ValidateAll() if the designated constraints
// aren't met.
type GlobalNgrannodeIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalNgrannodeIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalNgrannodeIdMultiError) AllErrors() []error { return m }

// GlobalNgrannodeIdValidationError is the validation error returned by
// GlobalNgrannodeId.Validate if the designated constraints aren't met.
type GlobalNgrannodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalNgrannodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalNgrannodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalNgrannodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalNgrannodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalNgrannodeIdValidationError) ErrorName() string {
	return "GlobalNgrannodeIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalNgrannodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalNgrannodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalNgrannodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalNgrannodeIdValidationError{}

// Validate checks the field values on GnbCUCPUEE1ApID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GnbCUCPUEE1ApID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCUCPUEE1ApID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GnbCUCPUEE1ApIDMultiError, or nil if none found.
func (m *GnbCUCPUEE1ApID) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCUCPUEE1ApID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := GnbCUCPUEE1ApIDValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCUCPUEE1ApIDMultiError(errors)
	}

	return nil
}

// GnbCUCPUEE1ApIDMultiError is an error wrapping multiple validation errors
// returned by GnbCUCPUEE1ApID.ValidateAll() if the designated constraints
// aren't met.
type GnbCUCPUEE1ApIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCUCPUEE1ApIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCUCPUEE1ApIDMultiError) AllErrors() []error { return m }

// GnbCUCPUEE1ApIDValidationError is the validation error returned by
// GnbCUCPUEE1ApID.Validate if the designated constraints aren't met.
type GnbCUCPUEE1ApIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCUCPUEE1ApIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCUCPUEE1ApIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCUCPUEE1ApIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCUCPUEE1ApIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCUCPUEE1ApIDValidationError) ErrorName() string { return "GnbCUCPUEE1ApIDValidationError" }

// Error satisfies the builtin error interface
func (e GnbCUCPUEE1ApIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCUCPUEE1ApID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCUCPUEE1ApIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCUCPUEE1ApIDValidationError{}

// Validate checks the field values on GnbCUUPID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbCUUPID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCUUPID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbCUUPIDMultiError, or nil
// if none found.
func (m *GnbCUUPID) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCUUPID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := GnbCUUPIDValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCUUPIDMultiError(errors)
	}

	return nil
}

// GnbCUUPIDMultiError is an error wrapping multiple validation errors returned
// by GnbCUUPID.ValidateAll() if the designated constraints aren't met.
type GnbCUUPIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCUUPIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCUUPIDMultiError) AllErrors() []error { return m }

// GnbCUUPIDValidationError is the validation error returned by
// GnbCUUPID.Validate if the designated constraints aren't met.
type GnbCUUPIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCUUPIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCUUPIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCUUPIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCUUPIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCUUPIDValidationError) ErrorName() string { return "GnbCUUPIDValidationError" }

// Error satisfies the builtin error interface
func (e GnbCUUPIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCUUPID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCUUPIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCUUPIDValidationError{}

// Validate checks the field values on FiveGsTAc with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FiveGsTAc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FiveGsTAc with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FiveGsTAcMultiError, or nil
// if none found.
func (m *FiveGsTAc) ValidateAll() error {
	return m.validate(true)
}

func (m *FiveGsTAc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 3 {
		err := FiveGsTAcValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FiveGsTAcMultiError(errors)
	}

	return nil
}

// FiveGsTAcMultiError is an error wrapping multiple validation errors returned
// by FiveGsTAc.ValidateAll() if the designated constraints aren't met.
type FiveGsTAcMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FiveGsTAcMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FiveGsTAcMultiError) AllErrors() []error { return m }

// FiveGsTAcValidationError is the validation error returned by
// FiveGsTAc.Validate if the designated constraints aren't met.
type FiveGsTAcValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FiveGsTAcValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FiveGsTAcValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FiveGsTAcValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FiveGsTAcValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FiveGsTAcValidationError) ErrorName() string { return "FiveGsTAcValidationError" }

// Error satisfies the builtin error interface
func (e FiveGsTAcValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFiveGsTAc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FiveGsTAcValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FiveGsTAcValidationError{}

// Validate checks the field values on FreqBandNrItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FreqBandNrItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreqBandNrItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FreqBandNrItemMultiError,
// or nil if none found.
func (m *FreqBandNrItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FreqBandNrItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreqBandIndicatorNr

	if len(errors) > 0 {
		return FreqBandNrItemMultiError(errors)
	}

	return nil
}

// FreqBandNrItemMultiError is an error wrapping multiple validation errors
// returned by FreqBandNrItem.ValidateAll() if the designated constraints
// aren't met.
type FreqBandNrItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreqBandNrItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreqBandNrItemMultiError) AllErrors() []error { return m }

// FreqBandNrItemValidationError is the validation error returned by
// FreqBandNrItem.Validate if the designated constraints aren't met.
type FreqBandNrItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreqBandNrItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreqBandNrItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreqBandNrItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreqBandNrItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreqBandNrItemValidationError) ErrorName() string { return "FreqBandNrItemValidationError" }

// Error satisfies the builtin error interface
func (e FreqBandNrItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreqBandNrItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreqBandNrItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreqBandNrItemValidationError{}

// Validate checks the field values on GnbCUUEF1ApID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbCUUEF1ApID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCUUEF1ApID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbCUUEF1ApIDMultiError, or
// nil if none found.
func (m *GnbCUUEF1ApID) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCUUEF1ApID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := GnbCUUEF1ApIDValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCUUEF1ApIDMultiError(errors)
	}

	return nil
}

// GnbCUUEF1ApIDMultiError is an error wrapping multiple validation errors
// returned by GnbCUUEF1ApID.ValidateAll() if the designated constraints
// aren't met.
type GnbCUUEF1ApIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCUUEF1ApIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCUUEF1ApIDMultiError) AllErrors() []error { return m }

// GnbCUUEF1ApIDValidationError is the validation error returned by
// GnbCUUEF1ApID.Validate if the designated constraints aren't met.
type GnbCUUEF1ApIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCUUEF1ApIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCUUEF1ApIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCUUEF1ApIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCUUEF1ApIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCUUEF1ApIDValidationError) ErrorName() string { return "GnbCUUEF1ApIDValidationError" }

// Error satisfies the builtin error interface
func (e GnbCUUEF1ApIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCUUEF1ApID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCUUEF1ApIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCUUEF1ApIDValidationError{}

// Validate checks the field values on GnbDUID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbDUID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbDUID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GnbDUIDMultiError, or nil if none found.
func (m *GnbDUID) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbDUID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := GnbDUIDValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbDUIDMultiError(errors)
	}

	return nil
}

// GnbDUIDMultiError is an error wrapping multiple validation errors returned
// by GnbDUID.ValidateAll() if the designated constraints aren't met.
type GnbDUIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbDUIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbDUIDMultiError) AllErrors() []error { return m }

// GnbDUIDValidationError is the validation error returned by GnbDUID.Validate
// if the designated constraints aren't met.
type GnbDUIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDUIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDUIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDUIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDUIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDUIDValidationError) ErrorName() string { return "GnbDUIDValidationError" }

// Error satisfies the builtin error interface
func (e GnbDUIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDUID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDUIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDUIDValidationError{}

// Validate checks the field values on NrPCi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrPCi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrPCi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrPCiMultiError, or nil if none found.
func (m *NrPCi) ValidateAll() error {
	return m.validate(true)
}

func (m *NrPCi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 1007 {
		err := NrPCiValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 1007]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NrPCiMultiError(errors)
	}

	return nil
}

// NrPCiMultiError is an error wrapping multiple validation errors returned by
// NrPCi.ValidateAll() if the designated constraints aren't met.
type NrPCiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrPCiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrPCiMultiError) AllErrors() []error { return m }

// NrPCiValidationError is the validation error returned by NrPCi.Validate if
// the designated constraints aren't met.
type NrPCiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrPCiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrPCiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrPCiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrPCiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrPCiValidationError) ErrorName() string { return "NrPCiValidationError" }

// Error satisfies the builtin error interface
func (e NrPCiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrPCi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrPCiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrPCiValidationError{}

// Validate checks the field values on NrARfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrARfcn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrARfcn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrARfcnMultiError, or nil if none found.
func (m *NrARfcn) ValidateAll() error {
	return m.validate(true)
}

func (m *NrARfcn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NRarfcn

	if len(errors) > 0 {
		return NrARfcnMultiError(errors)
	}

	return nil
}

// NrARfcnMultiError is an error wrapping multiple validation errors returned
// by NrARfcn.ValidateAll() if the designated constraints aren't met.
type NrARfcnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrARfcnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrARfcnMultiError) AllErrors() []error { return m }

// NrARfcnValidationError is the validation error returned by NrARfcn.Validate
// if the designated constraints aren't met.
type NrARfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrARfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrARfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrARfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrARfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrARfcnValidationError) ErrorName() string { return "NrARfcnValidationError" }

// Error satisfies the builtin error interface
func (e NrARfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrARfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrARfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrARfcnValidationError{}

// Validate checks the field values on NrfrequencyBandList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NrfrequencyBandList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrfrequencyBandList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NrfrequencyBandListMultiError, or nil if none found.
func (m *NrfrequencyBandList) ValidateAll() error {
	return m.validate(true)
}

func (m *NrfrequencyBandList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 32 {
		err := NrfrequencyBandListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 32 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NrfrequencyBandListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NrfrequencyBandListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NrfrequencyBandListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NrfrequencyBandListMultiError(errors)
	}

	return nil
}

// NrfrequencyBandListMultiError is an error wrapping multiple validation
// errors returned by NrfrequencyBandList.ValidateAll() if the designated
// constraints aren't met.
type NrfrequencyBandListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrfrequencyBandListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrfrequencyBandListMultiError) AllErrors() []error { return m }

// NrfrequencyBandListValidationError is the validation error returned by
// NrfrequencyBandList.Validate if the designated constraints aren't met.
type NrfrequencyBandListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrfrequencyBandListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrfrequencyBandListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrfrequencyBandListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrfrequencyBandListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrfrequencyBandListValidationError) ErrorName() string {
	return "NrfrequencyBandListValidationError"
}

// Error satisfies the builtin error interface
func (e NrfrequencyBandListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrfrequencyBandList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrfrequencyBandListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrfrequencyBandListValidationError{}

// Validate checks the field values on NrfrequencyBandItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NrfrequencyBandItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrfrequencyBandItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NrfrequencyBandItemMultiError, or nil if none found.
func (m *NrfrequencyBandItem) ValidateAll() error {
	return m.validate(true)
}

func (m *NrfrequencyBandItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreqBandIndicatorNr

	if all {
		switch v := interface{}(m.GetSupportedSulbandList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrfrequencyBandItemValidationError{
					field:  "SupportedSulbandList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrfrequencyBandItemValidationError{
					field:  "SupportedSulbandList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupportedSulbandList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrfrequencyBandItemValidationError{
				field:  "SupportedSulbandList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrfrequencyBandItemMultiError(errors)
	}

	return nil
}

// NrfrequencyBandItemMultiError is an error wrapping multiple validation
// errors returned by NrfrequencyBandItem.ValidateAll() if the designated
// constraints aren't met.
type NrfrequencyBandItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrfrequencyBandItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrfrequencyBandItemMultiError) AllErrors() []error { return m }

// NrfrequencyBandItemValidationError is the validation error returned by
// NrfrequencyBandItem.Validate if the designated constraints aren't met.
type NrfrequencyBandItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrfrequencyBandItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrfrequencyBandItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrfrequencyBandItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrfrequencyBandItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrfrequencyBandItemValidationError) ErrorName() string {
	return "NrfrequencyBandItemValidationError"
}

// Error satisfies the builtin error interface
func (e NrfrequencyBandItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrfrequencyBandItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrfrequencyBandItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrfrequencyBandItemValidationError{}

// Validate checks the field values on NrfrequencyInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NrfrequencyInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrfrequencyInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NrfrequencyInfoMultiError, or nil if none found.
func (m *NrfrequencyInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NrfrequencyInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNrArfcn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrfrequencyInfoValidationError{
					field:  "NrArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrfrequencyInfoValidationError{
					field:  "NrArfcn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNrArfcn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrfrequencyInfoValidationError{
				field:  "NrArfcn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFrequencyBandList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrfrequencyInfoValidationError{
					field:  "FrequencyBandList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrfrequencyInfoValidationError{
					field:  "FrequencyBandList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrequencyBandList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrfrequencyInfoValidationError{
				field:  "FrequencyBandList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.FrequencyShift7P5Khz != nil {
		// no validation rules for FrequencyShift7P5Khz
	}

	if len(errors) > 0 {
		return NrfrequencyInfoMultiError(errors)
	}

	return nil
}

// NrfrequencyInfoMultiError is an error wrapping multiple validation errors
// returned by NrfrequencyInfo.ValidateAll() if the designated constraints
// aren't met.
type NrfrequencyInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrfrequencyInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrfrequencyInfoMultiError) AllErrors() []error { return m }

// NrfrequencyInfoValidationError is the validation error returned by
// NrfrequencyInfo.Validate if the designated constraints aren't met.
type NrfrequencyInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrfrequencyInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrfrequencyInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrfrequencyInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrfrequencyInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrfrequencyInfoValidationError) ErrorName() string { return "NrfrequencyInfoValidationError" }

// Error satisfies the builtin error interface
func (e NrfrequencyInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrfrequencyInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrfrequencyInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrfrequencyInfoValidationError{}

// Validate checks the field values on Ranueid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ranueid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ranueid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RanueidMultiError, or nil if none found.
func (m *Ranueid) ValidateAll() error {
	return m.validate(true)
}

func (m *Ranueid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 8 {
		err := RanueidValidationError{
			field:  "Value",
			reason: "value length must be 8 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanueidMultiError(errors)
	}

	return nil
}

// RanueidMultiError is an error wrapping multiple validation errors returned
// by Ranueid.ValidateAll() if the designated constraints aren't met.
type RanueidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanueidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanueidMultiError) AllErrors() []error { return m }

// RanueidValidationError is the validation error returned by Ranueid.Validate
// if the designated constraints aren't met.
type RanueidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanueidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanueidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanueidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanueidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanueidValidationError) ErrorName() string { return "RanueidValidationError" }

// Error satisfies the builtin error interface
func (e RanueidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanueid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanueidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanueidValidationError{}

// Validate checks the field values on SupportedSulbandList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SupportedSulbandList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SupportedSulbandList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SupportedSulbandListMultiError, or nil if none found.
func (m *SupportedSulbandList) ValidateAll() error {
	return m.validate(true)
}

func (m *SupportedSulbandList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) > 32 {
		err := SupportedSulbandListValidationError{
			field:  "Value",
			reason: "value must contain no more than 32 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SupportedSulbandListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SupportedSulbandListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SupportedSulbandListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SupportedSulbandListMultiError(errors)
	}

	return nil
}

// SupportedSulbandListMultiError is an error wrapping multiple validation
// errors returned by SupportedSulbandList.ValidateAll() if the designated
// constraints aren't met.
type SupportedSulbandListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupportedSulbandListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupportedSulbandListMultiError) AllErrors() []error { return m }

// SupportedSulbandListValidationError is the validation error returned by
// SupportedSulbandList.Validate if the designated constraints aren't met.
type SupportedSulbandListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupportedSulbandListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupportedSulbandListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupportedSulbandListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupportedSulbandListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupportedSulbandListValidationError) ErrorName() string {
	return "SupportedSulbandListValidationError"
}

// Error satisfies the builtin error interface
func (e SupportedSulbandListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupportedSulbandList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupportedSulbandListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupportedSulbandListValidationError{}

// Validate checks the field values on SupportedSulfreqBandItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SupportedSulfreqBandItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SupportedSulfreqBandItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SupportedSulfreqBandItemMultiError, or nil if none found.
func (m *SupportedSulfreqBandItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SupportedSulfreqBandItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreqBandIndicatorNr

	if len(errors) > 0 {
		return SupportedSulfreqBandItemMultiError(errors)
	}

	return nil
}

// SupportedSulfreqBandItemMultiError is an error wrapping multiple validation
// errors returned by SupportedSulfreqBandItem.ValidateAll() if the designated
// constraints aren't met.
type SupportedSulfreqBandItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupportedSulfreqBandItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupportedSulfreqBandItemMultiError) AllErrors() []error { return m }

// SupportedSulfreqBandItemValidationError is the validation error returned by
// SupportedSulfreqBandItem.Validate if the designated constraints aren't met.
type SupportedSulfreqBandItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupportedSulfreqBandItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupportedSulfreqBandItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupportedSulfreqBandItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupportedSulfreqBandItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupportedSulfreqBandItemValidationError) ErrorName() string {
	return "SupportedSulfreqBandItemValidationError"
}

// Error satisfies the builtin error interface
func (e SupportedSulfreqBandItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupportedSulfreqBandItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupportedSulfreqBandItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupportedSulfreqBandItemValidationError{}
