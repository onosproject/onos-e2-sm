// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_ccc/v1/e2sm_ccc.proto

package e2sm_ccc_ies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MaxnoofPlmninfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofPlmninfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofPlmninfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofPlmninfoMultiError, or nil if none found.
func (m *MaxnoofPlmninfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofPlmninfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65536 {
		err := MaxnoofPlmninfoValidationError{
			field:  "Value",
			reason: "value must equal 65536",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofPlmninfoMultiError(errors)
	}

	return nil
}

// MaxnoofPlmninfoMultiError is an error wrapping multiple validation errors
// returned by MaxnoofPlmninfo.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofPlmninfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofPlmninfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofPlmninfoMultiError) AllErrors() []error { return m }

// MaxnoofPlmninfoValidationError is the validation error returned by
// MaxnoofPlmninfo.Validate if the designated constraints aren't met.
type MaxnoofPlmninfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofPlmninfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofPlmninfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofPlmninfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofPlmninfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofPlmninfoValidationError) ErrorName() string { return "MaxnoofPlmninfoValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofPlmninfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofPlmninfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofPlmninfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofPlmninfoValidationError{}

// Validate checks the field values on MaxnoofRrmpolicyMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRrmpolicyMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRrmpolicyMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRrmpolicyMemberMultiError, or nil if none found.
func (m *MaxnoofRrmpolicyMember) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRrmpolicyMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65536 {
		err := MaxnoofRrmpolicyMemberValidationError{
			field:  "Value",
			reason: "value must equal 65536",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRrmpolicyMemberMultiError(errors)
	}

	return nil
}

// MaxnoofRrmpolicyMemberMultiError is an error wrapping multiple validation
// errors returned by MaxnoofRrmpolicyMember.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofRrmpolicyMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRrmpolicyMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRrmpolicyMemberMultiError) AllErrors() []error { return m }

// MaxnoofRrmpolicyMemberValidationError is the validation error returned by
// MaxnoofRrmpolicyMember.Validate if the designated constraints aren't met.
type MaxnoofRrmpolicyMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRrmpolicyMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRrmpolicyMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRrmpolicyMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRrmpolicyMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRrmpolicyMemberValidationError) ErrorName() string {
	return "MaxnoofRrmpolicyMemberValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofRrmpolicyMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRrmpolicyMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRrmpolicyMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRrmpolicyMemberValidationError{}

// Validate checks the field values on MaxnoofConfigurationsReported with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofConfigurationsReported) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofConfigurationsReported with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofConfigurationsReportedMultiError, or nil if none found.
func (m *MaxnoofConfigurationsReported) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofConfigurationsReported) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofConfigurationsReportedValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofConfigurationsReportedMultiError(errors)
	}

	return nil
}

// MaxnoofConfigurationsReportedMultiError is an error wrapping multiple
// validation errors returned by MaxnoofConfigurationsReported.ValidateAll()
// if the designated constraints aren't met.
type MaxnoofConfigurationsReportedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofConfigurationsReportedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofConfigurationsReportedMultiError) AllErrors() []error { return m }

// MaxnoofConfigurationsReportedValidationError is the validation error
// returned by MaxnoofConfigurationsReported.Validate if the designated
// constraints aren't met.
type MaxnoofConfigurationsReportedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofConfigurationsReportedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofConfigurationsReportedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofConfigurationsReportedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofConfigurationsReportedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofConfigurationsReportedValidationError) ErrorName() string {
	return "MaxnoofConfigurationsReportedValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofConfigurationsReportedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofConfigurationsReported.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofConfigurationsReportedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofConfigurationsReportedValidationError{}

// Validate checks the field values on MaxnoofCellsReported with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCellsReported) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellsReported with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCellsReportedMultiError, or nil if none found.
func (m *MaxnoofCellsReported) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellsReported) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofCellsReportedValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellsReportedMultiError(errors)
	}

	return nil
}

// MaxnoofCellsReportedMultiError is an error wrapping multiple validation
// errors returned by MaxnoofCellsReported.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofCellsReportedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellsReportedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellsReportedMultiError) AllErrors() []error { return m }

// MaxnoofCellsReportedValidationError is the validation error returned by
// MaxnoofCellsReported.Validate if the designated constraints aren't met.
type MaxnoofCellsReportedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellsReportedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellsReportedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellsReportedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellsReportedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellsReportedValidationError) ErrorName() string {
	return "MaxnoofCellsReportedValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCellsReportedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellsReported.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellsReportedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellsReportedValidationError{}

// Validate checks the field values on MaxnoofCells with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCells with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofCellsMultiError, or
// nil if none found.
func (m *MaxnoofCells) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofCellsValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellsMultiError(errors)
	}

	return nil
}

// MaxnoofCellsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofCells.ValidateAll() if the designated constraints aren't met.
type MaxnoofCellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellsMultiError) AllErrors() []error { return m }

// MaxnoofCellsValidationError is the validation error returned by
// MaxnoofCells.Validate if the designated constraints aren't met.
type MaxnoofCellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellsValidationError) ErrorName() string { return "MaxnoofCellsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofCellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellsValidationError{}

// Validate checks the field values on MaxnoofCellsRanFunctionDefinition with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MaxnoofCellsRanFunctionDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellsRanFunctionDefinition
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MaxnoofCellsRanFunctionDefinitionMultiError, or nil if none found.
func (m *MaxnoofCellsRanFunctionDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellsRanFunctionDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofCellsRanFunctionDefinitionValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellsRanFunctionDefinitionMultiError(errors)
	}

	return nil
}

// MaxnoofCellsRanFunctionDefinitionMultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofCellsRanFunctionDefinition.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofCellsRanFunctionDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellsRanFunctionDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellsRanFunctionDefinitionMultiError) AllErrors() []error { return m }

// MaxnoofCellsRanFunctionDefinitionValidationError is the validation error
// returned by MaxnoofCellsRanFunctionDefinition.Validate if the designated
// constraints aren't met.
type MaxnoofCellsRanFunctionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellsRanFunctionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellsRanFunctionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellsRanFunctionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellsRanFunctionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellsRanFunctionDefinitionValidationError) ErrorName() string {
	return "MaxnoofCellsRanFunctionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCellsRanFunctionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellsRanFunctionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellsRanFunctionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellsRanFunctionDefinitionValidationError{}

// Validate checks the field values on MaxnoofConfigurations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofConfigurations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofConfigurations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofConfigurationsMultiError, or nil if none found.
func (m *MaxnoofConfigurations) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofConfigurations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofConfigurationsValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofConfigurationsMultiError(errors)
	}

	return nil
}

// MaxnoofConfigurationsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofConfigurations.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofConfigurationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofConfigurationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofConfigurationsMultiError) AllErrors() []error { return m }

// MaxnoofConfigurationsValidationError is the validation error returned by
// MaxnoofConfigurations.Validate if the designated constraints aren't met.
type MaxnoofConfigurationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofConfigurationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofConfigurationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofConfigurationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofConfigurationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofConfigurationsValidationError) ErrorName() string {
	return "MaxnoofConfigurationsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofConfigurationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofConfigurations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofConfigurationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofConfigurationsValidationError{}

// Validate checks the field values on MaxnoofAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofAttributesMultiError, or nil if none found.
func (m *MaxnoofAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofAttributesValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofAttributesMultiError(errors)
	}

	return nil
}

// MaxnoofAttributesMultiError is an error wrapping multiple validation errors
// returned by MaxnoofAttributes.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofAttributesMultiError) AllErrors() []error { return m }

// MaxnoofAttributesValidationError is the validation error returned by
// MaxnoofAttributes.Validate if the designated constraints aren't met.
type MaxnoofAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofAttributesValidationError) ErrorName() string {
	return "MaxnoofAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofAttributesValidationError{}

// Validate checks the field values on MaxnoofRicstyles with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofRicstyles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofRicstyles with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofRicstylesMultiError, or nil if none found.
func (m *MaxnoofRicstyles) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofRicstyles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 63 {
		err := MaxnoofRicstylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofRicstylesMultiError(errors)
	}

	return nil
}

// MaxnoofRicstylesMultiError is an error wrapping multiple validation errors
// returned by MaxnoofRicstyles.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofRicstylesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofRicstylesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofRicstylesMultiError) AllErrors() []error { return m }

// MaxnoofRicstylesValidationError is the validation error returned by
// MaxnoofRicstyles.Validate if the designated constraints aren't met.
type MaxnoofRicstylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRicstylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRicstylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRicstylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRicstylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRicstylesValidationError) ErrorName() string { return "MaxnoofRicstylesValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofRicstylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRicstyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRicstylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRicstylesValidationError{}

// Validate checks the field values on MaxnoofEventTriggerStyles with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofEventTriggerStyles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofEventTriggerStyles with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofEventTriggerStylesMultiError, or nil if none found.
func (m *MaxnoofEventTriggerStyles) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofEventTriggerStyles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 63 {
		err := MaxnoofEventTriggerStylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofEventTriggerStylesMultiError(errors)
	}

	return nil
}

// MaxnoofEventTriggerStylesMultiError is an error wrapping multiple validation
// errors returned by MaxnoofEventTriggerStyles.ValidateAll() if the
// designated constraints aren't met.
type MaxnoofEventTriggerStylesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofEventTriggerStylesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofEventTriggerStylesMultiError) AllErrors() []error { return m }

// MaxnoofEventTriggerStylesValidationError is the validation error returned by
// MaxnoofEventTriggerStyles.Validate if the designated constraints aren't met.
type MaxnoofEventTriggerStylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofEventTriggerStylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofEventTriggerStylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofEventTriggerStylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofEventTriggerStylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofEventTriggerStylesValidationError) ErrorName() string {
	return "MaxnoofEventTriggerStylesValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofEventTriggerStylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofEventTriggerStyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofEventTriggerStylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofEventTriggerStylesValidationError{}

// Validate checks the field values on MaxnoofNodeLevelConfigStructures with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MaxnoofNodeLevelConfigStructures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofNodeLevelConfigStructures with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxnoofNodeLevelConfigStructuresMultiError, or nil if none found.
func (m *MaxnoofNodeLevelConfigStructures) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofNodeLevelConfigStructures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofNodeLevelConfigStructuresValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofNodeLevelConfigStructuresMultiError(errors)
	}

	return nil
}

// MaxnoofNodeLevelConfigStructuresMultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofNodeLevelConfigStructures.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofNodeLevelConfigStructuresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofNodeLevelConfigStructuresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofNodeLevelConfigStructuresMultiError) AllErrors() []error { return m }

// MaxnoofNodeLevelConfigStructuresValidationError is the validation error
// returned by MaxnoofNodeLevelConfigStructures.Validate if the designated
// constraints aren't met.
type MaxnoofNodeLevelConfigStructuresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofNodeLevelConfigStructuresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofNodeLevelConfigStructuresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofNodeLevelConfigStructuresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofNodeLevelConfigStructuresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofNodeLevelConfigStructuresValidationError) ErrorName() string {
	return "MaxnoofNodeLevelConfigStructuresValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofNodeLevelConfigStructuresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofNodeLevelConfigStructures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofNodeLevelConfigStructuresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofNodeLevelConfigStructuresValidationError{}

// Validate checks the field values on MaxnoofAttributesToReport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofAttributesToReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofAttributesToReport with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofAttributesToReportMultiError, or nil if none found.
func (m *MaxnoofAttributesToReport) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofAttributesToReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 65535 {
		err := MaxnoofAttributesToReportValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofAttributesToReportMultiError(errors)
	}

	return nil
}

// MaxnoofAttributesToReportMultiError is an error wrapping multiple validation
// errors returned by MaxnoofAttributesToReport.ValidateAll() if the
// designated constraints aren't met.
type MaxnoofAttributesToReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofAttributesToReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofAttributesToReportMultiError) AllErrors() []error { return m }

// MaxnoofAttributesToReportValidationError is the validation error returned by
// MaxnoofAttributesToReport.Validate if the designated constraints aren't met.
type MaxnoofAttributesToReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofAttributesToReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofAttributesToReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofAttributesToReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofAttributesToReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofAttributesToReportValidationError) ErrorName() string {
	return "MaxnoofAttributesToReportValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofAttributesToReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofAttributesToReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofAttributesToReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofAttributesToReportValidationError{}

// Validate checks the field values on MaxnoofConfigurationsToReportFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MaxnoofConfigurationsToReportFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofConfigurationsToReportFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MaxnoofConfigurationsToReportFormat1MultiError, or nil if none found.
func (m *MaxnoofConfigurationsToReportFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofConfigurationsToReportFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofConfigurationsToReportFormat1ValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofConfigurationsToReportFormat1MultiError(errors)
	}

	return nil
}

// MaxnoofConfigurationsToReportFormat1MultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofConfigurationsToReportFormat1.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofConfigurationsToReportFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofConfigurationsToReportFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofConfigurationsToReportFormat1MultiError) AllErrors() []error { return m }

// MaxnoofConfigurationsToReportFormat1ValidationError is the validation error
// returned by MaxnoofConfigurationsToReportFormat1.Validate if the designated
// constraints aren't met.
type MaxnoofConfigurationsToReportFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofConfigurationsToReportFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofConfigurationsToReportFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofConfigurationsToReportFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofConfigurationsToReportFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofConfigurationsToReportFormat1ValidationError) ErrorName() string {
	return "MaxnoofConfigurationsToReportFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofConfigurationsToReportFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofConfigurationsToReportFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofConfigurationsToReportFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofConfigurationsToReportFormat1ValidationError{}

// Validate checks the field values on MaxnoofConfigurationsToReportFormat2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MaxnoofConfigurationsToReportFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofConfigurationsToReportFormat2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MaxnoofConfigurationsToReportFormat2MultiError, or nil if none found.
func (m *MaxnoofConfigurationsToReportFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofConfigurationsToReportFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofConfigurationsToReportFormat2ValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofConfigurationsToReportFormat2MultiError(errors)
	}

	return nil
}

// MaxnoofConfigurationsToReportFormat2MultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofConfigurationsToReportFormat2.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofConfigurationsToReportFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofConfigurationsToReportFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofConfigurationsToReportFormat2MultiError) AllErrors() []error { return m }

// MaxnoofConfigurationsToReportFormat2ValidationError is the validation error
// returned by MaxnoofConfigurationsToReportFormat2.Validate if the designated
// constraints aren't met.
type MaxnoofConfigurationsToReportFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofConfigurationsToReportFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofConfigurationsToReportFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofConfigurationsToReportFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofConfigurationsToReportFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofConfigurationsToReportFormat2ValidationError) ErrorName() string {
	return "MaxnoofConfigurationsToReportFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofConfigurationsToReportFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofConfigurationsToReportFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofConfigurationsToReportFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofConfigurationsToReportFormat2ValidationError{}

// Validate checks the field values on MaxnoofBwp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofBwp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofBwp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofBwpMultiError, or
// nil if none found.
func (m *MaxnoofBwp) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofBwp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofBwpValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofBwpMultiError(errors)
	}

	return nil
}

// MaxnoofBwpMultiError is an error wrapping multiple validation errors
// returned by MaxnoofBwp.ValidateAll() if the designated constraints aren't met.
type MaxnoofBwpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofBwpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofBwpMultiError) AllErrors() []error { return m }

// MaxnoofBwpValidationError is the validation error returned by
// MaxnoofBwp.Validate if the designated constraints aren't met.
type MaxnoofBwpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofBwpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofBwpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofBwpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofBwpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofBwpValidationError) ErrorName() string { return "MaxnoofBwpValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofBwpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofBwp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofBwpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofBwpValidationError{}

// Validate checks the field values on MaxNrofPhysicalResourceBlocks with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxNrofPhysicalResourceBlocks) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxNrofPhysicalResourceBlocks with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaxNrofPhysicalResourceBlocksMultiError, or nil if none found.
func (m *MaxNrofPhysicalResourceBlocks) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxNrofPhysicalResourceBlocks) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 550 {
		err := MaxNrofPhysicalResourceBlocksValidationError{
			field:  "Value",
			reason: "value must equal 550",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxNrofPhysicalResourceBlocksMultiError(errors)
	}

	return nil
}

// MaxNrofPhysicalResourceBlocksMultiError is an error wrapping multiple
// validation errors returned by MaxNrofPhysicalResourceBlocks.ValidateAll()
// if the designated constraints aren't met.
type MaxNrofPhysicalResourceBlocksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxNrofPhysicalResourceBlocksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxNrofPhysicalResourceBlocksMultiError) AllErrors() []error { return m }

// MaxNrofPhysicalResourceBlocksValidationError is the validation error
// returned by MaxNrofPhysicalResourceBlocks.Validate if the designated
// constraints aren't met.
type MaxNrofPhysicalResourceBlocksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrofPhysicalResourceBlocksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrofPhysicalResourceBlocksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrofPhysicalResourceBlocksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrofPhysicalResourceBlocksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrofPhysicalResourceBlocksValidationError) ErrorName() string {
	return "MaxNrofPhysicalResourceBlocksValidationError"
}

// Error satisfies the builtin error interface
func (e MaxNrofPhysicalResourceBlocksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNrofPhysicalResourceBlocks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrofPhysicalResourceBlocksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrofPhysicalResourceBlocksValidationError{}

// Validate checks the field values on MaxnoofSliceItems with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSliceItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSliceItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofSliceItemsMultiError, or nil if none found.
func (m *MaxnoofSliceItems) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSliceItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofSliceItemsValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSliceItemsMultiError(errors)
	}

	return nil
}

// MaxnoofSliceItemsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSliceItems.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSliceItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSliceItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSliceItemsMultiError) AllErrors() []error { return m }

// MaxnoofSliceItemsValidationError is the validation error returned by
// MaxnoofSliceItems.Validate if the designated constraints aren't met.
type MaxnoofSliceItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSliceItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSliceItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSliceItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSliceItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSliceItemsValidationError) ErrorName() string {
	return "MaxnoofSliceItemsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofSliceItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSliceItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSliceItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSliceItemsValidationError{}

// Validate checks the field values on MinSizeGgnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MinSizeGgnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MinSizeGgnbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MinSizeGgnbIdMultiError, or
// nil if none found.
func (m *MinSizeGgnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *MinSizeGgnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 30 {
		err := MinSizeGgnbIdValidationError{
			field:  "Value",
			reason: "value must equal 30",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MinSizeGgnbIdMultiError(errors)
	}

	return nil
}

// MinSizeGgnbIdMultiError is an error wrapping multiple validation errors
// returned by MinSizeGgnbId.ValidateAll() if the designated constraints
// aren't met.
type MinSizeGgnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MinSizeGgnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MinSizeGgnbIdMultiError) AllErrors() []error { return m }

// MinSizeGgnbIdValidationError is the validation error returned by
// MinSizeGgnbId.Validate if the designated constraints aren't met.
type MinSizeGgnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MinSizeGgnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MinSizeGgnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MinSizeGgnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MinSizeGgnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MinSizeGgnbIdValidationError) ErrorName() string { return "MinSizeGgnbIdValidationError" }

// Error satisfies the builtin error interface
func (e MinSizeGgnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMinSizeGgnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MinSizeGgnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MinSizeGgnbIdValidationError{}

// Validate checks the field values on MaxSizeGgnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxSizeGgnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxSizeGgnbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxSizeGgnbIdMultiError, or
// nil if none found.
func (m *MaxSizeGgnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxSizeGgnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 44 {
		err := MaxSizeGgnbIdValidationError{
			field:  "Value",
			reason: "value must equal 44",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxSizeGgnbIdMultiError(errors)
	}

	return nil
}

// MaxSizeGgnbIdMultiError is an error wrapping multiple validation errors
// returned by MaxSizeGgnbId.ValidateAll() if the designated constraints
// aren't met.
type MaxSizeGgnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxSizeGgnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxSizeGgnbIdMultiError) AllErrors() []error { return m }

// MaxSizeGgnbIdValidationError is the validation error returned by
// MaxSizeGgnbId.Validate if the designated constraints aren't met.
type MaxSizeGgnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxSizeGgnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxSizeGgnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxSizeGgnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxSizeGgnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxSizeGgnbIdValidationError) ErrorName() string { return "MaxSizeGgnbIdValidationError" }

// Error satisfies the builtin error interface
func (e MaxSizeGgnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxSizeGgnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxSizeGgnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxSizeGgnbIdValidationError{}

// Validate checks the field values on MaxnoofGgnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofGgnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofGgnbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofGgnbIdMultiError, or
// nil if none found.
func (m *MaxnoofGgnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofGgnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofGgnbIdValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofGgnbIdMultiError(errors)
	}

	return nil
}

// MaxnoofGgnbIdMultiError is an error wrapping multiple validation errors
// returned by MaxnoofGgnbId.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofGgnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofGgnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofGgnbIdMultiError) AllErrors() []error { return m }

// MaxnoofGgnbIdValidationError is the validation error returned by
// MaxnoofGgnbId.Validate if the designated constraints aren't met.
type MaxnoofGgnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofGgnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofGgnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofGgnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofGgnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofGgnbIdValidationError) ErrorName() string { return "MaxnoofGgnbIdValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofGgnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofGgnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofGgnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofGgnbIdValidationError{}

// Validate checks the field values on MinSizeGenbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MinSizeGenbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MinSizeGenbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MinSizeGenbIdMultiError, or
// nil if none found.
func (m *MinSizeGenbId) ValidateAll() error {
	return m.validate(true)
}

func (m *MinSizeGenbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 26 {
		err := MinSizeGenbIdValidationError{
			field:  "Value",
			reason: "value must equal 26",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MinSizeGenbIdMultiError(errors)
	}

	return nil
}

// MinSizeGenbIdMultiError is an error wrapping multiple validation errors
// returned by MinSizeGenbId.ValidateAll() if the designated constraints
// aren't met.
type MinSizeGenbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MinSizeGenbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MinSizeGenbIdMultiError) AllErrors() []error { return m }

// MinSizeGenbIdValidationError is the validation error returned by
// MinSizeGenbId.Validate if the designated constraints aren't met.
type MinSizeGenbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MinSizeGenbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MinSizeGenbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MinSizeGenbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MinSizeGenbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MinSizeGenbIdValidationError) ErrorName() string { return "MinSizeGenbIdValidationError" }

// Error satisfies the builtin error interface
func (e MinSizeGenbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMinSizeGenbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MinSizeGenbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MinSizeGenbIdValidationError{}

// Validate checks the field values on MaxSizeGenbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxSizeGenbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxSizeGenbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxSizeGenbIdMultiError, or
// nil if none found.
func (m *MaxSizeGenbId) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxSizeGenbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 37 {
		err := MaxSizeGenbIdValidationError{
			field:  "Value",
			reason: "value must equal 37",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxSizeGenbIdMultiError(errors)
	}

	return nil
}

// MaxSizeGenbIdMultiError is an error wrapping multiple validation errors
// returned by MaxSizeGenbId.ValidateAll() if the designated constraints
// aren't met.
type MaxSizeGenbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxSizeGenbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxSizeGenbIdMultiError) AllErrors() []error { return m }

// MaxSizeGenbIdValidationError is the validation error returned by
// MaxSizeGenbId.Validate if the designated constraints aren't met.
type MaxSizeGenbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxSizeGenbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxSizeGenbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxSizeGenbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxSizeGenbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxSizeGenbIdValidationError) ErrorName() string { return "MaxSizeGenbIdValidationError" }

// Error satisfies the builtin error interface
func (e MaxSizeGenbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxSizeGenbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxSizeGenbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxSizeGenbIdValidationError{}

// Validate checks the field values on MaxnoofGenbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofGenbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofGenbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofGenbIdMultiError, or
// nil if none found.
func (m *MaxnoofGenbId) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofGenbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofGenbIdValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofGenbIdMultiError(errors)
	}

	return nil
}

// MaxnoofGenbIdMultiError is an error wrapping multiple validation errors
// returned by MaxnoofGenbId.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofGenbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofGenbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofGenbIdMultiError) AllErrors() []error { return m }

// MaxnoofGenbIdValidationError is the validation error returned by
// MaxnoofGenbId.Validate if the designated constraints aren't met.
type MaxnoofGenbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofGenbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofGenbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofGenbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofGenbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofGenbIdValidationError) ErrorName() string { return "MaxnoofGenbIdValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofGenbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofGenbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofGenbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofGenbIdValidationError{}

// Validate checks the field values on MaxnoofConfigurationStructuresAccepted
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MaxnoofConfigurationStructuresAccepted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MaxnoofConfigurationStructuresAccepted with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// MaxnoofConfigurationStructuresAcceptedMultiError, or nil if none found.
func (m *MaxnoofConfigurationStructuresAccepted) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofConfigurationStructuresAccepted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofConfigurationStructuresAcceptedValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofConfigurationStructuresAcceptedMultiError(errors)
	}

	return nil
}

// MaxnoofConfigurationStructuresAcceptedMultiError is an error wrapping
// multiple validation errors returned by
// MaxnoofConfigurationStructuresAccepted.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofConfigurationStructuresAcceptedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofConfigurationStructuresAcceptedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofConfigurationStructuresAcceptedMultiError) AllErrors() []error { return m }

// MaxnoofConfigurationStructuresAcceptedValidationError is the validation
// error returned by MaxnoofConfigurationStructuresAccepted.Validate if the
// designated constraints aren't met.
type MaxnoofConfigurationStructuresAcceptedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofConfigurationStructuresAcceptedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofConfigurationStructuresAcceptedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofConfigurationStructuresAcceptedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofConfigurationStructuresAcceptedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofConfigurationStructuresAcceptedValidationError) ErrorName() string {
	return "MaxnoofConfigurationStructuresAcceptedValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofConfigurationStructuresAcceptedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofConfigurationStructuresAccepted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofConfigurationStructuresAcceptedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofConfigurationStructuresAcceptedValidationError{}

// Validate checks the field values on MaxnoofConfigurationStructuresFailed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MaxnoofConfigurationStructuresFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofConfigurationStructuresFailed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MaxnoofConfigurationStructuresFailedMultiError, or nil if none found.
func (m *MaxnoofConfigurationStructuresFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofConfigurationStructuresFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofConfigurationStructuresFailedValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofConfigurationStructuresFailedMultiError(errors)
	}

	return nil
}

// MaxnoofConfigurationStructuresFailedMultiError is an error wrapping multiple
// validation errors returned by
// MaxnoofConfigurationStructuresFailed.ValidateAll() if the designated
// constraints aren't met.
type MaxnoofConfigurationStructuresFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofConfigurationStructuresFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofConfigurationStructuresFailedMultiError) AllErrors() []error { return m }

// MaxnoofConfigurationStructuresFailedValidationError is the validation error
// returned by MaxnoofConfigurationStructuresFailed.Validate if the designated
// constraints aren't met.
type MaxnoofConfigurationStructuresFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofConfigurationStructuresFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofConfigurationStructuresFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofConfigurationStructuresFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofConfigurationStructuresFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofConfigurationStructuresFailedValidationError) ErrorName() string {
	return "MaxnoofConfigurationStructuresFailedValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofConfigurationStructuresFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofConfigurationStructuresFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofConfigurationStructuresFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofConfigurationStructuresFailedValidationError{}

// Validate checks the field values on MaxnoofCellControlOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofCellControlOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofCellControlOutcome with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofCellControlOutcomeMultiError, or nil if none found.
func (m *MaxnoofCellControlOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofCellControlOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofCellControlOutcomeValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofCellControlOutcomeMultiError(errors)
	}

	return nil
}

// MaxnoofCellControlOutcomeMultiError is an error wrapping multiple validation
// errors returned by MaxnoofCellControlOutcome.ValidateAll() if the
// designated constraints aren't met.
type MaxnoofCellControlOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofCellControlOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofCellControlOutcomeMultiError) AllErrors() []error { return m }

// MaxnoofCellControlOutcomeValidationError is the validation error returned by
// MaxnoofCellControlOutcome.Validate if the designated constraints aren't met.
type MaxnoofCellControlOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellControlOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellControlOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellControlOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellControlOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellControlOutcomeValidationError) ErrorName() string {
	return "MaxnoofCellControlOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofCellControlOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCellControlOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellControlOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellControlOutcomeValidationError{}

// Validate checks the field values on MinBandwidth with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MinBandwidth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MinBandwidth with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MinBandwidthMultiError, or
// nil if none found.
func (m *MinBandwidth) ValidateAll() error {
	return m.validate(true)
}

func (m *MinBandwidth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 5 {
		err := MinBandwidthValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MinBandwidthMultiError(errors)
	}

	return nil
}

// MinBandwidthMultiError is an error wrapping multiple validation errors
// returned by MinBandwidth.ValidateAll() if the designated constraints aren't met.
type MinBandwidthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MinBandwidthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MinBandwidthMultiError) AllErrors() []error { return m }

// MinBandwidthValidationError is the validation error returned by
// MinBandwidth.Validate if the designated constraints aren't met.
type MinBandwidthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MinBandwidthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MinBandwidthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MinBandwidthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MinBandwidthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MinBandwidthValidationError) ErrorName() string { return "MinBandwidthValidationError" }

// Error satisfies the builtin error interface
func (e MinBandwidthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMinBandwidth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MinBandwidthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MinBandwidthValidationError{}

// Validate checks the field values on MaxBandwidth with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxBandwidth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxBandwidth with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxBandwidthMultiError, or
// nil if none found.
func (m *MaxBandwidth) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxBandwidth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 400 {
		err := MaxBandwidthValidationError{
			field:  "Value",
			reason: "value must equal 400",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxBandwidthMultiError(errors)
	}

	return nil
}

// MaxBandwidthMultiError is an error wrapping multiple validation errors
// returned by MaxBandwidth.ValidateAll() if the designated constraints aren't met.
type MaxBandwidthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxBandwidthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxBandwidthMultiError) AllErrors() []error { return m }

// MaxBandwidthValidationError is the validation error returned by
// MaxBandwidth.Validate if the designated constraints aren't met.
type MaxBandwidthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxBandwidthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxBandwidthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxBandwidthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxBandwidthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxBandwidthValidationError) ErrorName() string { return "MaxBandwidthValidationError" }

// Error satisfies the builtin error interface
func (e MaxBandwidthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxBandwidth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxBandwidthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxBandwidthValidationError{}

// Validate checks the field values on GnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GnbIdMultiError, or nil if none found.
func (m *GnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 4294967295 {
		err := GnbIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4294967295]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbIdMultiError(errors)
	}

	return nil
}

// GnbIdMultiError is an error wrapping multiple validation errors returned by
// GnbId.ValidateAll() if the designated constraints aren't met.
type GnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbIdMultiError) AllErrors() []error { return m }

// GnbIdValidationError is the validation error returned by GnbId.Validate if
// the designated constraints aren't met.
type GnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbIdValidationError) ErrorName() string { return "GnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbIdValidationError{}

// Validate checks the field values on GnbIdLength with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbIdLength) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbIdLength with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbIdLengthMultiError, or
// nil if none found.
func (m *GnbIdLength) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbIdLength) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 22 || val > 32 {
		err := GnbIdLengthValidationError{
			field:  "Value",
			reason: "value must be inside range [22, 32]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbIdLengthMultiError(errors)
	}

	return nil
}

// GnbIdLengthMultiError is an error wrapping multiple validation errors
// returned by GnbIdLength.ValidateAll() if the designated constraints aren't met.
type GnbIdLengthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbIdLengthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbIdLengthMultiError) AllErrors() []error { return m }

// GnbIdLengthValidationError is the validation error returned by
// GnbIdLength.Validate if the designated constraints aren't met.
type GnbIdLengthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbIdLengthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbIdLengthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbIdLengthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbIdLengthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbIdLengthValidationError) ErrorName() string { return "GnbIdLengthValidationError" }

// Error satisfies the builtin error interface
func (e GnbIdLengthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbIdLength.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbIdLengthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbIdLengthValidationError{}

// Validate checks the field values on GnbName with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbName with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GnbNameMultiError, or nil if none found.
func (m *GnbName) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		err := GnbNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbNameMultiError(errors)
	}

	return nil
}

// GnbNameMultiError is an error wrapping multiple validation errors returned
// by GnbName.ValidateAll() if the designated constraints aren't met.
type GnbNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbNameMultiError) AllErrors() []error { return m }

// GnbNameValidationError is the validation error returned by GnbName.Validate
// if the designated constraints aren't met.
type GnbNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbNameValidationError) ErrorName() string { return "GnbNameValidationError" }

// Error satisfies the builtin error interface
func (e GnbNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbNameValidationError{}

// Validate checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbDuId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GnbDuIdMultiError, or nil if none found.
func (m *GnbDuId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbDuId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := GnbDuIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbDuIdMultiError(errors)
	}

	return nil
}

// GnbDuIdMultiError is an error wrapping multiple validation errors returned
// by GnbDuId.ValidateAll() if the designated constraints aren't met.
type GnbDuIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbDuIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbDuIdMultiError) AllErrors() []error { return m }

// GnbDuIdValidationError is the validation error returned by GnbDuId.Validate
// if the designated constraints aren't met.
type GnbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDuIdValidationError) ErrorName() string { return "GnbDuIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDuIdValidationError{}

// Validate checks the field values on GnbCuUpId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbCuUpId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCuUpId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbCuUpIdMultiError, or nil
// if none found.
func (m *GnbCuUpId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCuUpId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := GnbCuUpIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCuUpIdMultiError(errors)
	}

	return nil
}

// GnbCuUpIdMultiError is an error wrapping multiple validation errors returned
// by GnbCuUpId.ValidateAll() if the designated constraints aren't met.
type GnbCuUpIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCuUpIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCuUpIdMultiError) AllErrors() []error { return m }

// GnbCuUpIdValidationError is the validation error returned by
// GnbCuUpId.Validate if the designated constraints aren't met.
type GnbCuUpIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUpIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUpIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUpIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUpIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUpIdValidationError) ErrorName() string { return "GnbCuUpIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUpIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUpId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUpIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUpIdValidationError{}

// Validate checks the field values on SnssaiList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SnssaiList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnssaiList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SnssaiListMultiError, or
// nil if none found.
func (m *SnssaiList) ValidateAll() error {
	return m.validate(true)
}

func (m *SnssaiList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 1024 {
		err := SnssaiListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SnssaiListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SnssaiListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SnssaiListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SnssaiListMultiError(errors)
	}

	return nil
}

// SnssaiListMultiError is an error wrapping multiple validation errors
// returned by SnssaiList.ValidateAll() if the designated constraints aren't met.
type SnssaiListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnssaiListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnssaiListMultiError) AllErrors() []error { return m }

// SnssaiListValidationError is the validation error returned by
// SnssaiList.Validate if the designated constraints aren't met.
type SnssaiListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnssaiListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnssaiListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnssaiListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnssaiListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnssaiListValidationError) ErrorName() string { return "SnssaiListValidationError" }

// Error satisfies the builtin error interface
func (e SnssaiListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnssaiList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnssaiListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnssaiListValidationError{}

// Validate checks the field values on PlmnIdList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlmnIdList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlmnIdList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlmnIdListMultiError, or
// nil if none found.
func (m *PlmnIdList) ValidateAll() error {
	return m.validate(true)
}

func (m *PlmnIdList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 65536 {
		err := PlmnIdListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 65536 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlmnIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlmnIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlmnIdListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlmnIdListMultiError(errors)
	}

	return nil
}

// PlmnIdListMultiError is an error wrapping multiple validation errors
// returned by PlmnIdList.ValidateAll() if the designated constraints aren't met.
type PlmnIdListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlmnIdListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlmnIdListMultiError) AllErrors() []error { return m }

// PlmnIdListValidationError is the validation error returned by
// PlmnIdList.Validate if the designated constraints aren't met.
type PlmnIdListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdListValidationError) ErrorName() string { return "PlmnIdListValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdListValidationError{}

// Validate checks the field values on PlmnInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlmnInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlmnInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlmnInfoMultiError, or nil
// if none found.
func (m *PlmnInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PlmnInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlmnId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlmnInfoValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlmnInfoValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlmnInfoValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Snssai != nil {

		if all {
			switch v := interface{}(m.GetSnssai()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlmnInfoValidationError{
						field:  "Snssai",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlmnInfoValidationError{
						field:  "Snssai",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSnssai()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlmnInfoValidationError{
					field:  "Snssai",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlmnInfoMultiError(errors)
	}

	return nil
}

// PlmnInfoMultiError is an error wrapping multiple validation errors returned
// by PlmnInfo.ValidateAll() if the designated constraints aren't met.
type PlmnInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlmnInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlmnInfoMultiError) AllErrors() []error { return m }

// PlmnInfoValidationError is the validation error returned by
// PlmnInfo.Validate if the designated constraints aren't met.
type PlmnInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnInfoValidationError) ErrorName() string { return "PlmnInfoValidationError" }

// Error satisfies the builtin error interface
func (e PlmnInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnInfoValidationError{}

// Validate checks the field values on PlmnInfoList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlmnInfoList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlmnInfoList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlmnInfoListMultiError, or
// nil if none found.
func (m *PlmnInfoList) ValidateAll() error {
	return m.validate(true)
}

func (m *PlmnInfoList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 65536 {
		err := PlmnInfoListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 65536 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlmnInfoListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlmnInfoListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlmnInfoListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlmnInfoListMultiError(errors)
	}

	return nil
}

// PlmnInfoListMultiError is an error wrapping multiple validation errors
// returned by PlmnInfoList.ValidateAll() if the designated constraints aren't met.
type PlmnInfoListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlmnInfoListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlmnInfoListMultiError) AllErrors() []error { return m }

// PlmnInfoListValidationError is the validation error returned by
// PlmnInfoList.Validate if the designated constraints aren't met.
type PlmnInfoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnInfoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnInfoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnInfoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnInfoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnInfoListValidationError) ErrorName() string { return "PlmnInfoListValidationError" }

// Error satisfies the builtin error interface
func (e PlmnInfoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnInfoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnInfoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnInfoListValidationError{}

// Validate checks the field values on GgnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GgnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GgnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GgnbIdMultiError, or nil if none found.
func (m *GgnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GgnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 30 || l > 44 {
		err := GgnbIdValidationError{
			field:  "Value",
			reason: "value length must be between 30 and 44 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GgnbIdMultiError(errors)
	}

	return nil
}

// GgnbIdMultiError is an error wrapping multiple validation errors returned by
// GgnbId.ValidateAll() if the designated constraints aren't met.
type GgnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GgnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GgnbIdMultiError) AllErrors() []error { return m }

// GgnbIdValidationError is the validation error returned by GgnbId.Validate if
// the designated constraints aren't met.
type GgnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GgnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GgnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GgnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GgnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GgnbIdValidationError) ErrorName() string { return "GgnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GgnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGgnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GgnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GgnbIdValidationError{}

// Validate checks the field values on GenbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GenbIdMultiError, or nil if none found.
func (m *GenbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GenbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 26 || l > 37 {
		err := GenbIdValidationError{
			field:  "Value",
			reason: "value length must be between 26 and 37 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenbIdMultiError(errors)
	}

	return nil
}

// GenbIdMultiError is an error wrapping multiple validation errors returned by
// GenbId.ValidateAll() if the designated constraints aren't met.
type GenbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenbIdMultiError) AllErrors() []error { return m }

// GenbIdValidationError is the validation error returned by GenbId.Validate if
// the designated constraints aren't met.
type GenbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenbIdValidationError) ErrorName() string { return "GenbIdValidationError" }

// Error satisfies the builtin error interface
func (e GenbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenbIdValidationError{}

// Validate checks the field values on GgnbIdList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GgnbIdList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GgnbIdList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GgnbIdListMultiError, or
// nil if none found.
func (m *GgnbIdList) ValidateAll() error {
	return m.validate(true)
}

func (m *GgnbIdList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 1024 {
		err := GgnbIdListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GgnbIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GgnbIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GgnbIdListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GgnbIdListMultiError(errors)
	}

	return nil
}

// GgnbIdListMultiError is an error wrapping multiple validation errors
// returned by GgnbIdList.ValidateAll() if the designated constraints aren't met.
type GgnbIdListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GgnbIdListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GgnbIdListMultiError) AllErrors() []error { return m }

// GgnbIdListValidationError is the validation error returned by
// GgnbIdList.Validate if the designated constraints aren't met.
type GgnbIdListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GgnbIdListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GgnbIdListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GgnbIdListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GgnbIdListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GgnbIdListValidationError) ErrorName() string { return "GgnbIdListValidationError" }

// Error satisfies the builtin error interface
func (e GgnbIdListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGgnbIdList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GgnbIdListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GgnbIdListValidationError{}

// Validate checks the field values on GenbIdList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenbIdList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenbIdList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenbIdListMultiError, or
// nil if none found.
func (m *GenbIdList) ValidateAll() error {
	return m.validate(true)
}

func (m *GenbIdList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 1024 {
		err := GenbIdListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenbIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenbIdListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenbIdListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GenbIdListMultiError(errors)
	}

	return nil
}

// GenbIdListMultiError is an error wrapping multiple validation errors
// returned by GenbIdList.ValidateAll() if the designated constraints aren't met.
type GenbIdListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenbIdListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenbIdListMultiError) AllErrors() []error { return m }

// GenbIdListValidationError is the validation error returned by
// GenbIdList.Validate if the designated constraints aren't met.
type GenbIdListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenbIdListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenbIdListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenbIdListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenbIdListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenbIdListValidationError) ErrorName() string { return "GenbIdListValidationError" }

// Error satisfies the builtin error interface
func (e GenbIdListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenbIdList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenbIdListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenbIdListValidationError{}

// Validate checks the field values on NrPci with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrPci) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrPci with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrPciMultiError, or nil if none found.
func (m *NrPci) ValidateAll() error {
	return m.validate(true)
}

func (m *NrPci) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 503 {
		err := NrPciValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 503]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NrPciMultiError(errors)
	}

	return nil
}

// NrPciMultiError is an error wrapping multiple validation errors returned by
// NrPci.ValidateAll() if the designated constraints aren't met.
type NrPciMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrPciMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrPciMultiError) AllErrors() []error { return m }

// NrPciValidationError is the validation error returned by NrPci.Validate if
// the designated constraints aren't met.
type NrPciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrPciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrPciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrPciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrPciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrPciValidationError) ErrorName() string { return "NrPciValidationError" }

// Error satisfies the builtin error interface
func (e NrPciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrPci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrPciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrPciValidationError{}

// Validate checks the field values on NrTac with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrTac) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrTac with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrTacMultiError, or nil if none found.
func (m *NrTac) ValidateAll() error {
	return m.validate(true)
}

func (m *NrTac) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 16777215 {
		err := NrTacValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 16777215]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NrTacMultiError(errors)
	}

	return nil
}

// NrTacMultiError is an error wrapping multiple validation errors returned by
// NrTac.ValidateAll() if the designated constraints aren't met.
type NrTacMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrTacMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrTacMultiError) AllErrors() []error { return m }

// NrTacValidationError is the validation error returned by NrTac.Validate if
// the designated constraints aren't met.
type NrTacValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrTacValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrTacValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrTacValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrTacValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrTacValidationError) ErrorName() string { return "NrTacValidationError" }

// Error satisfies the builtin error interface
func (e NrTacValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrTac.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrTacValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrTacValidationError{}

// Validate checks the field values on RrmPolicyMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RrmPolicyMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RrmPolicyMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RrmPolicyMemberMultiError, or nil if none found.
func (m *RrmPolicyMember) ValidateAll() error {
	return m.validate(true)
}

func (m *RrmPolicyMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlmnId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RrmPolicyMemberValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RrmPolicyMemberValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RrmPolicyMemberValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSnssai()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RrmPolicyMemberValidationError{
					field:  "Snssai",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RrmPolicyMemberValidationError{
					field:  "Snssai",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSnssai()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RrmPolicyMemberValidationError{
				field:  "Snssai",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RrmPolicyMemberMultiError(errors)
	}

	return nil
}

// RrmPolicyMemberMultiError is an error wrapping multiple validation errors
// returned by RrmPolicyMember.ValidateAll() if the designated constraints
// aren't met.
type RrmPolicyMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RrmPolicyMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RrmPolicyMemberMultiError) AllErrors() []error { return m }

// RrmPolicyMemberValidationError is the validation error returned by
// RrmPolicyMember.Validate if the designated constraints aren't met.
type RrmPolicyMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RrmPolicyMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RrmPolicyMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RrmPolicyMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RrmPolicyMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RrmPolicyMemberValidationError) ErrorName() string { return "RrmPolicyMemberValidationError" }

// Error satisfies the builtin error interface
func (e RrmPolicyMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRrmPolicyMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RrmPolicyMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RrmPolicyMemberValidationError{}

// Validate checks the field values on RrmPolicyMemberList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RrmPolicyMemberList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RrmPolicyMemberList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RrmPolicyMemberListMultiError, or nil if none found.
func (m *RrmPolicyMemberList) ValidateAll() error {
	return m.validate(true)
}

func (m *RrmPolicyMemberList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 65536 {
		err := RrmPolicyMemberListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 65536 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RrmPolicyMemberListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RrmPolicyMemberListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RrmPolicyMemberListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RrmPolicyMemberListMultiError(errors)
	}

	return nil
}

// RrmPolicyMemberListMultiError is an error wrapping multiple validation
// errors returned by RrmPolicyMemberList.ValidateAll() if the designated
// constraints aren't met.
type RrmPolicyMemberListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RrmPolicyMemberListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RrmPolicyMemberListMultiError) AllErrors() []error { return m }

// RrmPolicyMemberListValidationError is the validation error returned by
// RrmPolicyMemberList.Validate if the designated constraints aren't met.
type RrmPolicyMemberListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RrmPolicyMemberListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RrmPolicyMemberListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RrmPolicyMemberListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RrmPolicyMemberListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RrmPolicyMemberListValidationError) ErrorName() string {
	return "RrmPolicyMemberListValidationError"
}

// Error satisfies the builtin error interface
func (e RrmPolicyMemberListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRrmPolicyMemberList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RrmPolicyMemberListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RrmPolicyMemberListValidationError{}

// Validate checks the field values on OGnbCuCpFunction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OGnbCuCpFunction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OGnbCuCpFunction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OGnbCuCpFunctionMultiError, or nil if none found.
func (m *OGnbCuCpFunction) ValidateAll() error {
	return m.validate(true)
}

func (m *OGnbCuCpFunction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuCpFunctionValidationError{
				field:  "GnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGnbIdLength()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "GnbIdLength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "GnbIdLength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbIdLength()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuCpFunctionValidationError{
				field:  "GnbIdLength",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGnbCuName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "GnbCuName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "GnbCuName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbCuName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuCpFunctionValidationError{
				field:  "GnbCuName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlmnId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuCpFunctionValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetX2ExcludeList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "X2ExcludeList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "X2ExcludeList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetX2ExcludeList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuCpFunctionValidationError{
				field:  "X2ExcludeList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetXnExcludeList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "XnExcludeList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "XnExcludeList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetXnExcludeList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuCpFunctionValidationError{
				field:  "XnExcludeList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetX2IncludeList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "X2IncludeList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "X2IncludeList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetX2IncludeList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuCpFunctionValidationError{
				field:  "X2IncludeList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetXnIncludeList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "XnIncludeList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "XnIncludeList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetXnIncludeList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuCpFunctionValidationError{
				field:  "XnIncludeList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetX2XnHoexcludeList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "X2XnHoexcludeList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuCpFunctionValidationError{
					field:  "X2XnHoexcludeList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetX2XnHoexcludeList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuCpFunctionValidationError{
				field:  "X2XnHoexcludeList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OGnbCuCpFunctionMultiError(errors)
	}

	return nil
}

// OGnbCuCpFunctionMultiError is an error wrapping multiple validation errors
// returned by OGnbCuCpFunction.ValidateAll() if the designated constraints
// aren't met.
type OGnbCuCpFunctionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OGnbCuCpFunctionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OGnbCuCpFunctionMultiError) AllErrors() []error { return m }

// OGnbCuCpFunctionValidationError is the validation error returned by
// OGnbCuCpFunction.Validate if the designated constraints aren't met.
type OGnbCuCpFunctionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OGnbCuCpFunctionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OGnbCuCpFunctionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OGnbCuCpFunctionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OGnbCuCpFunctionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OGnbCuCpFunctionValidationError) ErrorName() string { return "OGnbCuCpFunctionValidationError" }

// Error satisfies the builtin error interface
func (e OGnbCuCpFunctionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOGnbCuCpFunction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OGnbCuCpFunctionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OGnbCuCpFunctionValidationError{}

// Validate checks the field values on OGnbCuUpFunction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OGnbCuUpFunction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OGnbCuUpFunction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OGnbCuUpFunctionMultiError, or nil if none found.
func (m *OGnbCuUpFunction) ValidateAll() error {
	return m.validate(true)
}

func (m *OGnbCuUpFunction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuUpFunctionValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuUpFunctionValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuUpFunctionValidationError{
				field:  "GnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGnbIdLength()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuUpFunctionValidationError{
					field:  "GnbIdLength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuUpFunctionValidationError{
					field:  "GnbIdLength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbIdLength()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuUpFunctionValidationError{
				field:  "GnbIdLength",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGnbCuUpId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuUpFunctionValidationError{
					field:  "GnbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuUpFunctionValidationError{
					field:  "GnbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuUpFunctionValidationError{
				field:  "GnbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlmnInfoList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbCuUpFunctionValidationError{
					field:  "PlmnInfoList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbCuUpFunctionValidationError{
					field:  "PlmnInfoList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlmnInfoList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbCuUpFunctionValidationError{
				field:  "PlmnInfoList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OGnbCuUpFunctionMultiError(errors)
	}

	return nil
}

// OGnbCuUpFunctionMultiError is an error wrapping multiple validation errors
// returned by OGnbCuUpFunction.ValidateAll() if the designated constraints
// aren't met.
type OGnbCuUpFunctionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OGnbCuUpFunctionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OGnbCuUpFunctionMultiError) AllErrors() []error { return m }

// OGnbCuUpFunctionValidationError is the validation error returned by
// OGnbCuUpFunction.Validate if the designated constraints aren't met.
type OGnbCuUpFunctionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OGnbCuUpFunctionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OGnbCuUpFunctionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OGnbCuUpFunctionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OGnbCuUpFunctionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OGnbCuUpFunctionValidationError) ErrorName() string { return "OGnbCuUpFunctionValidationError" }

// Error satisfies the builtin error interface
func (e OGnbCuUpFunctionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOGnbCuUpFunction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OGnbCuUpFunctionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OGnbCuUpFunctionValidationError{}

// Validate checks the field values on OGnbDuFunction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OGnbDuFunction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OGnbDuFunction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OGnbDuFunctionMultiError,
// or nil if none found.
func (m *OGnbDuFunction) ValidateAll() error {
	return m.validate(true)
}

func (m *OGnbDuFunction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGnbDuId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbDuFunctionValidationError{
					field:  "GnbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbDuFunctionValidationError{
					field:  "GnbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbDuFunctionValidationError{
				field:  "GnbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGnbDuName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbDuFunctionValidationError{
					field:  "GnbDuName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbDuFunctionValidationError{
					field:  "GnbDuName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbDuName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbDuFunctionValidationError{
				field:  "GnbDuName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbDuFunctionValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbDuFunctionValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbDuFunctionValidationError{
				field:  "GnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGnbIdLength()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OGnbDuFunctionValidationError{
					field:  "GnbIdLength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OGnbDuFunctionValidationError{
					field:  "GnbIdLength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbIdLength()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OGnbDuFunctionValidationError{
				field:  "GnbIdLength",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OGnbDuFunctionMultiError(errors)
	}

	return nil
}

// OGnbDuFunctionMultiError is an error wrapping multiple validation errors
// returned by OGnbDuFunction.ValidateAll() if the designated constraints
// aren't met.
type OGnbDuFunctionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OGnbDuFunctionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OGnbDuFunctionMultiError) AllErrors() []error { return m }

// OGnbDuFunctionValidationError is the validation error returned by
// OGnbDuFunction.Validate if the designated constraints aren't met.
type OGnbDuFunctionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OGnbDuFunctionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OGnbDuFunctionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OGnbDuFunctionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OGnbDuFunctionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OGnbDuFunctionValidationError) ErrorName() string { return "OGnbDuFunctionValidationError" }

// Error satisfies the builtin error interface
func (e OGnbDuFunctionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOGnbDuFunction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OGnbDuFunctionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OGnbDuFunctionValidationError{}

// Validate checks the field values on CellLocalId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CellLocalId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellLocalId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CellLocalIdMultiError, or
// nil if none found.
func (m *CellLocalId) ValidateAll() error {
	return m.validate(true)
}

func (m *CellLocalId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 16383 {
		err := CellLocalIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 16383]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CellLocalIdMultiError(errors)
	}

	return nil
}

// CellLocalIdMultiError is an error wrapping multiple validation errors
// returned by CellLocalId.ValidateAll() if the designated constraints aren't met.
type CellLocalIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellLocalIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellLocalIdMultiError) AllErrors() []error { return m }

// CellLocalIdValidationError is the validation error returned by
// CellLocalId.Validate if the designated constraints aren't met.
type CellLocalIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellLocalIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellLocalIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellLocalIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellLocalIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellLocalIdValidationError) ErrorName() string { return "CellLocalIdValidationError" }

// Error satisfies the builtin error interface
func (e CellLocalIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellLocalId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellLocalIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellLocalIdValidationError{}

// Validate checks the field values on ONrCellCu with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ONrCellCu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ONrCellCu with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ONrCellCuMultiError, or nil
// if none found.
func (m *ONrCellCu) ValidateAll() error {
	return m.validate(true)
}

func (m *ONrCellCu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCellLocalId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ONrCellCuValidationError{
					field:  "CellLocalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ONrCellCuValidationError{
					field:  "CellLocalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellLocalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ONrCellCuValidationError{
				field:  "CellLocalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlmnInfoList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ONrCellCuValidationError{
					field:  "PlmnInfoList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ONrCellCuValidationError{
					field:  "PlmnInfoList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlmnInfoList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ONrCellCuValidationError{
				field:  "PlmnInfoList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ONrCellCuMultiError(errors)
	}

	return nil
}

// ONrCellCuMultiError is an error wrapping multiple validation errors returned
// by ONrCellCu.ValidateAll() if the designated constraints aren't met.
type ONrCellCuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ONrCellCuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ONrCellCuMultiError) AllErrors() []error { return m }

// ONrCellCuValidationError is the validation error returned by
// ONrCellCu.Validate if the designated constraints aren't met.
type ONrCellCuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ONrCellCuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ONrCellCuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ONrCellCuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ONrCellCuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ONrCellCuValidationError) ErrorName() string { return "ONrCellCuValidationError" }

// Error satisfies the builtin error interface
func (e ONrCellCuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sONrCellCu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ONrCellCuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ONrCellCuValidationError{}

// Validate checks the field values on BwpList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BwpList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BwpList with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BwpListMultiError, or nil if none found.
func (m *BwpList) ValidateAll() error {
	return m.validate(true)
}

func (m *BwpList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 256 {
		err := BwpListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BwpListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BwpListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BwpListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BwpListMultiError(errors)
	}

	return nil
}

// BwpListMultiError is an error wrapping multiple validation errors returned
// by BwpList.ValidateAll() if the designated constraints aren't met.
type BwpListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BwpListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BwpListMultiError) AllErrors() []error { return m }

// BwpListValidationError is the validation error returned by BwpList.Validate
// if the designated constraints aren't met.
type BwpListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BwpListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BwpListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BwpListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BwpListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BwpListValidationError) ErrorName() string { return "BwpListValidationError" }

// Error satisfies the builtin error interface
func (e BwpListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBwpList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BwpListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BwpListValidationError{}

// Validate checks the field values on ONrCellDu with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ONrCellDu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ONrCellDu with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ONrCellDuMultiError, or nil
// if none found.
func (m *ONrCellDu) ValidateAll() error {
	return m.validate(true)
}

func (m *ONrCellDu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCellLocalId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ONrCellDuValidationError{
					field:  "CellLocalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ONrCellDuValidationError{
					field:  "CellLocalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellLocalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ONrCellDuValidationError{
				field:  "CellLocalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OperationalState

	// no validation rules for AdministrativeState

	// no validation rules for CellState

	if all {
		switch v := interface{}(m.GetPlmnInfoList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ONrCellDuValidationError{
					field:  "PlmnInfoList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ONrCellDuValidationError{
					field:  "PlmnInfoList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlmnInfoList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ONrCellDuValidationError{
				field:  "PlmnInfoList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNrPci()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ONrCellDuValidationError{
					field:  "NrPci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ONrCellDuValidationError{
					field:  "NrPci",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNrPci()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ONrCellDuValidationError{
				field:  "NrPci",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNrTac()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ONrCellDuValidationError{
					field:  "NrTac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ONrCellDuValidationError{
					field:  "NrTac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNrTac()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ONrCellDuValidationError{
				field:  "NrTac",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ArfcnDl

	// no validation rules for ArfcnUl

	// no validation rules for ArfcnSul

	// no validation rules for BSchannelBwDl

	// no validation rules for SsbFrequency

	// no validation rules for SsbPeriodicity

	// no validation rules for SsbSubCarrierSpacing

	// no validation rules for SsbOffset

	// no validation rules for SsbDuration

	// no validation rules for BSchannelBwUl

	// no validation rules for BSchannelBwSul

	if all {
		switch v := interface{}(m.GetBwpList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ONrCellDuValidationError{
					field:  "BwpList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ONrCellDuValidationError{
					field:  "BwpList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBwpList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ONrCellDuValidationError{
				field:  "BwpList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ONrCellDuMultiError(errors)
	}

	return nil
}

// ONrCellDuMultiError is an error wrapping multiple validation errors returned
// by ONrCellDu.ValidateAll() if the designated constraints aren't met.
type ONrCellDuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ONrCellDuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ONrCellDuMultiError) AllErrors() []error { return m }

// ONrCellDuValidationError is the validation error returned by
// ONrCellDu.Validate if the designated constraints aren't met.
type ONrCellDuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ONrCellDuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ONrCellDuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ONrCellDuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ONrCellDuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ONrCellDuValidationError) ErrorName() string { return "ONrCellDuValidationError" }

// Error satisfies the builtin error interface
func (e ONrCellDuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sONrCellDu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ONrCellDuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ONrCellDuValidationError{}

// Validate checks the field values on ORRmpolicyRatio with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ORRmpolicyRatio) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORRmpolicyRatio with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ORRmpolicyRatioMultiError, or nil if none found.
func (m *ORRmpolicyRatio) ValidateAll() error {
	return m.validate(true)
}

func (m *ORRmpolicyRatio) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for SchedulerType

	if all {
		switch v := interface{}(m.GetRRmpolicyMemberList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ORRmpolicyRatioValidationError{
					field:  "RRmpolicyMemberList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ORRmpolicyRatioValidationError{
					field:  "RRmpolicyMemberList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRRmpolicyMemberList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ORRmpolicyRatioValidationError{
				field:  "RRmpolicyMemberList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RRmpolicyMaxRatio

	// no validation rules for RRmpolicyMinRatio

	// no validation rules for RRmpolicyDedicatedRatio

	if len(errors) > 0 {
		return ORRmpolicyRatioMultiError(errors)
	}

	return nil
}

// ORRmpolicyRatioMultiError is an error wrapping multiple validation errors
// returned by ORRmpolicyRatio.ValidateAll() if the designated constraints
// aren't met.
type ORRmpolicyRatioMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORRmpolicyRatioMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORRmpolicyRatioMultiError) AllErrors() []error { return m }

// ORRmpolicyRatioValidationError is the validation error returned by
// ORRmpolicyRatio.Validate if the designated constraints aren't met.
type ORRmpolicyRatioValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORRmpolicyRatioValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORRmpolicyRatioValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORRmpolicyRatioValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORRmpolicyRatioValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORRmpolicyRatioValidationError) ErrorName() string { return "ORRmpolicyRatioValidationError" }

// Error satisfies the builtin error interface
func (e ORRmpolicyRatioValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORRmpolicyRatio.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORRmpolicyRatioValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORRmpolicyRatioValidationError{}

// Validate checks the field values on OBwp with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *OBwp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OBwp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OBwpMultiError, or nil if none found.
func (m *OBwp) ValidateAll() error {
	return m.validate(true)
}

func (m *OBwp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BwpContext

	// no validation rules for IsInitialBwp

	// no validation rules for SubCarrierSpacing

	// no validation rules for CyclicPrefix

	// no validation rules for StartRb

	// no validation rules for NumberOfRbs

	if len(errors) > 0 {
		return OBwpMultiError(errors)
	}

	return nil
}

// OBwpMultiError is an error wrapping multiple validation errors returned by
// OBwp.ValidateAll() if the designated constraints aren't met.
type OBwpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OBwpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OBwpMultiError) AllErrors() []error { return m }

// OBwpValidationError is the validation error returned by OBwp.Validate if the
// designated constraints aren't met.
type OBwpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OBwpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OBwpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OBwpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OBwpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OBwpValidationError) ErrorName() string { return "OBwpValidationError" }

// Error satisfies the builtin error interface
func (e OBwpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOBwp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OBwpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OBwpValidationError{}

// Validate checks the field values on RanConfigurationStructure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanConfigurationStructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanConfigurationStructure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanConfigurationStructureMultiError, or nil if none found.
func (m *RanConfigurationStructure) ValidateAll() error {
	return m.validate(true)
}

func (m *RanConfigurationStructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RanConfigurationStructure.(type) {

	case *RanConfigurationStructure_OGnbCuCpFunction:

		if all {
			switch v := interface{}(m.GetOGnbCuCpFunction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "OGnbCuCpFunction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "OGnbCuCpFunction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOGnbCuCpFunction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanConfigurationStructureValidationError{
					field:  "OGnbCuCpFunction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanConfigurationStructure_OGnbCuUpFunction:

		if all {
			switch v := interface{}(m.GetOGnbCuUpFunction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "OGnbCuUpFunction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "OGnbCuUpFunction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOGnbCuUpFunction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanConfigurationStructureValidationError{
					field:  "OGnbCuUpFunction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanConfigurationStructure_OGnbDuFunction:

		if all {
			switch v := interface{}(m.GetOGnbDuFunction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "OGnbDuFunction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "OGnbDuFunction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOGnbDuFunction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanConfigurationStructureValidationError{
					field:  "OGnbDuFunction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanConfigurationStructure_ONrCellCu:

		if all {
			switch v := interface{}(m.GetONrCellCu()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "ONrCellCu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "ONrCellCu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetONrCellCu()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanConfigurationStructureValidationError{
					field:  "ONrCellCu",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanConfigurationStructure_ONrCellDu:

		if all {
			switch v := interface{}(m.GetONrCellDu()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "ONrCellDu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "ONrCellDu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetONrCellDu()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanConfigurationStructureValidationError{
					field:  "ONrCellDu",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanConfigurationStructure_ORrmpolicyRatio:

		if all {
			switch v := interface{}(m.GetORrmpolicyRatio()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "ORrmpolicyRatio",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "ORrmpolicyRatio",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetORrmpolicyRatio()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanConfigurationStructureValidationError{
					field:  "ORrmpolicyRatio",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RanConfigurationStructure_OBwp:

		if all {
			switch v := interface{}(m.GetOBwp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "OBwp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanConfigurationStructureValidationError{
						field:  "OBwp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOBwp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanConfigurationStructureValidationError{
					field:  "OBwp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanConfigurationStructureMultiError(errors)
	}

	return nil
}

// RanConfigurationStructureMultiError is an error wrapping multiple validation
// errors returned by RanConfigurationStructure.ValidateAll() if the
// designated constraints aren't met.
type RanConfigurationStructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanConfigurationStructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanConfigurationStructureMultiError) AllErrors() []error { return m }

// RanConfigurationStructureValidationError is the validation error returned by
// RanConfigurationStructure.Validate if the designated constraints aren't met.
type RanConfigurationStructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanConfigurationStructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanConfigurationStructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanConfigurationStructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanConfigurationStructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanConfigurationStructureValidationError) ErrorName() string {
	return "RanConfigurationStructureValidationError"
}

// Error satisfies the builtin error interface
func (e RanConfigurationStructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanConfigurationStructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanConfigurationStructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanConfigurationStructureValidationError{}

// Validate checks the field values on E2SmCCcRIcIndicationHeader with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcRIcIndicationHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcRIcIndicationHeader with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcRIcIndicationHeaderMultiError, or nil if none found.
func (m *E2SmCCcRIcIndicationHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcRIcIndicationHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndicationHeaderFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcRIcIndicationHeaderValidationError{
					field:  "IndicationHeaderFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcRIcIndicationHeaderValidationError{
					field:  "IndicationHeaderFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndicationHeaderFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcRIcIndicationHeaderValidationError{
				field:  "IndicationHeaderFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcRIcIndicationHeaderMultiError(errors)
	}

	return nil
}

// E2SmCCcRIcIndicationHeaderMultiError is an error wrapping multiple
// validation errors returned by E2SmCCcRIcIndicationHeader.ValidateAll() if
// the designated constraints aren't met.
type E2SmCCcRIcIndicationHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcRIcIndicationHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcRIcIndicationHeaderMultiError) AllErrors() []error { return m }

// E2SmCCcRIcIndicationHeaderValidationError is the validation error returned
// by E2SmCCcRIcIndicationHeader.Validate if the designated constraints aren't met.
type E2SmCCcRIcIndicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcRIcIndicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcRIcIndicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcRIcIndicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcRIcIndicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcRIcIndicationHeaderValidationError) ErrorName() string {
	return "E2SmCCcRIcIndicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcRIcIndicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcRIcIndicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcRIcIndicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcRIcIndicationHeaderValidationError{}

// Validate checks the field values on IndicationHeaderFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndicationHeaderFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicationHeaderFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicationHeaderFormatMultiError, or nil if none found.
func (m *IndicationHeaderFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicationHeaderFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.IndicationHeaderFormat.(type) {

	case *IndicationHeaderFormat_E2SmCccIndicationHeaderFormat1:

		if all {
			switch v := interface{}(m.GetE2SmCccIndicationHeaderFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndicationHeaderFormatValidationError{
						field:  "E2SmCccIndicationHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndicationHeaderFormatValidationError{
						field:  "E2SmCccIndicationHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccIndicationHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndicationHeaderFormatValidationError{
					field:  "E2SmCccIndicationHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndicationHeaderFormatMultiError(errors)
	}

	return nil
}

// IndicationHeaderFormatMultiError is an error wrapping multiple validation
// errors returned by IndicationHeaderFormat.ValidateAll() if the designated
// constraints aren't met.
type IndicationHeaderFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicationHeaderFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicationHeaderFormatMultiError) AllErrors() []error { return m }

// IndicationHeaderFormatValidationError is the validation error returned by
// IndicationHeaderFormat.Validate if the designated constraints aren't met.
type IndicationHeaderFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicationHeaderFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicationHeaderFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicationHeaderFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicationHeaderFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicationHeaderFormatValidationError) ErrorName() string {
	return "IndicationHeaderFormatValidationError"
}

// Error satisfies the builtin error interface
func (e IndicationHeaderFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicationHeaderFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicationHeaderFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicationHeaderFormatValidationError{}

// Validate checks the field values on E2SmCCcIndicationHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcIndicationHeaderFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcIndicationHeaderFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmCCcIndicationHeaderFormat1MultiError, or nil if none found.
func (m *E2SmCCcIndicationHeaderFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcIndicationHeaderFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IndicationReason

	if len(m.GetEventTime()) != 8 {
		err := E2SmCCcIndicationHeaderFormat1ValidationError{
			field:  "EventTime",
			reason: "value length must be 8 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return E2SmCCcIndicationHeaderFormat1MultiError(errors)
	}

	return nil
}

// E2SmCCcIndicationHeaderFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmCCcIndicationHeaderFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmCCcIndicationHeaderFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcIndicationHeaderFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcIndicationHeaderFormat1MultiError) AllErrors() []error { return m }

// E2SmCCcIndicationHeaderFormat1ValidationError is the validation error
// returned by E2SmCCcIndicationHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmCCcIndicationHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcIndicationHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcIndicationHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcIndicationHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcIndicationHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcIndicationHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmCCcIndicationHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcIndicationHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcIndicationHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcIndicationHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcIndicationHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmCCcRIcIndicationMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcRIcIndicationMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcRIcIndicationMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcRIcIndicationMessageMultiError, or nil if none found.
func (m *E2SmCCcRIcIndicationMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcRIcIndicationMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndicationMessageFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcRIcIndicationMessageValidationError{
					field:  "IndicationMessageFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcRIcIndicationMessageValidationError{
					field:  "IndicationMessageFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndicationMessageFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcRIcIndicationMessageValidationError{
				field:  "IndicationMessageFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcRIcIndicationMessageMultiError(errors)
	}

	return nil
}

// E2SmCCcRIcIndicationMessageMultiError is an error wrapping multiple
// validation errors returned by E2SmCCcRIcIndicationMessage.ValidateAll() if
// the designated constraints aren't met.
type E2SmCCcRIcIndicationMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcRIcIndicationMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcRIcIndicationMessageMultiError) AllErrors() []error { return m }

// E2SmCCcRIcIndicationMessageValidationError is the validation error returned
// by E2SmCCcRIcIndicationMessage.Validate if the designated constraints
// aren't met.
type E2SmCCcRIcIndicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcRIcIndicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcRIcIndicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcRIcIndicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcRIcIndicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcRIcIndicationMessageValidationError) ErrorName() string {
	return "E2SmCCcRIcIndicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcRIcIndicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcRIcIndicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcRIcIndicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcRIcIndicationMessageValidationError{}

// Validate checks the field values on IndicationMessageFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndicationMessageFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicationMessageFormat with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicationMessageFormatMultiError, or nil if none found.
func (m *IndicationMessageFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicationMessageFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.IndicationMessageFormat.(type) {

	case *IndicationMessageFormat_E2SmCccIndicationMessageFormat1:

		if all {
			switch v := interface{}(m.GetE2SmCccIndicationMessageFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndicationMessageFormatValidationError{
						field:  "E2SmCccIndicationMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndicationMessageFormatValidationError{
						field:  "E2SmCccIndicationMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccIndicationMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndicationMessageFormatValidationError{
					field:  "E2SmCccIndicationMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *IndicationMessageFormat_E2SmCccIndicationMessageFormat2:

		if all {
			switch v := interface{}(m.GetE2SmCccIndicationMessageFormat2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndicationMessageFormatValidationError{
						field:  "E2SmCccIndicationMessageFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndicationMessageFormatValidationError{
						field:  "E2SmCccIndicationMessageFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccIndicationMessageFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndicationMessageFormatValidationError{
					field:  "E2SmCccIndicationMessageFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndicationMessageFormatMultiError(errors)
	}

	return nil
}

// IndicationMessageFormatMultiError is an error wrapping multiple validation
// errors returned by IndicationMessageFormat.ValidateAll() if the designated
// constraints aren't met.
type IndicationMessageFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicationMessageFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicationMessageFormatMultiError) AllErrors() []error { return m }

// IndicationMessageFormatValidationError is the validation error returned by
// IndicationMessageFormat.Validate if the designated constraints aren't met.
type IndicationMessageFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicationMessageFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicationMessageFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicationMessageFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicationMessageFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicationMessageFormatValidationError) ErrorName() string {
	return "IndicationMessageFormatValidationError"
}

// Error satisfies the builtin error interface
func (e IndicationMessageFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicationMessageFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicationMessageFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicationMessageFormatValidationError{}

// Validate checks the field values on E2SmCCcIndicationMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcIndicationMessageFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcIndicationMessageFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmCCcIndicationMessageFormat1MultiError, or nil if none found.
func (m *E2SmCCcIndicationMessageFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcIndicationMessageFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfConfigurationStructuresReported()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcIndicationMessageFormat1ValidationError{
					field:  "ListOfConfigurationStructuresReported",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcIndicationMessageFormat1ValidationError{
					field:  "ListOfConfigurationStructuresReported",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfConfigurationStructuresReported()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcIndicationMessageFormat1ValidationError{
				field:  "ListOfConfigurationStructuresReported",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcIndicationMessageFormat1MultiError(errors)
	}

	return nil
}

// E2SmCCcIndicationMessageFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmCCcIndicationMessageFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmCCcIndicationMessageFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcIndicationMessageFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcIndicationMessageFormat1MultiError) AllErrors() []error { return m }

// E2SmCCcIndicationMessageFormat1ValidationError is the validation error
// returned by E2SmCCcIndicationMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmCCcIndicationMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcIndicationMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcIndicationMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcIndicationMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcIndicationMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcIndicationMessageFormat1ValidationError) ErrorName() string {
	return "E2SmCCcIndicationMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcIndicationMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcIndicationMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcIndicationMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcIndicationMessageFormat1ValidationError{}

// Validate checks the field values on ListOfConfigurationsReported with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOfConfigurationsReported) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfConfigurationsReported with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOfConfigurationsReportedMultiError, or nil if none found.
func (m *ListOfConfigurationsReported) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfConfigurationsReported) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 65535 {
		err := ListOfConfigurationsReportedValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfConfigurationsReportedValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfConfigurationsReportedValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfConfigurationsReportedValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfConfigurationsReportedMultiError(errors)
	}

	return nil
}

// ListOfConfigurationsReportedMultiError is an error wrapping multiple
// validation errors returned by ListOfConfigurationsReported.ValidateAll() if
// the designated constraints aren't met.
type ListOfConfigurationsReportedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfConfigurationsReportedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfConfigurationsReportedMultiError) AllErrors() []error { return m }

// ListOfConfigurationsReportedValidationError is the validation error returned
// by ListOfConfigurationsReported.Validate if the designated constraints
// aren't met.
type ListOfConfigurationsReportedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfConfigurationsReportedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfConfigurationsReportedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfConfigurationsReportedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfConfigurationsReportedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfConfigurationsReportedValidationError) ErrorName() string {
	return "ListOfConfigurationsReportedValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfConfigurationsReportedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfConfigurationsReported.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfConfigurationsReportedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfConfigurationsReportedValidationError{}

// Validate checks the field values on ConfigurationStructure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigurationStructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigurationStructure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigurationStructureMultiError, or nil if none found.
func (m *ConfigurationStructure) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigurationStructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChangeType

	if all {
		switch v := interface{}(m.GetRanConfigurationStructureName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanConfigurationStructureName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureValidationError{
				field:  "RanConfigurationStructureName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValuesOfAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureValidationError{
					field:  "ValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureValidationError{
					field:  "ValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValuesOfAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureValidationError{
				field:  "ValuesOfAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OldValuesOfAttributes != nil {

		if all {
			switch v := interface{}(m.GetOldValuesOfAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigurationStructureValidationError{
						field:  "OldValuesOfAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigurationStructureValidationError{
						field:  "OldValuesOfAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOldValuesOfAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigurationStructureValidationError{
					field:  "OldValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigurationStructureMultiError(errors)
	}

	return nil
}

// ConfigurationStructureMultiError is an error wrapping multiple validation
// errors returned by ConfigurationStructure.ValidateAll() if the designated
// constraints aren't met.
type ConfigurationStructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigurationStructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigurationStructureMultiError) AllErrors() []error { return m }

// ConfigurationStructureValidationError is the validation error returned by
// ConfigurationStructure.Validate if the designated constraints aren't met.
type ConfigurationStructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationStructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationStructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationStructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationStructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationStructureValidationError) ErrorName() string {
	return "ConfigurationStructureValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigurationStructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigurationStructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationStructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationStructureValidationError{}

// Validate checks the field values on RanConfigurationStructureName with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanConfigurationStructureName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanConfigurationStructureName with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RanConfigurationStructureNameMultiError, or nil if none found.
func (m *RanConfigurationStructureName) ValidateAll() error {
	return m.validate(true)
}

func (m *RanConfigurationStructureName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 5 || l > 17 {
		err := RanConfigurationStructureNameValidationError{
			field:  "Value",
			reason: "value length must be between 5 and 17 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RanConfigurationStructureNameMultiError(errors)
	}

	return nil
}

// RanConfigurationStructureNameMultiError is an error wrapping multiple
// validation errors returned by RanConfigurationStructureName.ValidateAll()
// if the designated constraints aren't met.
type RanConfigurationStructureNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanConfigurationStructureNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanConfigurationStructureNameMultiError) AllErrors() []error { return m }

// RanConfigurationStructureNameValidationError is the validation error
// returned by RanConfigurationStructureName.Validate if the designated
// constraints aren't met.
type RanConfigurationStructureNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanConfigurationStructureNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanConfigurationStructureNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanConfigurationStructureNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanConfigurationStructureNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanConfigurationStructureNameValidationError) ErrorName() string {
	return "RanConfigurationStructureNameValidationError"
}

// Error satisfies the builtin error interface
func (e RanConfigurationStructureNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanConfigurationStructureName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanConfigurationStructureNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanConfigurationStructureNameValidationError{}

// Validate checks the field values on ValuesOfAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValuesOfAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValuesOfAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValuesOfAttributesMultiError, or nil if none found.
func (m *ValuesOfAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ValuesOfAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanConfigurationStructure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValuesOfAttributesValidationError{
					field:  "RanConfigurationStructure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValuesOfAttributesValidationError{
					field:  "RanConfigurationStructure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanConfigurationStructure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValuesOfAttributesValidationError{
				field:  "RanConfigurationStructure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValuesOfAttributesMultiError(errors)
	}

	return nil
}

// ValuesOfAttributesMultiError is an error wrapping multiple validation errors
// returned by ValuesOfAttributes.ValidateAll() if the designated constraints
// aren't met.
type ValuesOfAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValuesOfAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValuesOfAttributesMultiError) AllErrors() []error { return m }

// ValuesOfAttributesValidationError is the validation error returned by
// ValuesOfAttributes.Validate if the designated constraints aren't met.
type ValuesOfAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValuesOfAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValuesOfAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValuesOfAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValuesOfAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValuesOfAttributesValidationError) ErrorName() string {
	return "ValuesOfAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ValuesOfAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValuesOfAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValuesOfAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValuesOfAttributesValidationError{}

// Validate checks the field values on E2SmCCcIndicationMessageFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcIndicationMessageFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcIndicationMessageFormat2 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmCCcIndicationMessageFormat2MultiError, or nil if none found.
func (m *E2SmCCcIndicationMessageFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcIndicationMessageFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfCellsReported()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcIndicationMessageFormat2ValidationError{
					field:  "ListOfCellsReported",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcIndicationMessageFormat2ValidationError{
					field:  "ListOfCellsReported",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfCellsReported()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcIndicationMessageFormat2ValidationError{
				field:  "ListOfCellsReported",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcIndicationMessageFormat2MultiError(errors)
	}

	return nil
}

// E2SmCCcIndicationMessageFormat2MultiError is an error wrapping multiple
// validation errors returned by E2SmCCcIndicationMessageFormat2.ValidateAll()
// if the designated constraints aren't met.
type E2SmCCcIndicationMessageFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcIndicationMessageFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcIndicationMessageFormat2MultiError) AllErrors() []error { return m }

// E2SmCCcIndicationMessageFormat2ValidationError is the validation error
// returned by E2SmCCcIndicationMessageFormat2.Validate if the designated
// constraints aren't met.
type E2SmCCcIndicationMessageFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcIndicationMessageFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcIndicationMessageFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcIndicationMessageFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcIndicationMessageFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcIndicationMessageFormat2ValidationError) ErrorName() string {
	return "E2SmCCcIndicationMessageFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcIndicationMessageFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcIndicationMessageFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcIndicationMessageFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcIndicationMessageFormat2ValidationError{}

// Validate checks the field values on ListOfCellsReported with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOfCellsReported) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfCellsReported with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOfCellsReportedMultiError, or nil if none found.
func (m *ListOfCellsReported) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfCellsReported) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 65535 {
		err := ListOfCellsReportedValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfCellsReportedValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfCellsReportedValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfCellsReportedValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfCellsReportedMultiError(errors)
	}

	return nil
}

// ListOfCellsReportedMultiError is an error wrapping multiple validation
// errors returned by ListOfCellsReported.ValidateAll() if the designated
// constraints aren't met.
type ListOfCellsReportedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfCellsReportedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfCellsReportedMultiError) AllErrors() []error { return m }

// ListOfCellsReportedValidationError is the validation error returned by
// ListOfCellsReported.Validate if the designated constraints aren't met.
type ListOfCellsReportedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfCellsReportedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfCellsReportedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfCellsReportedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfCellsReportedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfCellsReportedValidationError) ErrorName() string {
	return "ListOfCellsReportedValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfCellsReportedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfCellsReported.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfCellsReportedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfCellsReportedValidationError{}

// Validate checks the field values on CellReported with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CellReported) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellReported with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CellReportedMultiError, or
// nil if none found.
func (m *CellReported) ValidateAll() error {
	return m.validate(true)
}

func (m *CellReported) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCellGlobalId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CellReportedValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CellReportedValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellReportedValidationError{
				field:  "CellGlobalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetListOfConfigurationStructuresReported()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CellReportedValidationError{
					field:  "ListOfConfigurationStructuresReported",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CellReportedValidationError{
					field:  "ListOfConfigurationStructuresReported",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfConfigurationStructuresReported()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellReportedValidationError{
				field:  "ListOfConfigurationStructuresReported",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CellReportedMultiError(errors)
	}

	return nil
}

// CellReportedMultiError is an error wrapping multiple validation errors
// returned by CellReported.ValidateAll() if the designated constraints aren't met.
type CellReportedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellReportedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellReportedMultiError) AllErrors() []error { return m }

// CellReportedValidationError is the validation error returned by
// CellReported.Validate if the designated constraints aren't met.
type CellReportedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellReportedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellReportedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellReportedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellReportedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellReportedValidationError) ErrorName() string { return "CellReportedValidationError" }

// Error satisfies the builtin error interface
func (e CellReportedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellReported.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellReportedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellReportedValidationError{}

// Validate checks the field values on CellGlobalId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CellGlobalId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellGlobalId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CellGlobalIdMultiError, or
// nil if none found.
func (m *CellGlobalId) ValidateAll() error {
	return m.validate(true)
}

func (m *CellGlobalId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.CellGlobalId.(type) {

	case *CellGlobalId_NRCgi:

		if all {
			switch v := interface{}(m.GetNRCgi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellGlobalIdValidationError{
						field:  "NRCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellGlobalIdValidationError{
						field:  "NRCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNRCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellGlobalIdValidationError{
					field:  "NRCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CellGlobalId_EUtraCgi:

		if all {
			switch v := interface{}(m.GetEUtraCgi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellGlobalIdValidationError{
						field:  "EUtraCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellGlobalIdValidationError{
						field:  "EUtraCgi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEUtraCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellGlobalIdValidationError{
					field:  "EUtraCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CellGlobalIdMultiError(errors)
	}

	return nil
}

// CellGlobalIdMultiError is an error wrapping multiple validation errors
// returned by CellGlobalId.ValidateAll() if the designated constraints aren't met.
type CellGlobalIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellGlobalIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellGlobalIdMultiError) AllErrors() []error { return m }

// CellGlobalIdValidationError is the validation error returned by
// CellGlobalId.Validate if the designated constraints aren't met.
type CellGlobalIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellGlobalIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellGlobalIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellGlobalIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellGlobalIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellGlobalIdValidationError) ErrorName() string { return "CellGlobalIdValidationError" }

// Error satisfies the builtin error interface
func (e CellGlobalIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellGlobalId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellGlobalIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellGlobalIdValidationError{}

// Validate checks the field values on E2SmCCcRIcControlHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcRIcControlHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcRIcControlHeader with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcRIcControlHeaderMultiError, or nil if none found.
func (m *E2SmCCcRIcControlHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcRIcControlHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetControlHeaderFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcRIcControlHeaderValidationError{
					field:  "ControlHeaderFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcRIcControlHeaderValidationError{
					field:  "ControlHeaderFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControlHeaderFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcRIcControlHeaderValidationError{
				field:  "ControlHeaderFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcRIcControlHeaderMultiError(errors)
	}

	return nil
}

// E2SmCCcRIcControlHeaderMultiError is an error wrapping multiple validation
// errors returned by E2SmCCcRIcControlHeader.ValidateAll() if the designated
// constraints aren't met.
type E2SmCCcRIcControlHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcRIcControlHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcRIcControlHeaderMultiError) AllErrors() []error { return m }

// E2SmCCcRIcControlHeaderValidationError is the validation error returned by
// E2SmCCcRIcControlHeader.Validate if the designated constraints aren't met.
type E2SmCCcRIcControlHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcRIcControlHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcRIcControlHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcRIcControlHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcRIcControlHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcRIcControlHeaderValidationError) ErrorName() string {
	return "E2SmCCcRIcControlHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcRIcControlHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcRIcControlHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcRIcControlHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcRIcControlHeaderValidationError{}

// Validate checks the field values on ControlHeaderFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ControlHeaderFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControlHeaderFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ControlHeaderFormatMultiError, or nil if none found.
func (m *ControlHeaderFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *ControlHeaderFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.ControlHeaderFormat.(type) {

	case *ControlHeaderFormat_E2SmCccControlHeaderFormat1:

		if all {
			switch v := interface{}(m.GetE2SmCccControlHeaderFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControlHeaderFormatValidationError{
						field:  "E2SmCccControlHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControlHeaderFormatValidationError{
						field:  "E2SmCccControlHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccControlHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControlHeaderFormatValidationError{
					field:  "E2SmCccControlHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ControlHeaderFormatMultiError(errors)
	}

	return nil
}

// ControlHeaderFormatMultiError is an error wrapping multiple validation
// errors returned by ControlHeaderFormat.ValidateAll() if the designated
// constraints aren't met.
type ControlHeaderFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControlHeaderFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControlHeaderFormatMultiError) AllErrors() []error { return m }

// ControlHeaderFormatValidationError is the validation error returned by
// ControlHeaderFormat.Validate if the designated constraints aren't met.
type ControlHeaderFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlHeaderFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlHeaderFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlHeaderFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlHeaderFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlHeaderFormatValidationError) ErrorName() string {
	return "ControlHeaderFormatValidationError"
}

// Error satisfies the builtin error interface
func (e ControlHeaderFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlHeaderFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlHeaderFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlHeaderFormatValidationError{}

// Validate checks the field values on E2SmCCcControlHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcControlHeaderFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcControlHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcControlHeaderFormat1MultiError, or nil if none found.
func (m *E2SmCCcControlHeaderFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcControlHeaderFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcControlHeaderFormat1ValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcControlHeaderFormat1ValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcControlHeaderFormat1ValidationError{
				field:  "RicStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcControlHeaderFormat1MultiError(errors)
	}

	return nil
}

// E2SmCCcControlHeaderFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmCCcControlHeaderFormat1.ValidateAll() if
// the designated constraints aren't met.
type E2SmCCcControlHeaderFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcControlHeaderFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcControlHeaderFormat1MultiError) AllErrors() []error { return m }

// E2SmCCcControlHeaderFormat1ValidationError is the validation error returned
// by E2SmCCcControlHeaderFormat1.Validate if the designated constraints
// aren't met.
type E2SmCCcControlHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcControlHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcControlHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcControlHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcControlHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcControlHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmCCcControlHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcControlHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcControlHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcControlHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcControlHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmCCcRIcControlMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcRIcControlMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcRIcControlMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcRIcControlMessageMultiError, or nil if none found.
func (m *E2SmCCcRIcControlMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcRIcControlMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetControlMessageFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcRIcControlMessageValidationError{
					field:  "ControlMessageFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcRIcControlMessageValidationError{
					field:  "ControlMessageFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControlMessageFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcRIcControlMessageValidationError{
				field:  "ControlMessageFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcRIcControlMessageMultiError(errors)
	}

	return nil
}

// E2SmCCcRIcControlMessageMultiError is an error wrapping multiple validation
// errors returned by E2SmCCcRIcControlMessage.ValidateAll() if the designated
// constraints aren't met.
type E2SmCCcRIcControlMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcRIcControlMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcRIcControlMessageMultiError) AllErrors() []error { return m }

// E2SmCCcRIcControlMessageValidationError is the validation error returned by
// E2SmCCcRIcControlMessage.Validate if the designated constraints aren't met.
type E2SmCCcRIcControlMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcRIcControlMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcRIcControlMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcRIcControlMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcRIcControlMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcRIcControlMessageValidationError) ErrorName() string {
	return "E2SmCCcRIcControlMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcRIcControlMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcRIcControlMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcRIcControlMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcRIcControlMessageValidationError{}

// Validate checks the field values on ControlMessageFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ControlMessageFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControlMessageFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ControlMessageFormatMultiError, or nil if none found.
func (m *ControlMessageFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *ControlMessageFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.ControlMessageFormat.(type) {

	case *ControlMessageFormat_E2SmCccControlMessageFormat1:

		if all {
			switch v := interface{}(m.GetE2SmCccControlMessageFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControlMessageFormatValidationError{
						field:  "E2SmCccControlMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControlMessageFormatValidationError{
						field:  "E2SmCccControlMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccControlMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControlMessageFormatValidationError{
					field:  "E2SmCccControlMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ControlMessageFormat_E2SmCccControlMessageFormat2:

		if all {
			switch v := interface{}(m.GetE2SmCccControlMessageFormat2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControlMessageFormatValidationError{
						field:  "E2SmCccControlMessageFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControlMessageFormatValidationError{
						field:  "E2SmCccControlMessageFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccControlMessageFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControlMessageFormatValidationError{
					field:  "E2SmCccControlMessageFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ControlMessageFormatMultiError(errors)
	}

	return nil
}

// ControlMessageFormatMultiError is an error wrapping multiple validation
// errors returned by ControlMessageFormat.ValidateAll() if the designated
// constraints aren't met.
type ControlMessageFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControlMessageFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControlMessageFormatMultiError) AllErrors() []error { return m }

// ControlMessageFormatValidationError is the validation error returned by
// ControlMessageFormat.Validate if the designated constraints aren't met.
type ControlMessageFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlMessageFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlMessageFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlMessageFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlMessageFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlMessageFormatValidationError) ErrorName() string {
	return "ControlMessageFormatValidationError"
}

// Error satisfies the builtin error interface
func (e ControlMessageFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlMessageFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlMessageFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlMessageFormatValidationError{}

// Validate checks the field values on E2SmCCcControlMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcControlMessageFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcControlMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcControlMessageFormat1MultiError, or nil if none found.
func (m *E2SmCCcControlMessageFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcControlMessageFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfConfigurationStructures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcControlMessageFormat1ValidationError{
					field:  "ListOfConfigurationStructures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcControlMessageFormat1ValidationError{
					field:  "ListOfConfigurationStructures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfConfigurationStructures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcControlMessageFormat1ValidationError{
				field:  "ListOfConfigurationStructures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcControlMessageFormat1MultiError(errors)
	}

	return nil
}

// E2SmCCcControlMessageFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmCCcControlMessageFormat1.ValidateAll() if
// the designated constraints aren't met.
type E2SmCCcControlMessageFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcControlMessageFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcControlMessageFormat1MultiError) AllErrors() []error { return m }

// E2SmCCcControlMessageFormat1ValidationError is the validation error returned
// by E2SmCCcControlMessageFormat1.Validate if the designated constraints
// aren't met.
type E2SmCCcControlMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcControlMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcControlMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcControlMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcControlMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcControlMessageFormat1ValidationError) ErrorName() string {
	return "E2SmCCcControlMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcControlMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcControlMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcControlMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcControlMessageFormat1ValidationError{}

// Validate checks the field values on ListOfConfigurationStructures with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOfConfigurationStructures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfConfigurationStructures with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOfConfigurationStructuresMultiError, or nil if none found.
func (m *ListOfConfigurationStructures) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfConfigurationStructures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 65535 {
		err := ListOfConfigurationStructuresValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfConfigurationStructuresValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfConfigurationStructuresValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfConfigurationStructuresValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfConfigurationStructuresMultiError(errors)
	}

	return nil
}

// ListOfConfigurationStructuresMultiError is an error wrapping multiple
// validation errors returned by ListOfConfigurationStructures.ValidateAll()
// if the designated constraints aren't met.
type ListOfConfigurationStructuresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfConfigurationStructuresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfConfigurationStructuresMultiError) AllErrors() []error { return m }

// ListOfConfigurationStructuresValidationError is the validation error
// returned by ListOfConfigurationStructures.Validate if the designated
// constraints aren't met.
type ListOfConfigurationStructuresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfConfigurationStructuresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfConfigurationStructuresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfConfigurationStructuresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfConfigurationStructuresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfConfigurationStructuresValidationError) ErrorName() string {
	return "ListOfConfigurationStructuresValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfConfigurationStructuresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfConfigurationStructures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfConfigurationStructuresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfConfigurationStructuresValidationError{}

// Validate checks the field values on ConfigurationStructureWrite with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigurationStructureWrite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigurationStructureWrite with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigurationStructureWriteMultiError, or nil if none found.
func (m *ConfigurationStructureWrite) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigurationStructureWrite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanConfigurationStructureName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureWriteValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureWriteValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanConfigurationStructureName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureWriteValidationError{
				field:  "RanConfigurationStructureName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOldValuesOfAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureWriteValidationError{
					field:  "OldValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureWriteValidationError{
					field:  "OldValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOldValuesOfAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureWriteValidationError{
				field:  "OldValuesOfAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNewValuesOfAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureWriteValidationError{
					field:  "NewValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureWriteValidationError{
					field:  "NewValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewValuesOfAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureWriteValidationError{
				field:  "NewValuesOfAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigurationStructureWriteMultiError(errors)
	}

	return nil
}

// ConfigurationStructureWriteMultiError is an error wrapping multiple
// validation errors returned by ConfigurationStructureWrite.ValidateAll() if
// the designated constraints aren't met.
type ConfigurationStructureWriteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigurationStructureWriteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigurationStructureWriteMultiError) AllErrors() []error { return m }

// ConfigurationStructureWriteValidationError is the validation error returned
// by ConfigurationStructureWrite.Validate if the designated constraints
// aren't met.
type ConfigurationStructureWriteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationStructureWriteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationStructureWriteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationStructureWriteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationStructureWriteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationStructureWriteValidationError) ErrorName() string {
	return "ConfigurationStructureWriteValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigurationStructureWriteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigurationStructureWrite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationStructureWriteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationStructureWriteValidationError{}

// Validate checks the field values on E2SmCCcControlMessageFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcControlMessageFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcControlMessageFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcControlMessageFormat2MultiError, or nil if none found.
func (m *E2SmCCcControlMessageFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcControlMessageFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfCellsReported()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcControlMessageFormat2ValidationError{
					field:  "ListOfCellsReported",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcControlMessageFormat2ValidationError{
					field:  "ListOfCellsReported",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfCellsReported()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcControlMessageFormat2ValidationError{
				field:  "ListOfCellsReported",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcControlMessageFormat2MultiError(errors)
	}

	return nil
}

// E2SmCCcControlMessageFormat2MultiError is an error wrapping multiple
// validation errors returned by E2SmCCcControlMessageFormat2.ValidateAll() if
// the designated constraints aren't met.
type E2SmCCcControlMessageFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcControlMessageFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcControlMessageFormat2MultiError) AllErrors() []error { return m }

// E2SmCCcControlMessageFormat2ValidationError is the validation error returned
// by E2SmCCcControlMessageFormat2.Validate if the designated constraints
// aren't met.
type E2SmCCcControlMessageFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcControlMessageFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcControlMessageFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcControlMessageFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcControlMessageFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcControlMessageFormat2ValidationError) ErrorName() string {
	return "E2SmCCcControlMessageFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcControlMessageFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcControlMessageFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcControlMessageFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcControlMessageFormat2ValidationError{}

// Validate checks the field values on ListOfCells with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOfCells) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfCells with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOfCellsMultiError, or
// nil if none found.
func (m *ListOfCells) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfCells) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 65535 {
		err := ListOfCellsValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 65535 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfCellsValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfCellsValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfCellsValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfCellsMultiError(errors)
	}

	return nil
}

// ListOfCellsMultiError is an error wrapping multiple validation errors
// returned by ListOfCells.ValidateAll() if the designated constraints aren't met.
type ListOfCellsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfCellsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfCellsMultiError) AllErrors() []error { return m }

// ListOfCellsValidationError is the validation error returned by
// ListOfCells.Validate if the designated constraints aren't met.
type ListOfCellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfCellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfCellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfCellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfCellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfCellsValidationError) ErrorName() string { return "ListOfCellsValidationError" }

// Error satisfies the builtin error interface
func (e ListOfCellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfCells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfCellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfCellsValidationError{}

// Validate checks the field values on CellControlled with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CellControlled) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellControlled with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CellControlledMultiError,
// or nil if none found.
func (m *CellControlled) ValidateAll() error {
	return m.validate(true)
}

func (m *CellControlled) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCellGlobalId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CellControlledValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CellControlledValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellControlledValidationError{
				field:  "CellGlobalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetListOfConfigurationStructures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CellControlledValidationError{
					field:  "ListOfConfigurationStructures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CellControlledValidationError{
					field:  "ListOfConfigurationStructures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfConfigurationStructures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellControlledValidationError{
				field:  "ListOfConfigurationStructures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CellControlledMultiError(errors)
	}

	return nil
}

// CellControlledMultiError is an error wrapping multiple validation errors
// returned by CellControlled.ValidateAll() if the designated constraints
// aren't met.
type CellControlledMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellControlledMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellControlledMultiError) AllErrors() []error { return m }

// CellControlledValidationError is the validation error returned by
// CellControlled.Validate if the designated constraints aren't met.
type CellControlledValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellControlledValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellControlledValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellControlledValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellControlledValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellControlledValidationError) ErrorName() string { return "CellControlledValidationError" }

// Error satisfies the builtin error interface
func (e CellControlledValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellControlled.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellControlledValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellControlledValidationError{}

// Validate checks the field values on E2SmCCcRAnfunctionDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcRAnfunctionDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcRAnfunctionDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcRAnfunctionDefinitionMultiError, or nil if none found.
func (m *E2SmCCcRAnfunctionDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcRAnfunctionDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanFunctionName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcRAnfunctionDefinitionValidationError{
					field:  "RanFunctionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcRAnfunctionDefinitionValidationError{
					field:  "RanFunctionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcRAnfunctionDefinitionValidationError{
				field:  "RanFunctionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ListOfSupportedNodeLevelConfigurationStructures != nil {

		if all {
			switch v := interface{}(m.GetListOfSupportedNodeLevelConfigurationStructures()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmCCcRAnfunctionDefinitionValidationError{
						field:  "ListOfSupportedNodeLevelConfigurationStructures",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmCCcRAnfunctionDefinitionValidationError{
						field:  "ListOfSupportedNodeLevelConfigurationStructures",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListOfSupportedNodeLevelConfigurationStructures()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmCCcRAnfunctionDefinitionValidationError{
					field:  "ListOfSupportedNodeLevelConfigurationStructures",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ListOfCellsForRanfunctionDefinition != nil {

		if all {
			switch v := interface{}(m.GetListOfCellsForRanfunctionDefinition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmCCcRAnfunctionDefinitionValidationError{
						field:  "ListOfCellsForRanfunctionDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmCCcRAnfunctionDefinitionValidationError{
						field:  "ListOfCellsForRanfunctionDefinition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListOfCellsForRanfunctionDefinition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmCCcRAnfunctionDefinitionValidationError{
					field:  "ListOfCellsForRanfunctionDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmCCcRAnfunctionDefinitionMultiError(errors)
	}

	return nil
}

// E2SmCCcRAnfunctionDefinitionMultiError is an error wrapping multiple
// validation errors returned by E2SmCCcRAnfunctionDefinition.ValidateAll() if
// the designated constraints aren't met.
type E2SmCCcRAnfunctionDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcRAnfunctionDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcRAnfunctionDefinitionMultiError) AllErrors() []error { return m }

// E2SmCCcRAnfunctionDefinitionValidationError is the validation error returned
// by E2SmCCcRAnfunctionDefinition.Validate if the designated constraints
// aren't met.
type E2SmCCcRAnfunctionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcRAnfunctionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcRAnfunctionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcRAnfunctionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcRAnfunctionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcRAnfunctionDefinitionValidationError) ErrorName() string {
	return "E2SmCCcRAnfunctionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcRAnfunctionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcRAnfunctionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcRAnfunctionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcRAnfunctionDefinitionValidationError{}

// Validate checks the field values on
// ListOfSupportedRanconfigurationStructures with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOfSupportedRanconfigurationStructures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOfSupportedRanconfigurationStructures with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListOfSupportedRanconfigurationStructuresMultiError, or nil if none found.
func (m *ListOfSupportedRanconfigurationStructures) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfSupportedRanconfigurationStructures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) > 1024 {
		err := ListOfSupportedRanconfigurationStructuresValidationError{
			field:  "Value",
			reason: "value must contain no more than 1024 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfSupportedRanconfigurationStructuresValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfSupportedRanconfigurationStructuresValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfSupportedRanconfigurationStructuresValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfSupportedRanconfigurationStructuresMultiError(errors)
	}

	return nil
}

// ListOfSupportedRanconfigurationStructuresMultiError is an error wrapping
// multiple validation errors returned by
// ListOfSupportedRanconfigurationStructures.ValidateAll() if the designated
// constraints aren't met.
type ListOfSupportedRanconfigurationStructuresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfSupportedRanconfigurationStructuresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfSupportedRanconfigurationStructuresMultiError) AllErrors() []error { return m }

// ListOfSupportedRanconfigurationStructuresValidationError is the validation
// error returned by ListOfSupportedRanconfigurationStructures.Validate if the
// designated constraints aren't met.
type ListOfSupportedRanconfigurationStructuresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfSupportedRanconfigurationStructuresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfSupportedRanconfigurationStructuresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfSupportedRanconfigurationStructuresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfSupportedRanconfigurationStructuresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfSupportedRanconfigurationStructuresValidationError) ErrorName() string {
	return "ListOfSupportedRanconfigurationStructuresValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfSupportedRanconfigurationStructuresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfSupportedRanconfigurationStructures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfSupportedRanconfigurationStructuresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfSupportedRanconfigurationStructuresValidationError{}

// Validate checks the field values on RanconfigurationStructure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanconfigurationStructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanconfigurationStructure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanconfigurationStructureMultiError, or nil if none found.
func (m *RanconfigurationStructure) ValidateAll() error {
	return m.validate(true)
}

func (m *RanconfigurationStructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanConfigurationStructureName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanconfigurationStructureValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanconfigurationStructureValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanConfigurationStructureName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanconfigurationStructureValidationError{
				field:  "RanConfigurationStructureName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ListOfSupportedAttributes != nil {

		if all {
			switch v := interface{}(m.GetListOfSupportedAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanconfigurationStructureValidationError{
						field:  "ListOfSupportedAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanconfigurationStructureValidationError{
						field:  "ListOfSupportedAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListOfSupportedAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanconfigurationStructureValidationError{
					field:  "ListOfSupportedAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanconfigurationStructureMultiError(errors)
	}

	return nil
}

// RanconfigurationStructureMultiError is an error wrapping multiple validation
// errors returned by RanconfigurationStructure.ValidateAll() if the
// designated constraints aren't met.
type RanconfigurationStructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanconfigurationStructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanconfigurationStructureMultiError) AllErrors() []error { return m }

// RanconfigurationStructureValidationError is the validation error returned by
// RanconfigurationStructure.Validate if the designated constraints aren't met.
type RanconfigurationStructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanconfigurationStructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanconfigurationStructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanconfigurationStructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanconfigurationStructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanconfigurationStructureValidationError) ErrorName() string {
	return "RanconfigurationStructureValidationError"
}

// Error satisfies the builtin error interface
func (e RanconfigurationStructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanconfigurationStructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanconfigurationStructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanconfigurationStructureValidationError{}

// Validate checks the field values on ListOfSupportedAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOfSupportedAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfSupportedAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOfSupportedAttributesMultiError, or nil if none found.
func (m *ListOfSupportedAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfSupportedAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) > 65535 {
		err := ListOfSupportedAttributesValidationError{
			field:  "Value",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfSupportedAttributesValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfSupportedAttributesValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfSupportedAttributesValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfSupportedAttributesMultiError(errors)
	}

	return nil
}

// ListOfSupportedAttributesMultiError is an error wrapping multiple validation
// errors returned by ListOfSupportedAttributes.ValidateAll() if the
// designated constraints aren't met.
type ListOfSupportedAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfSupportedAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfSupportedAttributesMultiError) AllErrors() []error { return m }

// ListOfSupportedAttributesValidationError is the validation error returned by
// ListOfSupportedAttributes.Validate if the designated constraints aren't met.
type ListOfSupportedAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfSupportedAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfSupportedAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfSupportedAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfSupportedAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfSupportedAttributesValidationError) ErrorName() string {
	return "ListOfSupportedAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfSupportedAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfSupportedAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfSupportedAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfSupportedAttributesValidationError{}

// Validate checks the field values on Attribute with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attribute with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttributeMultiError, or nil
// if none found.
func (m *Attribute) ValidateAll() error {
	return m.validate(true)
}

func (m *Attribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttributeName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttributeValidationError{
					field:  "AttributeName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttributeValidationError{
					field:  "AttributeName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttributeName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttributeValidationError{
				field:  "AttributeName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSupportedServices()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttributeValidationError{
					field:  "SupportedServices",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttributeValidationError{
					field:  "SupportedServices",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupportedServices()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttributeValidationError{
				field:  "SupportedServices",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttributeMultiError(errors)
	}

	return nil
}

// AttributeMultiError is an error wrapping multiple validation errors returned
// by Attribute.ValidateAll() if the designated constraints aren't met.
type AttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttributeMultiError) AllErrors() []error { return m }

// AttributeValidationError is the validation error returned by
// Attribute.Validate if the designated constraints aren't met.
type AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValidationError) ErrorName() string { return "AttributeValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValidationError{}

// Validate checks the field values on Ricservices with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ricservices) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ricservices with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicservicesMultiError, or
// nil if none found.
func (m *Ricservices) ValidateAll() error {
	return m.validate(true)
}

func (m *Ricservices) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.EventTrigger != nil {

		if all {
			switch v := interface{}(m.GetEventTrigger()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicservicesValidationError{
						field:  "EventTrigger",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicservicesValidationError{
						field:  "EventTrigger",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEventTrigger()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicservicesValidationError{
					field:  "EventTrigger",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ReportService != nil {

		if all {
			switch v := interface{}(m.GetReportService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicservicesValidationError{
						field:  "ReportService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicservicesValidationError{
						field:  "ReportService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReportService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicservicesValidationError{
					field:  "ReportService",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.InsertService != nil {

		if all {
			switch v := interface{}(m.GetInsertService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicservicesValidationError{
						field:  "InsertService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicservicesValidationError{
						field:  "InsertService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInsertService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicservicesValidationError{
					field:  "InsertService",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ControlService != nil {

		if all {
			switch v := interface{}(m.GetControlService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicservicesValidationError{
						field:  "ControlService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicservicesValidationError{
						field:  "ControlService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetControlService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicservicesValidationError{
					field:  "ControlService",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PolicyService != nil {

		if all {
			switch v := interface{}(m.GetPolicyService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RicservicesValidationError{
						field:  "PolicyService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RicservicesValidationError{
						field:  "PolicyService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPolicyService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicservicesValidationError{
					field:  "PolicyService",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RicservicesMultiError(errors)
	}

	return nil
}

// RicservicesMultiError is an error wrapping multiple validation errors
// returned by Ricservices.ValidateAll() if the designated constraints aren't met.
type RicservicesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicservicesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicservicesMultiError) AllErrors() []error { return m }

// RicservicesValidationError is the validation error returned by
// Ricservices.Validate if the designated constraints aren't met.
type RicservicesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicservicesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicservicesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicservicesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicservicesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicservicesValidationError) ErrorName() string { return "RicservicesValidationError" }

// Error satisfies the builtin error interface
func (e RicservicesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicservices.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicservicesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicservicesValidationError{}

// Validate checks the field values on EventTrigger with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventTrigger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTrigger with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventTriggerMultiError, or
// nil if none found.
func (m *EventTrigger) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTrigger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfSupportedEventTriggerStyles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerValidationError{
					field:  "ListOfSupportedEventTriggerStyles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerValidationError{
					field:  "ListOfSupportedEventTriggerStyles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfSupportedEventTriggerStyles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerValidationError{
				field:  "ListOfSupportedEventTriggerStyles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventTriggerMultiError(errors)
	}

	return nil
}

// EventTriggerMultiError is an error wrapping multiple validation errors
// returned by EventTrigger.ValidateAll() if the designated constraints aren't met.
type EventTriggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerMultiError) AllErrors() []error { return m }

// EventTriggerValidationError is the validation error returned by
// EventTrigger.Validate if the designated constraints aren't met.
type EventTriggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerValidationError) ErrorName() string { return "EventTriggerValidationError" }

// Error satisfies the builtin error interface
func (e EventTriggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTrigger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerValidationError{}

// Validate checks the field values on ListOfSupportedEventTriggerStyles with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOfSupportedEventTriggerStyles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfSupportedEventTriggerStyles
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOfSupportedEventTriggerStylesMultiError, or nil if none found.
func (m *ListOfSupportedEventTriggerStyles) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfSupportedEventTriggerStyles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 63 {
		err := ListOfSupportedEventTriggerStylesValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfSupportedEventTriggerStylesValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfSupportedEventTriggerStylesValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfSupportedEventTriggerStylesValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfSupportedEventTriggerStylesMultiError(errors)
	}

	return nil
}

// ListOfSupportedEventTriggerStylesMultiError is an error wrapping multiple
// validation errors returned by
// ListOfSupportedEventTriggerStyles.ValidateAll() if the designated
// constraints aren't met.
type ListOfSupportedEventTriggerStylesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfSupportedEventTriggerStylesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfSupportedEventTriggerStylesMultiError) AllErrors() []error { return m }

// ListOfSupportedEventTriggerStylesValidationError is the validation error
// returned by ListOfSupportedEventTriggerStyles.Validate if the designated
// constraints aren't met.
type ListOfSupportedEventTriggerStylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfSupportedEventTriggerStylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfSupportedEventTriggerStylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfSupportedEventTriggerStylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfSupportedEventTriggerStylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfSupportedEventTriggerStylesValidationError) ErrorName() string {
	return "ListOfSupportedEventTriggerStylesValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfSupportedEventTriggerStylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfSupportedEventTriggerStyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfSupportedEventTriggerStylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfSupportedEventTriggerStylesValidationError{}

// Validate checks the field values on EventTriggerStyle with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EventTriggerStyle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerStyle with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventTriggerStyleMultiError, or nil if none found.
func (m *EventTriggerStyle) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerStyle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventTriggerStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerStyleValidationError{
					field:  "EventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerStyleValidationError{
					field:  "EventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerStyleValidationError{
				field:  "EventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEventTriggerStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerStyleValidationError{
					field:  "EventTriggerStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerStyleValidationError{
					field:  "EventTriggerStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTriggerStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerStyleValidationError{
				field:  "EventTriggerStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEventTriggerFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerStyleValidationError{
					field:  "EventTriggerFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerStyleValidationError{
					field:  "EventTriggerFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTriggerFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerStyleValidationError{
				field:  "EventTriggerFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventTriggerStyleMultiError(errors)
	}

	return nil
}

// EventTriggerStyleMultiError is an error wrapping multiple validation errors
// returned by EventTriggerStyle.ValidateAll() if the designated constraints
// aren't met.
type EventTriggerStyleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerStyleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerStyleMultiError) AllErrors() []error { return m }

// EventTriggerStyleValidationError is the validation error returned by
// EventTriggerStyle.Validate if the designated constraints aren't met.
type EventTriggerStyleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerStyleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerStyleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerStyleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerStyleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerStyleValidationError) ErrorName() string {
	return "EventTriggerStyleValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerStyleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerStyle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerStyleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerStyleValidationError{}

// Validate checks the field values on ReportService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReportServiceMultiError, or
// nil if none found.
func (m *ReportService) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfSupportedReportStyles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportServiceValidationError{
					field:  "ListOfSupportedReportStyles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportServiceValidationError{
					field:  "ListOfSupportedReportStyles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfSupportedReportStyles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportServiceValidationError{
				field:  "ListOfSupportedReportStyles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportServiceMultiError(errors)
	}

	return nil
}

// ReportServiceMultiError is an error wrapping multiple validation errors
// returned by ReportService.ValidateAll() if the designated constraints
// aren't met.
type ReportServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportServiceMultiError) AllErrors() []error { return m }

// ReportServiceValidationError is the validation error returned by
// ReportService.Validate if the designated constraints aren't met.
type ReportServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportServiceValidationError) ErrorName() string { return "ReportServiceValidationError" }

// Error satisfies the builtin error interface
func (e ReportServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportServiceValidationError{}

// Validate checks the field values on ListOfSupportedReportStyles with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOfSupportedReportStyles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfSupportedReportStyles with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOfSupportedReportStylesMultiError, or nil if none found.
func (m *ListOfSupportedReportStyles) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfSupportedReportStyles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 63 {
		err := ListOfSupportedReportStylesValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfSupportedReportStylesValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfSupportedReportStylesValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfSupportedReportStylesValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfSupportedReportStylesMultiError(errors)
	}

	return nil
}

// ListOfSupportedReportStylesMultiError is an error wrapping multiple
// validation errors returned by ListOfSupportedReportStyles.ValidateAll() if
// the designated constraints aren't met.
type ListOfSupportedReportStylesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfSupportedReportStylesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfSupportedReportStylesMultiError) AllErrors() []error { return m }

// ListOfSupportedReportStylesValidationError is the validation error returned
// by ListOfSupportedReportStyles.Validate if the designated constraints
// aren't met.
type ListOfSupportedReportStylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfSupportedReportStylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfSupportedReportStylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfSupportedReportStylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfSupportedReportStylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfSupportedReportStylesValidationError) ErrorName() string {
	return "ListOfSupportedReportStylesValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfSupportedReportStylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfSupportedReportStyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfSupportedReportStylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfSupportedReportStylesValidationError{}

// Validate checks the field values on ReportStyle with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportStyle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportStyle with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReportStyleMultiError, or
// nil if none found.
func (m *ReportStyle) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStyle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReportServiceStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ReportServiceStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ReportServiceStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportServiceStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportStyleValidationError{
				field:  "ReportServiceStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReportServiceStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ReportServiceStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ReportServiceStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportServiceStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportStyleValidationError{
				field:  "ReportServiceStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetListOfSupportedEventTriggerStylesForReportStyle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ListOfSupportedEventTriggerStylesForReportStyle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ListOfSupportedEventTriggerStylesForReportStyle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfSupportedEventTriggerStylesForReportStyle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportStyleValidationError{
				field:  "ListOfSupportedEventTriggerStylesForReportStyle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReportServiceActionDefinitionFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ReportServiceActionDefinitionFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ReportServiceActionDefinitionFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportServiceActionDefinitionFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportStyleValidationError{
				field:  "ReportServiceActionDefinitionFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReportServiceIndicationHeaderFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ReportServiceIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ReportServiceIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportServiceIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportStyleValidationError{
				field:  "ReportServiceIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReportServiceIndicationMessageFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ReportServiceIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportStyleValidationError{
					field:  "ReportServiceIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportServiceIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportStyleValidationError{
				field:  "ReportServiceIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportStyleMultiError(errors)
	}

	return nil
}

// ReportStyleMultiError is an error wrapping multiple validation errors
// returned by ReportStyle.ValidateAll() if the designated constraints aren't met.
type ReportStyleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStyleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStyleMultiError) AllErrors() []error { return m }

// ReportStyleValidationError is the validation error returned by
// ReportStyle.Validate if the designated constraints aren't met.
type ReportStyleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStyleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStyleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStyleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStyleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStyleValidationError) ErrorName() string { return "ReportStyleValidationError" }

// Error satisfies the builtin error interface
func (e ReportStyleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStyle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStyleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStyleValidationError{}

// Validate checks the field values on
// ListOfSupportedEventTriggerStylesForReportStyle with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOfSupportedEventTriggerStylesForReportStyle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOfSupportedEventTriggerStylesForReportStyle with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListOfSupportedEventTriggerStylesForReportStyleMultiError, or nil if none found.
func (m *ListOfSupportedEventTriggerStylesForReportStyle) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfSupportedEventTriggerStylesForReportStyle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 63 {
		err := ListOfSupportedEventTriggerStylesForReportStyleValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfSupportedEventTriggerStylesForReportStyleValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfSupportedEventTriggerStylesForReportStyleValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfSupportedEventTriggerStylesForReportStyleValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfSupportedEventTriggerStylesForReportStyleMultiError(errors)
	}

	return nil
}

// ListOfSupportedEventTriggerStylesForReportStyleMultiError is an error
// wrapping multiple validation errors returned by
// ListOfSupportedEventTriggerStylesForReportStyle.ValidateAll() if the
// designated constraints aren't met.
type ListOfSupportedEventTriggerStylesForReportStyleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfSupportedEventTriggerStylesForReportStyleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfSupportedEventTriggerStylesForReportStyleMultiError) AllErrors() []error { return m }

// ListOfSupportedEventTriggerStylesForReportStyleValidationError is the
// validation error returned by
// ListOfSupportedEventTriggerStylesForReportStyle.Validate if the designated
// constraints aren't met.
type ListOfSupportedEventTriggerStylesForReportStyleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfSupportedEventTriggerStylesForReportStyleValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListOfSupportedEventTriggerStylesForReportStyleValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListOfSupportedEventTriggerStylesForReportStyleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfSupportedEventTriggerStylesForReportStyleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfSupportedEventTriggerStylesForReportStyleValidationError) ErrorName() string {
	return "ListOfSupportedEventTriggerStylesForReportStyleValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfSupportedEventTriggerStylesForReportStyleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfSupportedEventTriggerStylesForReportStyle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfSupportedEventTriggerStylesForReportStyleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfSupportedEventTriggerStylesForReportStyleValidationError{}

// Validate checks the field values on EventTriggerStyleType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventTriggerStyleType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerStyleType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventTriggerStyleTypeMultiError, or nil if none found.
func (m *EventTriggerStyleType) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerStyleType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventTriggerStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventTriggerStyleTypeValidationError{
					field:  "EventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventTriggerStyleTypeValidationError{
					field:  "EventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTriggerStyleTypeValidationError{
				field:  "EventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventTriggerStyleTypeMultiError(errors)
	}

	return nil
}

// EventTriggerStyleTypeMultiError is an error wrapping multiple validation
// errors returned by EventTriggerStyleType.ValidateAll() if the designated
// constraints aren't met.
type EventTriggerStyleTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerStyleTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerStyleTypeMultiError) AllErrors() []error { return m }

// EventTriggerStyleTypeValidationError is the validation error returned by
// EventTriggerStyleType.Validate if the designated constraints aren't met.
type EventTriggerStyleTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerStyleTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerStyleTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerStyleTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerStyleTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerStyleTypeValidationError) ErrorName() string {
	return "EventTriggerStyleTypeValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerStyleTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerStyleType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerStyleTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerStyleTypeValidationError{}

// Validate checks the field values on InsertService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InsertService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InsertServiceMultiError, or
// nil if none found.
func (m *InsertService) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InsertServiceValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InsertServiceValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsertServiceValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InsertServiceMultiError(errors)
	}

	return nil
}

// InsertServiceMultiError is an error wrapping multiple validation errors
// returned by InsertService.ValidateAll() if the designated constraints
// aren't met.
type InsertServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertServiceMultiError) AllErrors() []error { return m }

// InsertServiceValidationError is the validation error returned by
// InsertService.Validate if the designated constraints aren't met.
type InsertServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertServiceValidationError) ErrorName() string { return "InsertServiceValidationError" }

// Error satisfies the builtin error interface
func (e InsertServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertServiceValidationError{}

// Validate checks the field values on ControlService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ControlService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControlService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ControlServiceMultiError,
// or nil if none found.
func (m *ControlService) ValidateAll() error {
	return m.validate(true)
}

func (m *ControlService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfSupportedControlStyles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ControlServiceValidationError{
					field:  "ListOfSupportedControlStyles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ControlServiceValidationError{
					field:  "ListOfSupportedControlStyles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfSupportedControlStyles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ControlServiceValidationError{
				field:  "ListOfSupportedControlStyles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ControlServiceMultiError(errors)
	}

	return nil
}

// ControlServiceMultiError is an error wrapping multiple validation errors
// returned by ControlService.ValidateAll() if the designated constraints
// aren't met.
type ControlServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControlServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControlServiceMultiError) AllErrors() []error { return m }

// ControlServiceValidationError is the validation error returned by
// ControlService.Validate if the designated constraints aren't met.
type ControlServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlServiceValidationError) ErrorName() string { return "ControlServiceValidationError" }

// Error satisfies the builtin error interface
func (e ControlServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlServiceValidationError{}

// Validate checks the field values on ListOfSupportedControlStyles with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOfSupportedControlStyles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfSupportedControlStyles with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOfSupportedControlStylesMultiError, or nil if none found.
func (m *ListOfSupportedControlStyles) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfSupportedControlStyles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 63 {
		err := ListOfSupportedControlStylesValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfSupportedControlStylesValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfSupportedControlStylesValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfSupportedControlStylesValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfSupportedControlStylesMultiError(errors)
	}

	return nil
}

// ListOfSupportedControlStylesMultiError is an error wrapping multiple
// validation errors returned by ListOfSupportedControlStyles.ValidateAll() if
// the designated constraints aren't met.
type ListOfSupportedControlStylesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfSupportedControlStylesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfSupportedControlStylesMultiError) AllErrors() []error { return m }

// ListOfSupportedControlStylesValidationError is the validation error returned
// by ListOfSupportedControlStyles.Validate if the designated constraints
// aren't met.
type ListOfSupportedControlStylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfSupportedControlStylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfSupportedControlStylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfSupportedControlStylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfSupportedControlStylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfSupportedControlStylesValidationError) ErrorName() string {
	return "ListOfSupportedControlStylesValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfSupportedControlStylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfSupportedControlStyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfSupportedControlStylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfSupportedControlStylesValidationError{}

// Validate checks the field values on ControlStyle with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ControlStyle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControlStyle with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ControlStyleMultiError, or
// nil if none found.
func (m *ControlStyle) ValidateAll() error {
	return m.validate(true)
}

func (m *ControlStyle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetControlServiceStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ControlStyleValidationError{
					field:  "ControlServiceStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ControlStyleValidationError{
					field:  "ControlServiceStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControlServiceStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ControlStyleValidationError{
				field:  "ControlServiceStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetControlServiceStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ControlStyleValidationError{
					field:  "ControlServiceStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ControlStyleValidationError{
					field:  "ControlServiceStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControlServiceStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ControlStyleValidationError{
				field:  "ControlServiceStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetControlServiceHeaderFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ControlStyleValidationError{
					field:  "ControlServiceHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ControlStyleValidationError{
					field:  "ControlServiceHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControlServiceHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ControlStyleValidationError{
				field:  "ControlServiceHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetControlServiceMessageFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ControlStyleValidationError{
					field:  "ControlServiceMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ControlStyleValidationError{
					field:  "ControlServiceMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControlServiceMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ControlStyleValidationError{
				field:  "ControlServiceMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetControlServiceControlOutcomeFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ControlStyleValidationError{
					field:  "ControlServiceControlOutcomeFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ControlStyleValidationError{
					field:  "ControlServiceControlOutcomeFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControlServiceControlOutcomeFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ControlStyleValidationError{
				field:  "ControlServiceControlOutcomeFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RicCallProcessIdformatType != nil {

		if all {
			switch v := interface{}(m.GetRicCallProcessIdformatType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControlStyleValidationError{
						field:  "RicCallProcessIdformatType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControlStyleValidationError{
						field:  "RicCallProcessIdformatType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicCallProcessIdformatType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControlStyleValidationError{
					field:  "RicCallProcessIdformatType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ControlStyleMultiError(errors)
	}

	return nil
}

// ControlStyleMultiError is an error wrapping multiple validation errors
// returned by ControlStyle.ValidateAll() if the designated constraints aren't met.
type ControlStyleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControlStyleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControlStyleMultiError) AllErrors() []error { return m }

// ControlStyleValidationError is the validation error returned by
// ControlStyle.Validate if the designated constraints aren't met.
type ControlStyleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlStyleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlStyleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlStyleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlStyleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlStyleValidationError) ErrorName() string { return "ControlStyleValidationError" }

// Error satisfies the builtin error interface
func (e ControlStyleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlStyle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlStyleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlStyleValidationError{}

// Validate checks the field values on PolicyService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyServiceMultiError, or
// nil if none found.
func (m *PolicyService) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyServiceValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyServiceValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyServiceValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyServiceMultiError(errors)
	}

	return nil
}

// PolicyServiceMultiError is an error wrapping multiple validation errors
// returned by PolicyService.ValidateAll() if the designated constraints
// aren't met.
type PolicyServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyServiceMultiError) AllErrors() []error { return m }

// PolicyServiceValidationError is the validation error returned by
// PolicyService.Validate if the designated constraints aren't met.
type PolicyServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyServiceValidationError) ErrorName() string { return "PolicyServiceValidationError" }

// Error satisfies the builtin error interface
func (e PolicyServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyServiceValidationError{}

// Validate checks the field values on ListOfCellsForRanfunctionDefinition with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOfCellsForRanfunctionDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfCellsForRanfunctionDefinition
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOfCellsForRanfunctionDefinitionMultiError, or nil if none found.
func (m *ListOfCellsForRanfunctionDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfCellsForRanfunctionDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) > 1024 {
		err := ListOfCellsForRanfunctionDefinitionValidationError{
			field:  "Value",
			reason: "value must contain no more than 1024 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfCellsForRanfunctionDefinitionValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfCellsForRanfunctionDefinitionValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfCellsForRanfunctionDefinitionValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfCellsForRanfunctionDefinitionMultiError(errors)
	}

	return nil
}

// ListOfCellsForRanfunctionDefinitionMultiError is an error wrapping multiple
// validation errors returned by
// ListOfCellsForRanfunctionDefinition.ValidateAll() if the designated
// constraints aren't met.
type ListOfCellsForRanfunctionDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfCellsForRanfunctionDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfCellsForRanfunctionDefinitionMultiError) AllErrors() []error { return m }

// ListOfCellsForRanfunctionDefinitionValidationError is the validation error
// returned by ListOfCellsForRanfunctionDefinition.Validate if the designated
// constraints aren't met.
type ListOfCellsForRanfunctionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfCellsForRanfunctionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfCellsForRanfunctionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfCellsForRanfunctionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfCellsForRanfunctionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfCellsForRanfunctionDefinitionValidationError) ErrorName() string {
	return "ListOfCellsForRanfunctionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfCellsForRanfunctionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfCellsForRanfunctionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfCellsForRanfunctionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfCellsForRanfunctionDefinitionValidationError{}

// Validate checks the field values on CellForRanfunctionDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CellForRanfunctionDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellForRanfunctionDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CellForRanfunctionDefinitionMultiError, or nil if none found.
func (m *CellForRanfunctionDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *CellForRanfunctionDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCellGlobalId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CellForRanfunctionDefinitionValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CellForRanfunctionDefinitionValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellForRanfunctionDefinitionValidationError{
				field:  "CellGlobalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ListOfSupportedCellLevelRanconfigurationStructures != nil {

		if all {
			switch v := interface{}(m.GetListOfSupportedCellLevelRanconfigurationStructures()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellForRanfunctionDefinitionValidationError{
						field:  "ListOfSupportedCellLevelRanconfigurationStructures",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellForRanfunctionDefinitionValidationError{
						field:  "ListOfSupportedCellLevelRanconfigurationStructures",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListOfSupportedCellLevelRanconfigurationStructures()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellForRanfunctionDefinitionValidationError{
					field:  "ListOfSupportedCellLevelRanconfigurationStructures",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CellForRanfunctionDefinitionMultiError(errors)
	}

	return nil
}

// CellForRanfunctionDefinitionMultiError is an error wrapping multiple
// validation errors returned by CellForRanfunctionDefinition.ValidateAll() if
// the designated constraints aren't met.
type CellForRanfunctionDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellForRanfunctionDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellForRanfunctionDefinitionMultiError) AllErrors() []error { return m }

// CellForRanfunctionDefinitionValidationError is the validation error returned
// by CellForRanfunctionDefinition.Validate if the designated constraints
// aren't met.
type CellForRanfunctionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellForRanfunctionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellForRanfunctionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellForRanfunctionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellForRanfunctionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellForRanfunctionDefinitionValidationError) ErrorName() string {
	return "CellForRanfunctionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e CellForRanfunctionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellForRanfunctionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellForRanfunctionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellForRanfunctionDefinitionValidationError{}

// Validate checks the field values on E2SmCCcRIceventTriggerDefinition with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *E2SmCCcRIceventTriggerDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcRIceventTriggerDefinition with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmCCcRIceventTriggerDefinitionMultiError, or nil if none found.
func (m *E2SmCCcRIceventTriggerDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcRIceventTriggerDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventTriggerDefinitionFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcRIceventTriggerDefinitionValidationError{
					field:  "EventTriggerDefinitionFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcRIceventTriggerDefinitionValidationError{
					field:  "EventTriggerDefinitionFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTriggerDefinitionFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcRIceventTriggerDefinitionValidationError{
				field:  "EventTriggerDefinitionFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcRIceventTriggerDefinitionMultiError(errors)
	}

	return nil
}

// E2SmCCcRIceventTriggerDefinitionMultiError is an error wrapping multiple
// validation errors returned by
// E2SmCCcRIceventTriggerDefinition.ValidateAll() if the designated
// constraints aren't met.
type E2SmCCcRIceventTriggerDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcRIceventTriggerDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcRIceventTriggerDefinitionMultiError) AllErrors() []error { return m }

// E2SmCCcRIceventTriggerDefinitionValidationError is the validation error
// returned by E2SmCCcRIceventTriggerDefinition.Validate if the designated
// constraints aren't met.
type E2SmCCcRIceventTriggerDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcRIceventTriggerDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcRIceventTriggerDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcRIceventTriggerDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcRIceventTriggerDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcRIceventTriggerDefinitionValidationError) ErrorName() string {
	return "E2SmCCcRIceventTriggerDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcRIceventTriggerDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcRIceventTriggerDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcRIceventTriggerDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcRIceventTriggerDefinitionValidationError{}

// Validate checks the field values on EventTriggerDefinitionFormat with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventTriggerDefinitionFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTriggerDefinitionFormat with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventTriggerDefinitionFormatMultiError, or nil if none found.
func (m *EventTriggerDefinitionFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTriggerDefinitionFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EventTriggerDefinitionFormat.(type) {

	case *EventTriggerDefinitionFormat_E2SmCccEventTriggerDefinitionFormat1:

		if all {
			switch v := interface{}(m.GetE2SmCccEventTriggerDefinitionFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventTriggerDefinitionFormatValidationError{
						field:  "E2SmCccEventTriggerDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventTriggerDefinitionFormatValidationError{
						field:  "E2SmCccEventTriggerDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccEventTriggerDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTriggerDefinitionFormatValidationError{
					field:  "E2SmCccEventTriggerDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EventTriggerDefinitionFormat_E2SmCccEventTriggerDefinitionFormat2:

		if all {
			switch v := interface{}(m.GetE2SmCccEventTriggerDefinitionFormat2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventTriggerDefinitionFormatValidationError{
						field:  "E2SmCccEventTriggerDefinitionFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventTriggerDefinitionFormatValidationError{
						field:  "E2SmCccEventTriggerDefinitionFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccEventTriggerDefinitionFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTriggerDefinitionFormatValidationError{
					field:  "E2SmCccEventTriggerDefinitionFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EventTriggerDefinitionFormat_E2SmCccEventTriggerDefinitionFormat3:

		if all {
			switch v := interface{}(m.GetE2SmCccEventTriggerDefinitionFormat3()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventTriggerDefinitionFormatValidationError{
						field:  "E2SmCccEventTriggerDefinitionFormat3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventTriggerDefinitionFormatValidationError{
						field:  "E2SmCccEventTriggerDefinitionFormat3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccEventTriggerDefinitionFormat3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTriggerDefinitionFormatValidationError{
					field:  "E2SmCccEventTriggerDefinitionFormat3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventTriggerDefinitionFormatMultiError(errors)
	}

	return nil
}

// EventTriggerDefinitionFormatMultiError is an error wrapping multiple
// validation errors returned by EventTriggerDefinitionFormat.ValidateAll() if
// the designated constraints aren't met.
type EventTriggerDefinitionFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTriggerDefinitionFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTriggerDefinitionFormatMultiError) AllErrors() []error { return m }

// EventTriggerDefinitionFormatValidationError is the validation error returned
// by EventTriggerDefinitionFormat.Validate if the designated constraints
// aren't met.
type EventTriggerDefinitionFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTriggerDefinitionFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTriggerDefinitionFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTriggerDefinitionFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTriggerDefinitionFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTriggerDefinitionFormatValidationError) ErrorName() string {
	return "EventTriggerDefinitionFormatValidationError"
}

// Error satisfies the builtin error interface
func (e EventTriggerDefinitionFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTriggerDefinitionFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTriggerDefinitionFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTriggerDefinitionFormatValidationError{}

// Validate checks the field values on E2SmCCcEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SmCCcEventTriggerDefinitionFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmCCcEventTriggerDefinitionFormat1MultiError, or nil if none found.
func (m *E2SmCCcEventTriggerDefinitionFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcEventTriggerDefinitionFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfNodeLevelConfigurationStructuresForEventTrigger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcEventTriggerDefinitionFormat1ValidationError{
					field:  "ListOfNodeLevelConfigurationStructuresForEventTrigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcEventTriggerDefinitionFormat1ValidationError{
					field:  "ListOfNodeLevelConfigurationStructuresForEventTrigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfNodeLevelConfigurationStructuresForEventTrigger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcEventTriggerDefinitionFormat1ValidationError{
				field:  "ListOfNodeLevelConfigurationStructuresForEventTrigger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcEventTriggerDefinitionFormat1MultiError(errors)
	}

	return nil
}

// E2SmCCcEventTriggerDefinitionFormat1MultiError is an error wrapping multiple
// validation errors returned by
// E2SmCCcEventTriggerDefinitionFormat1.ValidateAll() if the designated
// constraints aren't met.
type E2SmCCcEventTriggerDefinitionFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcEventTriggerDefinitionFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcEventTriggerDefinitionFormat1MultiError) AllErrors() []error { return m }

// E2SmCCcEventTriggerDefinitionFormat1ValidationError is the validation error
// returned by E2SmCCcEventTriggerDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmCCcEventTriggerDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcEventTriggerDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcEventTriggerDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcEventTriggerDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcEventTriggerDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcEventTriggerDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmCCcEventTriggerDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcEventTriggerDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcEventTriggerDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcEventTriggerDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcEventTriggerDefinitionFormat1ValidationError{}

// Validate checks the field values on
// ListOfRanconfigurationStructuresForEventTrigger with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOfRanconfigurationStructuresForEventTrigger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOfRanconfigurationStructuresForEventTrigger with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListOfRanconfigurationStructuresForEventTriggerMultiError, or nil if none found.
func (m *ListOfRanconfigurationStructuresForEventTrigger) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfRanconfigurationStructuresForEventTrigger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 256 {
		err := ListOfRanconfigurationStructuresForEventTriggerValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfRanconfigurationStructuresForEventTriggerValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfRanconfigurationStructuresForEventTriggerValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfRanconfigurationStructuresForEventTriggerValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfRanconfigurationStructuresForEventTriggerMultiError(errors)
	}

	return nil
}

// ListOfRanconfigurationStructuresForEventTriggerMultiError is an error
// wrapping multiple validation errors returned by
// ListOfRanconfigurationStructuresForEventTrigger.ValidateAll() if the
// designated constraints aren't met.
type ListOfRanconfigurationStructuresForEventTriggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfRanconfigurationStructuresForEventTriggerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfRanconfigurationStructuresForEventTriggerMultiError) AllErrors() []error { return m }

// ListOfRanconfigurationStructuresForEventTriggerValidationError is the
// validation error returned by
// ListOfRanconfigurationStructuresForEventTrigger.Validate if the designated
// constraints aren't met.
type ListOfRanconfigurationStructuresForEventTriggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfRanconfigurationStructuresForEventTriggerValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListOfRanconfigurationStructuresForEventTriggerValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListOfRanconfigurationStructuresForEventTriggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfRanconfigurationStructuresForEventTriggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfRanconfigurationStructuresForEventTriggerValidationError) ErrorName() string {
	return "ListOfRanconfigurationStructuresForEventTriggerValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfRanconfigurationStructuresForEventTriggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfRanconfigurationStructuresForEventTrigger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfRanconfigurationStructuresForEventTriggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfRanconfigurationStructuresForEventTriggerValidationError{}

// Validate checks the field values on RanconfigurationStructureForEventTrigger
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanconfigurationStructureForEventTrigger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanconfigurationStructureForEventTrigger with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RanconfigurationStructureForEventTriggerMultiError, or nil if none found.
func (m *RanconfigurationStructureForEventTrigger) ValidateAll() error {
	return m.validate(true)
}

func (m *RanconfigurationStructureForEventTrigger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanConfigurationStructureName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanconfigurationStructureForEventTriggerValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanconfigurationStructureForEventTriggerValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanConfigurationStructureName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanconfigurationStructureForEventTriggerValidationError{
				field:  "RanConfigurationStructureName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ListOfAttributes != nil {

		if all {
			switch v := interface{}(m.GetListOfAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanconfigurationStructureForEventTriggerValidationError{
						field:  "ListOfAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanconfigurationStructureForEventTriggerValidationError{
						field:  "ListOfAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListOfAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanconfigurationStructureForEventTriggerValidationError{
					field:  "ListOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanconfigurationStructureForEventTriggerMultiError(errors)
	}

	return nil
}

// RanconfigurationStructureForEventTriggerMultiError is an error wrapping
// multiple validation errors returned by
// RanconfigurationStructureForEventTrigger.ValidateAll() if the designated
// constraints aren't met.
type RanconfigurationStructureForEventTriggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanconfigurationStructureForEventTriggerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanconfigurationStructureForEventTriggerMultiError) AllErrors() []error { return m }

// RanconfigurationStructureForEventTriggerValidationError is the validation
// error returned by RanconfigurationStructureForEventTrigger.Validate if the
// designated constraints aren't met.
type RanconfigurationStructureForEventTriggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanconfigurationStructureForEventTriggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanconfigurationStructureForEventTriggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanconfigurationStructureForEventTriggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanconfigurationStructureForEventTriggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanconfigurationStructureForEventTriggerValidationError) ErrorName() string {
	return "RanconfigurationStructureForEventTriggerValidationError"
}

// Error satisfies the builtin error interface
func (e RanconfigurationStructureForEventTriggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanconfigurationStructureForEventTrigger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanconfigurationStructureForEventTriggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanconfigurationStructureForEventTriggerValidationError{}

// Validate checks the field values on ListOfAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOfAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOfAttributesMultiError, or nil if none found.
func (m *ListOfAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) > 65535 {
		err := ListOfAttributesValidationError{
			field:  "Value",
			reason: "value must contain no more than 65535 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfAttributesValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfAttributesValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfAttributesValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfAttributesMultiError(errors)
	}

	return nil
}

// ListOfAttributesMultiError is an error wrapping multiple validation errors
// returned by ListOfAttributes.ValidateAll() if the designated constraints
// aren't met.
type ListOfAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfAttributesMultiError) AllErrors() []error { return m }

// ListOfAttributesValidationError is the validation error returned by
// ListOfAttributes.Validate if the designated constraints aren't met.
type ListOfAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfAttributesValidationError) ErrorName() string { return "ListOfAttributesValidationError" }

// Error satisfies the builtin error interface
func (e ListOfAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfAttributesValidationError{}

// Validate checks the field values on E2SmCCcEventTriggerDefinitionFormat2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SmCCcEventTriggerDefinitionFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcEventTriggerDefinitionFormat2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmCCcEventTriggerDefinitionFormat2MultiError, or nil if none found.
func (m *E2SmCCcEventTriggerDefinitionFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcEventTriggerDefinitionFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfCellLevelConfigurationStructuresForEventTrigger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcEventTriggerDefinitionFormat2ValidationError{
					field:  "ListOfCellLevelConfigurationStructuresForEventTrigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcEventTriggerDefinitionFormat2ValidationError{
					field:  "ListOfCellLevelConfigurationStructuresForEventTrigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfCellLevelConfigurationStructuresForEventTrigger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcEventTriggerDefinitionFormat2ValidationError{
				field:  "ListOfCellLevelConfigurationStructuresForEventTrigger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcEventTriggerDefinitionFormat2MultiError(errors)
	}

	return nil
}

// E2SmCCcEventTriggerDefinitionFormat2MultiError is an error wrapping multiple
// validation errors returned by
// E2SmCCcEventTriggerDefinitionFormat2.ValidateAll() if the designated
// constraints aren't met.
type E2SmCCcEventTriggerDefinitionFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcEventTriggerDefinitionFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcEventTriggerDefinitionFormat2MultiError) AllErrors() []error { return m }

// E2SmCCcEventTriggerDefinitionFormat2ValidationError is the validation error
// returned by E2SmCCcEventTriggerDefinitionFormat2.Validate if the designated
// constraints aren't met.
type E2SmCCcEventTriggerDefinitionFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcEventTriggerDefinitionFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcEventTriggerDefinitionFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcEventTriggerDefinitionFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcEventTriggerDefinitionFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcEventTriggerDefinitionFormat2ValidationError) ErrorName() string {
	return "E2SmCCcEventTriggerDefinitionFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcEventTriggerDefinitionFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcEventTriggerDefinitionFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcEventTriggerDefinitionFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcEventTriggerDefinitionFormat2ValidationError{}

// Validate checks the field values on
// ListOfCellLevelConfigurationStructuresForEventTrigger with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOfCellLevelConfigurationStructuresForEventTrigger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOfCellLevelConfigurationStructuresForEventTrigger with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOfCellLevelConfigurationStructuresForEventTriggerMultiError, or nil if
// none found.
func (m *ListOfCellLevelConfigurationStructuresForEventTrigger) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfCellLevelConfigurationStructuresForEventTrigger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 1024 {
		err := ListOfCellLevelConfigurationStructuresForEventTriggerValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfCellLevelConfigurationStructuresForEventTriggerValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfCellLevelConfigurationStructuresForEventTriggerValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfCellLevelConfigurationStructuresForEventTriggerValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfCellLevelConfigurationStructuresForEventTriggerMultiError(errors)
	}

	return nil
}

// ListOfCellLevelConfigurationStructuresForEventTriggerMultiError is an error
// wrapping multiple validation errors returned by
// ListOfCellLevelConfigurationStructuresForEventTrigger.ValidateAll() if the
// designated constraints aren't met.
type ListOfCellLevelConfigurationStructuresForEventTriggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfCellLevelConfigurationStructuresForEventTriggerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfCellLevelConfigurationStructuresForEventTriggerMultiError) AllErrors() []error {
	return m
}

// ListOfCellLevelConfigurationStructuresForEventTriggerValidationError is the
// validation error returned by
// ListOfCellLevelConfigurationStructuresForEventTrigger.Validate if the
// designated constraints aren't met.
type ListOfCellLevelConfigurationStructuresForEventTriggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfCellLevelConfigurationStructuresForEventTriggerValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListOfCellLevelConfigurationStructuresForEventTriggerValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListOfCellLevelConfigurationStructuresForEventTriggerValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListOfCellLevelConfigurationStructuresForEventTriggerValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListOfCellLevelConfigurationStructuresForEventTriggerValidationError) ErrorName() string {
	return "ListOfCellLevelConfigurationStructuresForEventTriggerValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfCellLevelConfigurationStructuresForEventTriggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfCellLevelConfigurationStructuresForEventTrigger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfCellLevelConfigurationStructuresForEventTriggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfCellLevelConfigurationStructuresForEventTriggerValidationError{}

// Validate checks the field values on
// CellLevelConfigurationStructureForEventTrigger with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CellLevelConfigurationStructureForEventTrigger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CellLevelConfigurationStructureForEventTrigger with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CellLevelConfigurationStructureForEventTriggerMultiError, or nil if none found.
func (m *CellLevelConfigurationStructureForEventTrigger) ValidateAll() error {
	return m.validate(true)
}

func (m *CellLevelConfigurationStructureForEventTrigger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfRanconfigurationStructuresForEventTrigger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CellLevelConfigurationStructureForEventTriggerValidationError{
					field:  "ListOfRanconfigurationStructuresForEventTrigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CellLevelConfigurationStructureForEventTriggerValidationError{
					field:  "ListOfRanconfigurationStructuresForEventTrigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfRanconfigurationStructuresForEventTrigger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellLevelConfigurationStructureForEventTriggerValidationError{
				field:  "ListOfRanconfigurationStructuresForEventTrigger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CellGlobalId != nil {

		if all {
			switch v := interface{}(m.GetCellGlobalId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellLevelConfigurationStructureForEventTriggerValidationError{
						field:  "CellGlobalId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellLevelConfigurationStructureForEventTriggerValidationError{
						field:  "CellGlobalId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellLevelConfigurationStructureForEventTriggerValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CellLevelConfigurationStructureForEventTriggerMultiError(errors)
	}

	return nil
}

// CellLevelConfigurationStructureForEventTriggerMultiError is an error
// wrapping multiple validation errors returned by
// CellLevelConfigurationStructureForEventTrigger.ValidateAll() if the
// designated constraints aren't met.
type CellLevelConfigurationStructureForEventTriggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellLevelConfigurationStructureForEventTriggerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellLevelConfigurationStructureForEventTriggerMultiError) AllErrors() []error { return m }

// CellLevelConfigurationStructureForEventTriggerValidationError is the
// validation error returned by
// CellLevelConfigurationStructureForEventTrigger.Validate if the designated
// constraints aren't met.
type CellLevelConfigurationStructureForEventTriggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellLevelConfigurationStructureForEventTriggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellLevelConfigurationStructureForEventTriggerValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CellLevelConfigurationStructureForEventTriggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellLevelConfigurationStructureForEventTriggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellLevelConfigurationStructureForEventTriggerValidationError) ErrorName() string {
	return "CellLevelConfigurationStructureForEventTriggerValidationError"
}

// Error satisfies the builtin error interface
func (e CellLevelConfigurationStructureForEventTriggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellLevelConfigurationStructureForEventTrigger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellLevelConfigurationStructureForEventTriggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellLevelConfigurationStructureForEventTriggerValidationError{}

// Validate checks the field values on AttributeName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttributeName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttributeName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttributeNameMultiError, or
// nil if none found.
func (m *AttributeName) ValidateAll() error {
	return m.validate(true)
}

func (m *AttributeName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 5 || l > 17 {
		err := AttributeNameValidationError{
			field:  "Value",
			reason: "value length must be between 5 and 17 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AttributeNameMultiError(errors)
	}

	return nil
}

// AttributeNameMultiError is an error wrapping multiple validation errors
// returned by AttributeName.ValidateAll() if the designated constraints
// aren't met.
type AttributeNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttributeNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttributeNameMultiError) AllErrors() []error { return m }

// AttributeNameValidationError is the validation error returned by
// AttributeName.Validate if the designated constraints aren't met.
type AttributeNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeNameValidationError) ErrorName() string { return "AttributeNameValidationError" }

// Error satisfies the builtin error interface
func (e AttributeNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeNameValidationError{}

// Validate checks the field values on E2SmCCcEventTriggerDefinitionFormat3
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SmCCcEventTriggerDefinitionFormat3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcEventTriggerDefinitionFormat3
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmCCcEventTriggerDefinitionFormat3MultiError, or nil if none found.
func (m *E2SmCCcEventTriggerDefinitionFormat3) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcEventTriggerDefinitionFormat3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Period

	if len(errors) > 0 {
		return E2SmCCcEventTriggerDefinitionFormat3MultiError(errors)
	}

	return nil
}

// E2SmCCcEventTriggerDefinitionFormat3MultiError is an error wrapping multiple
// validation errors returned by
// E2SmCCcEventTriggerDefinitionFormat3.ValidateAll() if the designated
// constraints aren't met.
type E2SmCCcEventTriggerDefinitionFormat3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcEventTriggerDefinitionFormat3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcEventTriggerDefinitionFormat3MultiError) AllErrors() []error { return m }

// E2SmCCcEventTriggerDefinitionFormat3ValidationError is the validation error
// returned by E2SmCCcEventTriggerDefinitionFormat3.Validate if the designated
// constraints aren't met.
type E2SmCCcEventTriggerDefinitionFormat3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcEventTriggerDefinitionFormat3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcEventTriggerDefinitionFormat3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcEventTriggerDefinitionFormat3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcEventTriggerDefinitionFormat3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcEventTriggerDefinitionFormat3ValidationError) ErrorName() string {
	return "E2SmCCcEventTriggerDefinitionFormat3ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcEventTriggerDefinitionFormat3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcEventTriggerDefinitionFormat3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcEventTriggerDefinitionFormat3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcEventTriggerDefinitionFormat3ValidationError{}

// Validate checks the field values on E2SmCCcRIcactionDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcRIcactionDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcRIcactionDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcRIcactionDefinitionMultiError, or nil if none found.
func (m *E2SmCCcRIcactionDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcRIcactionDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcRIcactionDefinitionValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcRIcactionDefinitionValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcRIcactionDefinitionValidationError{
				field:  "RicStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetActionDefinitionFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcRIcactionDefinitionValidationError{
					field:  "ActionDefinitionFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcRIcactionDefinitionValidationError{
					field:  "ActionDefinitionFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionDefinitionFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcRIcactionDefinitionValidationError{
				field:  "ActionDefinitionFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcRIcactionDefinitionMultiError(errors)
	}

	return nil
}

// E2SmCCcRIcactionDefinitionMultiError is an error wrapping multiple
// validation errors returned by E2SmCCcRIcactionDefinition.ValidateAll() if
// the designated constraints aren't met.
type E2SmCCcRIcactionDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcRIcactionDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcRIcactionDefinitionMultiError) AllErrors() []error { return m }

// E2SmCCcRIcactionDefinitionValidationError is the validation error returned
// by E2SmCCcRIcactionDefinition.Validate if the designated constraints aren't met.
type E2SmCCcRIcactionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcRIcactionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcRIcactionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcRIcactionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcRIcactionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcRIcactionDefinitionValidationError) ErrorName() string {
	return "E2SmCCcRIcactionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcRIcactionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcRIcactionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcRIcactionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcRIcactionDefinitionValidationError{}

// Validate checks the field values on ActionDefinitionFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionDefinitionFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionDefinitionFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActionDefinitionFormatMultiError, or nil if none found.
func (m *ActionDefinitionFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionDefinitionFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.ActionDefinitionFormat.(type) {

	case *ActionDefinitionFormat_E2SmCccActionDefinitionFormat1:

		if all {
			switch v := interface{}(m.GetE2SmCccActionDefinitionFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionDefinitionFormatValidationError{
						field:  "E2SmCccActionDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionDefinitionFormatValidationError{
						field:  "E2SmCccActionDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccActionDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionDefinitionFormatValidationError{
					field:  "E2SmCccActionDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ActionDefinitionFormat_E2SmCccActionDefinitionFormat2:

		if all {
			switch v := interface{}(m.GetE2SmCccActionDefinitionFormat2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionDefinitionFormatValidationError{
						field:  "E2SmCccActionDefinitionFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionDefinitionFormatValidationError{
						field:  "E2SmCccActionDefinitionFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccActionDefinitionFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionDefinitionFormatValidationError{
					field:  "E2SmCccActionDefinitionFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionDefinitionFormatMultiError(errors)
	}

	return nil
}

// ActionDefinitionFormatMultiError is an error wrapping multiple validation
// errors returned by ActionDefinitionFormat.ValidateAll() if the designated
// constraints aren't met.
type ActionDefinitionFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionDefinitionFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionDefinitionFormatMultiError) AllErrors() []error { return m }

// ActionDefinitionFormatValidationError is the validation error returned by
// ActionDefinitionFormat.Validate if the designated constraints aren't met.
type ActionDefinitionFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionDefinitionFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionDefinitionFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionDefinitionFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionDefinitionFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionDefinitionFormatValidationError) ErrorName() string {
	return "ActionDefinitionFormatValidationError"
}

// Error satisfies the builtin error interface
func (e ActionDefinitionFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionDefinitionFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionDefinitionFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionDefinitionFormatValidationError{}

// Validate checks the field values on E2SmCCcActionDefinitionFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcActionDefinitionFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcActionDefinitionFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmCCcActionDefinitionFormat1MultiError, or nil if none found.
func (m *E2SmCCcActionDefinitionFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcActionDefinitionFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfNodeLevelRanconfigurationStructuresForAdf()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcActionDefinitionFormat1ValidationError{
					field:  "ListOfNodeLevelRanconfigurationStructuresForAdf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcActionDefinitionFormat1ValidationError{
					field:  "ListOfNodeLevelRanconfigurationStructuresForAdf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfNodeLevelRanconfigurationStructuresForAdf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcActionDefinitionFormat1ValidationError{
				field:  "ListOfNodeLevelRanconfigurationStructuresForAdf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcActionDefinitionFormat1MultiError(errors)
	}

	return nil
}

// E2SmCCcActionDefinitionFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmCCcActionDefinitionFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmCCcActionDefinitionFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcActionDefinitionFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcActionDefinitionFormat1MultiError) AllErrors() []error { return m }

// E2SmCCcActionDefinitionFormat1ValidationError is the validation error
// returned by E2SmCCcActionDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmCCcActionDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcActionDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcActionDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcActionDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcActionDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcActionDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmCCcActionDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcActionDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcActionDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcActionDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcActionDefinitionFormat1ValidationError{}

// Validate checks the field values on ListOfRanconfigurationStructuresForAdf
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOfRanconfigurationStructuresForAdf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOfRanconfigurationStructuresForAdf with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListOfRanconfigurationStructuresForAdfMultiError, or nil if none found.
func (m *ListOfRanconfigurationStructuresForAdf) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfRanconfigurationStructuresForAdf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 256 {
		err := ListOfRanconfigurationStructuresForAdfValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfRanconfigurationStructuresForAdfValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfRanconfigurationStructuresForAdfValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfRanconfigurationStructuresForAdfValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfRanconfigurationStructuresForAdfMultiError(errors)
	}

	return nil
}

// ListOfRanconfigurationStructuresForAdfMultiError is an error wrapping
// multiple validation errors returned by
// ListOfRanconfigurationStructuresForAdf.ValidateAll() if the designated
// constraints aren't met.
type ListOfRanconfigurationStructuresForAdfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfRanconfigurationStructuresForAdfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfRanconfigurationStructuresForAdfMultiError) AllErrors() []error { return m }

// ListOfRanconfigurationStructuresForAdfValidationError is the validation
// error returned by ListOfRanconfigurationStructuresForAdf.Validate if the
// designated constraints aren't met.
type ListOfRanconfigurationStructuresForAdfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfRanconfigurationStructuresForAdfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfRanconfigurationStructuresForAdfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfRanconfigurationStructuresForAdfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfRanconfigurationStructuresForAdfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfRanconfigurationStructuresForAdfValidationError) ErrorName() string {
	return "ListOfRanconfigurationStructuresForAdfValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfRanconfigurationStructuresForAdfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfRanconfigurationStructuresForAdf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfRanconfigurationStructuresForAdfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfRanconfigurationStructuresForAdfValidationError{}

// Validate checks the field values on RanconfigurationStructureForAdf with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RanconfigurationStructureForAdf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanconfigurationStructureForAdf with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RanconfigurationStructureForAdfMultiError, or nil if none found.
func (m *RanconfigurationStructureForAdf) ValidateAll() error {
	return m.validate(true)
}

func (m *RanconfigurationStructureForAdf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReportType

	if all {
		switch v := interface{}(m.GetRanConfigurationStructureName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RanconfigurationStructureForAdfValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RanconfigurationStructureForAdfValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanConfigurationStructureName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RanconfigurationStructureForAdfValidationError{
				field:  "RanConfigurationStructureName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ListOfAttributes != nil {

		if all {
			switch v := interface{}(m.GetListOfAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanconfigurationStructureForAdfValidationError{
						field:  "ListOfAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanconfigurationStructureForAdfValidationError{
						field:  "ListOfAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListOfAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanconfigurationStructureForAdfValidationError{
					field:  "ListOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanconfigurationStructureForAdfMultiError(errors)
	}

	return nil
}

// RanconfigurationStructureForAdfMultiError is an error wrapping multiple
// validation errors returned by RanconfigurationStructureForAdf.ValidateAll()
// if the designated constraints aren't met.
type RanconfigurationStructureForAdfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanconfigurationStructureForAdfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanconfigurationStructureForAdfMultiError) AllErrors() []error { return m }

// RanconfigurationStructureForAdfValidationError is the validation error
// returned by RanconfigurationStructureForAdf.Validate if the designated
// constraints aren't met.
type RanconfigurationStructureForAdfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanconfigurationStructureForAdfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanconfigurationStructureForAdfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanconfigurationStructureForAdfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanconfigurationStructureForAdfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanconfigurationStructureForAdfValidationError) ErrorName() string {
	return "RanconfigurationStructureForAdfValidationError"
}

// Error satisfies the builtin error interface
func (e RanconfigurationStructureForAdfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanconfigurationStructureForAdf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanconfigurationStructureForAdfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanconfigurationStructureForAdfValidationError{}

// Validate checks the field values on E2SmCCcActionDefinitionFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcActionDefinitionFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcActionDefinitionFormat2 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmCCcActionDefinitionFormat2MultiError, or nil if none found.
func (m *E2SmCCcActionDefinitionFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcActionDefinitionFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfCellConfigurationsToBeReportedForAdf()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcActionDefinitionFormat2ValidationError{
					field:  "ListOfCellConfigurationsToBeReportedForAdf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcActionDefinitionFormat2ValidationError{
					field:  "ListOfCellConfigurationsToBeReportedForAdf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfCellConfigurationsToBeReportedForAdf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcActionDefinitionFormat2ValidationError{
				field:  "ListOfCellConfigurationsToBeReportedForAdf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcActionDefinitionFormat2MultiError(errors)
	}

	return nil
}

// E2SmCCcActionDefinitionFormat2MultiError is an error wrapping multiple
// validation errors returned by E2SmCCcActionDefinitionFormat2.ValidateAll()
// if the designated constraints aren't met.
type E2SmCCcActionDefinitionFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcActionDefinitionFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcActionDefinitionFormat2MultiError) AllErrors() []error { return m }

// E2SmCCcActionDefinitionFormat2ValidationError is the validation error
// returned by E2SmCCcActionDefinitionFormat2.Validate if the designated
// constraints aren't met.
type E2SmCCcActionDefinitionFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcActionDefinitionFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcActionDefinitionFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcActionDefinitionFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcActionDefinitionFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcActionDefinitionFormat2ValidationError) ErrorName() string {
	return "E2SmCCcActionDefinitionFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcActionDefinitionFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcActionDefinitionFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcActionDefinitionFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcActionDefinitionFormat2ValidationError{}

// Validate checks the field values on
// ListOfCellConfigurationsToBeReportedForAdf with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOfCellConfigurationsToBeReportedForAdf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOfCellConfigurationsToBeReportedForAdf with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListOfCellConfigurationsToBeReportedForAdfMultiError, or nil if none found.
func (m *ListOfCellConfigurationsToBeReportedForAdf) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfCellConfigurationsToBeReportedForAdf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 1024 {
		err := ListOfCellConfigurationsToBeReportedForAdfValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfCellConfigurationsToBeReportedForAdfValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfCellConfigurationsToBeReportedForAdfValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfCellConfigurationsToBeReportedForAdfValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfCellConfigurationsToBeReportedForAdfMultiError(errors)
	}

	return nil
}

// ListOfCellConfigurationsToBeReportedForAdfMultiError is an error wrapping
// multiple validation errors returned by
// ListOfCellConfigurationsToBeReportedForAdf.ValidateAll() if the designated
// constraints aren't met.
type ListOfCellConfigurationsToBeReportedForAdfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfCellConfigurationsToBeReportedForAdfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfCellConfigurationsToBeReportedForAdfMultiError) AllErrors() []error { return m }

// ListOfCellConfigurationsToBeReportedForAdfValidationError is the validation
// error returned by ListOfCellConfigurationsToBeReportedForAdf.Validate if
// the designated constraints aren't met.
type ListOfCellConfigurationsToBeReportedForAdfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfCellConfigurationsToBeReportedForAdfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfCellConfigurationsToBeReportedForAdfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfCellConfigurationsToBeReportedForAdfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfCellConfigurationsToBeReportedForAdfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfCellConfigurationsToBeReportedForAdfValidationError) ErrorName() string {
	return "ListOfCellConfigurationsToBeReportedForAdfValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfCellConfigurationsToBeReportedForAdfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfCellConfigurationsToBeReportedForAdf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfCellConfigurationsToBeReportedForAdfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfCellConfigurationsToBeReportedForAdfValidationError{}

// Validate checks the field values on CellConfigurationToBeReportedForAdf with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CellConfigurationToBeReportedForAdf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellConfigurationToBeReportedForAdf
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CellConfigurationToBeReportedForAdfMultiError, or nil if none found.
func (m *CellConfigurationToBeReportedForAdf) ValidateAll() error {
	return m.validate(true)
}

func (m *CellConfigurationToBeReportedForAdf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CellGlobalId != nil {

		if all {
			switch v := interface{}(m.GetCellGlobalId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellConfigurationToBeReportedForAdfValidationError{
						field:  "CellGlobalId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellConfigurationToBeReportedForAdfValidationError{
						field:  "CellGlobalId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellConfigurationToBeReportedForAdfValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ListOfCellLevelRanconfigurationStructuresForAdf != nil {

		if all {
			switch v := interface{}(m.GetListOfCellLevelRanconfigurationStructuresForAdf()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellConfigurationToBeReportedForAdfValidationError{
						field:  "ListOfCellLevelRanconfigurationStructuresForAdf",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellConfigurationToBeReportedForAdfValidationError{
						field:  "ListOfCellLevelRanconfigurationStructuresForAdf",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListOfCellLevelRanconfigurationStructuresForAdf()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellConfigurationToBeReportedForAdfValidationError{
					field:  "ListOfCellLevelRanconfigurationStructuresForAdf",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CellConfigurationToBeReportedForAdfMultiError(errors)
	}

	return nil
}

// CellConfigurationToBeReportedForAdfMultiError is an error wrapping multiple
// validation errors returned by
// CellConfigurationToBeReportedForAdf.ValidateAll() if the designated
// constraints aren't met.
type CellConfigurationToBeReportedForAdfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellConfigurationToBeReportedForAdfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellConfigurationToBeReportedForAdfMultiError) AllErrors() []error { return m }

// CellConfigurationToBeReportedForAdfValidationError is the validation error
// returned by CellConfigurationToBeReportedForAdf.Validate if the designated
// constraints aren't met.
type CellConfigurationToBeReportedForAdfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellConfigurationToBeReportedForAdfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellConfigurationToBeReportedForAdfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellConfigurationToBeReportedForAdfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellConfigurationToBeReportedForAdfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellConfigurationToBeReportedForAdfValidationError) ErrorName() string {
	return "CellConfigurationToBeReportedForAdfValidationError"
}

// Error satisfies the builtin error interface
func (e CellConfigurationToBeReportedForAdfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellConfigurationToBeReportedForAdf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellConfigurationToBeReportedForAdfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellConfigurationToBeReportedForAdfValidationError{}

// Validate checks the field values on E2SmCCcRIcControlOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcRIcControlOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcRIcControlOutcome with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcRIcControlOutcomeMultiError, or nil if none found.
func (m *E2SmCCcRIcControlOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcRIcControlOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetControlOutcomeFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcRIcControlOutcomeValidationError{
					field:  "ControlOutcomeFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcRIcControlOutcomeValidationError{
					field:  "ControlOutcomeFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControlOutcomeFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcRIcControlOutcomeValidationError{
				field:  "ControlOutcomeFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcRIcControlOutcomeMultiError(errors)
	}

	return nil
}

// E2SmCCcRIcControlOutcomeMultiError is an error wrapping multiple validation
// errors returned by E2SmCCcRIcControlOutcome.ValidateAll() if the designated
// constraints aren't met.
type E2SmCCcRIcControlOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcRIcControlOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcRIcControlOutcomeMultiError) AllErrors() []error { return m }

// E2SmCCcRIcControlOutcomeValidationError is the validation error returned by
// E2SmCCcRIcControlOutcome.Validate if the designated constraints aren't met.
type E2SmCCcRIcControlOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcRIcControlOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcRIcControlOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcRIcControlOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcRIcControlOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcRIcControlOutcomeValidationError) ErrorName() string {
	return "E2SmCCcRIcControlOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcRIcControlOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcRIcControlOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcRIcControlOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcRIcControlOutcomeValidationError{}

// Validate checks the field values on ControlOutcomeFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ControlOutcomeFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControlOutcomeFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ControlOutcomeFormatMultiError, or nil if none found.
func (m *ControlOutcomeFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *ControlOutcomeFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.ControlOutcomeFormat.(type) {

	case *ControlOutcomeFormat_E2SmCccControlOutcomeFormat1:

		if all {
			switch v := interface{}(m.GetE2SmCccControlOutcomeFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControlOutcomeFormatValidationError{
						field:  "E2SmCccControlOutcomeFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControlOutcomeFormatValidationError{
						field:  "E2SmCccControlOutcomeFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccControlOutcomeFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControlOutcomeFormatValidationError{
					field:  "E2SmCccControlOutcomeFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ControlOutcomeFormat_E2SmCccControlOutcomeFormat2:

		if all {
			switch v := interface{}(m.GetE2SmCccControlOutcomeFormat2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControlOutcomeFormatValidationError{
						field:  "E2SmCccControlOutcomeFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControlOutcomeFormatValidationError{
						field:  "E2SmCccControlOutcomeFormat2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetE2SmCccControlOutcomeFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControlOutcomeFormatValidationError{
					field:  "E2SmCccControlOutcomeFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ControlOutcomeFormatMultiError(errors)
	}

	return nil
}

// ControlOutcomeFormatMultiError is an error wrapping multiple validation
// errors returned by ControlOutcomeFormat.ValidateAll() if the designated
// constraints aren't met.
type ControlOutcomeFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControlOutcomeFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControlOutcomeFormatMultiError) AllErrors() []error { return m }

// ControlOutcomeFormatValidationError is the validation error returned by
// ControlOutcomeFormat.Validate if the designated constraints aren't met.
type ControlOutcomeFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlOutcomeFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlOutcomeFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlOutcomeFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlOutcomeFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlOutcomeFormatValidationError) ErrorName() string {
	return "ControlOutcomeFormatValidationError"
}

// Error satisfies the builtin error interface
func (e ControlOutcomeFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlOutcomeFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlOutcomeFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlOutcomeFormatValidationError{}

// Validate checks the field values on E2SmCCcControlOutcomeFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcControlOutcomeFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcControlOutcomeFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcControlOutcomeFormat1MultiError, or nil if none found.
func (m *E2SmCCcControlOutcomeFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcControlOutcomeFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetReceivedTimestamp()) != 8 {
		err := E2SmCCcControlOutcomeFormat1ValidationError{
			field:  "ReceivedTimestamp",
			reason: "value length must be 8 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRanConfigurationStructuresAcceptedList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcControlOutcomeFormat1ValidationError{
					field:  "RanConfigurationStructuresAcceptedList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcControlOutcomeFormat1ValidationError{
					field:  "RanConfigurationStructuresAcceptedList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanConfigurationStructuresAcceptedList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcControlOutcomeFormat1ValidationError{
				field:  "RanConfigurationStructuresAcceptedList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRanConfigurationStructuresFailedList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcControlOutcomeFormat1ValidationError{
					field:  "RanConfigurationStructuresFailedList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcControlOutcomeFormat1ValidationError{
					field:  "RanConfigurationStructuresFailedList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanConfigurationStructuresFailedList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcControlOutcomeFormat1ValidationError{
				field:  "RanConfigurationStructuresFailedList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmCCcControlOutcomeFormat1MultiError(errors)
	}

	return nil
}

// E2SmCCcControlOutcomeFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmCCcControlOutcomeFormat1.ValidateAll() if
// the designated constraints aren't met.
type E2SmCCcControlOutcomeFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcControlOutcomeFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcControlOutcomeFormat1MultiError) AllErrors() []error { return m }

// E2SmCCcControlOutcomeFormat1ValidationError is the validation error returned
// by E2SmCCcControlOutcomeFormat1.Validate if the designated constraints
// aren't met.
type E2SmCCcControlOutcomeFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcControlOutcomeFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcControlOutcomeFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcControlOutcomeFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcControlOutcomeFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcControlOutcomeFormat1ValidationError) ErrorName() string {
	return "E2SmCCcControlOutcomeFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcControlOutcomeFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcControlOutcomeFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcControlOutcomeFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcControlOutcomeFormat1ValidationError{}

// Validate checks the field values on RanConfigurationStructuresAcceptedList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanConfigurationStructuresAcceptedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RanConfigurationStructuresAcceptedList with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RanConfigurationStructuresAcceptedListMultiError, or nil if none found.
func (m *RanConfigurationStructuresAcceptedList) ValidateAll() error {
	return m.validate(true)
}

func (m *RanConfigurationStructuresAcceptedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 1024 {
		err := RanConfigurationStructuresAcceptedListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanConfigurationStructuresAcceptedListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanConfigurationStructuresAcceptedListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanConfigurationStructuresAcceptedListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanConfigurationStructuresAcceptedListMultiError(errors)
	}

	return nil
}

// RanConfigurationStructuresAcceptedListMultiError is an error wrapping
// multiple validation errors returned by
// RanConfigurationStructuresAcceptedList.ValidateAll() if the designated
// constraints aren't met.
type RanConfigurationStructuresAcceptedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanConfigurationStructuresAcceptedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanConfigurationStructuresAcceptedListMultiError) AllErrors() []error { return m }

// RanConfigurationStructuresAcceptedListValidationError is the validation
// error returned by RanConfigurationStructuresAcceptedList.Validate if the
// designated constraints aren't met.
type RanConfigurationStructuresAcceptedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanConfigurationStructuresAcceptedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanConfigurationStructuresAcceptedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanConfigurationStructuresAcceptedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanConfigurationStructuresAcceptedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanConfigurationStructuresAcceptedListValidationError) ErrorName() string {
	return "RanConfigurationStructuresAcceptedListValidationError"
}

// Error satisfies the builtin error interface
func (e RanConfigurationStructuresAcceptedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanConfigurationStructuresAcceptedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanConfigurationStructuresAcceptedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanConfigurationStructuresAcceptedListValidationError{}

// Validate checks the field values on ConfigurationStructureAccepted with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigurationStructureAccepted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigurationStructureAccepted with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConfigurationStructureAcceptedMultiError, or nil if none found.
func (m *ConfigurationStructureAccepted) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigurationStructureAccepted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanConfigurationStructureName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureAcceptedValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureAcceptedValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanConfigurationStructureName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureAcceptedValidationError{
				field:  "RanConfigurationStructureName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOldValuesOfAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureAcceptedValidationError{
					field:  "OldValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureAcceptedValidationError{
					field:  "OldValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOldValuesOfAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureAcceptedValidationError{
				field:  "OldValuesOfAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCurrentValuesOfAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureAcceptedValidationError{
					field:  "CurrentValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureAcceptedValidationError{
					field:  "CurrentValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentValuesOfAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureAcceptedValidationError{
				field:  "CurrentValuesOfAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AppliedTimestamp != nil {

		if len(m.GetAppliedTimestamp()) != 8 {
			err := ConfigurationStructureAcceptedValidationError{
				field:  "AppliedTimestamp",
				reason: "value length must be 8 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ConfigurationStructureAcceptedMultiError(errors)
	}

	return nil
}

// ConfigurationStructureAcceptedMultiError is an error wrapping multiple
// validation errors returned by ConfigurationStructureAccepted.ValidateAll()
// if the designated constraints aren't met.
type ConfigurationStructureAcceptedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigurationStructureAcceptedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigurationStructureAcceptedMultiError) AllErrors() []error { return m }

// ConfigurationStructureAcceptedValidationError is the validation error
// returned by ConfigurationStructureAccepted.Validate if the designated
// constraints aren't met.
type ConfigurationStructureAcceptedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationStructureAcceptedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationStructureAcceptedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationStructureAcceptedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationStructureAcceptedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationStructureAcceptedValidationError) ErrorName() string {
	return "ConfigurationStructureAcceptedValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigurationStructureAcceptedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigurationStructureAccepted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationStructureAcceptedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationStructureAcceptedValidationError{}

// Validate checks the field values on RanConfigurationStructuresFailedList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RanConfigurationStructuresFailedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanConfigurationStructuresFailedList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RanConfigurationStructuresFailedListMultiError, or nil if none found.
func (m *RanConfigurationStructuresFailedList) ValidateAll() error {
	return m.validate(true)
}

func (m *RanConfigurationStructuresFailedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 1024 {
		err := RanConfigurationStructuresFailedListValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RanConfigurationStructuresFailedListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RanConfigurationStructuresFailedListValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RanConfigurationStructuresFailedListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RanConfigurationStructuresFailedListMultiError(errors)
	}

	return nil
}

// RanConfigurationStructuresFailedListMultiError is an error wrapping multiple
// validation errors returned by
// RanConfigurationStructuresFailedList.ValidateAll() if the designated
// constraints aren't met.
type RanConfigurationStructuresFailedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanConfigurationStructuresFailedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanConfigurationStructuresFailedListMultiError) AllErrors() []error { return m }

// RanConfigurationStructuresFailedListValidationError is the validation error
// returned by RanConfigurationStructuresFailedList.Validate if the designated
// constraints aren't met.
type RanConfigurationStructuresFailedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanConfigurationStructuresFailedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanConfigurationStructuresFailedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanConfigurationStructuresFailedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanConfigurationStructuresFailedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanConfigurationStructuresFailedListValidationError) ErrorName() string {
	return "RanConfigurationStructuresFailedListValidationError"
}

// Error satisfies the builtin error interface
func (e RanConfigurationStructuresFailedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanConfigurationStructuresFailedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanConfigurationStructuresFailedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanConfigurationStructuresFailedListValidationError{}

// Validate checks the field values on ConfigurationStructureFailed with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigurationStructureFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigurationStructureFailed with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigurationStructureFailedMultiError, or nil if none found.
func (m *ConfigurationStructureFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigurationStructureFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanConfigurationStructureName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureFailedValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureFailedValidationError{
					field:  "RanConfigurationStructureName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanConfigurationStructureName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureFailedValidationError{
				field:  "RanConfigurationStructureName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOldValuesOfAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureFailedValidationError{
					field:  "OldValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureFailedValidationError{
					field:  "OldValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOldValuesOfAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureFailedValidationError{
				field:  "OldValuesOfAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedValuesOfAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationStructureFailedValidationError{
					field:  "RequestedValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationStructureFailedValidationError{
					field:  "RequestedValuesOfAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedValuesOfAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationStructureFailedValidationError{
				field:  "RequestedValuesOfAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cause

	if len(errors) > 0 {
		return ConfigurationStructureFailedMultiError(errors)
	}

	return nil
}

// ConfigurationStructureFailedMultiError is an error wrapping multiple
// validation errors returned by ConfigurationStructureFailed.ValidateAll() if
// the designated constraints aren't met.
type ConfigurationStructureFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigurationStructureFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigurationStructureFailedMultiError) AllErrors() []error { return m }

// ConfigurationStructureFailedValidationError is the validation error returned
// by ConfigurationStructureFailed.Validate if the designated constraints
// aren't met.
type ConfigurationStructureFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationStructureFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationStructureFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationStructureFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationStructureFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationStructureFailedValidationError) ErrorName() string {
	return "ConfigurationStructureFailedValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigurationStructureFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigurationStructureFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationStructureFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationStructureFailedValidationError{}

// Validate checks the field values on E2SmCCcControlOutcomeFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmCCcControlOutcomeFormat2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmCCcControlOutcomeFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmCCcControlOutcomeFormat2MultiError, or nil if none found.
func (m *E2SmCCcControlOutcomeFormat2) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmCCcControlOutcomeFormat2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOfCellsForControlOutcome()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmCCcControlOutcomeFormat2ValidationError{
					field:  "ListOfCellsForControlOutcome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmCCcControlOutcomeFormat2ValidationError{
					field:  "ListOfCellsForControlOutcome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOfCellsForControlOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmCCcControlOutcomeFormat2ValidationError{
				field:  "ListOfCellsForControlOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ReceivedTimestamp != nil {

		if len(m.GetReceivedTimestamp()) != 8 {
			err := E2SmCCcControlOutcomeFormat2ValidationError{
				field:  "ReceivedTimestamp",
				reason: "value length must be 8 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return E2SmCCcControlOutcomeFormat2MultiError(errors)
	}

	return nil
}

// E2SmCCcControlOutcomeFormat2MultiError is an error wrapping multiple
// validation errors returned by E2SmCCcControlOutcomeFormat2.ValidateAll() if
// the designated constraints aren't met.
type E2SmCCcControlOutcomeFormat2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmCCcControlOutcomeFormat2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmCCcControlOutcomeFormat2MultiError) AllErrors() []error { return m }

// E2SmCCcControlOutcomeFormat2ValidationError is the validation error returned
// by E2SmCCcControlOutcomeFormat2.Validate if the designated constraints
// aren't met.
type E2SmCCcControlOutcomeFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmCCcControlOutcomeFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmCCcControlOutcomeFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmCCcControlOutcomeFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmCCcControlOutcomeFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmCCcControlOutcomeFormat2ValidationError) ErrorName() string {
	return "E2SmCCcControlOutcomeFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmCCcControlOutcomeFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmCCcControlOutcomeFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmCCcControlOutcomeFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmCCcControlOutcomeFormat2ValidationError{}

// Validate checks the field values on ListOfCellsForControlOutcome with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOfCellsForControlOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfCellsForControlOutcome with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOfCellsForControlOutcomeMultiError, or nil if none found.
func (m *ListOfCellsForControlOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfCellsForControlOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 1024 {
		err := ListOfCellsForControlOutcomeValidationError{
			field:  "Value",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfCellsForControlOutcomeValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfCellsForControlOutcomeValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfCellsForControlOutcomeValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfCellsForControlOutcomeMultiError(errors)
	}

	return nil
}

// ListOfCellsForControlOutcomeMultiError is an error wrapping multiple
// validation errors returned by ListOfCellsForControlOutcome.ValidateAll() if
// the designated constraints aren't met.
type ListOfCellsForControlOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfCellsForControlOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfCellsForControlOutcomeMultiError) AllErrors() []error { return m }

// ListOfCellsForControlOutcomeValidationError is the validation error returned
// by ListOfCellsForControlOutcome.Validate if the designated constraints
// aren't met.
type ListOfCellsForControlOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfCellsForControlOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfCellsForControlOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfCellsForControlOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfCellsForControlOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfCellsForControlOutcomeValidationError) ErrorName() string {
	return "ListOfCellsForControlOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfCellsForControlOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfCellsForControlOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfCellsForControlOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfCellsForControlOutcomeValidationError{}

// Validate checks the field values on CellControlOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CellControlOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellControlOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CellControlOutcomeMultiError, or nil if none found.
func (m *CellControlOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *CellControlOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCellGlobalId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CellControlOutcomeValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CellControlOutcomeValidationError{
					field:  "CellGlobalId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellControlOutcomeValidationError{
				field:  "CellGlobalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RanConfigurationStructuresAcceptedList != nil {

		if all {
			switch v := interface{}(m.GetRanConfigurationStructuresAcceptedList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellControlOutcomeValidationError{
						field:  "RanConfigurationStructuresAcceptedList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellControlOutcomeValidationError{
						field:  "RanConfigurationStructuresAcceptedList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanConfigurationStructuresAcceptedList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellControlOutcomeValidationError{
					field:  "RanConfigurationStructuresAcceptedList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RanConfigurationStructuresFailedList != nil {

		if all {
			switch v := interface{}(m.GetRanConfigurationStructuresFailedList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellControlOutcomeValidationError{
						field:  "RanConfigurationStructuresFailedList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellControlOutcomeValidationError{
						field:  "RanConfigurationStructuresFailedList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRanConfigurationStructuresFailedList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellControlOutcomeValidationError{
					field:  "RanConfigurationStructuresFailedList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CellControlOutcomeMultiError(errors)
	}

	return nil
}

// CellControlOutcomeMultiError is an error wrapping multiple validation errors
// returned by CellControlOutcome.ValidateAll() if the designated constraints
// aren't met.
type CellControlOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellControlOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellControlOutcomeMultiError) AllErrors() []error { return m }

// CellControlOutcomeValidationError is the validation error returned by
// CellControlOutcome.Validate if the designated constraints aren't met.
type CellControlOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellControlOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellControlOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellControlOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellControlOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellControlOutcomeValidationError) ErrorName() string {
	return "CellControlOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e CellControlOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellControlOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellControlOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellControlOutcomeValidationError{}
