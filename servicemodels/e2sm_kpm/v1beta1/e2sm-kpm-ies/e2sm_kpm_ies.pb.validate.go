// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_kpm/v1beta1/e2sm_kpm_ies.proto

package e2smkpmies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GlobalKpmnodeId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GlobalKpmnodeId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalKpmnodeId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalKpmnodeIdMultiError, or nil if none found.
func (m *GlobalKpmnodeId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalKpmnodeId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.GlobalKpmnodeId.(type) {

	case *GlobalKpmnodeId_GNb:

		if all {
			switch v := interface{}(m.GetGNb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalKpmnodeIdValidationError{
						field:  "GNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalKpmnodeIdValidationError{
						field:  "GNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "GNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalKpmnodeId_EnGNb:

		if all {
			switch v := interface{}(m.GetEnGNb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalKpmnodeIdValidationError{
						field:  "EnGNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalKpmnodeIdValidationError{
						field:  "EnGNb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "EnGNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalKpmnodeId_NgENb:

		if all {
			switch v := interface{}(m.GetNgENb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalKpmnodeIdValidationError{
						field:  "NgENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalKpmnodeIdValidationError{
						field:  "NgENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNgENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "NgENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalKpmnodeId_ENb:

		if all {
			switch v := interface{}(m.GetENb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GlobalKpmnodeIdValidationError{
						field:  "ENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GlobalKpmnodeIdValidationError{
						field:  "ENb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "ENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GlobalKpmnodeIdMultiError(errors)
	}

	return nil
}

// GlobalKpmnodeIdMultiError is an error wrapping multiple validation errors
// returned by GlobalKpmnodeId.ValidateAll() if the designated constraints
// aren't met.
type GlobalKpmnodeIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalKpmnodeIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalKpmnodeIdMultiError) AllErrors() []error { return m }

// GlobalKpmnodeIdValidationError is the validation error returned by
// GlobalKpmnodeId.Validate if the designated constraints aren't met.
type GlobalKpmnodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeIdValidationError) ErrorName() string { return "GlobalKpmnodeIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalKpmnodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeIdValidationError{}

// Validate checks the field values on GlobalKpmnodeGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalKpmnodeGnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalKpmnodeGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalKpmnodeGnbIdMultiError, or nil if none found.
func (m *GlobalKpmnodeGnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalKpmnodeGnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalGNbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalKpmnodeGnbIdValidationError{
					field:  "GlobalGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalKpmnodeGnbIdValidationError{
					field:  "GlobalGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeGnbIdValidationError{
				field:  "GlobalGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbCuUpId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalKpmnodeGnbIdValidationError{
					field:  "GNbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalKpmnodeGnbIdValidationError{
					field:  "GNbCuUpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeGnbIdValidationError{
				field:  "GNbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbDuId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalKpmnodeGnbIdValidationError{
					field:  "GNbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalKpmnodeGnbIdValidationError{
					field:  "GNbDuId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeGnbIdValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalKpmnodeGnbIdMultiError(errors)
	}

	return nil
}

// GlobalKpmnodeGnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalKpmnodeGnbId.ValidateAll() if the designated constraints
// aren't met.
type GlobalKpmnodeGnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalKpmnodeGnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalKpmnodeGnbIdMultiError) AllErrors() []error { return m }

// GlobalKpmnodeGnbIdValidationError is the validation error returned by
// GlobalKpmnodeGnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeGnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeGnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeGnbIdValidationError{}

// Validate checks the field values on GlobalgNbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalgNbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalgNbId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalgNbIdMultiError, or
// nil if none found.
func (m *GlobalgNbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalgNbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlmnId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalgNbIdValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalgNbIdValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalgNbIdValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalgNbIdValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "GnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalgNbIdMultiError(errors)
	}

	return nil
}

// GlobalgNbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalgNbId.ValidateAll() if the designated constraints aren't met.
type GlobalgNbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalgNbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalgNbIdMultiError) AllErrors() []error { return m }

// GlobalgNbIdValidationError is the validation error returned by
// GlobalgNbId.Validate if the designated constraints aren't met.
type GlobalgNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalgNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalgNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalgNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalgNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalgNbIdValidationError) ErrorName() string { return "GlobalgNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalgNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalgNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalgNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalgNbIdValidationError{}

// Validate checks the field values on GnbCuUpId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbCuUpId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCuUpId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbCuUpIdMultiError, or nil
// if none found.
func (m *GnbCuUpId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCuUpId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := GnbCuUpIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCuUpIdMultiError(errors)
	}

	return nil
}

// GnbCuUpIdMultiError is an error wrapping multiple validation errors returned
// by GnbCuUpId.ValidateAll() if the designated constraints aren't met.
type GnbCuUpIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCuUpIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCuUpIdMultiError) AllErrors() []error { return m }

// GnbCuUpIdValidationError is the validation error returned by
// GnbCuUpId.Validate if the designated constraints aren't met.
type GnbCuUpIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUpIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUpIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUpIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUpIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUpIdValidationError) ErrorName() string { return "GnbCuUpIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUpIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUpId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUpIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUpIdValidationError{}

// Validate checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbDuId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GnbDuIdMultiError, or nil if none found.
func (m *GnbDuId) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbDuId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		err := GnbDuIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbDuIdMultiError(errors)
	}

	return nil
}

// GnbDuIdMultiError is an error wrapping multiple validation errors returned
// by GnbDuId.ValidateAll() if the designated constraints aren't met.
type GnbDuIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbDuIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbDuIdMultiError) AllErrors() []error { return m }

// GnbDuIdValidationError is the validation error returned by GnbDuId.Validate
// if the designated constraints aren't met.
type GnbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDuIdValidationError) ErrorName() string { return "GnbDuIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDuIdValidationError{}

// Validate checks the field values on GnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbIdChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbIdChoiceMultiError, or
// nil if none found.
func (m *GnbIdChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbIdChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.GnbIdChoice.(type) {

	case *GnbIdChoice_GnbId:

		if all {
			switch v := interface{}(m.GetGnbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GnbIdChoiceValidationError{
						field:  "GnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GnbIdChoiceValidationError{
						field:  "GnbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GnbIdChoiceValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GnbIdChoiceMultiError(errors)
	}

	return nil
}

// GnbIdChoiceMultiError is an error wrapping multiple validation errors
// returned by GnbIdChoice.ValidateAll() if the designated constraints aren't met.
type GnbIdChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbIdChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbIdChoiceMultiError) AllErrors() []error { return m }

// GnbIdChoiceValidationError is the validation error returned by
// GnbIdChoice.Validate if the designated constraints aren't met.
type GnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbIdChoiceValidationError) ErrorName() string { return "GnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e GnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbIdChoiceValidationError{}

// Validate checks the field values on GlobalKpmnodeEnGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalKpmnodeEnGnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalKpmnodeEnGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalKpmnodeEnGnbIdMultiError, or nil if none found.
func (m *GlobalKpmnodeEnGnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalKpmnodeEnGnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalGNbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalKpmnodeEnGnbIdValidationError{
					field:  "GlobalGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalKpmnodeEnGnbIdValidationError{
					field:  "GlobalGNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeEnGnbIdValidationError{
				field:  "GlobalGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalKpmnodeEnGnbIdMultiError(errors)
	}

	return nil
}

// GlobalKpmnodeEnGnbIdMultiError is an error wrapping multiple validation
// errors returned by GlobalKpmnodeEnGnbId.ValidateAll() if the designated
// constraints aren't met.
type GlobalKpmnodeEnGnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalKpmnodeEnGnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalKpmnodeEnGnbIdMultiError) AllErrors() []error { return m }

// GlobalKpmnodeEnGnbIdValidationError is the validation error returned by
// GlobalKpmnodeEnGnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeEnGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeEnGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeEnGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeEnGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeEnGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeEnGnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeEnGnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeEnGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeEnGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeEnGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeEnGnbIdValidationError{}

// Validate checks the field values on GlobalenGnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalenGnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalenGnbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalenGnbIdMultiError, or
// nil if none found.
func (m *GlobalenGnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalenGnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGNbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalenGnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "GNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalenGnbIdMultiError(errors)
	}

	return nil
}

// GlobalenGnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalenGnbId.ValidateAll() if the designated constraints
// aren't met.
type GlobalenGnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalenGnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalenGnbIdMultiError) AllErrors() []error { return m }

// GlobalenGnbIdValidationError is the validation error returned by
// GlobalenGnbId.Validate if the designated constraints aren't met.
type GlobalenGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalenGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalenGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalenGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalenGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalenGnbIdValidationError) ErrorName() string { return "GlobalenGnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalenGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalenGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalenGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalenGnbIdValidationError{}

// Validate checks the field values on EngnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EngnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EngnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EngnbIdMultiError, or nil if none found.
func (m *EngnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *EngnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EngnbId.(type) {

	case *EngnbId_GNbId:

		if all {
			switch v := interface{}(m.GetGNbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EngnbIdValidationError{
						field:  "GNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EngnbIdValidationError{
						field:  "GNbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EngnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EngnbIdMultiError(errors)
	}

	return nil
}

// EngnbIdMultiError is an error wrapping multiple validation errors returned
// by EngnbId.ValidateAll() if the designated constraints aren't met.
type EngnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EngnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EngnbIdMultiError) AllErrors() []error { return m }

// EngnbIdValidationError is the validation error returned by EngnbId.Validate
// if the designated constraints aren't met.
type EngnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EngnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EngnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EngnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EngnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EngnbIdValidationError) ErrorName() string { return "EngnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EngnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEngnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EngnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EngnbIdValidationError{}

// Validate checks the field values on GlobalKpmnodeNgEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalKpmnodeNgEnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalKpmnodeNgEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalKpmnodeNgEnbIdMultiError, or nil if none found.
func (m *GlobalKpmnodeNgEnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalKpmnodeNgEnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalNgENbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalKpmnodeNgEnbIdValidationError{
					field:  "GlobalNgENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalKpmnodeNgEnbIdValidationError{
					field:  "GlobalNgENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalNgENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeNgEnbIdValidationError{
				field:  "GlobalNgENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalKpmnodeNgEnbIdMultiError(errors)
	}

	return nil
}

// GlobalKpmnodeNgEnbIdMultiError is an error wrapping multiple validation
// errors returned by GlobalKpmnodeNgEnbId.ValidateAll() if the designated
// constraints aren't met.
type GlobalKpmnodeNgEnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalKpmnodeNgEnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalKpmnodeNgEnbIdMultiError) AllErrors() []error { return m }

// GlobalKpmnodeNgEnbIdValidationError is the validation error returned by
// GlobalKpmnodeNgEnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeNgEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeNgEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeNgEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeNgEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeNgEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeNgEnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeNgEnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeNgEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeNgEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeNgEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeNgEnbIdValidationError{}

// Validate checks the field values on GlobalngeNbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalngeNbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalngeNbId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalngeNbIdMultiError, or
// nil if none found.
func (m *GlobalngeNbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalngeNbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlmnId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalngeNbIdValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalngeNbIdValidationError{
					field:  "PlmnId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalngeNbIdValidationError{
					field:  "EnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalngeNbIdValidationError{
					field:  "EnbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "EnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalngeNbIdMultiError(errors)
	}

	return nil
}

// GlobalngeNbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalngeNbId.ValidateAll() if the designated constraints
// aren't met.
type GlobalngeNbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalngeNbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalngeNbIdMultiError) AllErrors() []error { return m }

// GlobalngeNbIdValidationError is the validation error returned by
// GlobalngeNbId.Validate if the designated constraints aren't met.
type GlobalngeNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalngeNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalngeNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalngeNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalngeNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalngeNbIdValidationError) ErrorName() string { return "GlobalngeNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalngeNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalngeNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalngeNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalngeNbIdValidationError{}

// Validate checks the field values on EnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnbIdChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnbIdChoiceMultiError, or
// nil if none found.
func (m *EnbIdChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *EnbIdChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EnbIdChoice.(type) {

	case *EnbIdChoice_EnbIdMacro:

		if all {
			switch v := interface{}(m.GetEnbIdMacro()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdMacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdMacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnbIdMacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdMacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbIdChoice_EnbIdShortmacro:

		if all {
			switch v := interface{}(m.GetEnbIdShortmacro()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdShortmacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdShortmacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnbIdShortmacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdShortmacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbIdChoice_EnbIdLongmacro:

		if all {
			switch v := interface{}(m.GetEnbIdLongmacro()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdLongmacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdChoiceValidationError{
						field:  "EnbIdLongmacro",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnbIdLongmacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdLongmacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnbIdChoiceMultiError(errors)
	}

	return nil
}

// EnbIdChoiceMultiError is an error wrapping multiple validation errors
// returned by EnbIdChoice.ValidateAll() if the designated constraints aren't met.
type EnbIdChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnbIdChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnbIdChoiceMultiError) AllErrors() []error { return m }

// EnbIdChoiceValidationError is the validation error returned by
// EnbIdChoice.Validate if the designated constraints aren't met.
type EnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdChoiceValidationError) ErrorName() string { return "EnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdChoiceValidationError{}

// Validate checks the field values on GlobalKpmnodeEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalKpmnodeEnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalKpmnodeEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalKpmnodeEnbIdMultiError, or nil if none found.
func (m *GlobalKpmnodeEnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalKpmnodeEnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobalENbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalKpmnodeEnbIdValidationError{
					field:  "GlobalENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalKpmnodeEnbIdValidationError{
					field:  "GlobalENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeEnbIdValidationError{
				field:  "GlobalENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalKpmnodeEnbIdMultiError(errors)
	}

	return nil
}

// GlobalKpmnodeEnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalKpmnodeEnbId.ValidateAll() if the designated constraints
// aren't met.
type GlobalKpmnodeEnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalKpmnodeEnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalKpmnodeEnbIdMultiError) AllErrors() []error { return m }

// GlobalKpmnodeEnbIdValidationError is the validation error returned by
// GlobalKpmnodeEnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeEnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeEnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeEnbIdValidationError{}

// Validate checks the field values on GlobalEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalEnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalEnbIdMultiError, or
// nil if none found.
func (m *GlobalEnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalEnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetENbId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "ENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalEnbIdValidationError{
					field:  "ENbId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "ENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalEnbIdMultiError(errors)
	}

	return nil
}

// GlobalEnbIdMultiError is an error wrapping multiple validation errors
// returned by GlobalEnbId.ValidateAll() if the designated constraints aren't met.
type GlobalEnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalEnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalEnbIdMultiError) AllErrors() []error { return m }

// GlobalEnbIdValidationError is the validation error returned by
// GlobalEnbId.Validate if the designated constraints aren't met.
type GlobalEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalEnbIdValidationError) ErrorName() string { return "GlobalEnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalEnbIdValidationError{}

// Validate checks the field values on EnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnbId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnbId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EnbIdMultiError, or nil if none found.
func (m *EnbId) ValidateAll() error {
	return m.validate(true)
}

func (m *EnbId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EnbId.(type) {

	case *EnbId_MacroENbId:

		if all {
			switch v := interface{}(m.GetMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "MacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "MacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "MacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_HomeENbId:

		if all {
			switch v := interface{}(m.GetHomeENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "HomeENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "HomeENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHomeENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "HomeENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_ShortMacroENbId:

		if all {
			switch v := interface{}(m.GetShortMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "ShortMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "ShortMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShortMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "ShortMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_LongMacroENbId:

		if all {
			switch v := interface{}(m.GetLongMacroENbId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "LongMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnbIdValidationError{
						field:  "LongMacroENbId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLongMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "LongMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnbIdMultiError(errors)
	}

	return nil
}

// EnbIdMultiError is an error wrapping multiple validation errors returned by
// EnbId.ValidateAll() if the designated constraints aren't met.
type EnbIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnbIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnbIdMultiError) AllErrors() []error { return m }

// EnbIdValidationError is the validation error returned by EnbId.Validate if
// the designated constraints aren't met.
type EnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdValidationError) ErrorName() string { return "EnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdValidationError{}

// Validate checks the field values on Nrcgi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Nrcgi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Nrcgi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NrcgiMultiError, or nil if none found.
func (m *Nrcgi) ValidateAll() error {
	return m.validate(true)
}

func (m *Nrcgi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrcgiValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrcgiValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNRcellIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrcgiValidationError{
					field:  "NRcellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrcgiValidationError{
					field:  "NRcellIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNRcellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "NRcellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrcgiMultiError(errors)
	}

	return nil
}

// NrcgiMultiError is an error wrapping multiple validation errors returned by
// Nrcgi.ValidateAll() if the designated constraints aren't met.
type NrcgiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrcgiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrcgiMultiError) AllErrors() []error { return m }

// NrcgiValidationError is the validation error returned by Nrcgi.Validate if
// the designated constraints aren't met.
type NrcgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcgiValidationError) ErrorName() string { return "NrcgiValidationError" }

// Error satisfies the builtin error interface
func (e NrcgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcgiValidationError{}

// Validate checks the field values on Snssai with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Snssai) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Snssai with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SnssaiMultiError, or nil if none found.
func (m *Snssai) ValidateAll() error {
	return m.validate(true)
}

func (m *Snssai) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetSSt()) != 1 {
		err := SnssaiValidationError{
			field:  "SSt",
			reason: "value length must be 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSD()) != 3 {
		err := SnssaiValidationError{
			field:  "SD",
			reason: "value length must be 3 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SnssaiMultiError(errors)
	}

	return nil
}

// SnssaiMultiError is an error wrapping multiple validation errors returned by
// Snssai.ValidateAll() if the designated constraints aren't met.
type SnssaiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnssaiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnssaiMultiError) AllErrors() []error { return m }

// SnssaiValidationError is the validation error returned by Snssai.Validate if
// the designated constraints aren't met.
type SnssaiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnssaiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnssaiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnssaiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnssaiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnssaiValidationError) ErrorName() string { return "SnssaiValidationError" }

// Error satisfies the builtin error interface
func (e SnssaiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnssai.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnssaiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnssaiValidationError{}

// Validate checks the field values on MaxofMessageProtocolTests with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxofMessageProtocolTests) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxofMessageProtocolTests with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxofMessageProtocolTestsMultiError, or nil if none found.
func (m *MaxofMessageProtocolTests) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxofMessageProtocolTests) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 15 {
		err := MaxofMessageProtocolTestsValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxofMessageProtocolTestsMultiError(errors)
	}

	return nil
}

// MaxofMessageProtocolTestsMultiError is an error wrapping multiple validation
// errors returned by MaxofMessageProtocolTests.ValidateAll() if the
// designated constraints aren't met.
type MaxofMessageProtocolTestsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxofMessageProtocolTestsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxofMessageProtocolTestsMultiError) AllErrors() []error { return m }

// MaxofMessageProtocolTestsValidationError is the validation error returned by
// MaxofMessageProtocolTests.Validate if the designated constraints aren't met.
type MaxofMessageProtocolTestsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofMessageProtocolTestsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofMessageProtocolTestsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofMessageProtocolTestsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofMessageProtocolTestsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofMessageProtocolTestsValidationError) ErrorName() string {
	return "MaxofMessageProtocolTestsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofMessageProtocolTestsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofMessageProtocolTests.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofMessageProtocolTestsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofMessageProtocolTestsValidationError{}

// Validate checks the field values on MaxofRicstyles with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxofRicstyles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxofRicstyles with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxofRicstylesMultiError,
// or nil if none found.
func (m *MaxofRicstyles) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxofRicstyles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 63 {
		err := MaxofRicstylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxofRicstylesMultiError(errors)
	}

	return nil
}

// MaxofRicstylesMultiError is an error wrapping multiple validation errors
// returned by MaxofRicstyles.ValidateAll() if the designated constraints
// aren't met.
type MaxofRicstylesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxofRicstylesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxofRicstylesMultiError) AllErrors() []error { return m }

// MaxofRicstylesValidationError is the validation error returned by
// MaxofRicstyles.Validate if the designated constraints aren't met.
type MaxofRicstylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRicstylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRicstylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRicstylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRicstylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRicstylesValidationError) ErrorName() string { return "MaxofRicstylesValidationError" }

// Error satisfies the builtin error interface
func (e MaxofRicstylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRicstyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRicstylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRicstylesValidationError{}

// Validate checks the field values on MaxnoofQci with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxnoofQci) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofQci with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxnoofQciMultiError, or
// nil if none found.
func (m *MaxnoofQci) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofQci) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 256 {
		err := MaxnoofQciValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofQciMultiError(errors)
	}

	return nil
}

// MaxnoofQciMultiError is an error wrapping multiple validation errors
// returned by MaxnoofQci.ValidateAll() if the designated constraints aren't met.
type MaxnoofQciMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofQciMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofQciMultiError) AllErrors() []error { return m }

// MaxnoofQciValidationError is the validation error returned by
// MaxnoofQci.Validate if the designated constraints aren't met.
type MaxnoofQciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofQciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofQciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofQciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofQciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofQciValidationError) ErrorName() string { return "MaxnoofQciValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofQciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofQci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofQciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofQciValidationError{}

// Validate checks the field values on MaxnoofQoSflows with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofQoSflows) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofQoSflows with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofQoSflowsMultiError, or nil if none found.
func (m *MaxnoofQoSflows) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofQoSflows) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 64 {
		err := MaxnoofQoSflowsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofQoSflowsMultiError(errors)
	}

	return nil
}

// MaxnoofQoSflowsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofQoSflows.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofQoSflowsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofQoSflowsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofQoSflowsMultiError) AllErrors() []error { return m }

// MaxnoofQoSflowsValidationError is the validation error returned by
// MaxnoofQoSflows.Validate if the designated constraints aren't met.
type MaxnoofQoSflowsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofQoSflowsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofQoSflowsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofQoSflowsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofQoSflowsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofQoSflowsValidationError) ErrorName() string { return "MaxnoofQoSflowsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofQoSflowsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofQoSflows.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofQoSflowsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofQoSflowsValidationError{}

// Validate checks the field values on MaxnoofSliceItems with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofSliceItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofSliceItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofSliceItemsMultiError, or nil if none found.
func (m *MaxnoofSliceItems) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofSliceItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 1024 {
		err := MaxnoofSliceItemsValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofSliceItemsMultiError(errors)
	}

	return nil
}

// MaxnoofSliceItemsMultiError is an error wrapping multiple validation errors
// returned by MaxnoofSliceItems.ValidateAll() if the designated constraints
// aren't met.
type MaxnoofSliceItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofSliceItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofSliceItemsMultiError) AllErrors() []error { return m }

// MaxnoofSliceItemsValidationError is the validation error returned by
// MaxnoofSliceItems.Validate if the designated constraints aren't met.
type MaxnoofSliceItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSliceItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSliceItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSliceItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSliceItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSliceItemsValidationError) ErrorName() string {
	return "MaxnoofSliceItemsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofSliceItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSliceItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSliceItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSliceItemsValidationError{}

// Validate checks the field values on MaxnoofContainerListItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaxnoofContainerListItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxnoofContainerListItems with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxnoofContainerListItemsMultiError, or nil if none found.
func (m *MaxnoofContainerListItems) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxnoofContainerListItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 3 {
		err := MaxnoofContainerListItemsValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxnoofContainerListItemsMultiError(errors)
	}

	return nil
}

// MaxnoofContainerListItemsMultiError is an error wrapping multiple validation
// errors returned by MaxnoofContainerListItems.ValidateAll() if the
// designated constraints aren't met.
type MaxnoofContainerListItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxnoofContainerListItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxnoofContainerListItemsMultiError) AllErrors() []error { return m }

// MaxnoofContainerListItemsValidationError is the validation error returned by
// MaxnoofContainerListItems.Validate if the designated constraints aren't met.
type MaxnoofContainerListItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofContainerListItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofContainerListItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofContainerListItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofContainerListItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofContainerListItemsValidationError) ErrorName() string {
	return "MaxnoofContainerListItemsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofContainerListItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofContainerListItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofContainerListItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofContainerListItemsValidationError{}

// Validate checks the field values on MaxCellingNbdu with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxCellingNbdu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxCellingNbdu with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaxCellingNbduMultiError,
// or nil if none found.
func (m *MaxCellingNbdu) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxCellingNbdu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 512 {
		err := MaxCellingNbduValidationError{
			field:  "Value",
			reason: "value must equal 512",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxCellingNbduMultiError(errors)
	}

	return nil
}

// MaxCellingNbduMultiError is an error wrapping multiple validation errors
// returned by MaxCellingNbdu.ValidateAll() if the designated constraints
// aren't met.
type MaxCellingNbduMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxCellingNbduMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxCellingNbduMultiError) AllErrors() []error { return m }

// MaxCellingNbduValidationError is the validation error returned by
// MaxCellingNbdu.Validate if the designated constraints aren't met.
type MaxCellingNbduValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxCellingNbduValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxCellingNbduValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxCellingNbduValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxCellingNbduValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxCellingNbduValidationError) ErrorName() string { return "MaxCellingNbduValidationError" }

// Error satisfies the builtin error interface
func (e MaxCellingNbduValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxCellingNbdu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxCellingNbduValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxCellingNbduValidationError{}

// Validate checks the field values on MaxofContainers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaxofContainers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxofContainers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaxofContainersMultiError, or nil if none found.
func (m *MaxofContainers) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxofContainers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 8 {
		err := MaxofContainersValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxofContainersMultiError(errors)
	}

	return nil
}

// MaxofContainersMultiError is an error wrapping multiple validation errors
// returned by MaxofContainers.ValidateAll() if the designated constraints
// aren't met.
type MaxofContainersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxofContainersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxofContainersMultiError) AllErrors() []error { return m }

// MaxofContainersValidationError is the validation error returned by
// MaxofContainers.Validate if the designated constraints aren't met.
type MaxofContainersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofContainersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofContainersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofContainersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofContainersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofContainersValidationError) ErrorName() string { return "MaxofContainersValidationError" }

// Error satisfies the builtin error interface
func (e MaxofContainersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofContainers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofContainersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofContainersValidationError{}

// Validate checks the field values on MaxPlmn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaxPlmn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaxPlmn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MaxPlmnMultiError, or nil if none found.
func (m *MaxPlmn) ValidateAll() error {
	return m.validate(true)
}

func (m *MaxPlmn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() != 12 {
		err := MaxPlmnValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MaxPlmnMultiError(errors)
	}

	return nil
}

// MaxPlmnMultiError is an error wrapping multiple validation errors returned
// by MaxPlmn.ValidateAll() if the designated constraints aren't met.
type MaxPlmnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaxPlmnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaxPlmnMultiError) AllErrors() []error { return m }

// MaxPlmnValidationError is the validation error returned by MaxPlmn.Validate
// if the designated constraints aren't met.
type MaxPlmnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPlmnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPlmnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPlmnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPlmnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPlmnValidationError) ErrorName() string { return "MaxPlmnValidationError" }

// Error satisfies the builtin error interface
func (e MaxPlmnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPlmn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPlmnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPlmnValidationError{}

// Validate checks the field values on RicStyleType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicStyleType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicStyleType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicStyleTypeMultiError, or
// nil if none found.
func (m *RicStyleType) ValidateAll() error {
	return m.validate(true)
}

func (m *RicStyleType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicStyleTypeMultiError(errors)
	}

	return nil
}

// RicStyleTypeMultiError is an error wrapping multiple validation errors
// returned by RicStyleType.ValidateAll() if the designated constraints aren't met.
type RicStyleTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicStyleTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicStyleTypeMultiError) AllErrors() []error { return m }

// RicStyleTypeValidationError is the validation error returned by
// RicStyleType.Validate if the designated constraints aren't met.
type RicStyleTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleTypeValidationError) ErrorName() string { return "RicStyleTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleTypeValidationError{}

// Validate checks the field values on RicFormatType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicFormatType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicFormatType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicFormatTypeMultiError, or
// nil if none found.
func (m *RicFormatType) ValidateAll() error {
	return m.validate(true)
}

func (m *RicFormatType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RicFormatTypeMultiError(errors)
	}

	return nil
}

// RicFormatTypeMultiError is an error wrapping multiple validation errors
// returned by RicFormatType.ValidateAll() if the designated constraints
// aren't met.
type RicFormatTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicFormatTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicFormatTypeMultiError) AllErrors() []error { return m }

// RicFormatTypeValidationError is the validation error returned by
// RicFormatType.Validate if the designated constraints aren't met.
type RicFormatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicFormatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicFormatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicFormatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicFormatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicFormatTypeValidationError) ErrorName() string { return "RicFormatTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicFormatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicFormatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicFormatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicFormatTypeValidationError{}

// Validate checks the field values on E2SmKpmEventTriggerDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmKpmEventTriggerDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmKpmEventTriggerDefinition with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmKpmEventTriggerDefinitionMultiError, or nil if none found.
func (m *E2SmKpmEventTriggerDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmKpmEventTriggerDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmKpmEventTriggerDefinition.(type) {

	case *E2SmKpmEventTriggerDefinition_EventDefinitionFormat1:

		if all {
			switch v := interface{}(m.GetEventDefinitionFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmKpmEventTriggerDefinitionValidationError{
						field:  "EventDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmKpmEventTriggerDefinitionValidationError{
						field:  "EventDefinitionFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEventDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmEventTriggerDefinitionValidationError{
					field:  "EventDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmKpmEventTriggerDefinitionMultiError(errors)
	}

	return nil
}

// E2SmKpmEventTriggerDefinitionMultiError is an error wrapping multiple
// validation errors returned by E2SmKpmEventTriggerDefinition.ValidateAll()
// if the designated constraints aren't met.
type E2SmKpmEventTriggerDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmKpmEventTriggerDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmKpmEventTriggerDefinitionMultiError) AllErrors() []error { return m }

// E2SmKpmEventTriggerDefinitionValidationError is the validation error
// returned by E2SmKpmEventTriggerDefinition.Validate if the designated
// constraints aren't met.
type E2SmKpmEventTriggerDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmEventTriggerDefinitionValidationError) ErrorName() string {
	return "E2SmKpmEventTriggerDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmEventTriggerDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmEventTriggerDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmEventTriggerDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmEventTriggerDefinitionValidationError{}

// Validate checks the field values on E2SmKpmEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *E2SmKpmEventTriggerDefinitionFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmKpmEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// E2SmKpmEventTriggerDefinitionFormat1MultiError, or nil if none found.
func (m *E2SmKpmEventTriggerDefinitionFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmKpmEventTriggerDefinitionFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetPolicyTestList()); l < 1 || l > 15 {
		err := E2SmKpmEventTriggerDefinitionFormat1ValidationError{
			field:  "PolicyTestList",
			reason: "value must contain between 1 and 15 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPolicyTestList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmKpmEventTriggerDefinitionFormat1ValidationError{
						field:  fmt.Sprintf("PolicyTestList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmKpmEventTriggerDefinitionFormat1ValidationError{
						field:  fmt.Sprintf("PolicyTestList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmEventTriggerDefinitionFormat1ValidationError{
					field:  fmt.Sprintf("PolicyTestList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmKpmEventTriggerDefinitionFormat1MultiError(errors)
	}

	return nil
}

// E2SmKpmEventTriggerDefinitionFormat1MultiError is an error wrapping multiple
// validation errors returned by
// E2SmKpmEventTriggerDefinitionFormat1.ValidateAll() if the designated
// constraints aren't met.
type E2SmKpmEventTriggerDefinitionFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmKpmEventTriggerDefinitionFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmKpmEventTriggerDefinitionFormat1MultiError) AllErrors() []error { return m }

// E2SmKpmEventTriggerDefinitionFormat1ValidationError is the validation error
// returned by E2SmKpmEventTriggerDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmKpmEventTriggerDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmKpmEventTriggerDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmEventTriggerDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmEventTriggerDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmEventTriggerDefinitionFormat1ValidationError{}

// Validate checks the field values on E2SmKpmActionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmKpmActionDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmKpmActionDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmKpmActionDefinitionMultiError, or nil if none found.
func (m *E2SmKpmActionDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmKpmActionDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmKpmActionDefinitionValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmKpmActionDefinitionValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionValidationError{
				field:  "RicStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmKpmActionDefinitionMultiError(errors)
	}

	return nil
}

// E2SmKpmActionDefinitionMultiError is an error wrapping multiple validation
// errors returned by E2SmKpmActionDefinition.ValidateAll() if the designated
// constraints aren't met.
type E2SmKpmActionDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmKpmActionDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmKpmActionDefinitionMultiError) AllErrors() []error { return m }

// E2SmKpmActionDefinitionValidationError is the validation error returned by
// E2SmKpmActionDefinition.Validate if the designated constraints aren't met.
type E2SmKpmActionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmActionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmActionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmActionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmActionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmActionDefinitionValidationError) ErrorName() string {
	return "E2SmKpmActionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmActionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmActionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmActionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmActionDefinitionValidationError{}

// Validate checks the field values on E2SmKpmIndicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmKpmIndicationHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmKpmIndicationHeader with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmKpmIndicationHeaderMultiError, or nil if none found.
func (m *E2SmKpmIndicationHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmKpmIndicationHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmKpmIndicationHeader.(type) {

	case *E2SmKpmIndicationHeader_IndicationHeaderFormat1:

		if all {
			switch v := interface{}(m.GetIndicationHeaderFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmKpmIndicationHeaderValidationError{
						field:  "IndicationHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmKpmIndicationHeaderValidationError{
						field:  "IndicationHeaderFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationHeaderValidationError{
					field:  "IndicationHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmKpmIndicationHeaderMultiError(errors)
	}

	return nil
}

// E2SmKpmIndicationHeaderMultiError is an error wrapping multiple validation
// errors returned by E2SmKpmIndicationHeader.ValidateAll() if the designated
// constraints aren't met.
type E2SmKpmIndicationHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmKpmIndicationHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmKpmIndicationHeaderMultiError) AllErrors() []error { return m }

// E2SmKpmIndicationHeaderValidationError is the validation error returned by
// E2SmKpmIndicationHeader.Validate if the designated constraints aren't met.
type E2SmKpmIndicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationHeaderValidationError) ErrorName() string {
	return "E2SmKpmIndicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationHeaderValidationError{}

// Validate checks the field values on E2SmKpmIndicationHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmKpmIndicationHeaderFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmKpmIndicationHeaderFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmKpmIndicationHeaderFormat1MultiError, or nil if none found.
func (m *E2SmKpmIndicationHeaderFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmKpmIndicationHeaderFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIdGlobalKpmnodeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmKpmIndicationHeaderFormat1ValidationError{
					field:  "IdGlobalKpmnodeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmKpmIndicationHeaderFormat1ValidationError{
					field:  "IdGlobalKpmnodeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdGlobalKpmnodeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationHeaderFormat1ValidationError{
				field:  "IdGlobalKpmnodeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNRcgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmKpmIndicationHeaderFormat1ValidationError{
					field:  "NRcgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmKpmIndicationHeaderFormat1ValidationError{
					field:  "NRcgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNRcgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationHeaderFormat1ValidationError{
				field:  "NRcgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmKpmIndicationHeaderFormat1ValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmKpmIndicationHeaderFormat1ValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationHeaderFormat1ValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSliceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmKpmIndicationHeaderFormat1ValidationError{
					field:  "SliceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmKpmIndicationHeaderFormat1ValidationError{
					field:  "SliceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSliceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationHeaderFormat1ValidationError{
				field:  "SliceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetFiveQi(); val < 0 || val > 255 {
		err := E2SmKpmIndicationHeaderFormat1ValidationError{
			field:  "FiveQi",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetQci(); val < 0 || val > 255 {
		err := E2SmKpmIndicationHeaderFormat1ValidationError{
			field:  "Qci",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return E2SmKpmIndicationHeaderFormat1MultiError(errors)
	}

	return nil
}

// E2SmKpmIndicationHeaderFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmKpmIndicationHeaderFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmKpmIndicationHeaderFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmKpmIndicationHeaderFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmKpmIndicationHeaderFormat1MultiError) AllErrors() []error { return m }

// E2SmKpmIndicationHeaderFormat1ValidationError is the validation error
// returned by E2SmKpmIndicationHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmKpmIndicationHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmKpmIndicationHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmKpmIndicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmKpmIndicationMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmKpmIndicationMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmKpmIndicationMessageMultiError, or nil if none found.
func (m *E2SmKpmIndicationMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmKpmIndicationMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.E2SmKpmIndicationMessage.(type) {

	case *E2SmKpmIndicationMessage_RicStyleType:

		if all {
			switch v := interface{}(m.GetRicStyleType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmKpmIndicationMessageValidationError{
						field:  "RicStyleType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmKpmIndicationMessageValidationError{
						field:  "RicStyleType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationMessageValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmKpmIndicationMessage_IndicationMessageFormat1:

		if all {
			switch v := interface{}(m.GetIndicationMessageFormat1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmKpmIndicationMessageValidationError{
						field:  "IndicationMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmKpmIndicationMessageValidationError{
						field:  "IndicationMessageFormat1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIndicationMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationMessageValidationError{
					field:  "IndicationMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmKpmIndicationMessageMultiError(errors)
	}

	return nil
}

// E2SmKpmIndicationMessageMultiError is an error wrapping multiple validation
// errors returned by E2SmKpmIndicationMessage.ValidateAll() if the designated
// constraints aren't met.
type E2SmKpmIndicationMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmKpmIndicationMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmKpmIndicationMessageMultiError) AllErrors() []error { return m }

// E2SmKpmIndicationMessageValidationError is the validation error returned by
// E2SmKpmIndicationMessage.Validate if the designated constraints aren't met.
type E2SmKpmIndicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationMessageValidationError) ErrorName() string {
	return "E2SmKpmIndicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationMessageValidationError{}

// Validate checks the field values on E2SmKpmIndicationMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmKpmIndicationMessageFormat1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmKpmIndicationMessageFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmKpmIndicationMessageFormat1MultiError, or nil if none found.
func (m *E2SmKpmIndicationMessageFormat1) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmKpmIndicationMessageFormat1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetPmContainers()); l < 1 || l > 512 {
		err := E2SmKpmIndicationMessageFormat1ValidationError{
			field:  "PmContainers",
			reason: "value must contain between 1 and 512 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPmContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmKpmIndicationMessageFormat1ValidationError{
						field:  fmt.Sprintf("PmContainers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmKpmIndicationMessageFormat1ValidationError{
						field:  fmt.Sprintf("PmContainers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationMessageFormat1ValidationError{
					field:  fmt.Sprintf("PmContainers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmKpmIndicationMessageFormat1MultiError(errors)
	}

	return nil
}

// E2SmKpmIndicationMessageFormat1MultiError is an error wrapping multiple
// validation errors returned by E2SmKpmIndicationMessageFormat1.ValidateAll()
// if the designated constraints aren't met.
type E2SmKpmIndicationMessageFormat1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmKpmIndicationMessageFormat1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmKpmIndicationMessageFormat1MultiError) AllErrors() []error { return m }

// E2SmKpmIndicationMessageFormat1ValidationError is the validation error
// returned by E2SmKpmIndicationMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmKpmIndicationMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationMessageFormat1ValidationError) ErrorName() string {
	return "E2SmKpmIndicationMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationMessageFormat1ValidationError{}

// Validate checks the field values on PmContainersList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PmContainersList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PmContainersList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PmContainersListMultiError, or nil if none found.
func (m *PmContainersList) ValidateAll() error {
	return m.validate(true)
}

func (m *PmContainersList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPerformanceContainer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PmContainersListValidationError{
					field:  "PerformanceContainer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PmContainersListValidationError{
					field:  "PerformanceContainer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPerformanceContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PmContainersListValidationError{
				field:  "PerformanceContainer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTheRancontainer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PmContainersListValidationError{
					field:  "TheRancontainer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PmContainersListValidationError{
					field:  "TheRancontainer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTheRancontainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PmContainersListValidationError{
				field:  "TheRancontainer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PmContainersListMultiError(errors)
	}

	return nil
}

// PmContainersListMultiError is an error wrapping multiple validation errors
// returned by PmContainersList.ValidateAll() if the designated constraints
// aren't met.
type PmContainersListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PmContainersListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PmContainersListMultiError) AllErrors() []error { return m }

// PmContainersListValidationError is the validation error returned by
// PmContainersList.Validate if the designated constraints aren't met.
type PmContainersListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PmContainersListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PmContainersListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PmContainersListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PmContainersListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PmContainersListValidationError) ErrorName() string { return "PmContainersListValidationError" }

// Error satisfies the builtin error interface
func (e PmContainersListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPmContainersList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PmContainersListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PmContainersListValidationError{}

// Validate checks the field values on E2SmKpmRanfunctionDescription with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmKpmRanfunctionDescription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on E2SmKpmRanfunctionDescription with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// E2SmKpmRanfunctionDescriptionMultiError, or nil if none found.
func (m *E2SmKpmRanfunctionDescription) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmKpmRanfunctionDescription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRanFunctionName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmKpmRanfunctionDescriptionValidationError{
					field:  "RanFunctionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmKpmRanfunctionDescriptionValidationError{
					field:  "RanFunctionName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRanFunctionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmRanfunctionDescriptionValidationError{
				field:  "RanFunctionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetE2SmKpmRanfunctionItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, E2SmKpmRanfunctionDescriptionValidationError{
					field:  "E2SmKpmRanfunctionItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, E2SmKpmRanfunctionDescriptionValidationError{
					field:  "E2SmKpmRanfunctionItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetE2SmKpmRanfunctionItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmRanfunctionDescriptionValidationError{
				field:  "E2SmKpmRanfunctionItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return E2SmKpmRanfunctionDescriptionMultiError(errors)
	}

	return nil
}

// E2SmKpmRanfunctionDescriptionMultiError is an error wrapping multiple
// validation errors returned by E2SmKpmRanfunctionDescription.ValidateAll()
// if the designated constraints aren't met.
type E2SmKpmRanfunctionDescriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmKpmRanfunctionDescriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmKpmRanfunctionDescriptionMultiError) AllErrors() []error { return m }

// E2SmKpmRanfunctionDescriptionValidationError is the validation error
// returned by E2SmKpmRanfunctionDescription.Validate if the designated
// constraints aren't met.
type E2SmKpmRanfunctionDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmRanfunctionDescriptionValidationError) ErrorName() string {
	return "E2SmKpmRanfunctionDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmRanfunctionDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmRanfunctionDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmRanfunctionDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmRanfunctionDescriptionValidationError{}

// Validate checks the field values on TriggerConditionIeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerConditionIeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerConditionIeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerConditionIeItemMultiError, or nil if none found.
func (m *TriggerConditionIeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerConditionIeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReportPeriodIe

	if len(errors) > 0 {
		return TriggerConditionIeItemMultiError(errors)
	}

	return nil
}

// TriggerConditionIeItemMultiError is an error wrapping multiple validation
// errors returned by TriggerConditionIeItem.ValidateAll() if the designated
// constraints aren't met.
type TriggerConditionIeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerConditionIeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerConditionIeItemMultiError) AllErrors() []error { return m }

// TriggerConditionIeItemValidationError is the validation error returned by
// TriggerConditionIeItem.Validate if the designated constraints aren't met.
type TriggerConditionIeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerConditionIeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerConditionIeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerConditionIeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerConditionIeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerConditionIeItemValidationError) ErrorName() string {
	return "TriggerConditionIeItemValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerConditionIeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerConditionIeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerConditionIeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerConditionIeItemValidationError{}

// Validate checks the field values on RanfunctionName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RanfunctionName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanfunctionName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RanfunctionNameMultiError, or nil if none found.
func (m *RanfunctionName) ValidateAll() error {
	return m.validate(true)
}

func (m *RanfunctionName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRanFunctionShortName()); l < 1 || l > 150 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionShortName",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionE2SmOid()); l < 1 || l > 1000 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionE2SmOid",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionDescription()); l < 1 || l > 150 {
		err := RanfunctionNameValidationError{
			field:  "RanFunctionDescription",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RanFunctionInstance

	if len(errors) > 0 {
		return RanfunctionNameMultiError(errors)
	}

	return nil
}

// RanfunctionNameMultiError is an error wrapping multiple validation errors
// returned by RanfunctionName.ValidateAll() if the designated constraints
// aren't met.
type RanfunctionNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanfunctionNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanfunctionNameMultiError) AllErrors() []error { return m }

// RanfunctionNameValidationError is the validation error returned by
// RanfunctionName.Validate if the designated constraints aren't met.
type RanfunctionNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionNameValidationError) ErrorName() string { return "RanfunctionNameValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionNameValidationError{}

// Validate checks the field values on RicEventTriggerStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicEventTriggerStyleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicEventTriggerStyleList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicEventTriggerStyleListMultiError, or nil if none found.
func (m *RicEventTriggerStyleList) ValidateAll() error {
	return m.validate(true)
}

func (m *RicEventTriggerStyleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicEventTriggerStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicEventTriggerStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicEventTriggerFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicEventTriggerStyleListValidationError{
					field:  "RicEventTriggerFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicEventTriggerFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicEventTriggerStyleListMultiError(errors)
	}

	return nil
}

// RicEventTriggerStyleListMultiError is an error wrapping multiple validation
// errors returned by RicEventTriggerStyleList.ValidateAll() if the designated
// constraints aren't met.
type RicEventTriggerStyleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicEventTriggerStyleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicEventTriggerStyleListMultiError) AllErrors() []error { return m }

// RicEventTriggerStyleListValidationError is the validation error returned by
// RicEventTriggerStyleList.Validate if the designated constraints aren't met.
type RicEventTriggerStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerStyleListValidationError) ErrorName() string {
	return "RicEventTriggerStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerStyleListValidationError{}

// Validate checks the field values on RicReportStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RicReportStyleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicReportStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RicReportStyleListMultiError, or nil if none found.
func (m *RicReportStyleList) ValidateAll() error {
	return m.validate(true)
}

func (m *RicReportStyleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRicReportStyleType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicReportStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicReportStyleName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicReportStyleName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicReportStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicIndicationHeaderFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationHeaderFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRicIndicationMessageFormatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RicReportStyleListValidationError{
					field:  "RicIndicationMessageFormatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RicReportStyleListMultiError(errors)
	}

	return nil
}

// RicReportStyleListMultiError is an error wrapping multiple validation errors
// returned by RicReportStyleList.ValidateAll() if the designated constraints
// aren't met.
type RicReportStyleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicReportStyleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicReportStyleListMultiError) AllErrors() []error { return m }

// RicReportStyleListValidationError is the validation error returned by
// RicReportStyleList.Validate if the designated constraints aren't met.
type RicReportStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicReportStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicReportStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicReportStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicReportStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicReportStyleListValidationError) ErrorName() string {
	return "RicReportStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicReportStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicReportStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicReportStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicReportStyleListValidationError{}

// Validate checks the field values on PfContainer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PfContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PfContainer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PfContainerMultiError, or
// nil if none found.
func (m *PfContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *PfContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.PfContainer.(type) {

	case *PfContainer_ODu:

		if all {
			switch v := interface{}(m.GetODu()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PfContainerValidationError{
						field:  "ODu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PfContainerValidationError{
						field:  "ODu",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetODu()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PfContainerValidationError{
					field:  "ODu",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PfContainer_OCuCp:

		if all {
			switch v := interface{}(m.GetOCuCp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PfContainerValidationError{
						field:  "OCuCp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PfContainerValidationError{
						field:  "OCuCp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOCuCp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PfContainerValidationError{
					field:  "OCuCp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PfContainer_OCuUp:

		if all {
			switch v := interface{}(m.GetOCuUp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PfContainerValidationError{
						field:  "OCuUp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PfContainerValidationError{
						field:  "OCuUp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOCuUp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PfContainerValidationError{
					field:  "OCuUp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PfContainerMultiError(errors)
	}

	return nil
}

// PfContainerMultiError is an error wrapping multiple validation errors
// returned by PfContainer.ValidateAll() if the designated constraints aren't met.
type PfContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PfContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PfContainerMultiError) AllErrors() []error { return m }

// PfContainerValidationError is the validation error returned by
// PfContainer.Validate if the designated constraints aren't met.
type PfContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PfContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PfContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PfContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PfContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PfContainerValidationError) ErrorName() string { return "PfContainerValidationError" }

// Error satisfies the builtin error interface
func (e PfContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPfContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PfContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PfContainerValidationError{}

// Validate checks the field values on OduPfContainer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OduPfContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OduPfContainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OduPfContainerMultiError,
// or nil if none found.
func (m *OduPfContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *OduPfContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetCellResourceReportList()); l < 1 || l > 512 {
		err := OduPfContainerValidationError{
			field:  "CellResourceReportList",
			reason: "value must contain between 1 and 512 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCellResourceReportList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OduPfContainerValidationError{
						field:  fmt.Sprintf("CellResourceReportList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OduPfContainerValidationError{
						field:  fmt.Sprintf("CellResourceReportList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OduPfContainerValidationError{
					field:  fmt.Sprintf("CellResourceReportList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OduPfContainerMultiError(errors)
	}

	return nil
}

// OduPfContainerMultiError is an error wrapping multiple validation errors
// returned by OduPfContainer.ValidateAll() if the designated constraints
// aren't met.
type OduPfContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OduPfContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OduPfContainerMultiError) AllErrors() []error { return m }

// OduPfContainerValidationError is the validation error returned by
// OduPfContainer.Validate if the designated constraints aren't met.
type OduPfContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OduPfContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OduPfContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OduPfContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OduPfContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OduPfContainerValidationError) ErrorName() string { return "OduPfContainerValidationError" }

// Error satisfies the builtin error interface
func (e OduPfContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOduPfContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OduPfContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OduPfContainerValidationError{}

// Validate checks the field values on CellResourceReportListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CellResourceReportListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CellResourceReportListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CellResourceReportListItemMultiError, or nil if none found.
func (m *CellResourceReportListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CellResourceReportListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNRcgi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CellResourceReportListItemValidationError{
					field:  "NRcgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CellResourceReportListItemValidationError{
					field:  "NRcgi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNRcgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellResourceReportListItemValidationError{
				field:  "NRcgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetDlTotalofAvailablePrbs(); val < 0 || val > 273 {
		err := CellResourceReportListItemValidationError{
			field:  "DlTotalofAvailablePrbs",
			reason: "value must be inside range [0, 273]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetUlTotalofAvailablePrbs(); val < 0 || val > 273 {
		err := CellResourceReportListItemValidationError{
			field:  "UlTotalofAvailablePrbs",
			reason: "value must be inside range [0, 273]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetServedPlmnPerCellList()); l < 1 || l > 12 {
		err := CellResourceReportListItemValidationError{
			field:  "ServedPlmnPerCellList",
			reason: "value must contain between 1 and 12 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetServedPlmnPerCellList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CellResourceReportListItemValidationError{
						field:  fmt.Sprintf("ServedPlmnPerCellList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CellResourceReportListItemValidationError{
						field:  fmt.Sprintf("ServedPlmnPerCellList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellResourceReportListItemValidationError{
					field:  fmt.Sprintf("ServedPlmnPerCellList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CellResourceReportListItemMultiError(errors)
	}

	return nil
}

// CellResourceReportListItemMultiError is an error wrapping multiple
// validation errors returned by CellResourceReportListItem.ValidateAll() if
// the designated constraints aren't met.
type CellResourceReportListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CellResourceReportListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CellResourceReportListItemMultiError) AllErrors() []error { return m }

// CellResourceReportListItemValidationError is the validation error returned
// by CellResourceReportListItem.Validate if the designated constraints aren't met.
type CellResourceReportListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellResourceReportListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellResourceReportListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellResourceReportListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellResourceReportListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellResourceReportListItemValidationError) ErrorName() string {
	return "CellResourceReportListItemValidationError"
}

// Error satisfies the builtin error interface
func (e CellResourceReportListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellResourceReportListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellResourceReportListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellResourceReportListItemValidationError{}

// Validate checks the field values on ServedPlmnPerCellListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServedPlmnPerCellListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServedPlmnPerCellListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServedPlmnPerCellListItemMultiError, or nil if none found.
func (m *ServedPlmnPerCellListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ServedPlmnPerCellListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServedPlmnPerCellListItemValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServedPlmnPerCellListItemValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServedPlmnPerCellListItemValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDuPm_5Gc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServedPlmnPerCellListItemValidationError{
					field:  "DuPm_5Gc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServedPlmnPerCellListItemValidationError{
					field:  "DuPm_5Gc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuPm_5Gc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServedPlmnPerCellListItemValidationError{
				field:  "DuPm_5Gc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDuPmEpc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServedPlmnPerCellListItemValidationError{
					field:  "DuPmEpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServedPlmnPerCellListItemValidationError{
					field:  "DuPmEpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuPmEpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServedPlmnPerCellListItemValidationError{
				field:  "DuPmEpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServedPlmnPerCellListItemMultiError(errors)
	}

	return nil
}

// ServedPlmnPerCellListItemMultiError is an error wrapping multiple validation
// errors returned by ServedPlmnPerCellListItem.ValidateAll() if the
// designated constraints aren't met.
type ServedPlmnPerCellListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServedPlmnPerCellListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServedPlmnPerCellListItemMultiError) AllErrors() []error { return m }

// ServedPlmnPerCellListItemValidationError is the validation error returned by
// ServedPlmnPerCellListItem.Validate if the designated constraints aren't met.
type ServedPlmnPerCellListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServedPlmnPerCellListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServedPlmnPerCellListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServedPlmnPerCellListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServedPlmnPerCellListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServedPlmnPerCellListItemValidationError) ErrorName() string {
	return "ServedPlmnPerCellListItemValidationError"
}

// Error satisfies the builtin error interface
func (e ServedPlmnPerCellListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServedPlmnPerCellListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServedPlmnPerCellListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServedPlmnPerCellListItemValidationError{}

// Validate checks the field values on FgcDuPmContainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FgcDuPmContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FgcDuPmContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FgcDuPmContainerMultiError, or nil if none found.
func (m *FgcDuPmContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *FgcDuPmContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetSlicePerPlmnPerCellList()); l < 1 || l > 1024 {
		err := FgcDuPmContainerValidationError{
			field:  "SlicePerPlmnPerCellList",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSlicePerPlmnPerCellList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FgcDuPmContainerValidationError{
						field:  fmt.Sprintf("SlicePerPlmnPerCellList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FgcDuPmContainerValidationError{
						field:  fmt.Sprintf("SlicePerPlmnPerCellList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FgcDuPmContainerValidationError{
					field:  fmt.Sprintf("SlicePerPlmnPerCellList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FgcDuPmContainerMultiError(errors)
	}

	return nil
}

// FgcDuPmContainerMultiError is an error wrapping multiple validation errors
// returned by FgcDuPmContainer.ValidateAll() if the designated constraints
// aren't met.
type FgcDuPmContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FgcDuPmContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FgcDuPmContainerMultiError) AllErrors() []error { return m }

// FgcDuPmContainerValidationError is the validation error returned by
// FgcDuPmContainer.Validate if the designated constraints aren't met.
type FgcDuPmContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FgcDuPmContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FgcDuPmContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FgcDuPmContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FgcDuPmContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FgcDuPmContainerValidationError) ErrorName() string { return "FgcDuPmContainerValidationError" }

// Error satisfies the builtin error interface
func (e FgcDuPmContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFgcDuPmContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FgcDuPmContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FgcDuPmContainerValidationError{}

// Validate checks the field values on SlicePerPlmnPerCellListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SlicePerPlmnPerCellListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlicePerPlmnPerCellListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SlicePerPlmnPerCellListItemMultiError, or nil if none found.
func (m *SlicePerPlmnPerCellListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SlicePerPlmnPerCellListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSliceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SlicePerPlmnPerCellListItemValidationError{
					field:  "SliceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SlicePerPlmnPerCellListItemValidationError{
					field:  "SliceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSliceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SlicePerPlmnPerCellListItemValidationError{
				field:  "SliceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetFQiperslicesPerPlmnPerCellList()); l < 1 || l > 64 {
		err := SlicePerPlmnPerCellListItemValidationError{
			field:  "FQiperslicesPerPlmnPerCellList",
			reason: "value must contain between 1 and 64 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFQiperslicesPerPlmnPerCellList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SlicePerPlmnPerCellListItemValidationError{
						field:  fmt.Sprintf("FQiperslicesPerPlmnPerCellList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SlicePerPlmnPerCellListItemValidationError{
						field:  fmt.Sprintf("FQiperslicesPerPlmnPerCellList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SlicePerPlmnPerCellListItemValidationError{
					field:  fmt.Sprintf("FQiperslicesPerPlmnPerCellList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SlicePerPlmnPerCellListItemMultiError(errors)
	}

	return nil
}

// SlicePerPlmnPerCellListItemMultiError is an error wrapping multiple
// validation errors returned by SlicePerPlmnPerCellListItem.ValidateAll() if
// the designated constraints aren't met.
type SlicePerPlmnPerCellListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlicePerPlmnPerCellListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlicePerPlmnPerCellListItemMultiError) AllErrors() []error { return m }

// SlicePerPlmnPerCellListItemValidationError is the validation error returned
// by SlicePerPlmnPerCellListItem.Validate if the designated constraints
// aren't met.
type SlicePerPlmnPerCellListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlicePerPlmnPerCellListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlicePerPlmnPerCellListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlicePerPlmnPerCellListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlicePerPlmnPerCellListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlicePerPlmnPerCellListItemValidationError) ErrorName() string {
	return "SlicePerPlmnPerCellListItemValidationError"
}

// Error satisfies the builtin error interface
func (e SlicePerPlmnPerCellListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlicePerPlmnPerCellListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlicePerPlmnPerCellListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlicePerPlmnPerCellListItemValidationError{}

// Validate checks the field values on FqiperslicesPerPlmnPerCellListItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FqiperslicesPerPlmnPerCellListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FqiperslicesPerPlmnPerCellListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FqiperslicesPerPlmnPerCellListItemMultiError, or nil if none found.
func (m *FqiperslicesPerPlmnPerCellListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FqiperslicesPerPlmnPerCellListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetFiveQi(); val < 0 || val > 255 {
		err := FqiperslicesPerPlmnPerCellListItemValidationError{
			field:  "FiveQi",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDlPrbusage(); val < 0 || val > 273 {
		err := FqiperslicesPerPlmnPerCellListItemValidationError{
			field:  "DlPrbusage",
			reason: "value must be inside range [0, 273]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetUlPrbusage(); val < 0 || val > 273 {
		err := FqiperslicesPerPlmnPerCellListItemValidationError{
			field:  "UlPrbusage",
			reason: "value must be inside range [0, 273]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FqiperslicesPerPlmnPerCellListItemMultiError(errors)
	}

	return nil
}

// FqiperslicesPerPlmnPerCellListItemMultiError is an error wrapping multiple
// validation errors returned by
// FqiperslicesPerPlmnPerCellListItem.ValidateAll() if the designated
// constraints aren't met.
type FqiperslicesPerPlmnPerCellListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FqiperslicesPerPlmnPerCellListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FqiperslicesPerPlmnPerCellListItemMultiError) AllErrors() []error { return m }

// FqiperslicesPerPlmnPerCellListItemValidationError is the validation error
// returned by FqiperslicesPerPlmnPerCellListItem.Validate if the designated
// constraints aren't met.
type FqiperslicesPerPlmnPerCellListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FqiperslicesPerPlmnPerCellListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FqiperslicesPerPlmnPerCellListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FqiperslicesPerPlmnPerCellListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FqiperslicesPerPlmnPerCellListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FqiperslicesPerPlmnPerCellListItemValidationError) ErrorName() string {
	return "FqiperslicesPerPlmnPerCellListItemValidationError"
}

// Error satisfies the builtin error interface
func (e FqiperslicesPerPlmnPerCellListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFqiperslicesPerPlmnPerCellListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FqiperslicesPerPlmnPerCellListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FqiperslicesPerPlmnPerCellListItemValidationError{}

// Validate checks the field values on EpcDuPmContainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EpcDuPmContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EpcDuPmContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EpcDuPmContainerMultiError, or nil if none found.
func (m *EpcDuPmContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *EpcDuPmContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetPerQcireportList()); l < 1 || l > 256 {
		err := EpcDuPmContainerValidationError{
			field:  "PerQcireportList",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPerQcireportList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EpcDuPmContainerValidationError{
						field:  fmt.Sprintf("PerQcireportList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EpcDuPmContainerValidationError{
						field:  fmt.Sprintf("PerQcireportList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EpcDuPmContainerValidationError{
					field:  fmt.Sprintf("PerQcireportList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EpcDuPmContainerMultiError(errors)
	}

	return nil
}

// EpcDuPmContainerMultiError is an error wrapping multiple validation errors
// returned by EpcDuPmContainer.ValidateAll() if the designated constraints
// aren't met.
type EpcDuPmContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EpcDuPmContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EpcDuPmContainerMultiError) AllErrors() []error { return m }

// EpcDuPmContainerValidationError is the validation error returned by
// EpcDuPmContainer.Validate if the designated constraints aren't met.
type EpcDuPmContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EpcDuPmContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EpcDuPmContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EpcDuPmContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EpcDuPmContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EpcDuPmContainerValidationError) ErrorName() string { return "EpcDuPmContainerValidationError" }

// Error satisfies the builtin error interface
func (e EpcDuPmContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEpcDuPmContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EpcDuPmContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EpcDuPmContainerValidationError{}

// Validate checks the field values on PerQcireportListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PerQcireportListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PerQcireportListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PerQcireportListItemMultiError, or nil if none found.
func (m *PerQcireportListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PerQcireportListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetQci(); val < 0 || val > 273 {
		err := PerQcireportListItemValidationError{
			field:  "Qci",
			reason: "value must be inside range [0, 273]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDlPrbusage(); val < 0 || val > 100 {
		err := PerQcireportListItemValidationError{
			field:  "DlPrbusage",
			reason: "value must be inside range [0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetUlPrbusage(); val < 0 || val > 100 {
		err := PerQcireportListItemValidationError{
			field:  "UlPrbusage",
			reason: "value must be inside range [0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PerQcireportListItemMultiError(errors)
	}

	return nil
}

// PerQcireportListItemMultiError is an error wrapping multiple validation
// errors returned by PerQcireportListItem.ValidateAll() if the designated
// constraints aren't met.
type PerQcireportListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PerQcireportListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PerQcireportListItemMultiError) AllErrors() []error { return m }

// PerQcireportListItemValidationError is the validation error returned by
// PerQcireportListItem.Validate if the designated constraints aren't met.
type PerQcireportListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerQcireportListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerQcireportListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerQcireportListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerQcireportListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerQcireportListItemValidationError) ErrorName() string {
	return "PerQcireportListItemValidationError"
}

// Error satisfies the builtin error interface
func (e PerQcireportListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerQcireportListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerQcireportListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerQcireportListItemValidationError{}

// Validate checks the field values on OcucpPfContainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OcucpPfContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OcucpPfContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OcucpPfContainerMultiError, or nil if none found.
func (m *OcucpPfContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *OcucpPfContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGNbCuCpName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OcucpPfContainerValidationError{
					field:  "GNbCuCpName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OcucpPfContainerValidationError{
					field:  "GNbCuCpName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuCpName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OcucpPfContainerValidationError{
				field:  "GNbCuCpName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCuCpResourceStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OcucpPfContainerValidationError{
					field:  "CuCpResourceStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OcucpPfContainerValidationError{
					field:  "CuCpResourceStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCuCpResourceStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OcucpPfContainerValidationError{
				field:  "CuCpResourceStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OcucpPfContainerMultiError(errors)
	}

	return nil
}

// OcucpPfContainerMultiError is an error wrapping multiple validation errors
// returned by OcucpPfContainer.ValidateAll() if the designated constraints
// aren't met.
type OcucpPfContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OcucpPfContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OcucpPfContainerMultiError) AllErrors() []error { return m }

// OcucpPfContainerValidationError is the validation error returned by
// OcucpPfContainer.Validate if the designated constraints aren't met.
type OcucpPfContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OcucpPfContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OcucpPfContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OcucpPfContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OcucpPfContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OcucpPfContainerValidationError) ErrorName() string { return "OcucpPfContainerValidationError" }

// Error satisfies the builtin error interface
func (e OcucpPfContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOcucpPfContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OcucpPfContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OcucpPfContainerValidationError{}

// Validate checks the field values on OcuupPfContainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OcuupPfContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OcuupPfContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OcuupPfContainerMultiError, or nil if none found.
func (m *OcuupPfContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *OcuupPfContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGNbCuUpName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OcuupPfContainerValidationError{
					field:  "GNbCuUpName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OcuupPfContainerValidationError{
					field:  "GNbCuUpName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGNbCuUpName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OcuupPfContainerValidationError{
				field:  "GNbCuUpName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetPfContainerList()); l < 1 || l > 3 {
		err := OcuupPfContainerValidationError{
			field:  "PfContainerList",
			reason: "value must contain between 1 and 3 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPfContainerList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OcuupPfContainerValidationError{
						field:  fmt.Sprintf("PfContainerList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OcuupPfContainerValidationError{
						field:  fmt.Sprintf("PfContainerList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OcuupPfContainerValidationError{
					field:  fmt.Sprintf("PfContainerList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OcuupPfContainerMultiError(errors)
	}

	return nil
}

// OcuupPfContainerMultiError is an error wrapping multiple validation errors
// returned by OcuupPfContainer.ValidateAll() if the designated constraints
// aren't met.
type OcuupPfContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OcuupPfContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OcuupPfContainerMultiError) AllErrors() []error { return m }

// OcuupPfContainerValidationError is the validation error returned by
// OcuupPfContainer.Validate if the designated constraints aren't met.
type OcuupPfContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OcuupPfContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OcuupPfContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OcuupPfContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OcuupPfContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OcuupPfContainerValidationError) ErrorName() string { return "OcuupPfContainerValidationError" }

// Error satisfies the builtin error interface
func (e OcuupPfContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOcuupPfContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OcuupPfContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OcuupPfContainerValidationError{}

// Validate checks the field values on PfContainerListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PfContainerListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PfContainerListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PfContainerListItemMultiError, or nil if none found.
func (m *PfContainerListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PfContainerListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InterfaceType

	if all {
		switch v := interface{}(m.GetOCuUpPmContainer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PfContainerListItemValidationError{
					field:  "OCuUpPmContainer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PfContainerListItemValidationError{
					field:  "OCuUpPmContainer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOCuUpPmContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PfContainerListItemValidationError{
				field:  "OCuUpPmContainer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PfContainerListItemMultiError(errors)
	}

	return nil
}

// PfContainerListItemMultiError is an error wrapping multiple validation
// errors returned by PfContainerListItem.ValidateAll() if the designated
// constraints aren't met.
type PfContainerListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PfContainerListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PfContainerListItemMultiError) AllErrors() []error { return m }

// PfContainerListItemValidationError is the validation error returned by
// PfContainerListItem.Validate if the designated constraints aren't met.
type PfContainerListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PfContainerListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PfContainerListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PfContainerListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PfContainerListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PfContainerListItemValidationError) ErrorName() string {
	return "PfContainerListItemValidationError"
}

// Error satisfies the builtin error interface
func (e PfContainerListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPfContainerListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PfContainerListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PfContainerListItemValidationError{}

// Validate checks the field values on CuupmeasurementContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CuupmeasurementContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CuupmeasurementContainer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CuupmeasurementContainerMultiError, or nil if none found.
func (m *CuupmeasurementContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *CuupmeasurementContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetPlmnList()); l < 1 || l > 12 {
		err := CuupmeasurementContainerValidationError{
			field:  "PlmnList",
			reason: "value must contain between 1 and 12 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPlmnList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CuupmeasurementContainerValidationError{
						field:  fmt.Sprintf("PlmnList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CuupmeasurementContainerValidationError{
						field:  fmt.Sprintf("PlmnList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CuupmeasurementContainerValidationError{
					field:  fmt.Sprintf("PlmnList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CuupmeasurementContainerMultiError(errors)
	}

	return nil
}

// CuupmeasurementContainerMultiError is an error wrapping multiple validation
// errors returned by CuupmeasurementContainer.ValidateAll() if the designated
// constraints aren't met.
type CuupmeasurementContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CuupmeasurementContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CuupmeasurementContainerMultiError) AllErrors() []error { return m }

// CuupmeasurementContainerValidationError is the validation error returned by
// CuupmeasurementContainer.Validate if the designated constraints aren't met.
type CuupmeasurementContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CuupmeasurementContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CuupmeasurementContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CuupmeasurementContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CuupmeasurementContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CuupmeasurementContainerValidationError) ErrorName() string {
	return "CuupmeasurementContainerValidationError"
}

// Error satisfies the builtin error interface
func (e CuupmeasurementContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCuupmeasurementContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CuupmeasurementContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CuupmeasurementContainerValidationError{}

// Validate checks the field values on PlmnIdList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlmnIdList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlmnIdList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlmnIdListMultiError, or
// nil if none found.
func (m *PlmnIdList) ValidateAll() error {
	return m.validate(true)
}

func (m *PlmnIdList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPLmnIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlmnIdListValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlmnIdListValidationError{
					field:  "PLmnIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlmnIdListValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCuUpPm_5Gc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlmnIdListValidationError{
					field:  "CuUpPm_5Gc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlmnIdListValidationError{
					field:  "CuUpPm_5Gc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCuUpPm_5Gc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlmnIdListValidationError{
				field:  "CuUpPm_5Gc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCuUpPmEpc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlmnIdListValidationError{
					field:  "CuUpPmEpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlmnIdListValidationError{
					field:  "CuUpPmEpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCuUpPmEpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlmnIdListValidationError{
				field:  "CuUpPmEpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlmnIdListMultiError(errors)
	}

	return nil
}

// PlmnIdListMultiError is an error wrapping multiple validation errors
// returned by PlmnIdList.ValidateAll() if the designated constraints aren't met.
type PlmnIdListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlmnIdListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlmnIdListMultiError) AllErrors() []error { return m }

// PlmnIdListValidationError is the validation error returned by
// PlmnIdList.Validate if the designated constraints aren't met.
type PlmnIdListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdListValidationError) ErrorName() string { return "PlmnIdListValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdListValidationError{}

// Validate checks the field values on FgcCuupPmFormat with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FgcCuupPmFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FgcCuupPmFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FgcCuupPmFormatMultiError, or nil if none found.
func (m *FgcCuupPmFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *FgcCuupPmFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetSliceToReportList()); l < 1 || l > 1024 {
		err := FgcCuupPmFormatValidationError{
			field:  "SliceToReportList",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSliceToReportList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FgcCuupPmFormatValidationError{
						field:  fmt.Sprintf("SliceToReportList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FgcCuupPmFormatValidationError{
						field:  fmt.Sprintf("SliceToReportList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FgcCuupPmFormatValidationError{
					field:  fmt.Sprintf("SliceToReportList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FgcCuupPmFormatMultiError(errors)
	}

	return nil
}

// FgcCuupPmFormatMultiError is an error wrapping multiple validation errors
// returned by FgcCuupPmFormat.ValidateAll() if the designated constraints
// aren't met.
type FgcCuupPmFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FgcCuupPmFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FgcCuupPmFormatMultiError) AllErrors() []error { return m }

// FgcCuupPmFormatValidationError is the validation error returned by
// FgcCuupPmFormat.Validate if the designated constraints aren't met.
type FgcCuupPmFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FgcCuupPmFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FgcCuupPmFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FgcCuupPmFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FgcCuupPmFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FgcCuupPmFormatValidationError) ErrorName() string { return "FgcCuupPmFormatValidationError" }

// Error satisfies the builtin error interface
func (e FgcCuupPmFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFgcCuupPmFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FgcCuupPmFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FgcCuupPmFormatValidationError{}

// Validate checks the field values on SliceToReportListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SliceToReportListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SliceToReportListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SliceToReportListItemMultiError, or nil if none found.
func (m *SliceToReportListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SliceToReportListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSliceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SliceToReportListItemValidationError{
					field:  "SliceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SliceToReportListItemValidationError{
					field:  "SliceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSliceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SliceToReportListItemValidationError{
				field:  "SliceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetFQiperslicesPerPlmnList()); l < 1 || l > 64 {
		err := SliceToReportListItemValidationError{
			field:  "FQiperslicesPerPlmnList",
			reason: "value must contain between 1 and 64 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFQiperslicesPerPlmnList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SliceToReportListItemValidationError{
						field:  fmt.Sprintf("FQiperslicesPerPlmnList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SliceToReportListItemValidationError{
						field:  fmt.Sprintf("FQiperslicesPerPlmnList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SliceToReportListItemValidationError{
					field:  fmt.Sprintf("FQiperslicesPerPlmnList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SliceToReportListItemMultiError(errors)
	}

	return nil
}

// SliceToReportListItemMultiError is an error wrapping multiple validation
// errors returned by SliceToReportListItem.ValidateAll() if the designated
// constraints aren't met.
type SliceToReportListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SliceToReportListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SliceToReportListItemMultiError) AllErrors() []error { return m }

// SliceToReportListItemValidationError is the validation error returned by
// SliceToReportListItem.Validate if the designated constraints aren't met.
type SliceToReportListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SliceToReportListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SliceToReportListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SliceToReportListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SliceToReportListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SliceToReportListItemValidationError) ErrorName() string {
	return "SliceToReportListItemValidationError"
}

// Error satisfies the builtin error interface
func (e SliceToReportListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSliceToReportListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SliceToReportListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SliceToReportListItemValidationError{}

// Validate checks the field values on FqiperslicesPerPlmnListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FqiperslicesPerPlmnListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FqiperslicesPerPlmnListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FqiperslicesPerPlmnListItemMultiError, or nil if none found.
func (m *FqiperslicesPerPlmnListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FqiperslicesPerPlmnListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetFiveQi(); val < 0 || val > 255 {
		err := FqiperslicesPerPlmnListItemValidationError{
			field:  "FiveQi",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPDcpbytesDl(); val < 0 || val > 10000000000 {
		err := FqiperslicesPerPlmnListItemValidationError{
			field:  "PDcpbytesDl",
			reason: "value must be inside range [0, 10000000000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPDcpbytesUl(); val < 0 || val > 10000000000 {
		err := FqiperslicesPerPlmnListItemValidationError{
			field:  "PDcpbytesUl",
			reason: "value must be inside range [0, 10000000000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FqiperslicesPerPlmnListItemMultiError(errors)
	}

	return nil
}

// FqiperslicesPerPlmnListItemMultiError is an error wrapping multiple
// validation errors returned by FqiperslicesPerPlmnListItem.ValidateAll() if
// the designated constraints aren't met.
type FqiperslicesPerPlmnListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FqiperslicesPerPlmnListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FqiperslicesPerPlmnListItemMultiError) AllErrors() []error { return m }

// FqiperslicesPerPlmnListItemValidationError is the validation error returned
// by FqiperslicesPerPlmnListItem.Validate if the designated constraints
// aren't met.
type FqiperslicesPerPlmnListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FqiperslicesPerPlmnListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FqiperslicesPerPlmnListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FqiperslicesPerPlmnListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FqiperslicesPerPlmnListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FqiperslicesPerPlmnListItemValidationError) ErrorName() string {
	return "FqiperslicesPerPlmnListItemValidationError"
}

// Error satisfies the builtin error interface
func (e FqiperslicesPerPlmnListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFqiperslicesPerPlmnListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FqiperslicesPerPlmnListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FqiperslicesPerPlmnListItemValidationError{}

// Validate checks the field values on EpcCuupPmFormat with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EpcCuupPmFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EpcCuupPmFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EpcCuupPmFormatMultiError, or nil if none found.
func (m *EpcCuupPmFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *EpcCuupPmFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetPerQcireportList()); l < 1 || l > 256 {
		err := EpcCuupPmFormatValidationError{
			field:  "PerQcireportList",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPerQcireportList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EpcCuupPmFormatValidationError{
						field:  fmt.Sprintf("PerQcireportList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EpcCuupPmFormatValidationError{
						field:  fmt.Sprintf("PerQcireportList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EpcCuupPmFormatValidationError{
					field:  fmt.Sprintf("PerQcireportList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EpcCuupPmFormatMultiError(errors)
	}

	return nil
}

// EpcCuupPmFormatMultiError is an error wrapping multiple validation errors
// returned by EpcCuupPmFormat.ValidateAll() if the designated constraints
// aren't met.
type EpcCuupPmFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EpcCuupPmFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EpcCuupPmFormatMultiError) AllErrors() []error { return m }

// EpcCuupPmFormatValidationError is the validation error returned by
// EpcCuupPmFormat.Validate if the designated constraints aren't met.
type EpcCuupPmFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EpcCuupPmFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EpcCuupPmFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EpcCuupPmFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EpcCuupPmFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EpcCuupPmFormatValidationError) ErrorName() string { return "EpcCuupPmFormatValidationError" }

// Error satisfies the builtin error interface
func (e EpcCuupPmFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEpcCuupPmFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EpcCuupPmFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EpcCuupPmFormatValidationError{}

// Validate checks the field values on PerQcireportListItemFormat with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PerQcireportListItemFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PerQcireportListItemFormat with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PerQcireportListItemFormatMultiError, or nil if none found.
func (m *PerQcireportListItemFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *PerQcireportListItemFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetQci(); val < 0 || val > 255 {
		err := PerQcireportListItemFormatValidationError{
			field:  "Qci",
			reason: "value must be inside range [0, 255]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPDcpbytesDl(); val < 0 || val > 10000000000 {
		err := PerQcireportListItemFormatValidationError{
			field:  "PDcpbytesDl",
			reason: "value must be inside range [0, 10000000000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPDcpbytesUl(); val < 0 || val > 10000000000 {
		err := PerQcireportListItemFormatValidationError{
			field:  "PDcpbytesUl",
			reason: "value must be inside range [0, 10000000000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PerQcireportListItemFormatMultiError(errors)
	}

	return nil
}

// PerQcireportListItemFormatMultiError is an error wrapping multiple
// validation errors returned by PerQcireportListItemFormat.ValidateAll() if
// the designated constraints aren't met.
type PerQcireportListItemFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PerQcireportListItemFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PerQcireportListItemFormatMultiError) AllErrors() []error { return m }

// PerQcireportListItemFormatValidationError is the validation error returned
// by PerQcireportListItemFormat.Validate if the designated constraints aren't met.
type PerQcireportListItemFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerQcireportListItemFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerQcireportListItemFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerQcireportListItemFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerQcireportListItemFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerQcireportListItemFormatValidationError) ErrorName() string {
	return "PerQcireportListItemFormatValidationError"
}

// Error satisfies the builtin error interface
func (e PerQcireportListItemFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerQcireportListItemFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerQcireportListItemFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerQcireportListItemFormatValidationError{}

// Validate checks the field values on PlmnIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlmnIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlmnIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlmnIdentityMultiError, or
// nil if none found.
func (m *PlmnIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *PlmnIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 3 {
		err := PlmnIdentityValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PlmnIdentityMultiError(errors)
	}

	return nil
}

// PlmnIdentityMultiError is an error wrapping multiple validation errors
// returned by PlmnIdentity.ValidateAll() if the designated constraints aren't met.
type PlmnIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlmnIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlmnIdentityMultiError) AllErrors() []error { return m }

// PlmnIdentityValidationError is the validation error returned by
// PlmnIdentity.Validate if the designated constraints aren't met.
type PlmnIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdentityValidationError) ErrorName() string { return "PlmnIdentityValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdentityValidationError{}

// Validate checks the field values on NrcellIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NrcellIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NrcellIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NrcellIdentityMultiError,
// or nil if none found.
func (m *NrcellIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *NrcellIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NrcellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NrcellIdentityValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NrcellIdentityMultiError(errors)
	}

	return nil
}

// NrcellIdentityMultiError is an error wrapping multiple validation errors
// returned by NrcellIdentity.ValidateAll() if the designated constraints
// aren't met.
type NrcellIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NrcellIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NrcellIdentityMultiError) AllErrors() []error { return m }

// NrcellIdentityValidationError is the validation error returned by
// NrcellIdentity.Validate if the designated constraints aren't met.
type NrcellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcellIdentityValidationError) ErrorName() string { return "NrcellIdentityValidationError" }

// Error satisfies the builtin error interface
func (e NrcellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcellIdentityValidationError{}

// Validate checks the field values on RanContainer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RanContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RanContainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RanContainerMultiError, or
// nil if none found.
func (m *RanContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *RanContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return RanContainerMultiError(errors)
	}

	return nil
}

// RanContainerMultiError is an error wrapping multiple validation errors
// returned by RanContainer.ValidateAll() if the designated constraints aren't met.
type RanContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RanContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RanContainerMultiError) AllErrors() []error { return m }

// RanContainerValidationError is the validation error returned by
// RanContainer.Validate if the designated constraints aren't met.
type RanContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanContainerValidationError) ErrorName() string { return "RanContainerValidationError" }

// Error satisfies the builtin error interface
func (e RanContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanContainerValidationError{}

// Validate checks the field values on RicStyleName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RicStyleName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RicStyleName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RicStyleNameMultiError, or
// nil if none found.
func (m *RicStyleName) ValidateAll() error {
	return m.validate(true)
}

func (m *RicStyleName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		err := RicStyleNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RicStyleNameMultiError(errors)
	}

	return nil
}

// RicStyleNameMultiError is an error wrapping multiple validation errors
// returned by RicStyleName.ValidateAll() if the designated constraints aren't met.
type RicStyleNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RicStyleNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RicStyleNameMultiError) AllErrors() []error { return m }

// RicStyleNameValidationError is the validation error returned by
// RicStyleName.Validate if the designated constraints aren't met.
type RicStyleNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleNameValidationError) ErrorName() string { return "RicStyleNameValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleNameValidationError{}

// Validate checks the field values on GnbCuCpName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbCuCpName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCuCpName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbCuCpNameMultiError, or
// nil if none found.
func (m *GnbCuCpName) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCuCpName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		err := GnbCuCpNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCuCpNameMultiError(errors)
	}

	return nil
}

// GnbCuCpNameMultiError is an error wrapping multiple validation errors
// returned by GnbCuCpName.ValidateAll() if the designated constraints aren't met.
type GnbCuCpNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCuCpNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCuCpNameMultiError) AllErrors() []error { return m }

// GnbCuCpNameValidationError is the validation error returned by
// GnbCuCpName.Validate if the designated constraints aren't met.
type GnbCuCpNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuCpNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuCpNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuCpNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuCpNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuCpNameValidationError) ErrorName() string { return "GnbCuCpNameValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuCpNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuCpName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuCpNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuCpNameValidationError{}

// Validate checks the field values on GnbDuName with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbDuName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbDuName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbDuNameMultiError, or nil
// if none found.
func (m *GnbDuName) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbDuName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		err := GnbDuNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbDuNameMultiError(errors)
	}

	return nil
}

// GnbDuNameMultiError is an error wrapping multiple validation errors returned
// by GnbDuName.ValidateAll() if the designated constraints aren't met.
type GnbDuNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbDuNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbDuNameMultiError) AllErrors() []error { return m }

// GnbDuNameValidationError is the validation error returned by
// GnbDuName.Validate if the designated constraints aren't met.
type GnbDuNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDuNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDuNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDuNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDuNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDuNameValidationError) ErrorName() string { return "GnbDuNameValidationError" }

// Error satisfies the builtin error interface
func (e GnbDuNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDuName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDuNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDuNameValidationError{}

// Validate checks the field values on GnbCuUpName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbCuUpName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbCuUpName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbCuUpNameMultiError, or
// nil if none found.
func (m *GnbCuUpName) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbCuUpName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		err := GnbCuUpNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GnbCuUpNameMultiError(errors)
	}

	return nil
}

// GnbCuUpNameMultiError is an error wrapping multiple validation errors
// returned by GnbCuUpName.ValidateAll() if the designated constraints aren't met.
type GnbCuUpNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbCuUpNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbCuUpNameMultiError) AllErrors() []error { return m }

// GnbCuUpNameValidationError is the validation error returned by
// GnbCuUpName.Validate if the designated constraints aren't met.
type GnbCuUpNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUpNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUpNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUpNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUpNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUpNameValidationError) ErrorName() string { return "GnbCuUpNameValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUpNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUpName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUpNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUpNameValidationError{}

// Validate checks the field values on BitString with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BitString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BitString with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BitStringMultiError, or nil
// if none found.
func (m *BitString) ValidateAll() error {
	return m.validate(true)
}

func (m *BitString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if m.GetLen() > 64 {
		err := BitStringValidationError{
			field:  "Len",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BitStringMultiError(errors)
	}

	return nil
}

// BitStringMultiError is an error wrapping multiple validation errors returned
// by BitString.ValidateAll() if the designated constraints aren't met.
type BitStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BitStringMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BitStringMultiError) AllErrors() []error { return m }

// BitStringValidationError is the validation error returned by
// BitString.Validate if the designated constraints aren't met.
type BitStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BitStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BitStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BitStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BitStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BitStringValidationError) ErrorName() string { return "BitStringValidationError" }

// Error satisfies the builtin error interface
func (e BitStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBitString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BitStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BitStringValidationError{}

// Validate checks the field values on
// E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001MultiError, or nil
// if none found.
func (m *E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001) ValidateAll() error {
	return m.validate(true)
}

func (m *E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetRicEventTriggerStyleList()); l < 1 || l > 63 {
		err := E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
			field:  "RicEventTriggerStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicEventTriggerStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
					field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := len(m.GetRicReportStyleList()); l < 1 || l > 63 {
		err := E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
			field:  "RicReportStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRicReportStyleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
						field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
					field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001MultiError(errors)
	}

	return nil
}

// E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001MultiError is an
// error wrapping multiple validation errors returned by
// E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001.ValidateAll() if
// the designated constraints aren't met.
type E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001MultiError) AllErrors() []error {
	return m
}

// E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError is
// the validation error returned by
// E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001.Validate if the
// designated constraints aren't met.
type E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) ErrorName() string {
	return "E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{}

// Validate checks the field values on OcucpPfContainer_CuCpResourceStatus001
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *OcucpPfContainer_CuCpResourceStatus001) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// OcucpPfContainer_CuCpResourceStatus001 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// OcucpPfContainer_CuCpResourceStatus001MultiError, or nil if none found.
func (m *OcucpPfContainer_CuCpResourceStatus001) ValidateAll() error {
	return m.validate(true)
}

func (m *OcucpPfContainer_CuCpResourceStatus001) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetNumberOfActiveUes(); val < 0 || val > 65536 {
		err := OcucpPfContainer_CuCpResourceStatus001ValidationError{
			field:  "NumberOfActiveUes",
			reason: "value must be inside range [0, 65536]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OcucpPfContainer_CuCpResourceStatus001MultiError(errors)
	}

	return nil
}

// OcucpPfContainer_CuCpResourceStatus001MultiError is an error wrapping
// multiple validation errors returned by
// OcucpPfContainer_CuCpResourceStatus001.ValidateAll() if the designated
// constraints aren't met.
type OcucpPfContainer_CuCpResourceStatus001MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OcucpPfContainer_CuCpResourceStatus001MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OcucpPfContainer_CuCpResourceStatus001MultiError) AllErrors() []error { return m }

// OcucpPfContainer_CuCpResourceStatus001ValidationError is the validation
// error returned by OcucpPfContainer_CuCpResourceStatus001.Validate if the
// designated constraints aren't met.
type OcucpPfContainer_CuCpResourceStatus001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) ErrorName() string {
	return "OcucpPfContainer_CuCpResourceStatus001ValidationError"
}

// Error satisfies the builtin error interface
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOcucpPfContainer_CuCpResourceStatus001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OcucpPfContainer_CuCpResourceStatus001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OcucpPfContainer_CuCpResourceStatus001ValidationError{}
